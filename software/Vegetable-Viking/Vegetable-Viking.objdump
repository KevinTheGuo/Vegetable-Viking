
Vegetable-Viking.elf:     file format elf32-littlenios2
Vegetable-Viking.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00012724 memsz 0x00012724 flags r-x
    LOAD off    0x00013744 vaddr 0x10012744 paddr 0x10014234 align 2**12
         filesz 0x00001af0 memsz 0x00001af0 flags rw-
    LOAD off    0x00015d24 vaddr 0x10015d24 paddr 0x10015d24 align 2**12
         filesz 0x00000000 memsz 0x000003bc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012140  1000022c  1000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003d8  1001236c  1001236c  0001336c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af0  10012744  10014234  00013744  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000003bc  10015d24  10015d24  00015d24  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00015234  2**0
                  CONTENTS
  7 .sdram        00000000  100160e0  100160e0  00015234  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00015234  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000e88  00000000  00000000  00015258  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00025507  00000000  00000000  000160e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000099be  00000000  00000000  0003b5e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c284  00000000  00000000  00044fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002428  00000000  00000000  0005122c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003d4d  00000000  00000000  00053654  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00018d1a  00000000  00000000  000573a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  000700bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001438  00000000  00000000  000700d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00074acc  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00074acf  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00074adb  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00074adc  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00074add  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00074ae1  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00074ae5  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00074ae9  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00074af4  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00074aff  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00074b0a  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001a  00000000  00000000  00074b15  2**0
                  CONTENTS, READONLY
 30 .jdi          00004447  00000000  00000000  00074b2f  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000d0e60  00000000  00000000  00078f76  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
1000022c l    d  .text	00000000 .text
1001236c l    d  .rodata	00000000 .rodata
10012744 l    d  .rwdata	00000000 .rwdata
10015d24 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
100160e0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Vegetable-Viking_bsp//obj/HAL/src/crt0.o
10000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
10012428 l     O .rodata	00000010 bp
10012408 l     O .rodata	00000010 dp_l
10012418 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
10012438 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
10003fc0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
10012744 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 vfprintf.c
1001258e l     O .rodata	00000010 zeroes.4181
1001259e l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10008c54 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1000a7fc l     F .text	00000008 __fp_lock
1000a804 l     F .text	00000008 __fp_unlock
1000a818 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
10012b88 l     O .rwdata	00000020 lc_ctype_charset
10012b68 l     O .rwdata	00000020 lc_message_charset
10012ba8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
100125cc l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000d1cc l     F .text	000000fc __sprint_r.part.0
10012700 l     O .rodata	00000010 blanks.4125
100126f0 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 alt_close.c
1000fc14 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000fd3c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000fd68 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000fe70 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000ff6c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10010050 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10010234 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10014224 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
100104b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10010608 l     F .text	00000038 alt_dev_reg
10013190 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
100108e4 l     F .text	00000204 altera_avalon_jtag_uart_irq
10010ae8 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10011264 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
100116fc l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10011854 l     F .text	00000050 alt_get_errno
100118a4 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10015d74 g     O .bss	00000004 alt_instruction_exception_handler
10001328 g     F .text	000000bc convertDecimalToBinary
1000cd88 g     F .text	00000074 _mprec_log10
1000ce74 g     F .text	0000008c __any_on
1000f09c g     F .text	00000054 _isatty_r
100125d8 g     O .rodata	00000028 __mprec_tinytens
1001017c g     F .text	00000078 alt_main
10015fe0 g     O .bss	00000100 alt_irq
10002d60 g     F .text	00000014 fabs
1000f0f0 g     F .text	0000005c _lseek_r
10014234 g       *ABS*	00000000 __flash_rwdata_start
10005330 g     F .text	00000084 .hidden __eqdf2
100160e0 g       *ABS*	00000000 __alt_heap_start
1000694c g     F .text	0000003c printf
1000fa14 g     F .text	0000009c _wcrtomb_r
1000d02c g     F .text	0000005c __sseek
1000ab60 g     F .text	00000010 __sinit
1000f8a4 g     F .text	00000154 __swbuf_r
1000b134 g     F .text	0000007c _setlocale_r
1000a9b8 g     F .text	00000078 __sfmoreglue
10010214 g     F .text	00000020 __malloc_unlock
100004d8 g     F .text	000002ac spawningEngine
1000f14c g     F .text	0000015c memmove
1000ab48 g     F .text	00000018 _cleanup
1000beb8 g     F .text	000000a8 _Balloc
100053b4 g     F .text	000000e0 .hidden __gtdf2
10011c94 g     F .text	00000020 altera_nios2_gen2_irq_init
10006910 g     F .text	00000010 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000eba0 g     F .text	00000058 _fstat_r
10015d58 g     O .bss	00000004 errno
1000cfa8 g     F .text	00000008 __seofread
10015d60 g     O .bss	00000004 alt_argv
1001c1f0 g       *ABS*	00000000 _gp
10015d24 g     O .bss	00000004 yCursor
10013010 g     O .rwdata	00000180 alt_fd_list
10011cb4 g     F .text	00000090 alt_find_dev
1000bc5c g     F .text	00000138 memcpy
1000a80c g     F .text	0000000c _cleanup_r
10006738 g     F .text	000000d0 .hidden __floatsidf
100117dc g     F .text	00000078 alt_io_redirect
10005494 g     F .text	000000e0 .hidden __ltdf2
10015d28 g     O .bss	00000004 xCursor
1001236c g       *ABS*	00000000 __DTOR_END__
10011f2c g     F .text	0000009c alt_exception_cause_generated_bad_addr
10002d90 g     F .text	00000074 __fpclassifyd
1000cce4 g     F .text	000000a4 __ratio
1000e704 g     F .text	00000024 __vfiprintf_internal
10010ce4 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
10006920 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
100040dc g     F .text	00000008 .hidden __udivsi3
1000fec0 g     F .text	000000ac isatty
10012628 g     O .rodata	000000c8 __mprec_tens
1000b1b0 g     F .text	0000000c __locale_charset
100032f0 g     F .text	00000074 .hidden __fixunsdfsi
10015d54 g     O .bss	00000004 __malloc_top_pad
100141fc g     O .rwdata	00000004 __mb_cur_max
1000b1e0 g     F .text	0000000c _localeconv_r
1000ebf8 g     F .text	000004a4 __sfvwrite_r
1000c2e0 g     F .text	0000003c __i2b
1000cf00 g     F .text	00000054 _sbrk_r
10015d2c g     O .bss	00000004 cursorClicked
1000f2a8 g     F .text	0000005c _read_r
1001421c g     O .rwdata	00000004 alt_max_fd
1000e8b0 g     F .text	00000100 _fclose_r
1000a7cc g     F .text	00000030 fflush
10015d50 g     O .bss	00000004 __malloc_max_sbrked_mem
10004114 g     F .text	0000089c .hidden __adddf3
1000ca8c g     F .text	0000011c __b2d
100039a4 g     F .text	0000061c .hidden __umoddi3
100100a0 g     F .text	000000dc lseek
100141f0 g     O .rwdata	00000004 __fdlib_version
100141f4 g     O .rwdata	00000004 _global_impure_ptr
1000f304 g     F .text	000005a0 _realloc_r
100160e0 g       *ABS*	00000000 __bss_end
1001160c g     F .text	000000f0 alt_iic_isr_register
10015da0 g     O .bss	00000240 veggieObject
10011b90 g     F .text	00000104 alt_tick
10015d30 g     O .bss	00000004 cursorStreak
10003364 g     F .text	00000640 .hidden __udivdi3
1000e9c4 g     F .text	00000184 _fputwc_r
10012600 g     O .rodata	00000028 __mprec_bigtens
1000c0c4 g     F .text	00000104 __s2b
10006808 g     F .text	000000a4 .hidden __floatunsidf
1000c834 g     F .text	00000060 __mcmp
1000ab80 g     F .text	00000018 __fp_lock_all
100115c0 g     F .text	0000004c alt_ic_irq_enabled
10011af8 g     F .text	00000098 alt_alarm_stop
10015d68 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d0 alt_irq_handler
10012fe8 g     O .rwdata	00000028 alt_dev_null
10001218 g     F .text	00000110 port2Unpackager
10002e18 g     F .text	000001e4 rint
10011248 g     F .text	0000001c alt_dcache_flush_all
1000c1c8 g     F .text	00000068 __hi0bits
100066b0 g     F .text	00000088 .hidden __fixdfsi
10014234 g       *ABS*	00000000 __ram_rwdata_end
10014214 g     O .rwdata	00000008 alt_dev_list
10010508 g     F .text	00000100 write
10012744 g       *ABS*	00000000 __ram_rodata_end
1000fdb8 g     F .text	000000b8 fstat
10005494 g     F .text	000000e0 .hidden __ledf2
1000c5ac g     F .text	00000140 __pow5mult
1000d2e0 g     F .text	00001424 ___vfiprintf_internal_r
10015d48 g     O .bss	00000004 __nlocale_changed
100040e4 g     F .text	00000008 .hidden __umodsi3
100160e0 g       *ABS*	00000000 end
10015d34 g     O .bss	00000004 key1
10010820 g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000060 alt_instruction_exception_entry
1001236c g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
100068ac g     F .text	00000064 .hidden __clzsi2
10010ef0 g     F .text	00000218 altera_avalon_jtag_uart_write
1000ab70 g     F .text	00000004 __sfp_lock_acquire
1000bb74 g     F .text	000000e8 memchr
10006a04 g     F .text	000020fc ___vfprintf_internal_r
1000acd4 g     F .text	000002f0 _free_r
1000b1bc g     F .text	00000010 __locale_mb_cur_max
100121a4 g     F .text	00000194 __call_exitprocs
10015d44 g     O .bss	00000004 __mlocale_changed
10014200 g     O .rwdata	00000004 __malloc_sbrk_base
1000022c g     F .text	0000003c _start
10015d6c g     O .bss	00000004 _alt_tick_rate
100069a0 g     F .text	00000064 rand
1000c6ec g     F .text	00000148 __lshift
10015d70 g     O .bss	00000004 _alt_nticks
10010284 g     F .text	00000104 read
10010674 g     F .text	00000048 alt_sys_init
10012090 g     F .text	00000114 __register_exitproc
1000c31c g     F .text	00000290 __multiply
10001a00 g     F .text	000010cc __ieee754_pow
10010b90 g     F .text	00000068 altera_avalon_jtag_uart_close
1000155c g     F .text	000004a4 pow
100040ec g     F .text	00000028 .hidden __mulsi3
10012744 g       *ABS*	00000000 __ram_rwdata_start
1001236c g       *ABS*	00000000 __ram_rodata_start
10015d78 g     O .bss	00000028 __malloc_current_mallinfo
1000cba8 g     F .text	0000013c __d2b
100106bc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10011e58 g     F .text	000000d4 alt_get_fd
1000e784 g     F .text	00000054 _close_r
10012014 g     F .text	0000007c memcmp
1001077c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
100160e0 g       *ABS*	00000000 __alt_stack_base
100107cc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10008b24 g     F .text	00000130 __swsetup_r
100049b0 g     F .text	00000980 .hidden __divdf3
1000aa30 g     F .text	00000118 __sfp
1000cdfc g     F .text	00000078 __copybits
10012be0 g     O .rwdata	00000408 __malloc_av_
1000ab7c g     F .text	00000004 __sinit_lock_release
10005574 g     F .text	0000086c .hidden __muldf3
1000cf54 g     F .text	00000054 __sread
10011d44 g     F .text	00000114 alt_find_file
100112b4 g     F .text	000000a4 alt_dev_llist_insert
100101f4 g     F .text	00000020 __malloc_lock
10010408 g     F .text	000000b0 sbrk
1000a5a4 g     F .text	00000228 _fflush_r
1000e7d8 g     F .text	000000d8 _calloc_r
10015d24 g       *ABS*	00000000 __bss_start
1000bd94 g     F .text	00000124 memset
10000268 g     F .text	00000270 main
10015d64 g     O .bss	00000004 alt_envp
10015d4c g     O .bss	00000004 __malloc_max_total_mem
1001071c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000f9f8 g     F .text	0000001c __swbuf
10006988 g     F .text	00000018 srand
100013e4 g     F .text	00000178 convertBinaryToDecimal
1000d088 g     F .text	00000008 __sclose
10002e04 g     F .text	00000008 matherr
18000000 g       *ABS*	00000000 __alt_heap_limit
1000e9b0 g     F .text	00000014 fclose
10008e7c g     F .text	00001728 _dtoa_r
1000b3cc g     F .text	000007a8 _malloc_r
1000fb88 g     F .text	00000030 __ascii_wctomb
10014220 g     O .rwdata	00000004 alt_errno
1000afc4 g     F .text	000000b8 _fwalk
1000402c g     F .text	00000054 .hidden __divsi3
1000abb0 g     F .text	00000124 _malloc_trim_r
1001236c g       *ABS*	00000000 __CTOR_END__
10002d74 g     F .text	0000001c finite
1000d090 g     F .text	000000a4 strcmp
1001236c g       *ABS*	00000000 __flash_rodata_start
1001236c g       *ABS*	00000000 __DTOR_LIST__
10015d38 g     O .bss	00000004 key3
100031c8 g     F .text	0000001c copysign
10005330 g     F .text	00000084 .hidden __nedf2
10010640 g     F .text	00000034 alt_irq_init
10010388 g     F .text	00000080 alt_release_fd
10012448 g     O .rodata	00000100 .hidden __clz_tab
10015d40 g     O .bss	00000004 _PathLocale
10011fc8 g     F .text	00000014 atexit
10000dfc g     F .text	0000041c messagePackager
1000e728 g     F .text	0000005c _write_r
1000b1ec g     F .text	0000001c setlocale
100141f8 g     O .rwdata	00000004 _impure_ptr
10015d5c g     O .bss	00000004 alt_argc
10002ffc g     F .text	000001cc scalbn
100113b4 g     F .text	0000005c _do_dtors
1000b1d8 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
1000ca2c g     F .text	00000060 __ulp
1000ab98 g     F .text	00000018 __fp_unlock_all
1001420c g     O .rwdata	00000008 alt_fs_list
10002e0c g     F .text	0000000c nan
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000b208 g     F .text	0000000c localeconv
10002acc g     F .text	00000294 __ieee754_sqrt
1001142c g     F .text	00000050 alt_ic_isr_register
10014234 g       *ABS*	00000000 _edata
100160e0 g       *ABS*	00000000 _end
1000022c g       *ABS*	00000000 __ram_exceptions_end
10010bf8 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10015d3c g     O .bss	00000004 key2
1001151c g     F .text	000000a4 alt_ic_irq_disable
1000cfb0 g     F .text	0000007c __swrite
10014204 g     O .rwdata	00000004 __malloc_trim_threshold
1000b1cc g     F .text	0000000c __locale_msgcharset
10011fdc g     F .text	00000038 exit
1000b07c g     F .text	000000b8 _fwalk_reent
1000c894 g     F .text	00000198 __mdiff
10000784 g     F .text	00000448 physicsEngine
10004080 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
1000ab74 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10012338 g     F .text	00000034 _exit
10011108 g     F .text	00000140 alt_alarm_start
100031e4 g     F .text	0000010c .hidden __muldi3
1000b214 g     F .text	000001b8 __smakebuf_r
1000d134 g     F .text	00000098 strlen
10011998 g     F .text	00000160 open
100053b4 g     F .text	000000e0 .hidden __gedf2
10014208 g     O .rwdata	00000004 __wctomb
1000d2c8 g     F .text	00000018 __sprint_r
10011410 g     F .text	0000001c alt_icache_flush_all
10000bcc g     F .text	00000230 FPGAcommunicator
10014228 g     O .rwdata	00000004 alt_priority_mask
1001147c g     F .text	000000a0 alt_ic_irq_enable
10008b00 g     F .text	00000024 __vfprintf_internal
1000fbb8 g     F .text	0000005c _wctomb_r
10005de0 g     F .text	000008d0 .hidden __subdf3
1000c230 g     F .text	000000b0 __lo0bits
1001422c g     O .rwdata	00000008 alt_alarm_list
10011358 g     F .text	0000005c _do_ctors
1000fab0 g     F .text	000000d8 wcrtomb
1000fc64 g     F .text	000000d8 close
1000ffd0 g     F .text	00000080 alt_load
1000eb48 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
1000ab78 g     F .text	00000004 __sinit_lock_acquire
1000bf88 g     F .text	0000013c __multadd
1000bf60 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408b14 	ori	at,at,556
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	1097f804 	addi	r2,r2,24544
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	1097f804 	addi	r2,r2,24544
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e0:	00bfffc4 	movi	r2,-1
100001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001ec:	d0a6e117 	ldw	r2,-25724(gp)
100001f0:	10000726 	beq	r2,zero,10000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f4:	d0a6e117 	ldw	r2,-25724(gp)
100001f8:	e0fffd17 	ldw	r3,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	e17fff17 	ldw	r5,-4(fp)
10000204:	e1bffe17 	ldw	r6,-8(fp)
10000208:	103ee83a 	callr	r2
1000020c:	00000206 	br	10000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

Disassembly of section .text:

1000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
1000022c:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000234:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000238:	d6b07c14 	ori	gp,gp,49648
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
1000023c:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000240:	10974914 	ori	r2,r2,23844

    movhi r3, %hi(__bss_end)
10000244:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
10000248:	18d83814 	ori	r3,r3,24800

    beq r2, r3, 1f
1000024c:	10c00326 	beq	r2,r3,1000025c <_start+0x30>

0:
    stw zero, (r2)
10000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000258:	10fffd36 	bltu	r2,r3,10000250 <__alt_data_end+0xf8000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
1000025c:	000ffd00 	call	1000ffd0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000260:	001017c0 	call	1001017c <alt_main>

10000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000264:	003fff06 	br	10000264 <__alt_data_end+0xf8000264>

10000268 <main>:
unsigned long convertDecimalToBinary(unsigned long n);	// read the title
unsigned long convertBinaryToDecimal(unsigned long long n);	// see above

// our main function!!! this is where the magic happens
int main()
{
10000268:	defff604 	addi	sp,sp,-40
1000026c:	dfc00915 	stw	ra,36(sp)
10000270:	df000815 	stw	fp,32(sp)
10000274:	dc000715 	stw	r16,28(sp)
10000278:	df000804 	addi	fp,sp,32
	// put in our seed
	srand(*to_sw_port0);
1000027c:	00804c04 	movi	r2,304
10000280:	10800017 	ldw	r2,0(r2)
10000284:	1009883a 	mov	r4,r2
10000288:	00069880 	call	10006988 <srand>
//	printf("Our current inputseed is %lu \n", *to_sw_port0);

	// initialize timing stuff
	unsigned long processorStart = *to_sw_port1;
1000028c:	00804804 	movi	r2,288
10000290:	10800017 	ldw	r2,0(r2)
10000294:	e0bffc15 	stw	r2,-16(fp)
	unsigned long processorTime = processorStart;
10000298:	e0bffc17 	ldw	r2,-16(fp)
1000029c:	e0bffd15 	stw	r2,-12(fp)
	unsigned long lastSpawned;
	unsigned long nextSpawnTime;
//	printf("our start time is %ld \n", processorStart);

	// initialize our cursor and key stuff
	xCursor = *to_sw_port3;
100002a0:	00806004 	movi	r2,384
100002a4:	10800017 	ldw	r2,0(r2)
100002a8:	d0a6ce15 	stw	r2,-25800(gp)
	yCursor = *to_sw_port4;
100002ac:	00805c04 	movi	r2,368
100002b0:	10800017 	ldw	r2,0(r2)
100002b4:	d0a6cd15 	stw	r2,-25804(gp)
	port2Unpackager();
100002b8:	00012180 	call	10001218 <port2Unpackager>

	// initialize all our structs
	int i;
	for(i=0; i<16; i++)
100002bc:	e03ffb15 	stw	zero,-20(fp)
100002c0:	00004306 	br	100003d0 <main+0x168>
	{
		veggieObject[i].xPosition = 0;
100002c4:	04040074 	movhi	r16,4097
100002c8:	84176804 	addi	r16,r16,23968
100002cc:	e0bffb17 	ldw	r2,-20(fp)
100002d0:	1009883a 	mov	r4,r2
100002d4:	01400904 	movi	r5,36
100002d8:	00040ec0 	call	100040ec <__mulsi3>
100002dc:	8085883a 	add	r2,r16,r2
100002e0:	10000015 	stw	zero,0(r2)
		veggieObject[i].yPosition = 0;
100002e4:	04040074 	movhi	r16,4097
100002e8:	84176804 	addi	r16,r16,23968
100002ec:	e0bffb17 	ldw	r2,-20(fp)
100002f0:	1009883a 	mov	r4,r2
100002f4:	01400904 	movi	r5,36
100002f8:	00040ec0 	call	100040ec <__mulsi3>
100002fc:	8085883a 	add	r2,r16,r2
10000300:	10800104 	addi	r2,r2,4
10000304:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectType = 0;
10000308:	04040074 	movhi	r16,4097
1000030c:	84176804 	addi	r16,r16,23968
10000310:	e0bffb17 	ldw	r2,-20(fp)
10000314:	1009883a 	mov	r4,r2
10000318:	01400904 	movi	r5,36
1000031c:	00040ec0 	call	100040ec <__mulsi3>
10000320:	8085883a 	add	r2,r16,r2
10000324:	10800204 	addi	r2,r2,8
10000328:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectState = 0;
1000032c:	04040074 	movhi	r16,4097
10000330:	84176804 	addi	r16,r16,23968
10000334:	e0bffb17 	ldw	r2,-20(fp)
10000338:	1009883a 	mov	r4,r2
1000033c:	01400904 	movi	r5,36
10000340:	00040ec0 	call	100040ec <__mulsi3>
10000344:	8085883a 	add	r2,r16,r2
10000348:	10800304 	addi	r2,r2,12
1000034c:	10000015 	stw	zero,0(r2)
		veggieObject[i].packageType = 0;
10000350:	04040074 	movhi	r16,4097
10000354:	84176804 	addi	r16,r16,23968
10000358:	e0bffb17 	ldw	r2,-20(fp)
1000035c:	1009883a 	mov	r4,r2
10000360:	01400904 	movi	r5,36
10000364:	00040ec0 	call	100040ec <__mulsi3>
10000368:	8085883a 	add	r2,r16,r2
1000036c:	10800404 	addi	r2,r2,16
10000370:	10000015 	stw	zero,0(r2)
		veggieObject[i].xVelocity = 0;
10000374:	04040074 	movhi	r16,4097
10000378:	84176804 	addi	r16,r16,23968
1000037c:	e0bffb17 	ldw	r2,-20(fp)
10000380:	1009883a 	mov	r4,r2
10000384:	01400904 	movi	r5,36
10000388:	00040ec0 	call	100040ec <__mulsi3>
1000038c:	8085883a 	add	r2,r16,r2
10000390:	10800504 	addi	r2,r2,20
10000394:	10000015 	stw	zero,0(r2)
10000398:	10000115 	stw	zero,4(r2)
		veggieObject[i].yVelocity = 0;
1000039c:	04040074 	movhi	r16,4097
100003a0:	84176804 	addi	r16,r16,23968
100003a4:	e0bffb17 	ldw	r2,-20(fp)
100003a8:	1009883a 	mov	r4,r2
100003ac:	01400904 	movi	r5,36
100003b0:	00040ec0 	call	100040ec <__mulsi3>
100003b4:	8085883a 	add	r2,r16,r2
100003b8:	10800704 	addi	r2,r2,28
100003bc:	10000015 	stw	zero,0(r2)
100003c0:	10000115 	stw	zero,4(r2)
	yCursor = *to_sw_port4;
	port2Unpackager();

	// initialize all our structs
	int i;
	for(i=0; i<16; i++)
100003c4:	e0bffb17 	ldw	r2,-20(fp)
100003c8:	10800044 	addi	r2,r2,1
100003cc:	e0bffb15 	stw	r2,-20(fp)
100003d0:	e0bffb17 	ldw	r2,-20(fp)
100003d4:	10800410 	cmplti	r2,r2,16
100003d8:	103fba1e 	bne	r2,zero,100002c4 <__alt_data_end+0xf80002c4>
		veggieObject[i].objectState = 0;
		veggieObject[i].packageType = 0;
		veggieObject[i].xVelocity = 0;
		veggieObject[i].yVelocity = 0;
	}
	veggieObject[0].packageType = 1;	// game status
100003dc:	00840074 	movhi	r2,4097
100003e0:	10976804 	addi	r2,r2,23968
100003e4:	00c00044 	movi	r3,1
100003e8:	10c00415 	stw	r3,16(r2)

	// TEST STUFF
	veggieObject[0].xPosition = 94;
100003ec:	00840074 	movhi	r2,4097
100003f0:	10976804 	addi	r2,r2,23968
100003f4:	00c01784 	movi	r3,94
100003f8:	10c00015 	stw	r3,0(r2)
	veggieObject[0].yPosition = 34;
100003fc:	00840074 	movhi	r2,4097
10000400:	10976804 	addi	r2,r2,23968
10000404:	00c00884 	movi	r3,34
10000408:	10c00115 	stw	r3,4(r2)
	veggieObject[0].objectType = 5;
1000040c:	00840074 	movhi	r2,4097
10000410:	10976804 	addi	r2,r2,23968
10000414:	00c00144 	movi	r3,5
10000418:	10c00215 	stw	r3,8(r2)
	veggieObject[0].objectState = 1;
1000041c:	00840074 	movhi	r2,4097
10000420:	10976804 	addi	r2,r2,23968
10000424:	00c00044 	movi	r3,1
10000428:	10c00315 	stw	r3,12(r2)
	veggieObject[0].packageType = 1;
1000042c:	00840074 	movhi	r2,4097
10000430:	10976804 	addi	r2,r2,23968
10000434:	00c00044 	movi	r3,1
10000438:	10c00415 	stw	r3,16(r2)
	veggieObject[0].xVelocity = 0;
1000043c:	00840074 	movhi	r2,4097
10000440:	10976804 	addi	r2,r2,23968
10000444:	10000515 	stw	zero,20(r2)
10000448:	10000615 	stw	zero,24(r2)
	veggieObject[0].yVelocity = 0;
1000044c:	00840074 	movhi	r2,4097
10000450:	10976804 	addi	r2,r2,23968
10000454:	10000715 	stw	zero,28(r2)
10000458:	10000815 	stw	zero,32(r2)

	while(1)
	{
		// constantly updating our current time in seconds
		processorTime = *to_sw_port1;
1000045c:	00804804 	movi	r2,288
10000460:	10800017 	ldw	r2,0(r2)
10000464:	e0bffd15 	stw	r2,-12(fp)
	//	printf("our time is %lu \n", processorTime);
		elapsedTime = processorTime - processorStart;
10000468:	e0fffd17 	ldw	r3,-12(fp)
1000046c:	e0bffc17 	ldw	r2,-16(fp)
10000470:	1885c83a 	sub	r2,r3,r2
10000474:	e0bffe15 	stw	r2,-8(fp)
	//	printf("elapsed time is %lu \n", elapsedTime);

		// constantly doing physics
		if ((elapsedTime - lastPhysixed) > 1)	// greater than .1 seconds pass
10000478:	e0fffe17 	ldw	r3,-8(fp)
1000047c:	e0bff817 	ldw	r2,-32(fp)
10000480:	1885c83a 	sub	r2,r3,r2
10000484:	108000b0 	cmpltui	r2,r2,2
10000488:	1000031e 	bne	r2,zero,10000498 <main+0x230>
		{
			physicsEngine();	// call our physics engine!
1000048c:	00007840 	call	10000784 <physicsEngine>
			lastPhysixed = elapsedTime;
10000490:	e0bffe17 	ldw	r2,-8(fp)
10000494:	e0bff815 	stw	r2,-32(fp)
		}

		// spawning objects
		if ((elapsedTime - lastSpawned) > nextSpawnTime)	// greater than random time
10000498:	e0fffe17 	ldw	r3,-8(fp)
1000049c:	e0bff917 	ldw	r2,-28(fp)
100004a0:	1885c83a 	sub	r2,r3,r2
100004a4:	e0fffa17 	ldw	r3,-24(fp)
100004a8:	1880092e 	bgeu	r3,r2,100004d0 <main+0x268>
		{
			spawningEngine();	// call our spawning engine!
100004ac:	00004d80 	call	100004d8 <spawningEngine>
			lastSpawned = elapsedTime;
100004b0:	e0bffe17 	ldw	r2,-8(fp)
100004b4:	e0bff915 	stw	r2,-28(fp)
			nextSpawnTime = (rand() % 60) + 20;
100004b8:	00069a00 	call	100069a0 <rand>
100004bc:	1009883a 	mov	r4,r2
100004c0:	01400f04 	movi	r5,60
100004c4:	00040800 	call	10004080 <__modsi3>
100004c8:	10800504 	addi	r2,r2,20
100004cc:	e0bffa15 	stw	r2,-24(fp)
	//		printf("we generated a random number at %lu   ", nextSpawnTime);
		}

	FPGAcommunicator();	// call this every time to update the FPGA
100004d0:	0000bcc0 	call	10000bcc <FPGAcommunicator>
	}
100004d4:	003fe106 	br	1000045c <__alt_data_end+0xf800045c>

100004d8 <spawningEngine>:
	return 0;
}

void spawningEngine()
{
100004d8:	defff504 	addi	sp,sp,-44
100004dc:	dfc00a15 	stw	ra,40(sp)
100004e0:	df000915 	stw	fp,36(sp)
100004e4:	dc400815 	stw	r17,32(sp)
100004e8:	dc000715 	stw	r16,28(sp)
100004ec:	df000904 	addi	fp,sp,36
	int i;
	for(i=1; i<16; i++)	// let's go through our objects and see which ones are free
100004f0:	00800044 	movi	r2,1
100004f4:	e0bff715 	stw	r2,-36(fp)
100004f8:	00009806 	br	1000075c <spawningEngine+0x284>
	{
		if(veggieObject[i].objectState == 0)	// if one doesn't exist, go for it
100004fc:	04040074 	movhi	r16,4097
10000500:	84176804 	addi	r16,r16,23968
10000504:	e0bff717 	ldw	r2,-36(fp)
10000508:	1009883a 	mov	r4,r2
1000050c:	01400904 	movi	r5,36
10000510:	00040ec0 	call	100040ec <__mulsi3>
10000514:	8085883a 	add	r2,r16,r2
10000518:	10800304 	addi	r2,r2,12
1000051c:	10800017 	ldw	r2,0(r2)
10000520:	10008b1e 	bne	r2,zero,10000750 <spawningEngine+0x278>
		{
			// RANDOM GENERATION!!
			unsigned long randomX = (rand() % 104) + 14;
10000524:	00069a00 	call	100069a0 <rand>
10000528:	1009883a 	mov	r4,r2
1000052c:	01401a04 	movi	r5,104
10000530:	00040800 	call	10004080 <__modsi3>
10000534:	10800384 	addi	r2,r2,14
10000538:	e0bffa15 	stw	r2,-24(fp)
			int randomType = (rand() % 8) + 1;
1000053c:	00069a00 	call	100069a0 <rand>
10000540:	1007883a 	mov	r3,r2
10000544:	00a00034 	movhi	r2,32768
10000548:	108001c4 	addi	r2,r2,7
1000054c:	1884703a 	and	r2,r3,r2
10000550:	1000040e 	bge	r2,zero,10000564 <spawningEngine+0x8c>
10000554:	10bfffc4 	addi	r2,r2,-1
10000558:	00fffe04 	movi	r3,-8
1000055c:	10c4b03a 	or	r2,r2,r3
10000560:	10800044 	addi	r2,r2,1
10000564:	10800044 	addi	r2,r2,1
10000568:	e0bffb15 	stw	r2,-20(fp)
			double randomSpeedY = (rand() % 30) + 30;
1000056c:	00069a00 	call	100069a0 <rand>
10000570:	1009883a 	mov	r4,r2
10000574:	01400784 	movi	r5,30
10000578:	00040800 	call	10004080 <__modsi3>
1000057c:	10800784 	addi	r2,r2,30
10000580:	1009883a 	mov	r4,r2
10000584:	00067380 	call	10006738 <__floatsidf>
10000588:	1009883a 	mov	r4,r2
1000058c:	180b883a 	mov	r5,r3
10000590:	e13ffc15 	stw	r4,-16(fp)
10000594:	e17ffd15 	stw	r5,-12(fp)
			double randomSpeedX = (rand() % 15) - 7.5;
10000598:	00069a00 	call	100069a0 <rand>
1000059c:	1009883a 	mov	r4,r2
100005a0:	014003c4 	movi	r5,15
100005a4:	00040800 	call	10004080 <__modsi3>
100005a8:	1009883a 	mov	r4,r2
100005ac:	00067380 	call	10006738 <__floatsidf>
100005b0:	100b883a 	mov	r5,r2
100005b4:	180d883a 	mov	r6,r3
100005b8:	2809883a 	mov	r4,r5
100005bc:	300b883a 	mov	r5,r6
100005c0:	000d883a 	mov	r6,zero
100005c4:	01d007b4 	movhi	r7,16414
100005c8:	0005de00 	call	10005de0 <__subdf3>
100005cc:	1009883a 	mov	r4,r2
100005d0:	180b883a 	mov	r5,r3
100005d4:	e13ff815 	stw	r4,-32(fp)
100005d8:	e17ff915 	stw	r5,-28(fp)

			if (randomX > 80)
100005dc:	e0bffa17 	ldw	r2,-24(fp)
100005e0:	10801470 	cmpltui	r2,r2,81
100005e4:	10000b1e 	bne	r2,zero,10000614 <spawningEngine+0x13c>
			{
				randomSpeedX = (rand() % 15);
100005e8:	00069a00 	call	100069a0 <rand>
100005ec:	1009883a 	mov	r4,r2
100005f0:	014003c4 	movi	r5,15
100005f4:	00040800 	call	10004080 <__modsi3>
100005f8:	1009883a 	mov	r4,r2
100005fc:	00067380 	call	10006738 <__floatsidf>
10000600:	1009883a 	mov	r4,r2
10000604:	180b883a 	mov	r5,r3
10000608:	e13ff815 	stw	r4,-32(fp)
1000060c:	e17ff915 	stw	r5,-28(fp)
10000610:	00000e06 	br	1000064c <spawningEngine+0x174>
			}
			else if (randomX < 40)
10000614:	e0bffa17 	ldw	r2,-24(fp)
10000618:	10800a28 	cmpgeui	r2,r2,40
1000061c:	10000b1e 	bne	r2,zero,1000064c <spawningEngine+0x174>
			{
				randomSpeedX = (rand() % 15) - 15;
10000620:	00069a00 	call	100069a0 <rand>
10000624:	1009883a 	mov	r4,r2
10000628:	014003c4 	movi	r5,15
1000062c:	00040800 	call	10004080 <__modsi3>
10000630:	10bffc44 	addi	r2,r2,-15
10000634:	1009883a 	mov	r4,r2
10000638:	00067380 	call	10006738 <__floatsidf>
1000063c:	1009883a 	mov	r4,r2
10000640:	180b883a 	mov	r5,r3
10000644:	e13ff815 	stw	r4,-32(fp)
10000648:	e17ff915 	stw	r5,-28(fp)
			}

			// now let's store these
			veggieObject[i].xPosition = randomX;
1000064c:	e47ffa17 	ldw	r17,-24(fp)
10000650:	04040074 	movhi	r16,4097
10000654:	84176804 	addi	r16,r16,23968
10000658:	e0bff717 	ldw	r2,-36(fp)
1000065c:	1009883a 	mov	r4,r2
10000660:	01400904 	movi	r5,36
10000664:	00040ec0 	call	100040ec <__mulsi3>
10000668:	8085883a 	add	r2,r16,r2
1000066c:	14400015 	stw	r17,0(r2)
			veggieObject[i].yPosition = 0;
10000670:	04040074 	movhi	r16,4097
10000674:	84176804 	addi	r16,r16,23968
10000678:	e0bff717 	ldw	r2,-36(fp)
1000067c:	1009883a 	mov	r4,r2
10000680:	01400904 	movi	r5,36
10000684:	00040ec0 	call	100040ec <__mulsi3>
10000688:	8085883a 	add	r2,r16,r2
1000068c:	10800104 	addi	r2,r2,4
10000690:	10000015 	stw	zero,0(r2)
			veggieObject[i].objectType = randomType;
10000694:	04040074 	movhi	r16,4097
10000698:	84176804 	addi	r16,r16,23968
1000069c:	e0bff717 	ldw	r2,-36(fp)
100006a0:	1009883a 	mov	r4,r2
100006a4:	01400904 	movi	r5,36
100006a8:	00040ec0 	call	100040ec <__mulsi3>
100006ac:	8085883a 	add	r2,r16,r2
100006b0:	10800204 	addi	r2,r2,8
100006b4:	e0fffb17 	ldw	r3,-20(fp)
100006b8:	10c00015 	stw	r3,0(r2)
			veggieObject[i].objectState = 1;
100006bc:	04040074 	movhi	r16,4097
100006c0:	84176804 	addi	r16,r16,23968
100006c4:	e0bff717 	ldw	r2,-36(fp)
100006c8:	1009883a 	mov	r4,r2
100006cc:	01400904 	movi	r5,36
100006d0:	00040ec0 	call	100040ec <__mulsi3>
100006d4:	8085883a 	add	r2,r16,r2
100006d8:	10800304 	addi	r2,r2,12
100006dc:	00c00044 	movi	r3,1
100006e0:	10c00015 	stw	r3,0(r2)
			veggieObject[i].xVelocity = randomSpeedX;
100006e4:	04040074 	movhi	r16,4097
100006e8:	84176804 	addi	r16,r16,23968
100006ec:	e0bff717 	ldw	r2,-36(fp)
100006f0:	1009883a 	mov	r4,r2
100006f4:	01400904 	movi	r5,36
100006f8:	00040ec0 	call	100040ec <__mulsi3>
100006fc:	8085883a 	add	r2,r16,r2
10000700:	10800504 	addi	r2,r2,20
10000704:	e0fff817 	ldw	r3,-32(fp)
10000708:	10c00015 	stw	r3,0(r2)
1000070c:	e0fff917 	ldw	r3,-28(fp)
10000710:	10c00115 	stw	r3,4(r2)
			veggieObject[i].yVelocity = randomSpeedY;
10000714:	04040074 	movhi	r16,4097
10000718:	84176804 	addi	r16,r16,23968
1000071c:	e0bff717 	ldw	r2,-36(fp)
10000720:	1009883a 	mov	r4,r2
10000724:	01400904 	movi	r5,36
10000728:	00040ec0 	call	100040ec <__mulsi3>
1000072c:	8085883a 	add	r2,r16,r2
10000730:	10800704 	addi	r2,r2,28
10000734:	e0fffc17 	ldw	r3,-16(fp)
10000738:	10c00015 	stw	r3,0(r2)
1000073c:	e0fffd17 	ldw	r3,-12(fp)
10000740:	10c00115 	stw	r3,4(r2)
			printf("type is %d  ", randomType);
			printf("xvelocity is %f  ", randomSpeedX);
			printf("yvelocity is %f  \n", randomSpeedY);
*/
			// now let's break
			i = 42;
10000744:	00800a84 	movi	r2,42
10000748:	e0bff715 	stw	r2,-36(fp)
			break;
1000074c:	00000606 	br	10000768 <spawningEngine+0x290>
}

void spawningEngine()
{
	int i;
	for(i=1; i<16; i++)	// let's go through our objects and see which ones are free
10000750:	e0bff717 	ldw	r2,-36(fp)
10000754:	10800044 	addi	r2,r2,1
10000758:	e0bff715 	stw	r2,-36(fp)
1000075c:	e0bff717 	ldw	r2,-36(fp)
10000760:	10800410 	cmplti	r2,r2,16
10000764:	103f651e 	bne	r2,zero,100004fc <__alt_data_end+0xf80004fc>
			// now let's break
			i = 42;
			break;
		}
	}
}
10000768:	e6fffe04 	addi	sp,fp,-8
1000076c:	dfc00317 	ldw	ra,12(sp)
10000770:	df000217 	ldw	fp,8(sp)
10000774:	dc400117 	ldw	r17,4(sp)
10000778:	dc000017 	ldw	r16,0(sp)
1000077c:	dec00404 	addi	sp,sp,16
10000780:	f800283a 	ret

10000784 <physicsEngine>:

void physicsEngine()
{
10000784:	defffa04 	addi	sp,sp,-24
10000788:	dfc00515 	stw	ra,20(sp)
1000078c:	df000415 	stw	fp,16(sp)
10000790:	dc800315 	stw	r18,12(sp)
10000794:	dc400215 	stw	r17,8(sp)
10000798:	dc000115 	stw	r16,4(sp)
1000079c:	df000404 	addi	fp,sp,16
	int i;
	for(i=1; i<16; i++)	// update all our physics of all objects!
100007a0:	00800044 	movi	r2,1
100007a4:	e0bffc15 	stw	r2,-16(fp)
100007a8:	0000fc06 	br	10000b9c <physicsEngine+0x418>
	{
		if(veggieObject[i].objectState != 0)	// does it even exist?
100007ac:	04040074 	movhi	r16,4097
100007b0:	84176804 	addi	r16,r16,23968
100007b4:	e0bffc17 	ldw	r2,-16(fp)
100007b8:	1009883a 	mov	r4,r2
100007bc:	01400904 	movi	r5,36
100007c0:	00040ec0 	call	100040ec <__mulsi3>
100007c4:	8085883a 	add	r2,r16,r2
100007c8:	10800304 	addi	r2,r2,12
100007cc:	10800017 	ldw	r2,0(r2)
100007d0:	1000ef26 	beq	r2,zero,10000b90 <physicsEngine+0x40c>
		{
			// PHYSICS MAGIC!
			veggieObject[i].xPosition = veggieObject[i].xPosition + veggieObject[i].xVelocity;
100007d4:	04040074 	movhi	r16,4097
100007d8:	84176804 	addi	r16,r16,23968
100007dc:	e0bffc17 	ldw	r2,-16(fp)
100007e0:	1009883a 	mov	r4,r2
100007e4:	01400904 	movi	r5,36
100007e8:	00040ec0 	call	100040ec <__mulsi3>
100007ec:	8085883a 	add	r2,r16,r2
100007f0:	10800017 	ldw	r2,0(r2)
100007f4:	1009883a 	mov	r4,r2
100007f8:	00067380 	call	10006738 <__floatsidf>
100007fc:	1023883a 	mov	r17,r2
10000800:	1825883a 	mov	r18,r3
10000804:	04040074 	movhi	r16,4097
10000808:	84176804 	addi	r16,r16,23968
1000080c:	e0bffc17 	ldw	r2,-16(fp)
10000810:	1009883a 	mov	r4,r2
10000814:	01400904 	movi	r5,36
10000818:	00040ec0 	call	100040ec <__mulsi3>
1000081c:	8085883a 	add	r2,r16,r2
10000820:	11000504 	addi	r4,r2,20
10000824:	20800017 	ldw	r2,0(r4)
10000828:	20c00117 	ldw	r3,4(r4)
1000082c:	8809883a 	mov	r4,r17
10000830:	900b883a 	mov	r5,r18
10000834:	100d883a 	mov	r6,r2
10000838:	180f883a 	mov	r7,r3
1000083c:	00041140 	call	10004114 <__adddf3>
10000840:	1009883a 	mov	r4,r2
10000844:	180b883a 	mov	r5,r3
10000848:	2005883a 	mov	r2,r4
1000084c:	2807883a 	mov	r3,r5
10000850:	1009883a 	mov	r4,r2
10000854:	180b883a 	mov	r5,r3
10000858:	00066b00 	call	100066b0 <__fixdfsi>
1000085c:	1023883a 	mov	r17,r2
10000860:	04040074 	movhi	r16,4097
10000864:	84176804 	addi	r16,r16,23968
10000868:	e0bffc17 	ldw	r2,-16(fp)
1000086c:	1009883a 	mov	r4,r2
10000870:	01400904 	movi	r5,36
10000874:	00040ec0 	call	100040ec <__mulsi3>
10000878:	8085883a 	add	r2,r16,r2
1000087c:	14400015 	stw	r17,0(r2)
			veggieObject[i].yPosition = veggieObject[i].yPosition + veggieObject[i].yVelocity;
10000880:	04040074 	movhi	r16,4097
10000884:	84176804 	addi	r16,r16,23968
10000888:	e0bffc17 	ldw	r2,-16(fp)
1000088c:	1009883a 	mov	r4,r2
10000890:	01400904 	movi	r5,36
10000894:	00040ec0 	call	100040ec <__mulsi3>
10000898:	8085883a 	add	r2,r16,r2
1000089c:	10800104 	addi	r2,r2,4
100008a0:	10800017 	ldw	r2,0(r2)
100008a4:	1009883a 	mov	r4,r2
100008a8:	00067380 	call	10006738 <__floatsidf>
100008ac:	1023883a 	mov	r17,r2
100008b0:	1825883a 	mov	r18,r3
100008b4:	04040074 	movhi	r16,4097
100008b8:	84176804 	addi	r16,r16,23968
100008bc:	e0bffc17 	ldw	r2,-16(fp)
100008c0:	1009883a 	mov	r4,r2
100008c4:	01400904 	movi	r5,36
100008c8:	00040ec0 	call	100040ec <__mulsi3>
100008cc:	8085883a 	add	r2,r16,r2
100008d0:	11000704 	addi	r4,r2,28
100008d4:	20800017 	ldw	r2,0(r4)
100008d8:	20c00117 	ldw	r3,4(r4)
100008dc:	8809883a 	mov	r4,r17
100008e0:	900b883a 	mov	r5,r18
100008e4:	100d883a 	mov	r6,r2
100008e8:	180f883a 	mov	r7,r3
100008ec:	00041140 	call	10004114 <__adddf3>
100008f0:	1009883a 	mov	r4,r2
100008f4:	180b883a 	mov	r5,r3
100008f8:	2005883a 	mov	r2,r4
100008fc:	2807883a 	mov	r3,r5
10000900:	1009883a 	mov	r4,r2
10000904:	180b883a 	mov	r5,r3
10000908:	00066b00 	call	100066b0 <__fixdfsi>
1000090c:	1023883a 	mov	r17,r2
10000910:	04040074 	movhi	r16,4097
10000914:	84176804 	addi	r16,r16,23968
10000918:	e0bffc17 	ldw	r2,-16(fp)
1000091c:	1009883a 	mov	r4,r2
10000920:	01400904 	movi	r5,36
10000924:	00040ec0 	call	100040ec <__mulsi3>
10000928:	8085883a 	add	r2,r16,r2
1000092c:	10800104 	addi	r2,r2,4
10000930:	14400015 	stw	r17,0(r2)
			veggieObject[i].yVelocity = veggieObject[i].yVelocity - 1;
10000934:	04040074 	movhi	r16,4097
10000938:	84176804 	addi	r16,r16,23968
1000093c:	e0bffc17 	ldw	r2,-16(fp)
10000940:	1009883a 	mov	r4,r2
10000944:	01400904 	movi	r5,36
10000948:	00040ec0 	call	100040ec <__mulsi3>
1000094c:	8085883a 	add	r2,r16,r2
10000950:	11000704 	addi	r4,r2,28
10000954:	20800017 	ldw	r2,0(r4)
10000958:	20c00117 	ldw	r3,4(r4)
1000095c:	1009883a 	mov	r4,r2
10000960:	180b883a 	mov	r5,r3
10000964:	000d883a 	mov	r6,zero
10000968:	01cffc34 	movhi	r7,16368
1000096c:	0005de00 	call	10005de0 <__subdf3>
10000970:	1009883a 	mov	r4,r2
10000974:	180b883a 	mov	r5,r3
10000978:	2021883a 	mov	r16,r4
1000097c:	2823883a 	mov	r17,r5
10000980:	04840074 	movhi	r18,4097
10000984:	94976804 	addi	r18,r18,23968
10000988:	e0bffc17 	ldw	r2,-16(fp)
1000098c:	1009883a 	mov	r4,r2
10000990:	01400904 	movi	r5,36
10000994:	00040ec0 	call	100040ec <__mulsi3>
10000998:	9085883a 	add	r2,r18,r2
1000099c:	10800704 	addi	r2,r2,28
100009a0:	14000015 	stw	r16,0(r2)
100009a4:	14400115 	stw	r17,4(r2)

			printf("object %d!   ", i);
100009a8:	01040074 	movhi	r4,4097
100009ac:	2108db04 	addi	r4,r4,9068
100009b0:	e17ffc17 	ldw	r5,-16(fp)
100009b4:	000694c0 	call	1000694c <printf>
			printf("xPosition is  %li ", veggieObject[i].xPosition);
100009b8:	04040074 	movhi	r16,4097
100009bc:	84176804 	addi	r16,r16,23968
100009c0:	e0bffc17 	ldw	r2,-16(fp)
100009c4:	1009883a 	mov	r4,r2
100009c8:	01400904 	movi	r5,36
100009cc:	00040ec0 	call	100040ec <__mulsi3>
100009d0:	8085883a 	add	r2,r16,r2
100009d4:	10800017 	ldw	r2,0(r2)
100009d8:	01040074 	movhi	r4,4097
100009dc:	2108df04 	addi	r4,r4,9084
100009e0:	100b883a 	mov	r5,r2
100009e4:	000694c0 	call	1000694c <printf>
			printf("yPosition is  %li ", veggieObject[i].yPosition);
100009e8:	04040074 	movhi	r16,4097
100009ec:	84176804 	addi	r16,r16,23968
100009f0:	e0bffc17 	ldw	r2,-16(fp)
100009f4:	1009883a 	mov	r4,r2
100009f8:	01400904 	movi	r5,36
100009fc:	00040ec0 	call	100040ec <__mulsi3>
10000a00:	8085883a 	add	r2,r16,r2
10000a04:	10800104 	addi	r2,r2,4
10000a08:	10800017 	ldw	r2,0(r2)
10000a0c:	01040074 	movhi	r4,4097
10000a10:	2108e404 	addi	r4,r4,9104
10000a14:	100b883a 	mov	r5,r2
10000a18:	000694c0 	call	1000694c <printf>
			printf("yVelocity is  %f \n", veggieObject[i].yVelocity);
10000a1c:	04040074 	movhi	r16,4097
10000a20:	84176804 	addi	r16,r16,23968
10000a24:	e0bffc17 	ldw	r2,-16(fp)
10000a28:	1009883a 	mov	r4,r2
10000a2c:	01400904 	movi	r5,36
10000a30:	00040ec0 	call	100040ec <__mulsi3>
10000a34:	8085883a 	add	r2,r16,r2
10000a38:	11000704 	addi	r4,r2,28
10000a3c:	20800017 	ldw	r2,0(r4)
10000a40:	20c00117 	ldw	r3,4(r4)
10000a44:	01040074 	movhi	r4,4097
10000a48:	2108e904 	addi	r4,r4,9124
10000a4c:	100b883a 	mov	r5,r2
10000a50:	180d883a 	mov	r6,r3
10000a54:	000694c0 	call	1000694c <printf>

			// let's now check if any of these objects are below the screen
			if(veggieObject[i].yPosition < 0)
10000a58:	04040074 	movhi	r16,4097
10000a5c:	84176804 	addi	r16,r16,23968
10000a60:	e0bffc17 	ldw	r2,-16(fp)
10000a64:	1009883a 	mov	r4,r2
10000a68:	01400904 	movi	r5,36
10000a6c:	00040ec0 	call	100040ec <__mulsi3>
10000a70:	8085883a 	add	r2,r16,r2
10000a74:	10800104 	addi	r2,r2,4
10000a78:	10800017 	ldw	r2,0(r2)
10000a7c:	1000440e 	bge	r2,zero,10000b90 <physicsEngine+0x40c>
			{
				// it has outlived its usefulness. ruthlessly slaughter it!
				veggieObject[i].xPosition = 0;
10000a80:	04040074 	movhi	r16,4097
10000a84:	84176804 	addi	r16,r16,23968
10000a88:	e0bffc17 	ldw	r2,-16(fp)
10000a8c:	1009883a 	mov	r4,r2
10000a90:	01400904 	movi	r5,36
10000a94:	00040ec0 	call	100040ec <__mulsi3>
10000a98:	8085883a 	add	r2,r16,r2
10000a9c:	10000015 	stw	zero,0(r2)
				veggieObject[i].yPosition = 0;
10000aa0:	04040074 	movhi	r16,4097
10000aa4:	84176804 	addi	r16,r16,23968
10000aa8:	e0bffc17 	ldw	r2,-16(fp)
10000aac:	1009883a 	mov	r4,r2
10000ab0:	01400904 	movi	r5,36
10000ab4:	00040ec0 	call	100040ec <__mulsi3>
10000ab8:	8085883a 	add	r2,r16,r2
10000abc:	10800104 	addi	r2,r2,4
10000ac0:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectType = 0;
10000ac4:	04040074 	movhi	r16,4097
10000ac8:	84176804 	addi	r16,r16,23968
10000acc:	e0bffc17 	ldw	r2,-16(fp)
10000ad0:	1009883a 	mov	r4,r2
10000ad4:	01400904 	movi	r5,36
10000ad8:	00040ec0 	call	100040ec <__mulsi3>
10000adc:	8085883a 	add	r2,r16,r2
10000ae0:	10800204 	addi	r2,r2,8
10000ae4:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectState = 0;
10000ae8:	04040074 	movhi	r16,4097
10000aec:	84176804 	addi	r16,r16,23968
10000af0:	e0bffc17 	ldw	r2,-16(fp)
10000af4:	1009883a 	mov	r4,r2
10000af8:	01400904 	movi	r5,36
10000afc:	00040ec0 	call	100040ec <__mulsi3>
10000b00:	8085883a 	add	r2,r16,r2
10000b04:	10800304 	addi	r2,r2,12
10000b08:	10000015 	stw	zero,0(r2)
				veggieObject[i].packageType = 0;
10000b0c:	04040074 	movhi	r16,4097
10000b10:	84176804 	addi	r16,r16,23968
10000b14:	e0bffc17 	ldw	r2,-16(fp)
10000b18:	1009883a 	mov	r4,r2
10000b1c:	01400904 	movi	r5,36
10000b20:	00040ec0 	call	100040ec <__mulsi3>
10000b24:	8085883a 	add	r2,r16,r2
10000b28:	10800404 	addi	r2,r2,16
10000b2c:	10000015 	stw	zero,0(r2)
				veggieObject[i].xVelocity = 0;
10000b30:	04040074 	movhi	r16,4097
10000b34:	84176804 	addi	r16,r16,23968
10000b38:	e0bffc17 	ldw	r2,-16(fp)
10000b3c:	1009883a 	mov	r4,r2
10000b40:	01400904 	movi	r5,36
10000b44:	00040ec0 	call	100040ec <__mulsi3>
10000b48:	8085883a 	add	r2,r16,r2
10000b4c:	10800504 	addi	r2,r2,20
10000b50:	10000015 	stw	zero,0(r2)
10000b54:	10000115 	stw	zero,4(r2)
				veggieObject[i].yVelocity = 0;
10000b58:	04040074 	movhi	r16,4097
10000b5c:	84176804 	addi	r16,r16,23968
10000b60:	e0bffc17 	ldw	r2,-16(fp)
10000b64:	1009883a 	mov	r4,r2
10000b68:	01400904 	movi	r5,36
10000b6c:	00040ec0 	call	100040ec <__mulsi3>
10000b70:	8085883a 	add	r2,r16,r2
10000b74:	10800704 	addi	r2,r2,28
10000b78:	10000015 	stw	zero,0(r2)
10000b7c:	10000115 	stw	zero,4(r2)
				printf("eliminating object %d! \n", i);
10000b80:	01040074 	movhi	r4,4097
10000b84:	2108ee04 	addi	r4,r4,9144
10000b88:	e17ffc17 	ldw	r5,-16(fp)
10000b8c:	000694c0 	call	1000694c <printf>
}

void physicsEngine()
{
	int i;
	for(i=1; i<16; i++)	// update all our physics of all objects!
10000b90:	e0bffc17 	ldw	r2,-16(fp)
10000b94:	10800044 	addi	r2,r2,1
10000b98:	e0bffc15 	stw	r2,-16(fp)
10000b9c:	e0bffc17 	ldw	r2,-16(fp)
10000ba0:	10800410 	cmplti	r2,r2,16
10000ba4:	103f011e 	bne	r2,zero,100007ac <__alt_data_end+0xf80007ac>
				veggieObject[i].yVelocity = 0;
				printf("eliminating object %d! \n", i);
			}
		}
	}
	return;
10000ba8:	0001883a 	nop
}
10000bac:	e6fffd04 	addi	sp,fp,-12
10000bb0:	dfc00417 	ldw	ra,16(sp)
10000bb4:	df000317 	ldw	fp,12(sp)
10000bb8:	dc800217 	ldw	r18,8(sp)
10000bbc:	dc400117 	ldw	r17,4(sp)
10000bc0:	dc000017 	ldw	r16,0(sp)
10000bc4:	dec00504 	addi	sp,sp,20
10000bc8:	f800283a 	ret

10000bcc <FPGAcommunicator>:

// this function takes an array of 32-bit messages and sends them all out
void FPGAcommunicator()
{
10000bcc:	deffd504 	addi	sp,sp,-172
10000bd0:	dfc02a15 	stw	ra,168(sp)
10000bd4:	df002915 	stw	fp,164(sp)
10000bd8:	dc002815 	stw	r16,160(sp)
10000bdc:	df002904 	addi	fp,sp,164
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned long long FPGAmessage[16];

	// load all of our structs in
	int i;
	for (i=0; i<16; i++)
10000be0:	e03fdc15 	stw	zero,-144(fp)
10000be4:	00002406 	br	10000c78 <FPGAcommunicator+0xac>
	{
		unsigned long long tempPackage = messagePackager(veggieObject[i]);
10000be8:	04040074 	movhi	r16,4097
10000bec:	84176804 	addi	r16,r16,23968
10000bf0:	e0bfdc17 	ldw	r2,-144(fp)
10000bf4:	1009883a 	mov	r4,r2
10000bf8:	01400904 	movi	r5,36
10000bfc:	00040ec0 	call	100040ec <__mulsi3>
10000c00:	8085883a 	add	r2,r16,r2
10000c04:	10c00417 	ldw	r3,16(r2)
10000c08:	d8c00015 	stw	r3,0(sp)
10000c0c:	10c00517 	ldw	r3,20(r2)
10000c10:	d8c00115 	stw	r3,4(sp)
10000c14:	10c00617 	ldw	r3,24(r2)
10000c18:	d8c00215 	stw	r3,8(sp)
10000c1c:	10c00717 	ldw	r3,28(r2)
10000c20:	d8c00315 	stw	r3,12(sp)
10000c24:	10c00817 	ldw	r3,32(r2)
10000c28:	d8c00415 	stw	r3,16(sp)
10000c2c:	11000017 	ldw	r4,0(r2)
10000c30:	11400117 	ldw	r5,4(r2)
10000c34:	11800217 	ldw	r6,8(r2)
10000c38:	11c00317 	ldw	r7,12(r2)
10000c3c:	0000dfc0 	call	10000dfc <messagePackager>
10000c40:	e0bfdd15 	stw	r2,-140(fp)
10000c44:	e03fde15 	stw	zero,-136(fp)
	//	printf("Our %dth message is %llu\n", i, tempPackage);

		FPGAmessage[i] = tempPackage;
10000c48:	e0bfdc17 	ldw	r2,-144(fp)
10000c4c:	100490fa 	slli	r2,r2,3
10000c50:	e0ffdc04 	addi	r3,fp,-144
10000c54:	1885883a 	add	r2,r3,r2
10000c58:	10800304 	addi	r2,r2,12
10000c5c:	e0ffdd17 	ldw	r3,-140(fp)
10000c60:	10c00015 	stw	r3,0(r2)
10000c64:	e0ffde17 	ldw	r3,-136(fp)
10000c68:	10c00115 	stw	r3,4(r2)
	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned long long FPGAmessage[16];

	// load all of our structs in
	int i;
	for (i=0; i<16; i++)
10000c6c:	e0bfdc17 	ldw	r2,-144(fp)
10000c70:	10800044 	addi	r2,r2,1
10000c74:	e0bfdc15 	stw	r2,-144(fp)
10000c78:	e0bfdc17 	ldw	r2,-144(fp)
10000c7c:	10800410 	cmplti	r2,r2,16
10000c80:	103fd91e 	bne	r2,zero,10000be8 <__alt_data_end+0xf8000be8>

		FPGAmessage[i] = tempPackage;
	}


	*to_hw_sig = 2;	// 2 means we're starting communication
10000c84:	00801c04 	movi	r2,112
10000c88:	00c00084 	movi	r3,2
10000c8c:	10c00005 	stb	r3,0(r2)

	// now we put in all our messages
	*to_hw_port0 = FPGAmessage[0];
10000c90:	01004004 	movi	r4,256
10000c94:	e0bfdf17 	ldw	r2,-132(fp)
10000c98:	e0ffe017 	ldw	r3,-128(fp)
10000c9c:	20800015 	stw	r2,0(r4)
	*to_hw_port1 = FPGAmessage[1];
10000ca0:	01003c04 	movi	r4,240
10000ca4:	e0bfe117 	ldw	r2,-124(fp)
10000ca8:	e0ffe217 	ldw	r3,-120(fp)
10000cac:	20800015 	stw	r2,0(r4)
	*to_hw_port2 = FPGAmessage[2];
10000cb0:	01003804 	movi	r4,224
10000cb4:	e0bfe317 	ldw	r2,-116(fp)
10000cb8:	e0ffe417 	ldw	r3,-112(fp)
10000cbc:	20800015 	stw	r2,0(r4)
	*to_hw_port3 = FPGAmessage[3];
10000cc0:	01003404 	movi	r4,208
10000cc4:	e0bfe517 	ldw	r2,-108(fp)
10000cc8:	e0ffe617 	ldw	r3,-104(fp)
10000ccc:	20800015 	stw	r2,0(r4)
	*to_hw_port4 = FPGAmessage[4];
10000cd0:	01003004 	movi	r4,192
10000cd4:	e0bfe717 	ldw	r2,-100(fp)
10000cd8:	e0ffe817 	ldw	r3,-96(fp)
10000cdc:	20800015 	stw	r2,0(r4)
	*to_hw_port5 = FPGAmessage[5];
10000ce0:	01002c04 	movi	r4,176
10000ce4:	e0bfe917 	ldw	r2,-92(fp)
10000ce8:	e0ffea17 	ldw	r3,-88(fp)
10000cec:	20800015 	stw	r2,0(r4)
	*to_hw_port6 = FPGAmessage[6];
10000cf0:	01002804 	movi	r4,160
10000cf4:	e0bfeb17 	ldw	r2,-84(fp)
10000cf8:	e0ffec17 	ldw	r3,-80(fp)
10000cfc:	20800015 	stw	r2,0(r4)
	*to_hw_port7 = FPGAmessage[7];
10000d00:	01001804 	movi	r4,96
10000d04:	e0bfed17 	ldw	r2,-76(fp)
10000d08:	e0ffee17 	ldw	r3,-72(fp)
10000d0c:	20800015 	stw	r2,0(r4)
	*to_hw_port8 = FPGAmessage[8];
10000d10:	01002404 	movi	r4,144
10000d14:	e0bfef17 	ldw	r2,-68(fp)
10000d18:	e0fff017 	ldw	r3,-64(fp)
10000d1c:	20800015 	stw	r2,0(r4)
	*to_hw_port9 = FPGAmessage[9];
10000d20:	01002004 	movi	r4,128
10000d24:	e0bff117 	ldw	r2,-60(fp)
10000d28:	e0fff217 	ldw	r3,-56(fp)
10000d2c:	20800015 	stw	r2,0(r4)
	*to_hw_port10 = FPGAmessage[10];
10000d30:	01001004 	movi	r4,64
10000d34:	e0bff317 	ldw	r2,-52(fp)
10000d38:	e0fff417 	ldw	r3,-48(fp)
10000d3c:	20800015 	stw	r2,0(r4)
	*to_hw_port11 = FPGAmessage[11];
10000d40:	01000c04 	movi	r4,48
10000d44:	e0bff517 	ldw	r2,-44(fp)
10000d48:	e0fff617 	ldw	r3,-40(fp)
10000d4c:	20800015 	stw	r2,0(r4)
	*to_hw_port12 = FPGAmessage[12];
10000d50:	01000804 	movi	r4,32
10000d54:	e0bff717 	ldw	r2,-36(fp)
10000d58:	e0fff817 	ldw	r3,-32(fp)
10000d5c:	20800015 	stw	r2,0(r4)
	*to_hw_port13 = FPGAmessage[13];
10000d60:	01005804 	movi	r4,352
10000d64:	e0bff917 	ldw	r2,-28(fp)
10000d68:	e0fffa17 	ldw	r3,-24(fp)
10000d6c:	20800015 	stw	r2,0(r4)
	*to_hw_port14 = FPGAmessage[14];
10000d70:	01005404 	movi	r4,336
10000d74:	e0bffb17 	ldw	r2,-20(fp)
10000d78:	e0fffc17 	ldw	r3,-16(fp)
10000d7c:	20800015 	stw	r2,0(r4)
	*to_hw_port15 = FPGAmessage[15];
10000d80:	01005004 	movi	r4,320
10000d84:	e0bffd17 	ldw	r2,-12(fp)
10000d88:	e0fffe17 	ldw	r3,-8(fp)
10000d8c:	20800015 	stw	r2,0(r4)
//	printf("FPGAmessage 11 is %llu \n", FPGAmessage[11]);

	while(*to_sw_sig != 2);	// wait for FPGA to wake up
10000d90:	0001883a 	nop
10000d94:	00801404 	movi	r2,80
10000d98:	10800003 	ldbu	r2,0(r2)
10000d9c:	10803fcc 	andi	r2,r2,255
10000da0:	1080201c 	xori	r2,r2,128
10000da4:	10bfe004 	addi	r2,r2,-128
10000da8:	10800098 	cmpnei	r2,r2,2
10000dac:	103ff91e 	bne	r2,zero,10000d94 <__alt_data_end+0xf8000d94>

	*to_hw_sig = 1;		// now we are done putting in messages
10000db0:	00801c04 	movi	r2,112
10000db4:	00c00044 	movi	r3,1
10000db8:	10c00005 	stb	r3,0(r2)

	while(*to_sw_sig != 0); // wait for response from hardware
10000dbc:	0001883a 	nop
10000dc0:	00801404 	movi	r2,80
10000dc4:	10800003 	ldbu	r2,0(r2)
10000dc8:	10803fcc 	andi	r2,r2,255
10000dcc:	1080201c 	xori	r2,r2,128
10000dd0:	10bfe004 	addi	r2,r2,-128
10000dd4:	103ffa1e 	bne	r2,zero,10000dc0 <__alt_data_end+0xf8000dc0>
	*to_hw_sig = 0;		// okay we're done now, going back to sleep
10000dd8:	00801c04 	movi	r2,112
10000ddc:	10000005 	stb	zero,0(r2)

//	printf("message stuff done\n");
	return;
10000de0:	0001883a 	nop
}
10000de4:	e6ffff04 	addi	sp,fp,-4
10000de8:	dfc00217 	ldw	ra,8(sp)
10000dec:	df000117 	ldw	fp,4(sp)
10000df0:	dc000017 	ldw	r16,0(sp)
10000df4:	dec00304 	addi	sp,sp,12
10000df8:	f800283a 	ret

10000dfc <messagePackager>:

// this function takes a single struct and converts it into a message we can send
unsigned long messagePackager(struct gameObject specifiedObject)
{
10000dfc:	deffe304 	addi	sp,sp,-116
10000e00:	dfc01815 	stw	ra,96(sp)
10000e04:	df001715 	stw	fp,92(sp)
10000e08:	dc401615 	stw	r17,88(sp)
10000e0c:	dc001515 	stw	r16,84(sp)
10000e10:	df001704 	addi	fp,sp,92
10000e14:	e1000215 	stw	r4,8(fp)
10000e18:	e1400315 	stw	r5,12(fp)
10000e1c:	e1800415 	stw	r6,16(fp)
10000e20:	e1c00515 	stw	r7,20(fp)
	int packageType;
	unsigned long long tempDecimal;
	unsigned long long tempBinary;

	// figure out how to package it
	packageType = specifiedObject.packageType;
10000e24:	e0800617 	ldw	r2,24(fp)
10000e28:	e0bfeb15 	stw	r2,-84(fp)

	if (packageType == 1)
10000e2c:	e0bfeb17 	ldw	r2,-84(fp)
10000e30:	10800058 	cmpnei	r2,r2,1
10000e34:	1000601e 	bne	r2,zero,10000fb8 <messagePackager+0x1bc>
	{
		// this means we are packaging our game package instead
		unsigned long long tempScore, tempTime, tempStart, tempEnd;

		// grab our stuff in conversion
		tempScore = specifiedObject.xPosition;
10000e38:	e0800217 	ldw	r2,8(fp)
10000e3c:	e0bfec15 	stw	r2,-80(fp)
10000e40:	1005d7fa 	srai	r2,r2,31
10000e44:	e0bfed15 	stw	r2,-76(fp)
		tempTime = specifiedObject.yPosition;
10000e48:	e0800317 	ldw	r2,12(fp)
10000e4c:	e0bfee15 	stw	r2,-72(fp)
10000e50:	1005d7fa 	srai	r2,r2,31
10000e54:	e0bfef15 	stw	r2,-68(fp)
		tempStart = specifiedObject.objectType;
10000e58:	e0800417 	ldw	r2,16(fp)
10000e5c:	e0bff015 	stw	r2,-64(fp)
10000e60:	1005d7fa 	srai	r2,r2,31
10000e64:	e0bff115 	stw	r2,-60(fp)
		tempEnd = specifiedObject.objectState;
10000e68:	e0800517 	ldw	r2,20(fp)
10000e6c:	e0bff215 	stw	r2,-56(fp)
10000e70:	1005d7fa 	srai	r2,r2,31
10000e74:	e0bff315 	stw	r2,-52(fp)

		// and convert it to binary!
		tempScore = convertDecimalToBinary(tempScore);
10000e78:	e0bfec17 	ldw	r2,-80(fp)
10000e7c:	1009883a 	mov	r4,r2
10000e80:	00013280 	call	10001328 <convertDecimalToBinary>
10000e84:	e0bfec15 	stw	r2,-80(fp)
10000e88:	e03fed15 	stw	zero,-76(fp)
		tempTime = convertDecimalToBinary(tempTime);
10000e8c:	e0bfee17 	ldw	r2,-72(fp)
10000e90:	1009883a 	mov	r4,r2
10000e94:	00013280 	call	10001328 <convertDecimalToBinary>
10000e98:	e0bfee15 	stw	r2,-72(fp)
10000e9c:	e03fef15 	stw	zero,-68(fp)
		tempStart = convertDecimalToBinary(tempStart);
10000ea0:	e0bff017 	ldw	r2,-64(fp)
10000ea4:	1009883a 	mov	r4,r2
10000ea8:	00013280 	call	10001328 <convertDecimalToBinary>
10000eac:	e0bff015 	stw	r2,-64(fp)
10000eb0:	e03ff115 	stw	zero,-60(fp)
		tempEnd = convertDecimalToBinary(tempEnd);
10000eb4:	e0bff217 	ldw	r2,-56(fp)
10000eb8:	1009883a 	mov	r4,r2
10000ebc:	00013280 	call	10001328 <convertDecimalToBinary>
10000ec0:	e0bff215 	stw	r2,-56(fp)
10000ec4:	e03ff315 	stw	zero,-52(fp)

		// and now we append everything together!			// TO DO HERE
		tempBinary = tempScore + tempTime*10000000 + tempStart*10000000*10000000 + tempEnd*1000*10000000*10000000;
10000ec8:	00802674 	movhi	r2,153
10000ecc:	10a5a004 	addi	r2,r2,-27008
10000ed0:	0007883a 	mov	r3,zero
10000ed4:	e13fee17 	ldw	r4,-72(fp)
10000ed8:	e17fef17 	ldw	r5,-68(fp)
10000edc:	100d883a 	mov	r6,r2
10000ee0:	180f883a 	mov	r7,r3
10000ee4:	00031e40 	call	100031e4 <__muldi3>
10000ee8:	1009883a 	mov	r4,r2
10000eec:	180b883a 	mov	r5,r3
10000ef0:	2021883a 	mov	r16,r4
10000ef4:	2823883a 	mov	r17,r5
10000ef8:	00841eb4 	movhi	r2,4218
10000efc:	10900004 	addi	r2,r2,16384
10000f00:	00d6bcc4 	movi	r3,23283
10000f04:	e13ff017 	ldw	r4,-64(fp)
10000f08:	e17ff117 	ldw	r5,-60(fp)
10000f0c:	100d883a 	mov	r6,r2
10000f10:	180f883a 	mov	r7,r3
10000f14:	00031e40 	call	100031e4 <__muldi3>
10000f18:	100d883a 	mov	r6,r2
10000f1c:	180f883a 	mov	r7,r3
10000f20:	3009883a 	mov	r4,r6
10000f24:	380b883a 	mov	r5,r7
10000f28:	8105883a 	add	r2,r16,r4
10000f2c:	140d803a 	cmpltu	r6,r2,r16
10000f30:	8947883a 	add	r3,r17,r5
10000f34:	30c9883a 	add	r4,r6,r3
10000f38:	2007883a 	mov	r3,r4
10000f3c:	100d883a 	mov	r6,r2
10000f40:	180f883a 	mov	r7,r3
10000f44:	e13fec17 	ldw	r4,-80(fp)
10000f48:	e17fed17 	ldw	r5,-76(fp)
10000f4c:	3105883a 	add	r2,r6,r4
10000f50:	1191803a 	cmpltu	r8,r2,r6
10000f54:	3947883a 	add	r3,r7,r5
10000f58:	40c9883a 	add	r4,r8,r3
10000f5c:	2007883a 	mov	r3,r4
10000f60:	1021883a 	mov	r16,r2
10000f64:	1823883a 	mov	r17,r3
10000f68:	009762b4 	movhi	r2,23946
10000f6c:	00c058f4 	movhi	r3,355
10000f70:	18d15e04 	addi	r3,r3,17784
10000f74:	e13ff217 	ldw	r4,-56(fp)
10000f78:	e17ff317 	ldw	r5,-52(fp)
10000f7c:	100d883a 	mov	r6,r2
10000f80:	180f883a 	mov	r7,r3
10000f84:	00031e40 	call	100031e4 <__muldi3>
10000f88:	100d883a 	mov	r6,r2
10000f8c:	180f883a 	mov	r7,r3
10000f90:	3009883a 	mov	r4,r6
10000f94:	380b883a 	mov	r5,r7
10000f98:	8105883a 	add	r2,r16,r4
10000f9c:	140d803a 	cmpltu	r6,r2,r16
10000fa0:	8947883a 	add	r3,r17,r5
10000fa4:	30c9883a 	add	r4,r6,r3
10000fa8:	2007883a 	mov	r3,r4
10000fac:	e0bfe915 	stw	r2,-92(fp)
10000fb0:	e0ffea15 	stw	r3,-88(fp)
10000fb4:	00008b06 	br	100011e4 <messagePackager+0x3e8>
	{
		// make our specific variables
		unsigned long long tempX, tempY, tempType, tempState;

		// grab our stuff from the struct
		tempX = specifiedObject.xPosition;
10000fb8:	e0800217 	ldw	r2,8(fp)
10000fbc:	e0bff415 	stw	r2,-48(fp)
10000fc0:	1005d7fa 	srai	r2,r2,31
10000fc4:	e0bff515 	stw	r2,-44(fp)
		tempY = specifiedObject.yPosition;
10000fc8:	e0800317 	ldw	r2,12(fp)
10000fcc:	e0bff615 	stw	r2,-40(fp)
10000fd0:	1005d7fa 	srai	r2,r2,31
10000fd4:	e0bff715 	stw	r2,-36(fp)
		tempType = specifiedObject.objectType;
10000fd8:	e0800417 	ldw	r2,16(fp)
10000fdc:	e0bff815 	stw	r2,-32(fp)
10000fe0:	1005d7fa 	srai	r2,r2,31
10000fe4:	e0bff915 	stw	r2,-28(fp)
		tempState = specifiedObject.objectState;
10000fe8:	e0800517 	ldw	r2,20(fp)
10000fec:	e0bffa15 	stw	r2,-24(fp)
10000ff0:	1005d7fa 	srai	r2,r2,31
10000ff4:	e0bffb15 	stw	r2,-20(fp)

		// take X and Y and divide them by 5 to fit in our message
		tempX = tempX/5 - 1;
10000ff8:	e0bff417 	ldw	r2,-48(fp)
10000ffc:	e0fff517 	ldw	r3,-44(fp)
10001000:	01c00144 	movi	r7,5
10001004:	0011883a 	mov	r8,zero
10001008:	1009883a 	mov	r4,r2
1000100c:	180b883a 	mov	r5,r3
10001010:	380d883a 	mov	r6,r7
10001014:	400f883a 	mov	r7,r8
10001018:	00033640 	call	10003364 <__udivdi3>
1000101c:	1009883a 	mov	r4,r2
10001020:	180b883a 	mov	r5,r3
10001024:	200d883a 	mov	r6,r4
10001028:	280f883a 	mov	r7,r5
1000102c:	013fffc4 	movi	r4,-1
10001030:	017fffc4 	movi	r5,-1
10001034:	3105883a 	add	r2,r6,r4
10001038:	1191803a 	cmpltu	r8,r2,r6
1000103c:	3947883a 	add	r3,r7,r5
10001040:	40c9883a 	add	r4,r8,r3
10001044:	2007883a 	mov	r3,r4
10001048:	e0bff415 	stw	r2,-48(fp)
1000104c:	e0fff515 	stw	r3,-44(fp)
		tempY = tempY/5 - 1;
10001050:	e0bff617 	ldw	r2,-40(fp)
10001054:	e0fff717 	ldw	r3,-36(fp)
10001058:	01c00144 	movi	r7,5
1000105c:	0011883a 	mov	r8,zero
10001060:	1009883a 	mov	r4,r2
10001064:	180b883a 	mov	r5,r3
10001068:	380d883a 	mov	r6,r7
1000106c:	400f883a 	mov	r7,r8
10001070:	00033640 	call	10003364 <__udivdi3>
10001074:	1009883a 	mov	r4,r2
10001078:	180b883a 	mov	r5,r3
1000107c:	200d883a 	mov	r6,r4
10001080:	280f883a 	mov	r7,r5
10001084:	013fffc4 	movi	r4,-1
10001088:	017fffc4 	movi	r5,-1
1000108c:	3105883a 	add	r2,r6,r4
10001090:	1191803a 	cmpltu	r8,r2,r6
10001094:	3947883a 	add	r3,r7,r5
10001098:	40c9883a 	add	r4,r8,r3
1000109c:	2007883a 	mov	r3,r4
100010a0:	e0bff615 	stw	r2,-40(fp)
100010a4:	e0fff715 	stw	r3,-36(fp)

		// and convert stuff to binary!
		tempX = convertDecimalToBinary(tempX);
100010a8:	e0bff417 	ldw	r2,-48(fp)
100010ac:	1009883a 	mov	r4,r2
100010b0:	00013280 	call	10001328 <convertDecimalToBinary>
100010b4:	e0bff415 	stw	r2,-48(fp)
100010b8:	e03ff515 	stw	zero,-44(fp)
		tempY = convertDecimalToBinary(tempY);
100010bc:	e0bff617 	ldw	r2,-40(fp)
100010c0:	1009883a 	mov	r4,r2
100010c4:	00013280 	call	10001328 <convertDecimalToBinary>
100010c8:	e0bff615 	stw	r2,-40(fp)
100010cc:	e03ff715 	stw	zero,-36(fp)
		tempType = convertDecimalToBinary(tempType);
100010d0:	e0bff817 	ldw	r2,-32(fp)
100010d4:	1009883a 	mov	r4,r2
100010d8:	00013280 	call	10001328 <convertDecimalToBinary>
100010dc:	e0bff815 	stw	r2,-32(fp)
100010e0:	e03ff915 	stw	zero,-28(fp)
		tempState = convertDecimalToBinary(tempState);
100010e4:	e0bffa17 	ldw	r2,-24(fp)
100010e8:	1009883a 	mov	r4,r2
100010ec:	00013280 	call	10001328 <convertDecimalToBinary>
100010f0:	e0bffa15 	stw	r2,-24(fp)
100010f4:	e03ffb15 	stw	zero,-20(fp)
		printf("tempType: %llu   ", tempType);
		printf("tempState: %llu   ", tempState);
*/

		// now we append everything together!
		tempBinary = tempX + tempY*10000000 + tempType*100000000000000 + tempState*100000000000000000;
100010f8:	00802674 	movhi	r2,153
100010fc:	10a5a004 	addi	r2,r2,-27008
10001100:	0007883a 	mov	r3,zero
10001104:	e13ff617 	ldw	r4,-40(fp)
10001108:	e17ff717 	ldw	r5,-36(fp)
1000110c:	100d883a 	mov	r6,r2
10001110:	180f883a 	mov	r7,r3
10001114:	00031e40 	call	100031e4 <__muldi3>
10001118:	1009883a 	mov	r4,r2
1000111c:	180b883a 	mov	r5,r3
10001120:	2021883a 	mov	r16,r4
10001124:	2823883a 	mov	r17,r5
10001128:	00841eb4 	movhi	r2,4218
1000112c:	10900004 	addi	r2,r2,16384
10001130:	00d6bcc4 	movi	r3,23283
10001134:	e13ff817 	ldw	r4,-32(fp)
10001138:	e17ff917 	ldw	r5,-28(fp)
1000113c:	100d883a 	mov	r6,r2
10001140:	180f883a 	mov	r7,r3
10001144:	00031e40 	call	100031e4 <__muldi3>
10001148:	100d883a 	mov	r6,r2
1000114c:	180f883a 	mov	r7,r3
10001150:	3009883a 	mov	r4,r6
10001154:	380b883a 	mov	r5,r7
10001158:	8105883a 	add	r2,r16,r4
1000115c:	140d803a 	cmpltu	r6,r2,r16
10001160:	8947883a 	add	r3,r17,r5
10001164:	30c9883a 	add	r4,r6,r3
10001168:	2007883a 	mov	r3,r4
1000116c:	100d883a 	mov	r6,r2
10001170:	180f883a 	mov	r7,r3
10001174:	e13ff417 	ldw	r4,-48(fp)
10001178:	e17ff517 	ldw	r5,-44(fp)
1000117c:	3105883a 	add	r2,r6,r4
10001180:	1191803a 	cmpltu	r8,r2,r6
10001184:	3947883a 	add	r3,r7,r5
10001188:	40c9883a 	add	r4,r8,r3
1000118c:	2007883a 	mov	r3,r4
10001190:	1021883a 	mov	r16,r2
10001194:	1823883a 	mov	r17,r3
10001198:	009762b4 	movhi	r2,23946
1000119c:	00c058f4 	movhi	r3,355
100011a0:	18d15e04 	addi	r3,r3,17784
100011a4:	e13ffa17 	ldw	r4,-24(fp)
100011a8:	e17ffb17 	ldw	r5,-20(fp)
100011ac:	100d883a 	mov	r6,r2
100011b0:	180f883a 	mov	r7,r3
100011b4:	00031e40 	call	100031e4 <__muldi3>
100011b8:	100d883a 	mov	r6,r2
100011bc:	180f883a 	mov	r7,r3
100011c0:	3009883a 	mov	r4,r6
100011c4:	380b883a 	mov	r5,r7
100011c8:	8105883a 	add	r2,r16,r4
100011cc:	140d803a 	cmpltu	r6,r2,r16
100011d0:	8947883a 	add	r3,r17,r5
100011d4:	30c9883a 	add	r4,r6,r3
100011d8:	2007883a 	mov	r3,r4
100011dc:	e0bfe915 	stw	r2,-92(fp)
100011e0:	e0ffea15 	stw	r3,-88(fp)
		//	printf("tempBinary: %llu   ", tempBinary);
	}
	// and convert it back to decimal!
	tempDecimal = convertBinaryToDecimal(tempBinary);
100011e4:	e13fe917 	ldw	r4,-92(fp)
100011e8:	e17fea17 	ldw	r5,-88(fp)
100011ec:	00013e40 	call	100013e4 <convertBinaryToDecimal>
100011f0:	e0bffc15 	stw	r2,-16(fp)
100011f4:	e03ffd15 	stw	zero,-12(fp)

	// and return it!
	return tempDecimal;
100011f8:	e0bffc17 	ldw	r2,-16(fp)
}
100011fc:	e6fffe04 	addi	sp,fp,-8
10001200:	dfc00317 	ldw	ra,12(sp)
10001204:	df000217 	ldw	fp,8(sp)
10001208:	dc400117 	ldw	r17,4(sp)
1000120c:	dc000017 	ldw	r16,0(sp)
10001210:	dec00804 	addi	sp,sp,32
10001214:	f800283a 	ret

10001218 <port2Unpackager>:

// this function unpacks to software port 2 into its 5 different signals
void port2Unpackager()
{
10001218:	defff704 	addi	sp,sp,-36
1000121c:	dfc00815 	stw	ra,32(sp)
10001220:	df000715 	stw	fp,28(sp)
10001224:	df000704 	addi	fp,sp,28
	// read it in and convert to binary
	unsigned long port2 = *to_sw_port2;
10001228:	00804404 	movi	r2,272
1000122c:	10800003 	ldbu	r2,0(r2)
10001230:	10803fcc 	andi	r2,r2,255
10001234:	1080201c 	xori	r2,r2,128
10001238:	10bfe004 	addi	r2,r2,-128
1000123c:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);
10001240:	e13ff917 	ldw	r4,-28(fp)
10001244:	00013280 	call	10001328 <convertDecimalToBinary>
10001248:	e0bff915 	stw	r2,-28(fp)

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
1000124c:	e03ffa15 	stw	zero,-24(fp)
10001250:	00001406 	br	100012a4 <port2Unpackager+0x8c>
	{
		unpackaged[i] = port2 % 10;
10001254:	e0bff917 	ldw	r2,-28(fp)
10001258:	1009883a 	mov	r4,r2
1000125c:	01400284 	movi	r5,10
10001260:	00040e40 	call	100040e4 <__umodsi3>
10001264:	1007883a 	mov	r3,r2
10001268:	e0bffa17 	ldw	r2,-24(fp)
1000126c:	1085883a 	add	r2,r2,r2
10001270:	1085883a 	add	r2,r2,r2
10001274:	e13ff904 	addi	r4,fp,-28
10001278:	2085883a 	add	r2,r4,r2
1000127c:	10800204 	addi	r2,r2,8
10001280:	10c00015 	stw	r3,0(r2)

		port2 /= 10;
10001284:	e0bff917 	ldw	r2,-28(fp)
10001288:	1009883a 	mov	r4,r2
1000128c:	01400284 	movi	r5,10
10001290:	00040dc0 	call	100040dc <__udivsi3>
10001294:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
10001298:	e0bffa17 	ldw	r2,-24(fp)
1000129c:	10800044 	addi	r2,r2,1
100012a0:	e0bffa15 	stw	r2,-24(fp)
100012a4:	e0bffa17 	ldw	r2,-24(fp)
100012a8:	10800150 	cmplti	r2,r2,5
100012ac:	103fe91e 	bne	r2,zero,10001254 <__alt_data_end+0xf8001254>

		port2 /= 10;
	}

	// now let's assign out all the statements
	key1 = unpackaged[2];
100012b0:	e0bffd17 	ldw	r2,-12(fp)
100012b4:	d0a6d115 	stw	r2,-25788(gp)
	key2 = unpackaged[3];
100012b8:	e0bffe17 	ldw	r2,-8(fp)
100012bc:	d0a6d315 	stw	r2,-25780(gp)
	key3 = unpackaged[4];
100012c0:	e0bfff17 	ldw	r2,-4(fp)
100012c4:	d0a6d215 	stw	r2,-25784(gp)
	cursorStreak = unpackaged[1];
100012c8:	e0bffc17 	ldw	r2,-16(fp)
100012cc:	d0a6d015 	stw	r2,-25792(gp)
	cursorClicked = unpackaged[0];
100012d0:	e0bffb17 	ldw	r2,-20(fp)
100012d4:	d0a6cf15 	stw	r2,-25796(gp)

	if(key1)
100012d8:	d0a6d117 	ldw	r2,-25788(gp)
100012dc:	10000326 	beq	r2,zero,100012ec <port2Unpackager+0xd4>
	{
		printf("key1 pressed!");
100012e0:	01040074 	movhi	r4,4097
100012e4:	2108f504 	addi	r4,r4,9172
100012e8:	000694c0 	call	1000694c <printf>
	}
	if(key2)
100012ec:	d0a6d317 	ldw	r2,-25780(gp)
100012f0:	10000326 	beq	r2,zero,10001300 <port2Unpackager+0xe8>
	{
		printf("key2 pressed!");
100012f4:	01040074 	movhi	r4,4097
100012f8:	2108f904 	addi	r4,r4,9188
100012fc:	000694c0 	call	1000694c <printf>
	}
	if(key3)
10001300:	d0a6d217 	ldw	r2,-25784(gp)
10001304:	10000326 	beq	r2,zero,10001314 <port2Unpackager+0xfc>
	{
		printf("key3 pressed!");
10001308:	01040074 	movhi	r4,4097
1000130c:	2108fd04 	addi	r4,r4,9204
10001310:	000694c0 	call	1000694c <printf>
	}


}
10001314:	e037883a 	mov	sp,fp
10001318:	dfc00117 	ldw	ra,4(sp)
1000131c:	df000017 	ldw	fp,0(sp)
10001320:	dec00204 	addi	sp,sp,8
10001324:	f800283a 	ret

10001328 <convertDecimalToBinary>:

// converts decimal to binary
unsigned long convertDecimalToBinary(unsigned long n)
{
10001328:	defff704 	addi	sp,sp,-36
1000132c:	dfc00815 	stw	ra,32(sp)
10001330:	df000715 	stw	fp,28(sp)
10001334:	dc400615 	stw	r17,24(sp)
10001338:	dc000515 	stw	r16,20(sp)
1000133c:	df000704 	addi	fp,sp,28
10001340:	e13ffd15 	stw	r4,-12(fp)
  // printf("decimal input: %lu   ", n);
    unsigned long long binaryNumber = 0;
10001344:	e03ff915 	stw	zero,-28(fp)
10001348:	e03ffa15 	stw	zero,-24(fp)
    int remainder, i = 1;
1000134c:	00800044 	movi	r2,1
10001350:	e0bffb15 	stw	r2,-20(fp)

    while (n!=0)
10001354:	00001906 	br	100013bc <convertDecimalToBinary+0x94>
    {
        remainder = n%2;
10001358:	e0bffd17 	ldw	r2,-12(fp)
1000135c:	1080004c 	andi	r2,r2,1
10001360:	e0bffc15 	stw	r2,-16(fp)
        n /= 2;
10001364:	e0bffd17 	ldw	r2,-12(fp)
10001368:	1004d07a 	srli	r2,r2,1
1000136c:	e0bffd15 	stw	r2,-12(fp)
        binaryNumber += remainder*i;
10001370:	e13ffc17 	ldw	r4,-16(fp)
10001374:	e17ffb17 	ldw	r5,-20(fp)
10001378:	00040ec0 	call	100040ec <__mulsi3>
1000137c:	1021883a 	mov	r16,r2
10001380:	1005d7fa 	srai	r2,r2,31
10001384:	1023883a 	mov	r17,r2
10001388:	e13ff917 	ldw	r4,-28(fp)
1000138c:	e17ffa17 	ldw	r5,-24(fp)
10001390:	2405883a 	add	r2,r4,r16
10001394:	110d803a 	cmpltu	r6,r2,r4
10001398:	2c47883a 	add	r3,r5,r17
1000139c:	30c9883a 	add	r4,r6,r3
100013a0:	2007883a 	mov	r3,r4
100013a4:	e0bff915 	stw	r2,-28(fp)
100013a8:	e0fffa15 	stw	r3,-24(fp)
        i *= 10;
100013ac:	e13ffb17 	ldw	r4,-20(fp)
100013b0:	01400284 	movi	r5,10
100013b4:	00040ec0 	call	100040ec <__mulsi3>
100013b8:	e0bffb15 	stw	r2,-20(fp)
{
  // printf("decimal input: %lu   ", n);
    unsigned long long binaryNumber = 0;
    int remainder, i = 1;

    while (n!=0)
100013bc:	e0bffd17 	ldw	r2,-12(fp)
100013c0:	103fe51e 	bne	r2,zero,10001358 <__alt_data_end+0xf8001358>
        n /= 2;
        binaryNumber += remainder*i;
        i *= 10;
    }
  //  printf("binary ouput: %llu \n", binaryNumber);
    return binaryNumber;
100013c4:	e0bff917 	ldw	r2,-28(fp)
}
100013c8:	e6fffe04 	addi	sp,fp,-8
100013cc:	dfc00317 	ldw	ra,12(sp)
100013d0:	df000217 	ldw	fp,8(sp)
100013d4:	dc400117 	ldw	r17,4(sp)
100013d8:	dc000017 	ldw	r16,0(sp)
100013dc:	dec00404 	addi	sp,sp,16
100013e0:	f800283a 	ret

100013e4 <convertBinaryToDecimal>:

// converts binary to decimal!
unsigned long convertBinaryToDecimal(unsigned long long n)
{
100013e4:	defff704 	addi	sp,sp,-36
100013e8:	dfc00815 	stw	ra,32(sp)
100013ec:	df000715 	stw	fp,28(sp)
100013f0:	dc400615 	stw	r17,24(sp)
100013f4:	dc000515 	stw	r16,20(sp)
100013f8:	df000704 	addi	fp,sp,28
100013fc:	e13ffc15 	stw	r4,-16(fp)
10001400:	e17ffd15 	stw	r5,-12(fp)
 //	printf("binary input: %llu   ", n);
    unsigned long decimalNumber = 0, i = 0, remainder;
10001404:	e03ff915 	stw	zero,-28(fp)
10001408:	e03ffa15 	stw	zero,-24(fp)
    while (n!=0)
1000140c:	00004706 	br	1000152c <convertBinaryToDecimal+0x148>
    {
        remainder = n%10;
10001410:	e0bffc17 	ldw	r2,-16(fp)
10001414:	e0fffd17 	ldw	r3,-12(fp)
10001418:	01c00284 	movi	r7,10
1000141c:	0011883a 	mov	r8,zero
10001420:	1009883a 	mov	r4,r2
10001424:	180b883a 	mov	r5,r3
10001428:	380d883a 	mov	r6,r7
1000142c:	400f883a 	mov	r7,r8
10001430:	00039a40 	call	100039a4 <__umoddi3>
10001434:	1009883a 	mov	r4,r2
10001438:	180b883a 	mov	r5,r3
1000143c:	2005883a 	mov	r2,r4
10001440:	2807883a 	mov	r3,r5
10001444:	e0bffb15 	stw	r2,-20(fp)
        n /= 10;
10001448:	e0bffc17 	ldw	r2,-16(fp)
1000144c:	e0fffd17 	ldw	r3,-12(fp)
10001450:	01c00284 	movi	r7,10
10001454:	0011883a 	mov	r8,zero
10001458:	1009883a 	mov	r4,r2
1000145c:	180b883a 	mov	r5,r3
10001460:	380d883a 	mov	r6,r7
10001464:	400f883a 	mov	r7,r8
10001468:	00033640 	call	10003364 <__udivdi3>
1000146c:	1009883a 	mov	r4,r2
10001470:	180b883a 	mov	r5,r3
10001474:	e13ffc15 	stw	r4,-16(fp)
10001478:	e17ffd15 	stw	r5,-12(fp)
        decimalNumber += remainder*pow(2,i);
1000147c:	e13ffb17 	ldw	r4,-20(fp)
10001480:	00068080 	call	10006808 <__floatunsidf>
10001484:	1021883a 	mov	r16,r2
10001488:	1823883a 	mov	r17,r3
1000148c:	e13ffa17 	ldw	r4,-24(fp)
10001490:	00068080 	call	10006808 <__floatunsidf>
10001494:	100f883a 	mov	r7,r2
10001498:	1811883a 	mov	r8,r3
1000149c:	0009883a 	mov	r4,zero
100014a0:	01500034 	movhi	r5,16384
100014a4:	380d883a 	mov	r6,r7
100014a8:	400f883a 	mov	r7,r8
100014ac:	000155c0 	call	1000155c <pow>
100014b0:	100f883a 	mov	r7,r2
100014b4:	1811883a 	mov	r8,r3
100014b8:	8009883a 	mov	r4,r16
100014bc:	880b883a 	mov	r5,r17
100014c0:	380d883a 	mov	r6,r7
100014c4:	400f883a 	mov	r7,r8
100014c8:	00055740 	call	10005574 <__muldf3>
100014cc:	1009883a 	mov	r4,r2
100014d0:	180b883a 	mov	r5,r3
100014d4:	2021883a 	mov	r16,r4
100014d8:	2823883a 	mov	r17,r5
100014dc:	e13ff917 	ldw	r4,-28(fp)
100014e0:	00068080 	call	10006808 <__floatunsidf>
100014e4:	100b883a 	mov	r5,r2
100014e8:	180d883a 	mov	r6,r3
100014ec:	2809883a 	mov	r4,r5
100014f0:	300b883a 	mov	r5,r6
100014f4:	800d883a 	mov	r6,r16
100014f8:	880f883a 	mov	r7,r17
100014fc:	00041140 	call	10004114 <__adddf3>
10001500:	1009883a 	mov	r4,r2
10001504:	180b883a 	mov	r5,r3
10001508:	2005883a 	mov	r2,r4
1000150c:	2807883a 	mov	r3,r5
10001510:	1009883a 	mov	r4,r2
10001514:	180b883a 	mov	r5,r3
10001518:	00032f00 	call	100032f0 <__fixunsdfsi>
1000151c:	e0bff915 	stw	r2,-28(fp)
        ++i;
10001520:	e0bffa17 	ldw	r2,-24(fp)
10001524:	10800044 	addi	r2,r2,1
10001528:	e0bffa15 	stw	r2,-24(fp)
// converts binary to decimal!
unsigned long convertBinaryToDecimal(unsigned long long n)
{
 //	printf("binary input: %llu   ", n);
    unsigned long decimalNumber = 0, i = 0, remainder;
    while (n!=0)
1000152c:	e0bffc17 	ldw	r2,-16(fp)
10001530:	e0fffd17 	ldw	r3,-12(fp)
10001534:	10c4b03a 	or	r2,r2,r3
10001538:	103fb51e 	bne	r2,zero,10001410 <__alt_data_end+0xf8001410>
        n /= 10;
        decimalNumber += remainder*pow(2,i);
        ++i;
    }
  //  printf("decimal output: %lu\n", decimalNumber);
    return decimalNumber;
1000153c:	e0bff917 	ldw	r2,-28(fp)
}
10001540:	e6fffe04 	addi	sp,fp,-8
10001544:	dfc00317 	ldw	ra,12(sp)
10001548:	df000217 	ldw	fp,8(sp)
1000154c:	dc400117 	ldw	r17,4(sp)
10001550:	dc000017 	ldw	r16,0(sp)
10001554:	dec00404 	addi	sp,sp,16
10001558:	f800283a 	ret

1000155c <pow>:
1000155c:	deffee04 	addi	sp,sp,-72
10001560:	dc800b15 	stw	r18,44(sp)
10001564:	04840074 	movhi	r18,4097
10001568:	ddc01015 	stw	r23,64(sp)
1000156c:	dd800f15 	stw	r22,60(sp)
10001570:	dd400e15 	stw	r21,56(sp)
10001574:	dd000d15 	stw	r20,52(sp)
10001578:	dcc00c15 	stw	r19,48(sp)
1000157c:	dc400a15 	stw	r17,40(sp)
10001580:	dc000915 	stw	r16,36(sp)
10001584:	dfc01115 	stw	ra,68(sp)
10001588:	94907c04 	addi	r18,r18,16880
1000158c:	202f883a 	mov	r23,r4
10001590:	282d883a 	mov	r22,r5
10001594:	302b883a 	mov	r21,r6
10001598:	3829883a 	mov	r20,r7
1000159c:	0001a000 	call	10001a00 <__ieee754_pow>
100015a0:	1023883a 	mov	r17,r2
100015a4:	90800017 	ldw	r2,0(r18)
100015a8:	04ffffc4 	movi	r19,-1
100015ac:	1821883a 	mov	r16,r3
100015b0:	14c00426 	beq	r2,r19,100015c4 <pow+0x68>
100015b4:	a809883a 	mov	r4,r21
100015b8:	a00b883a 	mov	r5,r20
100015bc:	0002d900 	call	10002d90 <__fpclassifyd>
100015c0:	10000d1e 	bne	r2,zero,100015f8 <pow+0x9c>
100015c4:	8805883a 	mov	r2,r17
100015c8:	8007883a 	mov	r3,r16
100015cc:	dfc01117 	ldw	ra,68(sp)
100015d0:	ddc01017 	ldw	r23,64(sp)
100015d4:	dd800f17 	ldw	r22,60(sp)
100015d8:	dd400e17 	ldw	r21,56(sp)
100015dc:	dd000d17 	ldw	r20,52(sp)
100015e0:	dcc00c17 	ldw	r19,48(sp)
100015e4:	dc800b17 	ldw	r18,44(sp)
100015e8:	dc400a17 	ldw	r17,40(sp)
100015ec:	dc000917 	ldw	r16,36(sp)
100015f0:	dec01204 	addi	sp,sp,72
100015f4:	f800283a 	ret
100015f8:	b809883a 	mov	r4,r23
100015fc:	b00b883a 	mov	r5,r22
10001600:	0002d900 	call	10002d90 <__fpclassifyd>
10001604:	1000221e 	bne	r2,zero,10001690 <pow+0x134>
10001608:	a809883a 	mov	r4,r21
1000160c:	a00b883a 	mov	r5,r20
10001610:	000d883a 	mov	r6,zero
10001614:	000f883a 	mov	r7,zero
10001618:	00053300 	call	10005330 <__eqdf2>
1000161c:	103fe91e 	bne	r2,zero,100015c4 <__alt_data_end+0xf80015c4>
10001620:	00c00044 	movi	r3,1
10001624:	d8c00015 	stw	r3,0(sp)
10001628:	00c40074 	movhi	r3,4097
1000162c:	18c90104 	addi	r3,r3,9220
10001630:	90800017 	ldw	r2,0(r18)
10001634:	d8c00115 	stw	r3,4(sp)
10001638:	00cffc34 	movhi	r3,16368
1000163c:	d8000815 	stw	zero,32(sp)
10001640:	ddc00215 	stw	r23,8(sp)
10001644:	dd800315 	stw	r22,12(sp)
10001648:	dd400415 	stw	r21,16(sp)
1000164c:	dd000515 	stw	r20,20(sp)
10001650:	d8000615 	stw	zero,24(sp)
10001654:	d8c00715 	stw	r3,28(sp)
10001658:	14c00a26 	beq	r2,r19,10001684 <pow+0x128>
1000165c:	00c00084 	movi	r3,2
10001660:	10c00826 	beq	r2,r3,10001684 <pow+0x128>
10001664:	d809883a 	mov	r4,sp
10001668:	0002e040 	call	10002e04 <matherr>
1000166c:	10006b26 	beq	r2,zero,1000181c <pow+0x2c0>
10001670:	d8800817 	ldw	r2,32(sp)
10001674:	10000326 	beq	r2,zero,10001684 <pow+0x128>
10001678:	00069100 	call	10006910 <__errno>
1000167c:	d8c00817 	ldw	r3,32(sp)
10001680:	10c00015 	stw	r3,0(r2)
10001684:	d8800617 	ldw	r2,24(sp)
10001688:	d8c00717 	ldw	r3,28(sp)
1000168c:	003fcf06 	br	100015cc <__alt_data_end+0xf80015cc>
10001690:	b809883a 	mov	r4,r23
10001694:	b00b883a 	mov	r5,r22
10001698:	000d883a 	mov	r6,zero
1000169c:	000f883a 	mov	r7,zero
100016a0:	00053300 	call	10005330 <__eqdf2>
100016a4:	1000171e 	bne	r2,zero,10001704 <pow+0x1a8>
100016a8:	a809883a 	mov	r4,r21
100016ac:	a00b883a 	mov	r5,r20
100016b0:	000d883a 	mov	r6,zero
100016b4:	000f883a 	mov	r7,zero
100016b8:	00053300 	call	10005330 <__eqdf2>
100016bc:	1000381e 	bne	r2,zero,100017a0 <pow+0x244>
100016c0:	00c00044 	movi	r3,1
100016c4:	d8c00015 	stw	r3,0(sp)
100016c8:	90800017 	ldw	r2,0(r18)
100016cc:	00c40074 	movhi	r3,4097
100016d0:	18c90104 	addi	r3,r3,9220
100016d4:	d8c00115 	stw	r3,4(sp)
100016d8:	d8000815 	stw	zero,32(sp)
100016dc:	ddc00215 	stw	r23,8(sp)
100016e0:	dd800315 	stw	r22,12(sp)
100016e4:	dd400415 	stw	r21,16(sp)
100016e8:	dd000515 	stw	r20,20(sp)
100016ec:	d8000615 	stw	zero,24(sp)
100016f0:	d8000715 	stw	zero,28(sp)
100016f4:	103fdb26 	beq	r2,zero,10001664 <__alt_data_end+0xf8001664>
100016f8:	008ffc34 	movhi	r2,16368
100016fc:	d8800715 	stw	r2,28(sp)
10001700:	003fe006 	br	10001684 <__alt_data_end+0xf8001684>
10001704:	8809883a 	mov	r4,r17
10001708:	800b883a 	mov	r5,r16
1000170c:	0002d740 	call	10002d74 <finite>
10001710:	10004626 	beq	r2,zero,1000182c <pow+0x2d0>
10001714:	8809883a 	mov	r4,r17
10001718:	800b883a 	mov	r5,r16
1000171c:	000d883a 	mov	r6,zero
10001720:	000f883a 	mov	r7,zero
10001724:	00053300 	call	10005330 <__eqdf2>
10001728:	103fa61e 	bne	r2,zero,100015c4 <__alt_data_end+0xf80015c4>
1000172c:	b809883a 	mov	r4,r23
10001730:	b00b883a 	mov	r5,r22
10001734:	0002d740 	call	10002d74 <finite>
10001738:	103fa226 	beq	r2,zero,100015c4 <__alt_data_end+0xf80015c4>
1000173c:	a809883a 	mov	r4,r21
10001740:	a00b883a 	mov	r5,r20
10001744:	0002d740 	call	10002d74 <finite>
10001748:	103f9e26 	beq	r2,zero,100015c4 <__alt_data_end+0xf80015c4>
1000174c:	00800104 	movi	r2,4
10001750:	d8800015 	stw	r2,0(sp)
10001754:	90c00017 	ldw	r3,0(r18)
10001758:	00840074 	movhi	r2,4097
1000175c:	10890104 	addi	r2,r2,9220
10001760:	d8800115 	stw	r2,4(sp)
10001764:	d8000815 	stw	zero,32(sp)
10001768:	ddc00215 	stw	r23,8(sp)
1000176c:	dd800315 	stw	r22,12(sp)
10001770:	dd400415 	stw	r21,16(sp)
10001774:	dd000515 	stw	r20,20(sp)
10001778:	d8000615 	stw	zero,24(sp)
1000177c:	d8000715 	stw	zero,28(sp)
10001780:	00800084 	movi	r2,2
10001784:	18806126 	beq	r3,r2,1000190c <pow+0x3b0>
10001788:	d809883a 	mov	r4,sp
1000178c:	0002e040 	call	10002e04 <matherr>
10001790:	10005e26 	beq	r2,zero,1000190c <pow+0x3b0>
10001794:	d8800817 	ldw	r2,32(sp)
10001798:	103fba26 	beq	r2,zero,10001684 <__alt_data_end+0xf8001684>
1000179c:	003fb606 	br	10001678 <__alt_data_end+0xf8001678>
100017a0:	a809883a 	mov	r4,r21
100017a4:	a00b883a 	mov	r5,r20
100017a8:	0002d740 	call	10002d74 <finite>
100017ac:	103f8526 	beq	r2,zero,100015c4 <__alt_data_end+0xf80015c4>
100017b0:	a809883a 	mov	r4,r21
100017b4:	a00b883a 	mov	r5,r20
100017b8:	000d883a 	mov	r6,zero
100017bc:	000f883a 	mov	r7,zero
100017c0:	00054940 	call	10005494 <__ledf2>
100017c4:	103f7f0e 	bge	r2,zero,100015c4 <__alt_data_end+0xf80015c4>
100017c8:	00c00044 	movi	r3,1
100017cc:	d8c00015 	stw	r3,0(sp)
100017d0:	90800017 	ldw	r2,0(r18)
100017d4:	00c40074 	movhi	r3,4097
100017d8:	18c90104 	addi	r3,r3,9220
100017dc:	d8c00115 	stw	r3,4(sp)
100017e0:	d8000815 	stw	zero,32(sp)
100017e4:	ddc00215 	stw	r23,8(sp)
100017e8:	dd800315 	stw	r22,12(sp)
100017ec:	dd400415 	stw	r21,16(sp)
100017f0:	dd000515 	stw	r20,20(sp)
100017f4:	d8000615 	stw	zero,24(sp)
100017f8:	10002526 	beq	r2,zero,10001890 <pow+0x334>
100017fc:	00fffc34 	movhi	r3,65520
10001800:	d8c00715 	stw	r3,28(sp)
10001804:	00c00084 	movi	r3,2
10001808:	10c0221e 	bne	r2,r3,10001894 <pow+0x338>
1000180c:	00069100 	call	10006910 <__errno>
10001810:	00c00844 	movi	r3,33
10001814:	10c00015 	stw	r3,0(r2)
10001818:	003fde06 	br	10001794 <__alt_data_end+0xf8001794>
1000181c:	00069100 	call	10006910 <__errno>
10001820:	00c00844 	movi	r3,33
10001824:	10c00015 	stw	r3,0(r2)
10001828:	003f9106 	br	10001670 <__alt_data_end+0xf8001670>
1000182c:	b809883a 	mov	r4,r23
10001830:	b00b883a 	mov	r5,r22
10001834:	0002d740 	call	10002d74 <finite>
10001838:	103fb626 	beq	r2,zero,10001714 <__alt_data_end+0xf8001714>
1000183c:	a809883a 	mov	r4,r21
10001840:	a00b883a 	mov	r5,r20
10001844:	0002d740 	call	10002d74 <finite>
10001848:	103fb226 	beq	r2,zero,10001714 <__alt_data_end+0xf8001714>
1000184c:	8809883a 	mov	r4,r17
10001850:	800b883a 	mov	r5,r16
10001854:	0002d900 	call	10002d90 <__fpclassifyd>
10001858:	1000121e 	bne	r2,zero,100018a4 <pow+0x348>
1000185c:	00800044 	movi	r2,1
10001860:	d8800015 	stw	r2,0(sp)
10001864:	94000017 	ldw	r16,0(r18)
10001868:	00840074 	movhi	r2,4097
1000186c:	10890104 	addi	r2,r2,9220
10001870:	d8800115 	stw	r2,4(sp)
10001874:	d8000815 	stw	zero,32(sp)
10001878:	ddc00215 	stw	r23,8(sp)
1000187c:	dd800315 	stw	r22,12(sp)
10001880:	dd400415 	stw	r21,16(sp)
10001884:	dd000515 	stw	r20,20(sp)
10001888:	8000241e 	bne	r16,zero,1000191c <pow+0x3c0>
1000188c:	d8000615 	stw	zero,24(sp)
10001890:	d8000715 	stw	zero,28(sp)
10001894:	d809883a 	mov	r4,sp
10001898:	0002e040 	call	10002e04 <matherr>
1000189c:	103fbd1e 	bne	r2,zero,10001794 <__alt_data_end+0xf8001794>
100018a0:	003fda06 	br	1000180c <__alt_data_end+0xf800180c>
100018a4:	00c000c4 	movi	r3,3
100018a8:	d8c00015 	stw	r3,0(sp)
100018ac:	90800017 	ldw	r2,0(r18)
100018b0:	00c40074 	movhi	r3,4097
100018b4:	18c90104 	addi	r3,r3,9220
100018b8:	d8c00115 	stw	r3,4(sp)
100018bc:	d8000815 	stw	zero,32(sp)
100018c0:	ddc00215 	stw	r23,8(sp)
100018c4:	dd800315 	stw	r22,12(sp)
100018c8:	dd400415 	stw	r21,16(sp)
100018cc:	dd000515 	stw	r20,20(sp)
100018d0:	b809883a 	mov	r4,r23
100018d4:	b00b883a 	mov	r5,r22
100018d8:	000d883a 	mov	r6,zero
100018dc:	000f883a 	mov	r7,zero
100018e0:	1000181e 	bne	r2,zero,10001944 <pow+0x3e8>
100018e4:	00b80034 	movhi	r2,57344
100018e8:	d8800615 	stw	r2,24(sp)
100018ec:	0091fc34 	movhi	r2,18416
100018f0:	10bfffc4 	addi	r2,r2,-1
100018f4:	d8800715 	stw	r2,28(sp)
100018f8:	00054940 	call	10005494 <__ledf2>
100018fc:	10002a16 	blt	r2,zero,100019a8 <pow+0x44c>
10001900:	90c00017 	ldw	r3,0(r18)
10001904:	00800084 	movi	r2,2
10001908:	18bf9f1e 	bne	r3,r2,10001788 <__alt_data_end+0xf8001788>
1000190c:	00069100 	call	10006910 <__errno>
10001910:	00c00884 	movi	r3,34
10001914:	10c00015 	stw	r3,0(r2)
10001918:	003f9e06 	br	10001794 <__alt_data_end+0xf8001794>
1000191c:	0009883a 	mov	r4,zero
10001920:	000b883a 	mov	r5,zero
10001924:	000d883a 	mov	r6,zero
10001928:	000f883a 	mov	r7,zero
1000192c:	00049b00 	call	100049b0 <__divdf3>
10001930:	d8800615 	stw	r2,24(sp)
10001934:	d8c00715 	stw	r3,28(sp)
10001938:	00800084 	movi	r2,2
1000193c:	80bfb326 	beq	r16,r2,1000180c <__alt_data_end+0xf800180c>
10001940:	003fd406 	br	10001894 <__alt_data_end+0xf8001894>
10001944:	009ffc34 	movhi	r2,32752
10001948:	d8000615 	stw	zero,24(sp)
1000194c:	d8800715 	stw	r2,28(sp)
10001950:	00054940 	call	10005494 <__ledf2>
10001954:	103fea0e 	bge	r2,zero,10001900 <__alt_data_end+0xf8001900>
10001958:	000d883a 	mov	r6,zero
1000195c:	01cff834 	movhi	r7,16352
10001960:	a809883a 	mov	r4,r21
10001964:	a00b883a 	mov	r5,r20
10001968:	00055740 	call	10005574 <__muldf3>
1000196c:	1009883a 	mov	r4,r2
10001970:	180b883a 	mov	r5,r3
10001974:	1023883a 	mov	r17,r2
10001978:	1821883a 	mov	r16,r3
1000197c:	0002e180 	call	10002e18 <rint>
10001980:	1009883a 	mov	r4,r2
10001984:	180b883a 	mov	r5,r3
10001988:	880d883a 	mov	r6,r17
1000198c:	800f883a 	mov	r7,r16
10001990:	00053300 	call	10005330 <__eqdf2>
10001994:	103fda26 	beq	r2,zero,10001900 <__alt_data_end+0xf8001900>
10001998:	00bffc34 	movhi	r2,65520
1000199c:	d8000615 	stw	zero,24(sp)
100019a0:	d8800715 	stw	r2,28(sp)
100019a4:	003fd606 	br	10001900 <__alt_data_end+0xf8001900>
100019a8:	000d883a 	mov	r6,zero
100019ac:	01cff834 	movhi	r7,16352
100019b0:	a809883a 	mov	r4,r21
100019b4:	a00b883a 	mov	r5,r20
100019b8:	00055740 	call	10005574 <__muldf3>
100019bc:	1009883a 	mov	r4,r2
100019c0:	180b883a 	mov	r5,r3
100019c4:	1023883a 	mov	r17,r2
100019c8:	1821883a 	mov	r16,r3
100019cc:	0002e180 	call	10002e18 <rint>
100019d0:	1009883a 	mov	r4,r2
100019d4:	180b883a 	mov	r5,r3
100019d8:	880d883a 	mov	r6,r17
100019dc:	800f883a 	mov	r7,r16
100019e0:	00053300 	call	10005330 <__eqdf2>
100019e4:	103fc626 	beq	r2,zero,10001900 <__alt_data_end+0xf8001900>
100019e8:	00b80034 	movhi	r2,57344
100019ec:	d8800615 	stw	r2,24(sp)
100019f0:	00b1fc34 	movhi	r2,51184
100019f4:	10bfffc4 	addi	r2,r2,-1
100019f8:	d8800715 	stw	r2,28(sp)
100019fc:	003fc006 	br	10001900 <__alt_data_end+0xf8001900>

10001a00 <__ieee754_pow>:
10001a00:	00a00034 	movhi	r2,32768
10001a04:	deffec04 	addi	sp,sp,-80
10001a08:	10bfffc4 	addi	r2,r2,-1
10001a0c:	dc400b15 	stw	r17,44(sp)
10001a10:	38a2703a 	and	r17,r7,r2
10001a14:	dfc01315 	stw	ra,76(sp)
10001a18:	df001215 	stw	fp,72(sp)
10001a1c:	ddc01115 	stw	r23,68(sp)
10001a20:	dd801015 	stw	r22,64(sp)
10001a24:	dd400f15 	stw	r21,60(sp)
10001a28:	dd000e15 	stw	r20,56(sp)
10001a2c:	dcc00d15 	stw	r19,52(sp)
10001a30:	dc800c15 	stw	r18,48(sp)
10001a34:	dc000a15 	stw	r16,40(sp)
10001a38:	8986b03a 	or	r3,r17,r6
10001a3c:	18002a26 	beq	r3,zero,10001ae8 <__ieee754_pow+0xe8>
10001a40:	28a4703a 	and	r18,r5,r2
10001a44:	009ffc34 	movhi	r2,32752
10001a48:	14802316 	blt	r2,r18,10001ad8 <__ieee754_pow+0xd8>
10001a4c:	90802126 	beq	r18,r2,10001ad4 <__ieee754_pow+0xd4>
10001a50:	14402116 	blt	r2,r17,10001ad8 <__ieee754_pow+0xd8>
10001a54:	009ffc34 	movhi	r2,32752
10001a58:	88807326 	beq	r17,r2,10001c28 <__ieee754_pow+0x228>
10001a5c:	2827883a 	mov	r19,r5
10001a60:	2021883a 	mov	r16,r4
10001a64:	302b883a 	mov	r21,r6
10001a68:	382f883a 	mov	r23,r7
10001a6c:	28007016 	blt	r5,zero,10001c30 <__ieee754_pow+0x230>
10001a70:	0039883a 	mov	fp,zero
10001a74:	a8003a1e 	bne	r21,zero,10001b60 <__ieee754_pow+0x160>
10001a78:	009ffc34 	movhi	r2,32752
10001a7c:	88807e26 	beq	r17,r2,10001c78 <__ieee754_pow+0x278>
10001a80:	008ffc34 	movhi	r2,16368
10001a84:	88805426 	beq	r17,r2,10001bd8 <__ieee754_pow+0x1d8>
10001a88:	00900034 	movhi	r2,16384
10001a8c:	b8834926 	beq	r23,r2,100027b4 <__ieee754_pow+0xdb4>
10001a90:	008ff834 	movhi	r2,16352
10001a94:	b880321e 	bne	r23,r2,10001b60 <__ieee754_pow+0x160>
10001a98:	98003116 	blt	r19,zero,10001b60 <__ieee754_pow+0x160>
10001a9c:	8009883a 	mov	r4,r16
10001aa0:	980b883a 	mov	r5,r19
10001aa4:	dfc01317 	ldw	ra,76(sp)
10001aa8:	df001217 	ldw	fp,72(sp)
10001aac:	ddc01117 	ldw	r23,68(sp)
10001ab0:	dd801017 	ldw	r22,64(sp)
10001ab4:	dd400f17 	ldw	r21,60(sp)
10001ab8:	dd000e17 	ldw	r20,56(sp)
10001abc:	dcc00d17 	ldw	r19,52(sp)
10001ac0:	dc800c17 	ldw	r18,48(sp)
10001ac4:	dc400b17 	ldw	r17,44(sp)
10001ac8:	dc000a17 	ldw	r16,40(sp)
10001acc:	dec01404 	addi	sp,sp,80
10001ad0:	0002acc1 	jmpi	10002acc <__ieee754_sqrt>
10001ad4:	20001226 	beq	r4,zero,10001b20 <__ieee754_pow+0x120>
10001ad8:	00b00434 	movhi	r2,49168
10001adc:	9085883a 	add	r2,r18,r2
10001ae0:	1108b03a 	or	r4,r2,r4
10001ae4:	20000f1e 	bne	r4,zero,10001b24 <__ieee754_pow+0x124>
10001ae8:	0005883a 	mov	r2,zero
10001aec:	00cffc34 	movhi	r3,16368
10001af0:	dfc01317 	ldw	ra,76(sp)
10001af4:	df001217 	ldw	fp,72(sp)
10001af8:	ddc01117 	ldw	r23,68(sp)
10001afc:	dd801017 	ldw	r22,64(sp)
10001b00:	dd400f17 	ldw	r21,60(sp)
10001b04:	dd000e17 	ldw	r20,56(sp)
10001b08:	dcc00d17 	ldw	r19,52(sp)
10001b0c:	dc800c17 	ldw	r18,48(sp)
10001b10:	dc400b17 	ldw	r17,44(sp)
10001b14:	dc000a17 	ldw	r16,40(sp)
10001b18:	dec01404 	addi	sp,sp,80
10001b1c:	f800283a 	ret
10001b20:	947fcc0e 	bge	r18,r17,10001a54 <__alt_data_end+0xf8001a54>
10001b24:	01040074 	movhi	r4,4097
10001b28:	21095b04 	addi	r4,r4,9580
10001b2c:	dfc01317 	ldw	ra,76(sp)
10001b30:	df001217 	ldw	fp,72(sp)
10001b34:	ddc01117 	ldw	r23,68(sp)
10001b38:	dd801017 	ldw	r22,64(sp)
10001b3c:	dd400f17 	ldw	r21,60(sp)
10001b40:	dd000e17 	ldw	r20,56(sp)
10001b44:	dcc00d17 	ldw	r19,52(sp)
10001b48:	dc800c17 	ldw	r18,48(sp)
10001b4c:	dc400b17 	ldw	r17,44(sp)
10001b50:	dc000a17 	ldw	r16,40(sp)
10001b54:	dec01404 	addi	sp,sp,80
10001b58:	0002e0c1 	jmpi	10002e0c <nan>
10001b5c:	0039883a 	mov	fp,zero
10001b60:	8009883a 	mov	r4,r16
10001b64:	980b883a 	mov	r5,r19
10001b68:	0002d600 	call	10002d60 <fabs>
10001b6c:	102d883a 	mov	r22,r2
10001b70:	80000f26 	beq	r16,zero,10001bb0 <__ieee754_pow+0x1b0>
10001b74:	9816d7fa 	srli	r11,r19,31
10001b78:	5affffc4 	addi	r11,r11,-1
10001b7c:	e2c4b03a 	or	r2,fp,r11
10001b80:	10004a26 	beq	r2,zero,10001cac <__ieee754_pow+0x2ac>
10001b84:	00907834 	movhi	r2,16864
10001b88:	1440530e 	bge	r2,r17,10001cd8 <__ieee754_pow+0x2d8>
10001b8c:	0090fc34 	movhi	r2,17392
10001b90:	14433e0e 	bge	r2,r17,1000288c <__ieee754_pow+0xe8c>
10001b94:	008ffc34 	movhi	r2,16368
10001b98:	10bfffc4 	addi	r2,r2,-1
10001b9c:	14801916 	blt	r2,r18,10001c04 <__ieee754_pow+0x204>
10001ba0:	b8001916 	blt	r23,zero,10001c08 <__ieee754_pow+0x208>
10001ba4:	0005883a 	mov	r2,zero
10001ba8:	0007883a 	mov	r3,zero
10001bac:	003fd006 	br	10001af0 <__alt_data_end+0xf8001af0>
10001bb0:	90000526 	beq	r18,zero,10001bc8 <__ieee754_pow+0x1c8>
10001bb4:	00900034 	movhi	r2,16384
10001bb8:	10bfffc4 	addi	r2,r2,-1
10001bbc:	9884703a 	and	r2,r19,r2
10001bc0:	010ffc34 	movhi	r4,16368
10001bc4:	113feb1e 	bne	r2,r4,10001b74 <__alt_data_end+0xf8001b74>
10001bc8:	b8000716 	blt	r23,zero,10001be8 <__ieee754_pow+0x1e8>
10001bcc:	9802f216 	blt	r19,zero,10002798 <__ieee754_pow+0xd98>
10001bd0:	b005883a 	mov	r2,r22
10001bd4:	003fc606 	br	10001af0 <__alt_data_end+0xf8001af0>
10001bd8:	b8038816 	blt	r23,zero,100029fc <__ieee754_pow+0xffc>
10001bdc:	8005883a 	mov	r2,r16
10001be0:	9807883a 	mov	r3,r19
10001be4:	003fc206 	br	10001af0 <__alt_data_end+0xf8001af0>
10001be8:	b00d883a 	mov	r6,r22
10001bec:	0009883a 	mov	r4,zero
10001bf0:	014ffc34 	movhi	r5,16368
10001bf4:	180f883a 	mov	r7,r3
10001bf8:	00049b00 	call	100049b0 <__divdf3>
10001bfc:	102d883a 	mov	r22,r2
10001c00:	003ff206 	br	10001bcc <__alt_data_end+0xf8001bcc>
10001c04:	05ffe70e 	bge	zero,r23,10001ba4 <__alt_data_end+0xf8001ba4>
10001c08:	01220034 	movhi	r4,34816
10001c0c:	015f8e34 	movhi	r5,32312
10001c10:	211d6704 	addi	r4,r4,30108
10001c14:	29790f04 	addi	r5,r5,-7108
10001c18:	200d883a 	mov	r6,r4
10001c1c:	280f883a 	mov	r7,r5
10001c20:	00055740 	call	10005574 <__muldf3>
10001c24:	003fb206 	br	10001af0 <__alt_data_end+0xf8001af0>
10001c28:	303f8c26 	beq	r6,zero,10001a5c <__alt_data_end+0xf8001a5c>
10001c2c:	003faa06 	br	10001ad8 <__alt_data_end+0xf8001ad8>
10001c30:	0090d034 	movhi	r2,17216
10001c34:	10bfffc4 	addi	r2,r2,-1
10001c38:	14401a16 	blt	r2,r17,10001ca4 <__ieee754_pow+0x2a4>
10001c3c:	008ffc34 	movhi	r2,16368
10001c40:	10bfffc4 	addi	r2,r2,-1
10001c44:	147f8a0e 	bge	r2,r17,10001a70 <__alt_data_end+0xf8001a70>
10001c48:	8809d53a 	srai	r4,r17,20
10001c4c:	00c104c4 	movi	r3,1043
10001c50:	1903840e 	bge	r3,r4,10002a64 <__ieee754_pow+0x1064>
10001c54:	00810cc4 	movi	r2,1075
10001c58:	1105c83a 	sub	r2,r2,r4
10001c5c:	3086d83a 	srl	r3,r6,r2
10001c60:	1884983a 	sll	r2,r3,r2
10001c64:	11bf821e 	bne	r2,r6,10001a70 <__alt_data_end+0xf8001a70>
10001c68:	18c0004c 	andi	r3,r3,1
10001c6c:	02800084 	movi	r10,2
10001c70:	50f9c83a 	sub	fp,r10,r3
10001c74:	003f7f06 	br	10001a74 <__alt_data_end+0xf8001a74>
10001c78:	01300434 	movhi	r4,49168
10001c7c:	9109883a 	add	r4,r18,r4
10001c80:	2408b03a 	or	r4,r4,r16
10001c84:	203f9826 	beq	r4,zero,10001ae8 <__alt_data_end+0xf8001ae8>
10001c88:	008ffc34 	movhi	r2,16368
10001c8c:	10bfffc4 	addi	r2,r2,-1
10001c90:	1482f50e 	bge	r2,r18,10002868 <__ieee754_pow+0xe68>
10001c94:	b83fc316 	blt	r23,zero,10001ba4 <__alt_data_end+0xf8001ba4>
10001c98:	0005883a 	mov	r2,zero
10001c9c:	b807883a 	mov	r3,r23
10001ca0:	003f9306 	br	10001af0 <__alt_data_end+0xf8001af0>
10001ca4:	07000084 	movi	fp,2
10001ca8:	003f7206 	br	10001a74 <__alt_data_end+0xf8001a74>
10001cac:	8009883a 	mov	r4,r16
10001cb0:	980b883a 	mov	r5,r19
10001cb4:	200d883a 	mov	r6,r4
10001cb8:	280f883a 	mov	r7,r5
10001cbc:	0005de00 	call	10005de0 <__subdf3>
10001cc0:	1009883a 	mov	r4,r2
10001cc4:	180b883a 	mov	r5,r3
10001cc8:	100d883a 	mov	r6,r2
10001ccc:	180f883a 	mov	r7,r3
10001cd0:	00049b00 	call	100049b0 <__divdf3>
10001cd4:	003f8606 	br	10001af0 <__alt_data_end+0xf8001af0>
10001cd8:	00800434 	movhi	r2,16
10001cdc:	10bfffc4 	addi	r2,r2,-1
10001ce0:	1482e816 	blt	r2,r18,10002884 <__ieee754_pow+0xe84>
10001ce4:	b009883a 	mov	r4,r22
10001ce8:	180b883a 	mov	r5,r3
10001cec:	000d883a 	mov	r6,zero
10001cf0:	01d0d034 	movhi	r7,17216
10001cf4:	dac00915 	stw	r11,36(sp)
10001cf8:	00055740 	call	10005574 <__muldf3>
10001cfc:	dac00917 	ldw	r11,36(sp)
10001d00:	102d883a 	mov	r22,r2
10001d04:	1825883a 	mov	r18,r3
10001d08:	013ff2c4 	movi	r4,-53
10001d0c:	9007d53a 	srai	r3,r18,20
10001d10:	00800434 	movhi	r2,16
10001d14:	10bfffc4 	addi	r2,r2,-1
10001d18:	18ff0044 	addi	r3,r3,-1023
10001d1c:	1911883a 	add	r8,r3,r4
10001d20:	00c00134 	movhi	r3,4
10001d24:	9084703a 	and	r2,r18,r2
10001d28:	18e62384 	addi	r3,r3,-26482
10001d2c:	14cffc34 	orhi	r19,r2,16368
10001d30:	1882d10e 	bge	r3,r2,10002878 <__ieee754_pow+0xe78>
10001d34:	00c00334 	movhi	r3,12
10001d38:	18ed9e44 	addi	r3,r3,-18823
10001d3c:	1883550e 	bge	r3,r2,10002a94 <__ieee754_pow+0x1094>
10001d40:	00bffc34 	movhi	r2,65520
10001d44:	42000044 	addi	r8,r8,1
10001d48:	98a7883a 	add	r19,r19,r2
10001d4c:	0021883a 	mov	r16,zero
10001d50:	0019883a 	mov	r12,zero
10001d54:	601890fa 	slli	r12,r12,3
10001d58:	00840074 	movhi	r2,4097
10001d5c:	10890a04 	addi	r2,r2,9256
10001d60:	1305883a 	add	r2,r2,r12
10001d64:	13400017 	ldw	r13,0(r2)
10001d68:	12800117 	ldw	r10,4(r2)
10001d6c:	b009883a 	mov	r4,r22
10001d70:	980b883a 	mov	r5,r19
10001d74:	680d883a 	mov	r6,r13
10001d78:	500f883a 	mov	r7,r10
10001d7c:	da000815 	stw	r8,32(sp)
10001d80:	dac00915 	stw	r11,36(sp)
10001d84:	db000715 	stw	r12,28(sp)
10001d88:	da800315 	stw	r10,12(sp)
10001d8c:	db400415 	stw	r13,16(sp)
10001d90:	0005de00 	call	10005de0 <__subdf3>
10001d94:	da800317 	ldw	r10,12(sp)
10001d98:	db400417 	ldw	r13,16(sp)
10001d9c:	b009883a 	mov	r4,r22
10001da0:	500f883a 	mov	r7,r10
10001da4:	680d883a 	mov	r6,r13
10001da8:	980b883a 	mov	r5,r19
10001dac:	1829883a 	mov	r20,r3
10001db0:	d8800015 	stw	r2,0(sp)
10001db4:	00041140 	call	10004114 <__adddf3>
10001db8:	0009883a 	mov	r4,zero
10001dbc:	014ffc34 	movhi	r5,16368
10001dc0:	100d883a 	mov	r6,r2
10001dc4:	180f883a 	mov	r7,r3
10001dc8:	00049b00 	call	100049b0 <__divdf3>
10001dcc:	d9000017 	ldw	r4,0(sp)
10001dd0:	a00b883a 	mov	r5,r20
10001dd4:	100d883a 	mov	r6,r2
10001dd8:	180f883a 	mov	r7,r3
10001ddc:	d8c00615 	stw	r3,24(sp)
10001de0:	d8800515 	stw	r2,20(sp)
10001de4:	00055740 	call	10005574 <__muldf3>
10001de8:	1025883a 	mov	r18,r2
10001dec:	9805d07a 	srai	r2,r19,1
10001df0:	1823883a 	mov	r17,r3
10001df4:	880b883a 	mov	r5,r17
10001df8:	10c80034 	orhi	r3,r2,8192
10001dfc:	00800234 	movhi	r2,8
10001e00:	1885883a 	add	r2,r3,r2
10001e04:	1421883a 	add	r16,r2,r16
10001e08:	800f883a 	mov	r7,r16
10001e0c:	0009883a 	mov	r4,zero
10001e10:	000d883a 	mov	r6,zero
10001e14:	00055740 	call	10005574 <__muldf3>
10001e18:	d9000017 	ldw	r4,0(sp)
10001e1c:	a00b883a 	mov	r5,r20
10001e20:	100d883a 	mov	r6,r2
10001e24:	180f883a 	mov	r7,r3
10001e28:	0005de00 	call	10005de0 <__subdf3>
10001e2c:	da800317 	ldw	r10,12(sp)
10001e30:	db400417 	ldw	r13,16(sp)
10001e34:	800b883a 	mov	r5,r16
10001e38:	500f883a 	mov	r7,r10
10001e3c:	680d883a 	mov	r6,r13
10001e40:	0009883a 	mov	r4,zero
10001e44:	1829883a 	mov	r20,r3
10001e48:	d8800315 	stw	r2,12(sp)
10001e4c:	0005de00 	call	10005de0 <__subdf3>
10001e50:	b009883a 	mov	r4,r22
10001e54:	980b883a 	mov	r5,r19
10001e58:	100d883a 	mov	r6,r2
10001e5c:	180f883a 	mov	r7,r3
10001e60:	0005de00 	call	10005de0 <__subdf3>
10001e64:	880b883a 	mov	r5,r17
10001e68:	0009883a 	mov	r4,zero
10001e6c:	100d883a 	mov	r6,r2
10001e70:	180f883a 	mov	r7,r3
10001e74:	00055740 	call	10005574 <__muldf3>
10001e78:	da400317 	ldw	r9,12(sp)
10001e7c:	a00b883a 	mov	r5,r20
10001e80:	100d883a 	mov	r6,r2
10001e84:	4809883a 	mov	r4,r9
10001e88:	180f883a 	mov	r7,r3
10001e8c:	0005de00 	call	10005de0 <__subdf3>
10001e90:	dbc00517 	ldw	r15,20(sp)
10001e94:	db800617 	ldw	r14,24(sp)
10001e98:	1009883a 	mov	r4,r2
10001e9c:	780d883a 	mov	r6,r15
10001ea0:	700f883a 	mov	r7,r14
10001ea4:	180b883a 	mov	r5,r3
10001ea8:	00055740 	call	10005574 <__muldf3>
10001eac:	9009883a 	mov	r4,r18
10001eb0:	880b883a 	mov	r5,r17
10001eb4:	900d883a 	mov	r6,r18
10001eb8:	880f883a 	mov	r7,r17
10001ebc:	182d883a 	mov	r22,r3
10001ec0:	d8800015 	stw	r2,0(sp)
10001ec4:	00055740 	call	10005574 <__muldf3>
10001ec8:	1009883a 	mov	r4,r2
10001ecc:	180b883a 	mov	r5,r3
10001ed0:	100d883a 	mov	r6,r2
10001ed4:	180f883a 	mov	r7,r3
10001ed8:	1027883a 	mov	r19,r2
10001edc:	1821883a 	mov	r16,r3
10001ee0:	00055740 	call	10005574 <__muldf3>
10001ee4:	01929174 	movhi	r6,19013
10001ee8:	01cff2b4 	movhi	r7,16330
10001eec:	9809883a 	mov	r4,r19
10001ef0:	800b883a 	mov	r5,r16
10001ef4:	3193bbc4 	addi	r6,r6,20207
10001ef8:	39df8a04 	addi	r7,r7,32296
10001efc:	1829883a 	mov	r20,r3
10001f00:	d8800315 	stw	r2,12(sp)
10001f04:	00055740 	call	10005574 <__muldf3>
10001f08:	01a4f2b4 	movhi	r6,37834
10001f0c:	01cff3b4 	movhi	r7,16334
10001f10:	1009883a 	mov	r4,r2
10001f14:	180b883a 	mov	r5,r3
10001f18:	31b6d944 	addi	r6,r6,-9371
10001f1c:	39e19284 	addi	r7,r7,-31158
10001f20:	00041140 	call	10004114 <__adddf3>
10001f24:	980d883a 	mov	r6,r19
10001f28:	800f883a 	mov	r7,r16
10001f2c:	1009883a 	mov	r4,r2
10001f30:	180b883a 	mov	r5,r3
10001f34:	00055740 	call	10005574 <__muldf3>
10001f38:	01aa4774 	movhi	r6,43293
10001f3c:	01cff474 	movhi	r7,16337
10001f40:	1009883a 	mov	r4,r2
10001f44:	180b883a 	mov	r5,r3
10001f48:	31904044 	addi	r6,r6,16641
10001f4c:	39dd1804 	addi	r7,r7,29792
10001f50:	00041140 	call	10004114 <__adddf3>
10001f54:	980d883a 	mov	r6,r19
10001f58:	800f883a 	mov	r7,r16
10001f5c:	1009883a 	mov	r4,r2
10001f60:	180b883a 	mov	r5,r3
10001f64:	00055740 	call	10005574 <__muldf3>
10001f68:	019463f4 	movhi	r6,20879
10001f6c:	01cff574 	movhi	r7,16341
10001f70:	1009883a 	mov	r4,r2
10001f74:	180b883a 	mov	r5,r3
10001f78:	31899344 	addi	r6,r6,9805
10001f7c:	39d55544 	addi	r7,r7,21845
10001f80:	00041140 	call	10004114 <__adddf3>
10001f84:	980d883a 	mov	r6,r19
10001f88:	800f883a 	mov	r7,r16
10001f8c:	1009883a 	mov	r4,r2
10001f90:	180b883a 	mov	r5,r3
10001f94:	00055740 	call	10005574 <__muldf3>
10001f98:	01b6dc34 	movhi	r6,56176
10001f9c:	01cff6f4 	movhi	r7,16347
10001fa0:	1009883a 	mov	r4,r2
10001fa4:	180b883a 	mov	r5,r3
10001fa8:	31aaffc4 	addi	r6,r6,-21505
10001fac:	39db6d84 	addi	r7,r7,28086
10001fb0:	00041140 	call	10004114 <__adddf3>
10001fb4:	980d883a 	mov	r6,r19
10001fb8:	800f883a 	mov	r7,r16
10001fbc:	1009883a 	mov	r4,r2
10001fc0:	180b883a 	mov	r5,r3
10001fc4:	00055740 	call	10005574 <__muldf3>
10001fc8:	018cccf4 	movhi	r6,13107
10001fcc:	01cff8f4 	movhi	r7,16355
10001fd0:	1009883a 	mov	r4,r2
10001fd4:	180b883a 	mov	r5,r3
10001fd8:	318cc0c4 	addi	r6,r6,13059
10001fdc:	39ccccc4 	addi	r7,r7,13107
10001fe0:	00041140 	call	10004114 <__adddf3>
10001fe4:	da400317 	ldw	r9,12(sp)
10001fe8:	a00b883a 	mov	r5,r20
10001fec:	100d883a 	mov	r6,r2
10001ff0:	4809883a 	mov	r4,r9
10001ff4:	180f883a 	mov	r7,r3
10001ff8:	00055740 	call	10005574 <__muldf3>
10001ffc:	880b883a 	mov	r5,r17
10002000:	900d883a 	mov	r6,r18
10002004:	880f883a 	mov	r7,r17
10002008:	0009883a 	mov	r4,zero
1000200c:	1027883a 	mov	r19,r2
10002010:	1821883a 	mov	r16,r3
10002014:	00041140 	call	10004114 <__adddf3>
10002018:	d9800017 	ldw	r6,0(sp)
1000201c:	b00f883a 	mov	r7,r22
10002020:	1009883a 	mov	r4,r2
10002024:	180b883a 	mov	r5,r3
10002028:	00055740 	call	10005574 <__muldf3>
1000202c:	980d883a 	mov	r6,r19
10002030:	800f883a 	mov	r7,r16
10002034:	1009883a 	mov	r4,r2
10002038:	180b883a 	mov	r5,r3
1000203c:	00041140 	call	10004114 <__adddf3>
10002040:	880f883a 	mov	r7,r17
10002044:	880b883a 	mov	r5,r17
10002048:	000d883a 	mov	r6,zero
1000204c:	0009883a 	mov	r4,zero
10002050:	1029883a 	mov	r20,r2
10002054:	1827883a 	mov	r19,r3
10002058:	00055740 	call	10005574 <__muldf3>
1000205c:	1009883a 	mov	r4,r2
10002060:	180b883a 	mov	r5,r3
10002064:	000d883a 	mov	r6,zero
10002068:	01d00234 	movhi	r7,16392
1000206c:	d8c00615 	stw	r3,24(sp)
10002070:	d8800515 	stw	r2,20(sp)
10002074:	00041140 	call	10004114 <__adddf3>
10002078:	a00d883a 	mov	r6,r20
1000207c:	980f883a 	mov	r7,r19
10002080:	1009883a 	mov	r4,r2
10002084:	180b883a 	mov	r5,r3
10002088:	00041140 	call	10004114 <__adddf3>
1000208c:	880b883a 	mov	r5,r17
10002090:	000d883a 	mov	r6,zero
10002094:	180f883a 	mov	r7,r3
10002098:	0009883a 	mov	r4,zero
1000209c:	1821883a 	mov	r16,r3
100020a0:	00055740 	call	10005574 <__muldf3>
100020a4:	d9000017 	ldw	r4,0(sp)
100020a8:	b00b883a 	mov	r5,r22
100020ac:	800f883a 	mov	r7,r16
100020b0:	000d883a 	mov	r6,zero
100020b4:	d8800115 	stw	r2,4(sp)
100020b8:	d8c00215 	stw	r3,8(sp)
100020bc:	00055740 	call	10005574 <__muldf3>
100020c0:	800b883a 	mov	r5,r16
100020c4:	0009883a 	mov	r4,zero
100020c8:	000d883a 	mov	r6,zero
100020cc:	01d00234 	movhi	r7,16392
100020d0:	182d883a 	mov	r22,r3
100020d4:	d8800315 	stw	r2,12(sp)
100020d8:	0005de00 	call	10005de0 <__subdf3>
100020dc:	dbc00517 	ldw	r15,20(sp)
100020e0:	db800617 	ldw	r14,24(sp)
100020e4:	1009883a 	mov	r4,r2
100020e8:	780d883a 	mov	r6,r15
100020ec:	700f883a 	mov	r7,r14
100020f0:	180b883a 	mov	r5,r3
100020f4:	0005de00 	call	10005de0 <__subdf3>
100020f8:	a009883a 	mov	r4,r20
100020fc:	980b883a 	mov	r5,r19
10002100:	100d883a 	mov	r6,r2
10002104:	180f883a 	mov	r7,r3
10002108:	0005de00 	call	10005de0 <__subdf3>
1000210c:	900d883a 	mov	r6,r18
10002110:	880f883a 	mov	r7,r17
10002114:	1009883a 	mov	r4,r2
10002118:	180b883a 	mov	r5,r3
1000211c:	00055740 	call	10005574 <__muldf3>
10002120:	da400317 	ldw	r9,12(sp)
10002124:	b00b883a 	mov	r5,r22
10002128:	100d883a 	mov	r6,r2
1000212c:	4809883a 	mov	r4,r9
10002130:	180f883a 	mov	r7,r3
10002134:	00041140 	call	10004114 <__adddf3>
10002138:	d9000117 	ldw	r4,4(sp)
1000213c:	d9400217 	ldw	r5,8(sp)
10002140:	100d883a 	mov	r6,r2
10002144:	180f883a 	mov	r7,r3
10002148:	102d883a 	mov	r22,r2
1000214c:	1825883a 	mov	r18,r3
10002150:	00041140 	call	10004114 <__adddf3>
10002154:	01cffbf4 	movhi	r7,16367
10002158:	39f1c244 	addi	r7,r7,-14583
1000215c:	0009883a 	mov	r4,zero
10002160:	180b883a 	mov	r5,r3
10002164:	01b80034 	movhi	r6,57344
10002168:	1823883a 	mov	r17,r3
1000216c:	00055740 	call	10005574 <__muldf3>
10002170:	018516f4 	movhi	r6,5211
10002174:	01ef8fb4 	movhi	r7,48702
10002178:	880b883a 	mov	r5,r17
1000217c:	31807d44 	addi	r6,r6,501
10002180:	39cbf804 	addi	r7,r7,12256
10002184:	0009883a 	mov	r4,zero
10002188:	1029883a 	mov	r20,r2
1000218c:	1827883a 	mov	r19,r3
10002190:	00055740 	call	10005574 <__muldf3>
10002194:	d9800117 	ldw	r6,4(sp)
10002198:	d9c00217 	ldw	r7,8(sp)
1000219c:	880b883a 	mov	r5,r17
100021a0:	0009883a 	mov	r4,zero
100021a4:	1821883a 	mov	r16,r3
100021a8:	d8800415 	stw	r2,16(sp)
100021ac:	0005de00 	call	10005de0 <__subdf3>
100021b0:	b009883a 	mov	r4,r22
100021b4:	900b883a 	mov	r5,r18
100021b8:	100d883a 	mov	r6,r2
100021bc:	180f883a 	mov	r7,r3
100021c0:	0005de00 	call	10005de0 <__subdf3>
100021c4:	01b70eb4 	movhi	r6,56378
100021c8:	01cffbf4 	movhi	r7,16367
100021cc:	1009883a 	mov	r4,r2
100021d0:	180b883a 	mov	r5,r3
100021d4:	3180ff44 	addi	r6,r6,1021
100021d8:	39f1c244 	addi	r7,r7,-14583
100021dc:	00055740 	call	10005574 <__muldf3>
100021e0:	db400417 	ldw	r13,16(sp)
100021e4:	800b883a 	mov	r5,r16
100021e8:	100d883a 	mov	r6,r2
100021ec:	6809883a 	mov	r4,r13
100021f0:	180f883a 	mov	r7,r3
100021f4:	00041140 	call	10004114 <__adddf3>
100021f8:	db000717 	ldw	r12,28(sp)
100021fc:	1009883a 	mov	r4,r2
10002200:	00840074 	movhi	r2,4097
10002204:	10890204 	addi	r2,r2,9224
10002208:	1305883a 	add	r2,r2,r12
1000220c:	11800017 	ldw	r6,0(r2)
10002210:	11c00117 	ldw	r7,4(r2)
10002214:	180b883a 	mov	r5,r3
10002218:	00041140 	call	10004114 <__adddf3>
1000221c:	da000817 	ldw	r8,32(sp)
10002220:	1025883a 	mov	r18,r2
10002224:	1823883a 	mov	r17,r3
10002228:	4009883a 	mov	r4,r8
1000222c:	00067380 	call	10006738 <__floatsidf>
10002230:	db000717 	ldw	r12,28(sp)
10002234:	d8800115 	stw	r2,4(sp)
10002238:	00840074 	movhi	r2,4097
1000223c:	10890604 	addi	r2,r2,9240
10002240:	1319883a 	add	r12,r2,r12
10002244:	65800017 	ldw	r22,0(r12)
10002248:	63000117 	ldw	r12,4(r12)
1000224c:	a009883a 	mov	r4,r20
10002250:	980b883a 	mov	r5,r19
10002254:	900d883a 	mov	r6,r18
10002258:	880f883a 	mov	r7,r17
1000225c:	db000015 	stw	r12,0(sp)
10002260:	d8c00215 	stw	r3,8(sp)
10002264:	00041140 	call	10004114 <__adddf3>
10002268:	d9c00017 	ldw	r7,0(sp)
1000226c:	1009883a 	mov	r4,r2
10002270:	180b883a 	mov	r5,r3
10002274:	b00d883a 	mov	r6,r22
10002278:	00041140 	call	10004114 <__adddf3>
1000227c:	d9800117 	ldw	r6,4(sp)
10002280:	d9c00217 	ldw	r7,8(sp)
10002284:	1009883a 	mov	r4,r2
10002288:	180b883a 	mov	r5,r3
1000228c:	00041140 	call	10004114 <__adddf3>
10002290:	d9800117 	ldw	r6,4(sp)
10002294:	d9c00217 	ldw	r7,8(sp)
10002298:	0009883a 	mov	r4,zero
1000229c:	180b883a 	mov	r5,r3
100022a0:	1821883a 	mov	r16,r3
100022a4:	0005de00 	call	10005de0 <__subdf3>
100022a8:	d9c00017 	ldw	r7,0(sp)
100022ac:	1009883a 	mov	r4,r2
100022b0:	180b883a 	mov	r5,r3
100022b4:	b00d883a 	mov	r6,r22
100022b8:	0005de00 	call	10005de0 <__subdf3>
100022bc:	1009883a 	mov	r4,r2
100022c0:	180b883a 	mov	r5,r3
100022c4:	a00d883a 	mov	r6,r20
100022c8:	980f883a 	mov	r7,r19
100022cc:	0005de00 	call	10005de0 <__subdf3>
100022d0:	9009883a 	mov	r4,r18
100022d4:	880b883a 	mov	r5,r17
100022d8:	100d883a 	mov	r6,r2
100022dc:	180f883a 	mov	r7,r3
100022e0:	0005de00 	call	10005de0 <__subdf3>
100022e4:	dac00917 	ldw	r11,36(sp)
100022e8:	e2bfffc4 	addi	r10,fp,-1
100022ec:	1027883a 	mov	r19,r2
100022f0:	52d6b03a 	or	r11,r10,r11
100022f4:	1823883a 	mov	r17,r3
100022f8:	5801591e 	bne	r11,zero,10002860 <__ieee754_pow+0xe60>
100022fc:	04affc34 	movhi	r18,49136
10002300:	b80f883a 	mov	r7,r23
10002304:	a809883a 	mov	r4,r21
10002308:	b80b883a 	mov	r5,r23
1000230c:	000d883a 	mov	r6,zero
10002310:	0005de00 	call	10005de0 <__subdf3>
10002314:	1009883a 	mov	r4,r2
10002318:	180b883a 	mov	r5,r3
1000231c:	000d883a 	mov	r6,zero
10002320:	800f883a 	mov	r7,r16
10002324:	00055740 	call	10005574 <__muldf3>
10002328:	a809883a 	mov	r4,r21
1000232c:	b80b883a 	mov	r5,r23
10002330:	980d883a 	mov	r6,r19
10002334:	880f883a 	mov	r7,r17
10002338:	102d883a 	mov	r22,r2
1000233c:	1829883a 	mov	r20,r3
10002340:	00055740 	call	10005574 <__muldf3>
10002344:	b009883a 	mov	r4,r22
10002348:	a00b883a 	mov	r5,r20
1000234c:	100d883a 	mov	r6,r2
10002350:	180f883a 	mov	r7,r3
10002354:	00041140 	call	10004114 <__adddf3>
10002358:	b80b883a 	mov	r5,r23
1000235c:	0009883a 	mov	r4,zero
10002360:	000d883a 	mov	r6,zero
10002364:	800f883a 	mov	r7,r16
10002368:	1027883a 	mov	r19,r2
1000236c:	1823883a 	mov	r17,r3
10002370:	00055740 	call	10005574 <__muldf3>
10002374:	9809883a 	mov	r4,r19
10002378:	880b883a 	mov	r5,r17
1000237c:	100d883a 	mov	r6,r2
10002380:	180f883a 	mov	r7,r3
10002384:	102d883a 	mov	r22,r2
10002388:	182b883a 	mov	r21,r3
1000238c:	00041140 	call	10004114 <__adddf3>
10002390:	102f883a 	mov	r23,r2
10002394:	00902434 	movhi	r2,16528
10002398:	10bfffc4 	addi	r2,r2,-1
1000239c:	1829883a 	mov	r20,r3
100023a0:	b013883a 	mov	r9,r22
100023a4:	a811883a 	mov	r8,r21
100023a8:	10c1080e 	bge	r2,r3,100027cc <__ieee754_pow+0xdcc>
100023ac:	00efdc34 	movhi	r3,49008
100023b0:	a0c7883a 	add	r3,r20,r3
100023b4:	1dc6b03a 	or	r3,r3,r23
100023b8:	1801961e 	bne	r3,zero,10002a14 <__ieee754_pow+0x1014>
100023bc:	01994b34 	movhi	r6,25900
100023c0:	01cf25f4 	movhi	r7,15511
100023c4:	31a0bf84 	addi	r6,r6,-32002
100023c8:	39c551c4 	addi	r7,r7,5447
100023cc:	9809883a 	mov	r4,r19
100023d0:	880b883a 	mov	r5,r17
100023d4:	00041140 	call	10004114 <__adddf3>
100023d8:	b809883a 	mov	r4,r23
100023dc:	a00b883a 	mov	r5,r20
100023e0:	b00d883a 	mov	r6,r22
100023e4:	a80f883a 	mov	r7,r21
100023e8:	1039883a 	mov	fp,r2
100023ec:	1821883a 	mov	r16,r3
100023f0:	0005de00 	call	10005de0 <__subdf3>
100023f4:	e009883a 	mov	r4,fp
100023f8:	800b883a 	mov	r5,r16
100023fc:	100d883a 	mov	r6,r2
10002400:	180f883a 	mov	r7,r3
10002404:	00053b40 	call	100053b4 <__gedf2>
10002408:	00818216 	blt	zero,r2,10002a14 <__ieee754_pow+0x1014>
1000240c:	a021883a 	mov	r16,r20
10002410:	8011d53a 	srai	r8,r16,20
10002414:	00800434 	movhi	r2,16
10002418:	a02ed7fa 	srli	r23,r20,31
1000241c:	423f0084 	addi	r8,r8,-1022
10002420:	1211d83a 	sra	r8,r2,r8
10002424:	00c00434 	movhi	r3,16
10002428:	18ffffc4 	addi	r3,r3,-1
1000242c:	4529883a 	add	r20,r8,r20
10002430:	a00a907a 	slli	r5,r20,1
10002434:	a0c4703a 	and	r2,r20,r3
10002438:	10800434 	orhi	r2,r2,16
1000243c:	280ad57a 	srli	r5,r5,21
10002440:	05cdc83a 	sub	r6,zero,r23
10002444:	b009883a 	mov	r4,r22
10002448:	29ff0044 	addi	r7,r5,-1023
1000244c:	19c7d83a 	sra	r3,r3,r7
10002450:	01c104c4 	movi	r7,1043
10002454:	394bc83a 	sub	r5,r7,r5
10002458:	1145d83a 	sra	r2,r2,r5
1000245c:	00ce303a 	nor	r7,zero,r3
10002460:	3d0e703a 	and	r7,r7,r20
10002464:	1184f03a 	xor	r2,r2,r6
10002468:	a80b883a 	mov	r5,r21
1000246c:	000d883a 	mov	r6,zero
10002470:	15ef883a 	add	r23,r2,r23
10002474:	ddc00115 	stw	r23,4(sp)
10002478:	0005de00 	call	10005de0 <__subdf3>
1000247c:	9809883a 	mov	r4,r19
10002480:	880b883a 	mov	r5,r17
10002484:	100d883a 	mov	r6,r2
10002488:	180f883a 	mov	r7,r3
1000248c:	d8c00815 	stw	r3,32(sp)
10002490:	d8800315 	stw	r2,12(sp)
10002494:	00041140 	call	10004114 <__adddf3>
10002498:	d8800117 	ldw	r2,4(sp)
1000249c:	da000817 	ldw	r8,32(sp)
100024a0:	da400317 	ldw	r9,12(sp)
100024a4:	1004953a 	slli	r2,r2,20
100024a8:	1829883a 	mov	r20,r3
100024ac:	d8800015 	stw	r2,0(sp)
100024b0:	01cff9b4 	movhi	r7,16358
100024b4:	a00b883a 	mov	r5,r20
100024b8:	39cb90c4 	addi	r7,r7,11843
100024bc:	0009883a 	mov	r4,zero
100024c0:	000d883a 	mov	r6,zero
100024c4:	da000815 	stw	r8,32(sp)
100024c8:	da400315 	stw	r9,12(sp)
100024cc:	00055740 	call	10005574 <__muldf3>
100024d0:	da400317 	ldw	r9,12(sp)
100024d4:	da000817 	ldw	r8,32(sp)
100024d8:	a00b883a 	mov	r5,r20
100024dc:	480d883a 	mov	r6,r9
100024e0:	400f883a 	mov	r7,r8
100024e4:	0009883a 	mov	r4,zero
100024e8:	1039883a 	mov	fp,r2
100024ec:	182d883a 	mov	r22,r3
100024f0:	0005de00 	call	10005de0 <__subdf3>
100024f4:	9809883a 	mov	r4,r19
100024f8:	880b883a 	mov	r5,r17
100024fc:	100d883a 	mov	r6,r2
10002500:	180f883a 	mov	r7,r3
10002504:	0005de00 	call	10005de0 <__subdf3>
10002508:	01bfbeb4 	movhi	r6,65274
1000250c:	01cff9b4 	movhi	r7,16358
10002510:	1009883a 	mov	r4,r2
10002514:	180b883a 	mov	r5,r3
10002518:	318e7bc4 	addi	r6,r6,14831
1000251c:	39cb9084 	addi	r7,r7,11842
10002520:	00055740 	call	10005574 <__muldf3>
10002524:	01832a34 	movhi	r6,3240
10002528:	01ef8834 	movhi	r7,48672
1000252c:	a00b883a 	mov	r5,r20
10002530:	319b0e44 	addi	r6,r6,27705
10002534:	39d71844 	addi	r7,r7,23649
10002538:	0009883a 	mov	r4,zero
1000253c:	1023883a 	mov	r17,r2
10002540:	1821883a 	mov	r16,r3
10002544:	00055740 	call	10005574 <__muldf3>
10002548:	8809883a 	mov	r4,r17
1000254c:	800b883a 	mov	r5,r16
10002550:	100d883a 	mov	r6,r2
10002554:	180f883a 	mov	r7,r3
10002558:	00041140 	call	10004114 <__adddf3>
1000255c:	e009883a 	mov	r4,fp
10002560:	b00b883a 	mov	r5,r22
10002564:	100d883a 	mov	r6,r2
10002568:	180f883a 	mov	r7,r3
1000256c:	1029883a 	mov	r20,r2
10002570:	1827883a 	mov	r19,r3
10002574:	00041140 	call	10004114 <__adddf3>
10002578:	e00d883a 	mov	r6,fp
1000257c:	b00f883a 	mov	r7,r22
10002580:	1009883a 	mov	r4,r2
10002584:	180b883a 	mov	r5,r3
10002588:	1023883a 	mov	r17,r2
1000258c:	1821883a 	mov	r16,r3
10002590:	0005de00 	call	10005de0 <__subdf3>
10002594:	a009883a 	mov	r4,r20
10002598:	980b883a 	mov	r5,r19
1000259c:	100d883a 	mov	r6,r2
100025a0:	180f883a 	mov	r7,r3
100025a4:	0005de00 	call	10005de0 <__subdf3>
100025a8:	8809883a 	mov	r4,r17
100025ac:	800b883a 	mov	r5,r16
100025b0:	880d883a 	mov	r6,r17
100025b4:	800f883a 	mov	r7,r16
100025b8:	1039883a 	mov	fp,r2
100025bc:	182d883a 	mov	r22,r3
100025c0:	00055740 	call	10005574 <__muldf3>
100025c4:	019caff4 	movhi	r6,29375
100025c8:	01cf99b4 	movhi	r7,15974
100025cc:	1009883a 	mov	r4,r2
100025d0:	180b883a 	mov	r5,r3
100025d4:	31a93404 	addi	r6,r6,-23344
100025d8:	39cdda44 	addi	r7,r7,14185
100025dc:	1029883a 	mov	r20,r2
100025e0:	1827883a 	mov	r19,r3
100025e4:	00055740 	call	10005574 <__muldf3>
100025e8:	01b174b4 	movhi	r6,50642
100025ec:	01cfaf34 	movhi	r7,16060
100025f0:	1009883a 	mov	r4,r2
100025f4:	180b883a 	mov	r5,r3
100025f8:	319afc44 	addi	r6,r6,27633
100025fc:	39ef5044 	addi	r7,r7,-17087
10002600:	0005de00 	call	10005de0 <__subdf3>
10002604:	a00d883a 	mov	r6,r20
10002608:	980f883a 	mov	r7,r19
1000260c:	1009883a 	mov	r4,r2
10002610:	180b883a 	mov	r5,r3
10002614:	00055740 	call	10005574 <__muldf3>
10002618:	01abc9b4 	movhi	r6,44838
1000261c:	01cfc474 	movhi	r7,16145
10002620:	1009883a 	mov	r4,r2
10002624:	180b883a 	mov	r5,r3
10002628:	31b78b04 	addi	r6,r6,-8660
1000262c:	39d59a84 	addi	r7,r7,22122
10002630:	00041140 	call	10004114 <__adddf3>
10002634:	a00d883a 	mov	r6,r20
10002638:	980f883a 	mov	r7,r19
1000263c:	1009883a 	mov	r4,r2
10002640:	180b883a 	mov	r5,r3
10002644:	00055740 	call	10005574 <__muldf3>
10002648:	0185aff4 	movhi	r6,5823
1000264c:	01cfd9f4 	movhi	r7,16231
10002650:	1009883a 	mov	r4,r2
10002654:	180b883a 	mov	r5,r3
10002658:	31af64c4 	addi	r6,r6,-17005
1000265c:	39f05b04 	addi	r7,r7,-16020
10002660:	0005de00 	call	10005de0 <__subdf3>
10002664:	a00d883a 	mov	r6,r20
10002668:	980f883a 	mov	r7,r19
1000266c:	1009883a 	mov	r4,r2
10002670:	180b883a 	mov	r5,r3
10002674:	00055740 	call	10005574 <__muldf3>
10002678:	01955574 	movhi	r6,21845
1000267c:	01cff174 	movhi	r7,16325
10002680:	1009883a 	mov	r4,r2
10002684:	180b883a 	mov	r5,r3
10002688:	31954f84 	addi	r6,r6,21822
1000268c:	39d55544 	addi	r7,r7,21845
10002690:	00041140 	call	10004114 <__adddf3>
10002694:	a00d883a 	mov	r6,r20
10002698:	980f883a 	mov	r7,r19
1000269c:	1009883a 	mov	r4,r2
100026a0:	180b883a 	mov	r5,r3
100026a4:	00055740 	call	10005574 <__muldf3>
100026a8:	8809883a 	mov	r4,r17
100026ac:	800b883a 	mov	r5,r16
100026b0:	100d883a 	mov	r6,r2
100026b4:	180f883a 	mov	r7,r3
100026b8:	0005de00 	call	10005de0 <__subdf3>
100026bc:	8809883a 	mov	r4,r17
100026c0:	800b883a 	mov	r5,r16
100026c4:	100d883a 	mov	r6,r2
100026c8:	180f883a 	mov	r7,r3
100026cc:	1029883a 	mov	r20,r2
100026d0:	1827883a 	mov	r19,r3
100026d4:	00055740 	call	10005574 <__muldf3>
100026d8:	a009883a 	mov	r4,r20
100026dc:	980b883a 	mov	r5,r19
100026e0:	000d883a 	mov	r6,zero
100026e4:	01d00034 	movhi	r7,16384
100026e8:	102b883a 	mov	r21,r2
100026ec:	182f883a 	mov	r23,r3
100026f0:	0005de00 	call	10005de0 <__subdf3>
100026f4:	a809883a 	mov	r4,r21
100026f8:	b80b883a 	mov	r5,r23
100026fc:	100d883a 	mov	r6,r2
10002700:	180f883a 	mov	r7,r3
10002704:	00049b00 	call	100049b0 <__divdf3>
10002708:	8809883a 	mov	r4,r17
1000270c:	800b883a 	mov	r5,r16
10002710:	e00d883a 	mov	r6,fp
10002714:	b00f883a 	mov	r7,r22
10002718:	1029883a 	mov	r20,r2
1000271c:	1827883a 	mov	r19,r3
10002720:	00055740 	call	10005574 <__muldf3>
10002724:	1009883a 	mov	r4,r2
10002728:	180b883a 	mov	r5,r3
1000272c:	e00d883a 	mov	r6,fp
10002730:	b00f883a 	mov	r7,r22
10002734:	00041140 	call	10004114 <__adddf3>
10002738:	a009883a 	mov	r4,r20
1000273c:	980b883a 	mov	r5,r19
10002740:	100d883a 	mov	r6,r2
10002744:	180f883a 	mov	r7,r3
10002748:	0005de00 	call	10005de0 <__subdf3>
1000274c:	1009883a 	mov	r4,r2
10002750:	180b883a 	mov	r5,r3
10002754:	880d883a 	mov	r6,r17
10002758:	800f883a 	mov	r7,r16
1000275c:	0005de00 	call	10005de0 <__subdf3>
10002760:	0009883a 	mov	r4,zero
10002764:	180f883a 	mov	r7,r3
10002768:	014ffc34 	movhi	r5,16368
1000276c:	100d883a 	mov	r6,r2
10002770:	0005de00 	call	10005de0 <__subdf3>
10002774:	d9000017 	ldw	r4,0(sp)
10002778:	190f883a 	add	r7,r3,r4
1000277c:	3809d53a 	srai	r4,r7,20
10002780:	0100c70e 	bge	zero,r4,10002aa0 <__ieee754_pow+0x10a0>
10002784:	100d883a 	mov	r6,r2
10002788:	0009883a 	mov	r4,zero
1000278c:	900b883a 	mov	r5,r18
10002790:	00055740 	call	10005574 <__muldf3>
10002794:	003cd606 	br	10001af0 <__alt_data_end+0xf8001af0>
10002798:	00b00434 	movhi	r2,49168
1000279c:	9085883a 	add	r2,r18,r2
100027a0:	e084b03a 	or	r2,fp,r2
100027a4:	1000aa1e 	bne	r2,zero,10002a50 <__ieee754_pow+0x1050>
100027a8:	b009883a 	mov	r4,r22
100027ac:	180b883a 	mov	r5,r3
100027b0:	003d4006 	br	10001cb4 <__alt_data_end+0xf8001cb4>
100027b4:	8009883a 	mov	r4,r16
100027b8:	980b883a 	mov	r5,r19
100027bc:	800d883a 	mov	r6,r16
100027c0:	980f883a 	mov	r7,r19
100027c4:	00055740 	call	10005574 <__muldf3>
100027c8:	003cc906 	br	10001af0 <__alt_data_end+0xf8001af0>
100027cc:	04200034 	movhi	r16,32768
100027d0:	843fffc4 	addi	r16,r16,-1
100027d4:	00902474 	movhi	r2,16529
100027d8:	1c20703a 	and	r16,r3,r16
100027dc:	10b2ffc4 	addi	r2,r2,-13313
100027e0:	1400a70e 	bge	r2,r16,10002a80 <__ieee754_pow+0x1080>
100027e4:	008fdbf4 	movhi	r2,16239
100027e8:	108d0004 	addi	r2,r2,13312
100027ec:	1885883a 	add	r2,r3,r2
100027f0:	15c4b03a 	or	r2,r2,r23
100027f4:	10000b1e 	bne	r2,zero,10002824 <__ieee754_pow+0xe24>
100027f8:	b809883a 	mov	r4,r23
100027fc:	180b883a 	mov	r5,r3
10002800:	b00d883a 	mov	r6,r22
10002804:	a80f883a 	mov	r7,r21
10002808:	0005de00 	call	10005de0 <__subdf3>
1000280c:	9809883a 	mov	r4,r19
10002810:	880b883a 	mov	r5,r17
10002814:	100d883a 	mov	r6,r2
10002818:	180f883a 	mov	r7,r3
1000281c:	00054940 	call	10005494 <__ledf2>
10002820:	00befb16 	blt	zero,r2,10002410 <__alt_data_end+0xf8002410>
10002824:	01b0be74 	movhi	r6,49913
10002828:	01c06974 	movhi	r7,421
1000282c:	900b883a 	mov	r5,r18
10002830:	31bcd644 	addi	r6,r6,-3239
10002834:	39db87c4 	addi	r7,r7,28191
10002838:	0009883a 	mov	r4,zero
1000283c:	00055740 	call	10005574 <__muldf3>
10002840:	01b0be74 	movhi	r6,49913
10002844:	01c06974 	movhi	r7,421
10002848:	1009883a 	mov	r4,r2
1000284c:	180b883a 	mov	r5,r3
10002850:	31bcd644 	addi	r6,r6,-3239
10002854:	39db87c4 	addi	r7,r7,28191
10002858:	00055740 	call	10005574 <__muldf3>
1000285c:	003ca406 	br	10001af0 <__alt_data_end+0xf8001af0>
10002860:	048ffc34 	movhi	r18,16368
10002864:	003ea606 	br	10002300 <__alt_data_end+0xf8002300>
10002868:	b83cce0e 	bge	r23,zero,10001ba4 <__alt_data_end+0xf8001ba4>
1000286c:	0005883a 	mov	r2,zero
10002870:	b8e0003c 	xorhi	r3,r23,32768
10002874:	003c9e06 	br	10001af0 <__alt_data_end+0xf8001af0>
10002878:	0021883a 	mov	r16,zero
1000287c:	0019883a 	mov	r12,zero
10002880:	003d3406 	br	10001d54 <__alt_data_end+0xf8001d54>
10002884:	0009883a 	mov	r4,zero
10002888:	003d2006 	br	10001d0c <__alt_data_end+0xf8001d0c>
1000288c:	008ffc34 	movhi	r2,16368
10002890:	10bfff84 	addi	r2,r2,-2
10002894:	14bcc20e 	bge	r2,r18,10001ba0 <__alt_data_end+0xf8001ba0>
10002898:	01cffc34 	movhi	r7,16368
1000289c:	3cbcd916 	blt	r7,r18,10001c04 <__alt_data_end+0xf8001c04>
100028a0:	b009883a 	mov	r4,r22
100028a4:	000d883a 	mov	r6,zero
100028a8:	180b883a 	mov	r5,r3
100028ac:	dac00915 	stw	r11,36(sp)
100028b0:	0005de00 	call	10005de0 <__subdf3>
100028b4:	01cffdf4 	movhi	r7,16375
100028b8:	1009883a 	mov	r4,r2
100028bc:	180b883a 	mov	r5,r3
100028c0:	39c551c4 	addi	r7,r7,5447
100028c4:	01980034 	movhi	r6,24576
100028c8:	1023883a 	mov	r17,r2
100028cc:	1821883a 	mov	r16,r3
100028d0:	00055740 	call	10005574 <__muldf3>
100028d4:	01be17b4 	movhi	r6,63582
100028d8:	01cf9574 	movhi	r7,15957
100028dc:	8809883a 	mov	r4,r17
100028e0:	800b883a 	mov	r5,r16
100028e4:	31b7d104 	addi	r6,r6,-8380
100028e8:	39eb82c4 	addi	r7,r7,-20981
100028ec:	1027883a 	mov	r19,r2
100028f0:	1825883a 	mov	r18,r3
100028f4:	00055740 	call	10005574 <__muldf3>
100028f8:	8809883a 	mov	r4,r17
100028fc:	800b883a 	mov	r5,r16
10002900:	880d883a 	mov	r6,r17
10002904:	800f883a 	mov	r7,r16
10002908:	1829883a 	mov	r20,r3
1000290c:	d8800815 	stw	r2,32(sp)
10002910:	00055740 	call	10005574 <__muldf3>
10002914:	8809883a 	mov	r4,r17
10002918:	800b883a 	mov	r5,r16
1000291c:	000d883a 	mov	r6,zero
10002920:	01cff434 	movhi	r7,16336
10002924:	182d883a 	mov	r22,r3
10002928:	d8800315 	stw	r2,12(sp)
1000292c:	00055740 	call	10005574 <__muldf3>
10002930:	01155574 	movhi	r4,21845
10002934:	014ff574 	movhi	r5,16341
10002938:	21155544 	addi	r4,r4,21845
1000293c:	29555544 	addi	r5,r5,21845
10002940:	100d883a 	mov	r6,r2
10002944:	180f883a 	mov	r7,r3
10002948:	0005de00 	call	10005de0 <__subdf3>
1000294c:	880d883a 	mov	r6,r17
10002950:	800f883a 	mov	r7,r16
10002954:	1009883a 	mov	r4,r2
10002958:	180b883a 	mov	r5,r3
1000295c:	00055740 	call	10005574 <__muldf3>
10002960:	0009883a 	mov	r4,zero
10002964:	014ff834 	movhi	r5,16352
10002968:	100d883a 	mov	r6,r2
1000296c:	180f883a 	mov	r7,r3
10002970:	0005de00 	call	10005de0 <__subdf3>
10002974:	da400317 	ldw	r9,12(sp)
10002978:	b00b883a 	mov	r5,r22
1000297c:	100d883a 	mov	r6,r2
10002980:	4809883a 	mov	r4,r9
10002984:	180f883a 	mov	r7,r3
10002988:	00055740 	call	10005574 <__muldf3>
1000298c:	01994b34 	movhi	r6,25900
10002990:	01cffdf4 	movhi	r7,16375
10002994:	1009883a 	mov	r4,r2
10002998:	180b883a 	mov	r5,r3
1000299c:	31a0bf84 	addi	r6,r6,-32002
100029a0:	39c551c4 	addi	r7,r7,5447
100029a4:	00055740 	call	10005574 <__muldf3>
100029a8:	da000817 	ldw	r8,32(sp)
100029ac:	a00b883a 	mov	r5,r20
100029b0:	100d883a 	mov	r6,r2
100029b4:	4009883a 	mov	r4,r8
100029b8:	180f883a 	mov	r7,r3
100029bc:	0005de00 	call	10005de0 <__subdf3>
100029c0:	9809883a 	mov	r4,r19
100029c4:	900b883a 	mov	r5,r18
100029c8:	100d883a 	mov	r6,r2
100029cc:	180f883a 	mov	r7,r3
100029d0:	1029883a 	mov	r20,r2
100029d4:	1823883a 	mov	r17,r3
100029d8:	00041140 	call	10004114 <__adddf3>
100029dc:	0009883a 	mov	r4,zero
100029e0:	180b883a 	mov	r5,r3
100029e4:	980d883a 	mov	r6,r19
100029e8:	900f883a 	mov	r7,r18
100029ec:	1821883a 	mov	r16,r3
100029f0:	0005de00 	call	10005de0 <__subdf3>
100029f4:	a009883a 	mov	r4,r20
100029f8:	003e3606 	br	100022d4 <__alt_data_end+0xf80022d4>
100029fc:	0009883a 	mov	r4,zero
10002a00:	880b883a 	mov	r5,r17
10002a04:	800d883a 	mov	r6,r16
10002a08:	980f883a 	mov	r7,r19
10002a0c:	00049b00 	call	100049b0 <__divdf3>
10002a10:	003c3706 	br	10001af0 <__alt_data_end+0xf8001af0>
10002a14:	01a20034 	movhi	r6,34816
10002a18:	01df8e34 	movhi	r7,32312
10002a1c:	900b883a 	mov	r5,r18
10002a20:	319d6704 	addi	r6,r6,30108
10002a24:	39f90f04 	addi	r7,r7,-7108
10002a28:	0009883a 	mov	r4,zero
10002a2c:	00055740 	call	10005574 <__muldf3>
10002a30:	01a20034 	movhi	r6,34816
10002a34:	01df8e34 	movhi	r7,32312
10002a38:	1009883a 	mov	r4,r2
10002a3c:	180b883a 	mov	r5,r3
10002a40:	319d6704 	addi	r6,r6,30108
10002a44:	39f90f04 	addi	r7,r7,-7108
10002a48:	00055740 	call	10005574 <__muldf3>
10002a4c:	003c2806 	br	10001af0 <__alt_data_end+0xf8001af0>
10002a50:	00800044 	movi	r2,1
10002a54:	e0bc5e1e 	bne	fp,r2,10001bd0 <__alt_data_end+0xf8001bd0>
10002a58:	18e0003c 	xorhi	r3,r3,32768
10002a5c:	b005883a 	mov	r2,r22
10002a60:	003c2306 	br	10001af0 <__alt_data_end+0xf8001af0>
10002a64:	303c3d1e 	bne	r6,zero,10001b5c <__alt_data_end+0xf8001b5c>
10002a68:	1907c83a 	sub	r3,r3,r4
10002a6c:	88c5d83a 	sra	r2,r17,r3
10002a70:	10c6983a 	sll	r3,r2,r3
10002a74:	1c401126 	beq	r3,r17,10002abc <__ieee754_pow+0x10bc>
10002a78:	0039883a 	mov	fp,zero
10002a7c:	003c0006 	br	10001a80 <__alt_data_end+0xf8001a80>
10002a80:	008ff834 	movhi	r2,16352
10002a84:	143e6216 	blt	r2,r16,10002410 <__alt_data_end+0xf8002410>
10002a88:	d8000015 	stw	zero,0(sp)
10002a8c:	d8000115 	stw	zero,4(sp)
10002a90:	003e8706 	br	100024b0 <__alt_data_end+0xf80024b0>
10002a94:	04000134 	movhi	r16,4
10002a98:	03000044 	movi	r12,1
10002a9c:	003cad06 	br	10001d54 <__alt_data_end+0xf8001d54>
10002aa0:	d9800117 	ldw	r6,4(sp)
10002aa4:	1009883a 	mov	r4,r2
10002aa8:	180b883a 	mov	r5,r3
10002aac:	0002ffc0 	call	10002ffc <scalbn>
10002ab0:	100d883a 	mov	r6,r2
10002ab4:	180f883a 	mov	r7,r3
10002ab8:	003f3306 	br	10002788 <__alt_data_end+0xf8002788>
10002abc:	1080004c 	andi	r2,r2,1
10002ac0:	02800084 	movi	r10,2
10002ac4:	50b9c83a 	sub	fp,r10,r2
10002ac8:	003bed06 	br	10001a80 <__alt_data_end+0xf8001a80>

10002acc <__ieee754_sqrt>:
10002acc:	defffd04 	addi	sp,sp,-12
10002ad0:	dc400115 	stw	r17,4(sp)
10002ad4:	dc000015 	stw	r16,0(sp)
10002ad8:	dfc00215 	stw	ra,8(sp)
10002adc:	28dffc2c 	andhi	r3,r5,32752
10002ae0:	009ffc34 	movhi	r2,32752
10002ae4:	2821883a 	mov	r16,r5
10002ae8:	2023883a 	mov	r17,r4
10002aec:	18807c26 	beq	r3,r2,10002ce0 <__ieee754_sqrt+0x214>
10002af0:	2011883a 	mov	r8,r4
10002af4:	01405f0e 	bge	zero,r5,10002c74 <__ieee754_sqrt+0x1a8>
10002af8:	2815d53a 	srai	r10,r5,20
10002afc:	50006a26 	beq	r10,zero,10002ca8 <__ieee754_sqrt+0x1dc>
10002b00:	00800434 	movhi	r2,16
10002b04:	52bf0044 	addi	r10,r10,-1023
10002b08:	10bfffc4 	addi	r2,r2,-1
10002b0c:	8084703a 	and	r2,r16,r2
10002b10:	50c0004c 	andi	r3,r10,1
10002b14:	10800434 	orhi	r2,r2,16
10002b18:	18004f1e 	bne	r3,zero,10002c58 <__ieee754_sqrt+0x18c>
10002b1c:	4006d7fa 	srli	r3,r8,31
10002b20:	5015d07a 	srai	r10,r10,1
10002b24:	1085883a 	add	r2,r2,r2
10002b28:	10c5883a 	add	r2,r2,r3
10002b2c:	01800584 	movi	r6,22
10002b30:	4207883a 	add	r3,r8,r8
10002b34:	0013883a 	mov	r9,zero
10002b38:	000b883a 	mov	r5,zero
10002b3c:	01000834 	movhi	r4,32
10002b40:	290f883a 	add	r7,r5,r4
10002b44:	1810d7fa 	srli	r8,r3,31
10002b48:	31bfffc4 	addi	r6,r6,-1
10002b4c:	11c00316 	blt	r2,r7,10002b5c <__ieee754_sqrt+0x90>
10002b50:	11c5c83a 	sub	r2,r2,r7
10002b54:	390b883a 	add	r5,r7,r4
10002b58:	4913883a 	add	r9,r9,r4
10002b5c:	1085883a 	add	r2,r2,r2
10002b60:	1205883a 	add	r2,r2,r8
10002b64:	18c7883a 	add	r3,r3,r3
10002b68:	2008d07a 	srli	r4,r4,1
10002b6c:	303ff41e 	bne	r6,zero,10002b40 <__alt_data_end+0xf8002b40>
10002b70:	01200034 	movhi	r4,32768
10002b74:	01c00804 	movi	r7,32
10002b78:	0011883a 	mov	r8,zero
10002b7c:	0017883a 	mov	r11,zero
10002b80:	201b883a 	mov	r13,r4
10002b84:	00000806 	br	10002ba8 <__ieee754_sqrt+0xdc>
10002b88:	11401726 	beq	r2,r5,10002be8 <__ieee754_sqrt+0x11c>
10002b8c:	180cd7fa 	srli	r6,r3,31
10002b90:	1085883a 	add	r2,r2,r2
10002b94:	39ffffc4 	addi	r7,r7,-1
10002b98:	1185883a 	add	r2,r2,r6
10002b9c:	18c7883a 	add	r3,r3,r3
10002ba0:	2008d07a 	srli	r4,r4,1
10002ba4:	38001726 	beq	r7,zero,10002c04 <__ieee754_sqrt+0x138>
10002ba8:	590d883a 	add	r6,r11,r4
10002bac:	28bff60e 	bge	r5,r2,10002b88 <__alt_data_end+0xf8002b88>
10002bb0:	3320002c 	andhi	r12,r6,32768
10002bb4:	3117883a 	add	r11,r6,r4
10002bb8:	63400826 	beq	r12,r13,10002bdc <__ieee754_sqrt+0x110>
10002bbc:	2819883a 	mov	r12,r5
10002bc0:	1145c83a 	sub	r2,r2,r5
10002bc4:	1980012e 	bgeu	r3,r6,10002bcc <__ieee754_sqrt+0x100>
10002bc8:	10bfffc4 	addi	r2,r2,-1
10002bcc:	1987c83a 	sub	r3,r3,r6
10002bd0:	4111883a 	add	r8,r8,r4
10002bd4:	600b883a 	mov	r5,r12
10002bd8:	003fec06 	br	10002b8c <__alt_data_end+0xf8002b8c>
10002bdc:	583ff716 	blt	r11,zero,10002bbc <__alt_data_end+0xf8002bbc>
10002be0:	2b000044 	addi	r12,r5,1
10002be4:	003ff606 	br	10002bc0 <__alt_data_end+0xf8002bc0>
10002be8:	19801936 	bltu	r3,r6,10002c50 <__ieee754_sqrt+0x184>
10002bec:	3320002c 	andhi	r12,r6,32768
10002bf0:	3117883a 	add	r11,r6,r4
10002bf4:	63404626 	beq	r12,r13,10002d10 <__ieee754_sqrt+0x244>
10002bf8:	1019883a 	mov	r12,r2
10002bfc:	0005883a 	mov	r2,zero
10002c00:	003ff206 	br	10002bcc <__alt_data_end+0xf8002bcc>
10002c04:	10c4b03a 	or	r2,r2,r3
10002c08:	10000426 	beq	r2,zero,10002c1c <__ieee754_sqrt+0x150>
10002c0c:	00bfffc4 	movi	r2,-1
10002c10:	40804326 	beq	r8,r2,10002d20 <__ieee754_sqrt+0x254>
10002c14:	4080004c 	andi	r2,r8,1
10002c18:	1211883a 	add	r8,r2,r8
10002c1c:	4004d07a 	srli	r2,r8,1
10002c20:	4807d07a 	srai	r3,r9,1
10002c24:	010ff834 	movhi	r4,16352
10002c28:	4a40004c 	andi	r9,r9,1
10002c2c:	1909883a 	add	r4,r3,r4
10002c30:	48000e1e 	bne	r9,zero,10002c6c <__ieee754_sqrt+0x1a0>
10002c34:	5006953a 	slli	r3,r10,20
10002c38:	1907883a 	add	r3,r3,r4
10002c3c:	dfc00217 	ldw	ra,8(sp)
10002c40:	dc400117 	ldw	r17,4(sp)
10002c44:	dc000017 	ldw	r16,0(sp)
10002c48:	dec00304 	addi	sp,sp,12
10002c4c:	f800283a 	ret
10002c50:	100b883a 	mov	r5,r2
10002c54:	003fcd06 	br	10002b8c <__alt_data_end+0xf8002b8c>
10002c58:	4006d7fa 	srli	r3,r8,31
10002c5c:	1085883a 	add	r2,r2,r2
10002c60:	4211883a 	add	r8,r8,r8
10002c64:	10c5883a 	add	r2,r2,r3
10002c68:	003fac06 	br	10002b1c <__alt_data_end+0xf8002b1c>
10002c6c:	10a00034 	orhi	r2,r2,32768
10002c70:	003ff006 	br	10002c34 <__alt_data_end+0xf8002c34>
10002c74:	00a00034 	movhi	r2,32768
10002c78:	10bfffc4 	addi	r2,r2,-1
10002c7c:	2884703a 	and	r2,r5,r2
10002c80:	1104b03a 	or	r2,r2,r4
10002c84:	10001f26 	beq	r2,zero,10002d04 <__ieee754_sqrt+0x238>
10002c88:	28002c1e 	bne	r5,zero,10002d3c <__ieee754_sqrt+0x270>
10002c8c:	0015883a 	mov	r10,zero
10002c90:	4020d2fa 	srli	r16,r8,11
10002c94:	52bffac4 	addi	r10,r10,-21
10002c98:	4010957a 	slli	r8,r8,21
10002c9c:	803ffc26 	beq	r16,zero,10002c90 <__alt_data_end+0xf8002c90>
10002ca0:	8080042c 	andhi	r2,r16,16
10002ca4:	1000211e 	bne	r2,zero,10002d2c <__ieee754_sqrt+0x260>
10002ca8:	0005883a 	mov	r2,zero
10002cac:	8421883a 	add	r16,r16,r16
10002cb0:	80c0042c 	andhi	r3,r16,16
10002cb4:	10800044 	addi	r2,r2,1
10002cb8:	183ffc26 	beq	r3,zero,10002cac <__alt_data_end+0xf8002cac>
10002cbc:	01000044 	movi	r4,1
10002cc0:	00c00804 	movi	r3,32
10002cc4:	2089c83a 	sub	r4,r4,r2
10002cc8:	1887c83a 	sub	r3,r3,r2
10002ccc:	40c6d83a 	srl	r3,r8,r3
10002cd0:	5115883a 	add	r10,r10,r4
10002cd4:	4090983a 	sll	r8,r8,r2
10002cd8:	80e0b03a 	or	r16,r16,r3
10002cdc:	003f8806 	br	10002b00 <__alt_data_end+0xf8002b00>
10002ce0:	200d883a 	mov	r6,r4
10002ce4:	280f883a 	mov	r7,r5
10002ce8:	00055740 	call	10005574 <__muldf3>
10002cec:	1009883a 	mov	r4,r2
10002cf0:	180b883a 	mov	r5,r3
10002cf4:	880d883a 	mov	r6,r17
10002cf8:	800f883a 	mov	r7,r16
10002cfc:	00041140 	call	10004114 <__adddf3>
10002d00:	003fce06 	br	10002c3c <__alt_data_end+0xf8002c3c>
10002d04:	2005883a 	mov	r2,r4
10002d08:	2807883a 	mov	r3,r5
10002d0c:	003fcb06 	br	10002c3c <__alt_data_end+0xf8002c3c>
10002d10:	583fb30e 	bge	r11,zero,10002be0 <__alt_data_end+0xf8002be0>
10002d14:	0005883a 	mov	r2,zero
10002d18:	2819883a 	mov	r12,r5
10002d1c:	003fab06 	br	10002bcc <__alt_data_end+0xf8002bcc>
10002d20:	4a400044 	addi	r9,r9,1
10002d24:	0005883a 	mov	r2,zero
10002d28:	003fbd06 	br	10002c20 <__alt_data_end+0xf8002c20>
10002d2c:	00c00804 	movi	r3,32
10002d30:	01000044 	movi	r4,1
10002d34:	0005883a 	mov	r2,zero
10002d38:	003fe406 	br	10002ccc <__alt_data_end+0xf8002ccc>
10002d3c:	200d883a 	mov	r6,r4
10002d40:	280f883a 	mov	r7,r5
10002d44:	0005de00 	call	10005de0 <__subdf3>
10002d48:	1009883a 	mov	r4,r2
10002d4c:	180b883a 	mov	r5,r3
10002d50:	100d883a 	mov	r6,r2
10002d54:	180f883a 	mov	r7,r3
10002d58:	00049b00 	call	100049b0 <__divdf3>
10002d5c:	003fb706 	br	10002c3c <__alt_data_end+0xf8002c3c>

10002d60 <fabs>:
10002d60:	00e00034 	movhi	r3,32768
10002d64:	18ffffc4 	addi	r3,r3,-1
10002d68:	2005883a 	mov	r2,r4
10002d6c:	28c6703a 	and	r3,r5,r3
10002d70:	f800283a 	ret

10002d74 <finite>:
10002d74:	00a00034 	movhi	r2,32768
10002d78:	10bfffc4 	addi	r2,r2,-1
10002d7c:	288a703a 	and	r5,r5,r2
10002d80:	00e00434 	movhi	r3,32784
10002d84:	28c5883a 	add	r2,r5,r3
10002d88:	1004d7fa 	srli	r2,r2,31
10002d8c:	f800283a 	ret

10002d90 <__fpclassifyd>:
10002d90:	00a00034 	movhi	r2,32768
10002d94:	10bfffc4 	addi	r2,r2,-1
10002d98:	2884703a 	and	r2,r5,r2
10002d9c:	10000726 	beq	r2,zero,10002dbc <__fpclassifyd+0x2c>
10002da0:	00fffc34 	movhi	r3,65520
10002da4:	019ff834 	movhi	r6,32736
10002da8:	28c7883a 	add	r3,r5,r3
10002dac:	31bfffc4 	addi	r6,r6,-1
10002db0:	30c00536 	bltu	r6,r3,10002dc8 <__fpclassifyd+0x38>
10002db4:	00800104 	movi	r2,4
10002db8:	f800283a 	ret
10002dbc:	2000021e 	bne	r4,zero,10002dc8 <__fpclassifyd+0x38>
10002dc0:	00800084 	movi	r2,2
10002dc4:	f800283a 	ret
10002dc8:	00dffc34 	movhi	r3,32752
10002dcc:	019ff834 	movhi	r6,32736
10002dd0:	28cb883a 	add	r5,r5,r3
10002dd4:	31bfffc4 	addi	r6,r6,-1
10002dd8:	317ff62e 	bgeu	r6,r5,10002db4 <__alt_data_end+0xf8002db4>
10002ddc:	01400434 	movhi	r5,16
10002de0:	297fffc4 	addi	r5,r5,-1
10002de4:	28800236 	bltu	r5,r2,10002df0 <__fpclassifyd+0x60>
10002de8:	008000c4 	movi	r2,3
10002dec:	f800283a 	ret
10002df0:	10c00226 	beq	r2,r3,10002dfc <__fpclassifyd+0x6c>
10002df4:	0005883a 	mov	r2,zero
10002df8:	f800283a 	ret
10002dfc:	2005003a 	cmpeq	r2,r4,zero
10002e00:	f800283a 	ret

10002e04 <matherr>:
10002e04:	0005883a 	mov	r2,zero
10002e08:	f800283a 	ret

10002e0c <nan>:
10002e0c:	0005883a 	mov	r2,zero
10002e10:	00dffe34 	movhi	r3,32760
10002e14:	f800283a 	ret

10002e18 <rint>:
10002e18:	2813d53a 	srai	r9,r5,20
10002e1c:	defff904 	addi	sp,sp,-28
10002e20:	dc400315 	stw	r17,12(sp)
10002e24:	4a41ffcc 	andi	r9,r9,2047
10002e28:	dfc00615 	stw	ra,24(sp)
10002e2c:	dcc00515 	stw	r19,20(sp)
10002e30:	dc800415 	stw	r18,16(sp)
10002e34:	dc000215 	stw	r16,8(sp)
10002e38:	02c004c4 	movi	r11,19
10002e3c:	4abf0044 	addi	r10,r9,-1023
10002e40:	2811883a 	mov	r8,r5
10002e44:	2005883a 	mov	r2,r4
10002e48:	280f883a 	mov	r7,r5
10002e4c:	200d883a 	mov	r6,r4
10002e50:	2822d7fa 	srli	r17,r5,31
10002e54:	5a801316 	blt	r11,r10,10002ea4 <rint+0x8c>
10002e58:	50003c16 	blt	r10,zero,10002f4c <rint+0x134>
10002e5c:	00c00434 	movhi	r3,16
10002e60:	18ffffc4 	addi	r3,r3,-1
10002e64:	1a87d83a 	sra	r3,r3,r10
10002e68:	1948703a 	and	r4,r3,r5
10002e6c:	2088b03a 	or	r4,r4,r2
10002e70:	20001026 	beq	r4,zero,10002eb4 <rint+0x9c>
10002e74:	1804d07a 	srli	r2,r3,1
10002e78:	1146703a 	and	r3,r2,r5
10002e7c:	198cb03a 	or	r6,r3,r6
10002e80:	30005526 	beq	r6,zero,10002fd8 <rint+0x1c0>
10002e84:	52c05b26 	beq	r10,r11,10002ff4 <rint+0x1dc>
10002e88:	000d883a 	mov	r6,zero
10002e8c:	00c00134 	movhi	r3,4
10002e90:	1a87d83a 	sra	r3,r3,r10
10002e94:	0084303a 	nor	r2,zero,r2
10002e98:	1210703a 	and	r8,r2,r8
10002e9c:	40ceb03a 	or	r7,r8,r3
10002ea0:	00001906 	br	10002f08 <rint+0xf0>
10002ea4:	00c00cc4 	movi	r3,51
10002ea8:	1a800a0e 	bge	r3,r10,10002ed4 <rint+0xbc>
10002eac:	00c10004 	movi	r3,1024
10002eb0:	50c04d26 	beq	r10,r3,10002fe8 <rint+0x1d0>
10002eb4:	3807883a 	mov	r3,r7
10002eb8:	dfc00617 	ldw	ra,24(sp)
10002ebc:	dcc00517 	ldw	r19,20(sp)
10002ec0:	dc800417 	ldw	r18,16(sp)
10002ec4:	dc400317 	ldw	r17,12(sp)
10002ec8:	dc000217 	ldw	r16,8(sp)
10002ecc:	dec00704 	addi	sp,sp,28
10002ed0:	f800283a 	ret
10002ed4:	4a7efb44 	addi	r9,r9,-1043
10002ed8:	00ffffc4 	movi	r3,-1
10002edc:	1a46d83a 	srl	r3,r3,r9
10002ee0:	1908703a 	and	r4,r3,r4
10002ee4:	20003e26 	beq	r4,zero,10002fe0 <rint+0x1c8>
10002ee8:	1806d07a 	srli	r3,r3,1
10002eec:	1884703a 	and	r2,r3,r2
10002ef0:	10000526 	beq	r2,zero,10002f08 <rint+0xf0>
10002ef4:	00900034 	movhi	r2,16384
10002ef8:	1253d83a 	sra	r9,r2,r9
10002efc:	00c6303a 	nor	r3,zero,r3
10002f00:	198c703a 	and	r6,r3,r6
10002f04:	324cb03a 	or	r6,r6,r9
10002f08:	882290fa 	slli	r17,r17,3
10002f0c:	00c40074 	movhi	r3,4097
10002f10:	18c90e04 	addi	r3,r3,9272
10002f14:	1c63883a 	add	r17,r3,r17
10002f18:	8c800017 	ldw	r18,0(r17)
10002f1c:	8c000117 	ldw	r16,4(r17)
10002f20:	9009883a 	mov	r4,r18
10002f24:	800b883a 	mov	r5,r16
10002f28:	00041140 	call	10004114 <__adddf3>
10002f2c:	d8800015 	stw	r2,0(sp)
10002f30:	d8c00115 	stw	r3,4(sp)
10002f34:	d9000017 	ldw	r4,0(sp)
10002f38:	d9400117 	ldw	r5,4(sp)
10002f3c:	900d883a 	mov	r6,r18
10002f40:	800f883a 	mov	r7,r16
10002f44:	0005de00 	call	10005de0 <__subdf3>
10002f48:	003fdb06 	br	10002eb8 <__alt_data_end+0xf8002eb8>
10002f4c:	04200034 	movhi	r16,32768
10002f50:	843fffc4 	addi	r16,r16,-1
10002f54:	2c06703a 	and	r3,r5,r16
10002f58:	1906b03a 	or	r3,r3,r4
10002f5c:	18002026 	beq	r3,zero,10002fe0 <rint+0x1c8>
10002f60:	00c00434 	movhi	r3,16
10002f64:	18ffffc4 	addi	r3,r3,-1
10002f68:	28c6703a 	and	r3,r5,r3
10002f6c:	1886b03a 	or	r3,r3,r2
10002f70:	880890fa 	slli	r4,r17,3
10002f74:	00d3c83a 	sub	r9,zero,r3
10002f78:	48d2b03a 	or	r9,r9,r3
10002f7c:	00c40074 	movhi	r3,4097
10002f80:	18c90e04 	addi	r3,r3,9272
10002f84:	1907883a 	add	r3,r3,r4
10002f88:	4812d33a 	srli	r9,r9,12
10002f8c:	1cc00017 	ldw	r19,0(r3)
10002f90:	1c800117 	ldw	r18,4(r3)
10002f94:	4a40022c 	andhi	r9,r9,8
10002f98:	29ffffac 	andhi	r7,r5,65534
10002f9c:	49ceb03a 	or	r7,r9,r7
10002fa0:	9809883a 	mov	r4,r19
10002fa4:	900b883a 	mov	r5,r18
10002fa8:	00041140 	call	10004114 <__adddf3>
10002fac:	d8800015 	stw	r2,0(sp)
10002fb0:	d8c00115 	stw	r3,4(sp)
10002fb4:	d9000017 	ldw	r4,0(sp)
10002fb8:	d9400117 	ldw	r5,4(sp)
10002fbc:	980d883a 	mov	r6,r19
10002fc0:	900f883a 	mov	r7,r18
10002fc4:	0005de00 	call	10005de0 <__subdf3>
10002fc8:	881097fa 	slli	r8,r17,31
10002fcc:	1c06703a 	and	r3,r3,r16
10002fd0:	40c6b03a 	or	r3,r8,r3
10002fd4:	003fb806 	br	10002eb8 <__alt_data_end+0xf8002eb8>
10002fd8:	000d883a 	mov	r6,zero
10002fdc:	003fca06 	br	10002f08 <__alt_data_end+0xf8002f08>
10002fe0:	4007883a 	mov	r3,r8
10002fe4:	003fb406 	br	10002eb8 <__alt_data_end+0xf8002eb8>
10002fe8:	200d883a 	mov	r6,r4
10002fec:	00041140 	call	10004114 <__adddf3>
10002ff0:	003fb106 	br	10002eb8 <__alt_data_end+0xf8002eb8>
10002ff4:	01a00034 	movhi	r6,32768
10002ff8:	003fa406 	br	10002e8c <__alt_data_end+0xf8002e8c>

10002ffc <scalbn>:
10002ffc:	2a1ffc2c 	andhi	r8,r5,32752
10003000:	4011d53a 	srai	r8,r8,20
10003004:	defffe04 	addi	sp,sp,-8
10003008:	dc000015 	stw	r16,0(sp)
1000300c:	dfc00115 	stw	ra,4(sp)
10003010:	280f883a 	mov	r7,r5
10003014:	2015883a 	mov	r10,r4
10003018:	3021883a 	mov	r16,r6
1000301c:	4000251e 	bne	r8,zero,100030b4 <scalbn+0xb8>
10003020:	00a00034 	movhi	r2,32768
10003024:	10bfffc4 	addi	r2,r2,-1
10003028:	2884703a 	and	r2,r5,r2
1000302c:	1104b03a 	or	r2,r2,r4
10003030:	10003126 	beq	r2,zero,100030f8 <scalbn+0xfc>
10003034:	01d0d434 	movhi	r7,17232
10003038:	000d883a 	mov	r6,zero
1000303c:	00055740 	call	10005574 <__muldf3>
10003040:	013ffff4 	movhi	r4,65535
10003044:	210f2c04 	addi	r4,r4,15536
10003048:	1015883a 	mov	r10,r2
1000304c:	180f883a 	mov	r7,r3
10003050:	81002f16 	blt	r16,r4,10003110 <scalbn+0x114>
10003054:	1a5ffc2c 	andhi	r9,r3,32752
10003058:	4813d53a 	srai	r9,r9,20
1000305c:	0081ff84 	movi	r2,2046
10003060:	180d883a 	mov	r6,r3
10003064:	4a3ff284 	addi	r8,r9,-54
10003068:	4411883a 	add	r8,r8,r16
1000306c:	1200170e 	bge	r2,r8,100030cc <scalbn+0xd0>
10003070:	01220034 	movhi	r4,34816
10003074:	015f8e34 	movhi	r5,32312
10003078:	500d883a 	mov	r6,r10
1000307c:	211d6704 	addi	r4,r4,30108
10003080:	29790f04 	addi	r5,r5,-7108
10003084:	00031c80 	call	100031c8 <copysign>
10003088:	01a20034 	movhi	r6,34816
1000308c:	01df8e34 	movhi	r7,32312
10003090:	1009883a 	mov	r4,r2
10003094:	180b883a 	mov	r5,r3
10003098:	319d6704 	addi	r6,r6,30108
1000309c:	39f90f04 	addi	r7,r7,-7108
100030a0:	00055740 	call	10005574 <__muldf3>
100030a4:	dfc00117 	ldw	ra,4(sp)
100030a8:	dc000017 	ldw	r16,0(sp)
100030ac:	dec00204 	addi	sp,sp,8
100030b0:	f800283a 	ret
100030b4:	0081ffc4 	movi	r2,2047
100030b8:	280d883a 	mov	r6,r5
100030bc:	40803126 	beq	r8,r2,10003184 <scalbn+0x188>
100030c0:	4411883a 	add	r8,r8,r16
100030c4:	0081ff84 	movi	r2,2046
100030c8:	123fe916 	blt	r2,r8,10003070 <__alt_data_end+0xf8003070>
100030cc:	02001b0e 	bge	zero,r8,1000313c <scalbn+0x140>
100030d0:	4010953a 	slli	r8,r8,20
100030d4:	00e00434 	movhi	r3,32784
100030d8:	18ffffc4 	addi	r3,r3,-1
100030dc:	30ce703a 	and	r7,r6,r3
100030e0:	5005883a 	mov	r2,r10
100030e4:	41c6b03a 	or	r3,r8,r7
100030e8:	dfc00117 	ldw	ra,4(sp)
100030ec:	dc000017 	ldw	r16,0(sp)
100030f0:	dec00204 	addi	sp,sp,8
100030f4:	f800283a 	ret
100030f8:	2005883a 	mov	r2,r4
100030fc:	2807883a 	mov	r3,r5
10003100:	dfc00117 	ldw	ra,4(sp)
10003104:	dc000017 	ldw	r16,0(sp)
10003108:	dec00204 	addi	sp,sp,8
1000310c:	f800283a 	ret
10003110:	01b0be74 	movhi	r6,49913
10003114:	01c06974 	movhi	r7,421
10003118:	31bcd644 	addi	r6,r6,-3239
1000311c:	39db87c4 	addi	r7,r7,28191
10003120:	1009883a 	mov	r4,r2
10003124:	180b883a 	mov	r5,r3
10003128:	00055740 	call	10005574 <__muldf3>
1000312c:	dfc00117 	ldw	ra,4(sp)
10003130:	dc000017 	ldw	r16,0(sp)
10003134:	dec00204 	addi	sp,sp,8
10003138:	f800283a 	ret
1000313c:	00bff2c4 	movi	r2,-53
10003140:	4080160e 	bge	r8,r2,1000319c <scalbn+0x1a0>
10003144:	00b0d414 	movui	r2,50000
10003148:	143fc916 	blt	r2,r16,10003070 <__alt_data_end+0xf8003070>
1000314c:	0130be74 	movhi	r4,49913
10003150:	01406974 	movhi	r5,421
10003154:	500d883a 	mov	r6,r10
10003158:	213cd644 	addi	r4,r4,-3239
1000315c:	295b87c4 	addi	r5,r5,28191
10003160:	00031c80 	call	100031c8 <copysign>
10003164:	01b0be74 	movhi	r6,49913
10003168:	01c06974 	movhi	r7,421
1000316c:	1009883a 	mov	r4,r2
10003170:	180b883a 	mov	r5,r3
10003174:	31bcd644 	addi	r6,r6,-3239
10003178:	39db87c4 	addi	r7,r7,28191
1000317c:	00055740 	call	10005574 <__muldf3>
10003180:	003fd906 	br	100030e8 <__alt_data_end+0xf80030e8>
10003184:	200d883a 	mov	r6,r4
10003188:	00041140 	call	10004114 <__adddf3>
1000318c:	dfc00117 	ldw	ra,4(sp)
10003190:	dc000017 	ldw	r16,0(sp)
10003194:	dec00204 	addi	sp,sp,8
10003198:	f800283a 	ret
1000319c:	42000d84 	addi	r8,r8,54
100031a0:	4012953a 	slli	r9,r8,20
100031a4:	01e00434 	movhi	r7,32784
100031a8:	39ffffc4 	addi	r7,r7,-1
100031ac:	31ca703a 	and	r5,r6,r7
100031b0:	5009883a 	mov	r4,r10
100031b4:	494ab03a 	or	r5,r9,r5
100031b8:	000d883a 	mov	r6,zero
100031bc:	01cf2434 	movhi	r7,15504
100031c0:	00055740 	call	10005574 <__muldf3>
100031c4:	003fc806 	br	100030e8 <__alt_data_end+0xf80030e8>

100031c8 <copysign>:
100031c8:	2005883a 	mov	r2,r4
100031cc:	01200034 	movhi	r4,32768
100031d0:	213fffc4 	addi	r4,r4,-1
100031d4:	38e0002c 	andhi	r3,r7,32768
100031d8:	290a703a 	and	r5,r5,r4
100031dc:	1946b03a 	or	r3,r3,r5
100031e0:	f800283a 	ret

100031e4 <__muldi3>:
100031e4:	defff604 	addi	sp,sp,-40
100031e8:	dd800615 	stw	r22,24(sp)
100031ec:	dd400515 	stw	r21,20(sp)
100031f0:	25bfffcc 	andi	r22,r4,65535
100031f4:	357fffcc 	andi	r21,r6,65535
100031f8:	dc400115 	stw	r17,4(sp)
100031fc:	2022d43a 	srli	r17,r4,16
10003200:	dcc00315 	stw	r19,12(sp)
10003204:	dc800215 	stw	r18,8(sp)
10003208:	2027883a 	mov	r19,r4
1000320c:	2825883a 	mov	r18,r5
10003210:	a809883a 	mov	r4,r21
10003214:	b00b883a 	mov	r5,r22
10003218:	dfc00915 	stw	ra,36(sp)
1000321c:	df000815 	stw	fp,32(sp)
10003220:	ddc00715 	stw	r23,28(sp)
10003224:	3839883a 	mov	fp,r7
10003228:	302ed43a 	srli	r23,r6,16
1000322c:	dd000415 	stw	r20,16(sp)
10003230:	dc000015 	stw	r16,0(sp)
10003234:	3029883a 	mov	r20,r6
10003238:	00040ec0 	call	100040ec <__mulsi3>
1000323c:	a809883a 	mov	r4,r21
10003240:	880b883a 	mov	r5,r17
10003244:	1021883a 	mov	r16,r2
10003248:	00040ec0 	call	100040ec <__mulsi3>
1000324c:	880b883a 	mov	r5,r17
10003250:	b809883a 	mov	r4,r23
10003254:	102b883a 	mov	r21,r2
10003258:	00040ec0 	call	100040ec <__mulsi3>
1000325c:	b809883a 	mov	r4,r23
10003260:	b00b883a 	mov	r5,r22
10003264:	1023883a 	mov	r17,r2
10003268:	00040ec0 	call	100040ec <__mulsi3>
1000326c:	8012d43a 	srli	r9,r16,16
10003270:	a885883a 	add	r2,r21,r2
10003274:	1251883a 	add	r8,r2,r9
10003278:	4540022e 	bgeu	r8,r21,10003284 <__muldi3+0xa0>
1000327c:	00800074 	movhi	r2,1
10003280:	88a3883a 	add	r17,r17,r2
10003284:	4006d43a 	srli	r3,r8,16
10003288:	4010943a 	slli	r8,r8,16
1000328c:	9809883a 	mov	r4,r19
10003290:	e00b883a 	mov	r5,fp
10003294:	843fffcc 	andi	r16,r16,65535
10003298:	88e3883a 	add	r17,r17,r3
1000329c:	4421883a 	add	r16,r8,r16
100032a0:	00040ec0 	call	100040ec <__mulsi3>
100032a4:	a009883a 	mov	r4,r20
100032a8:	900b883a 	mov	r5,r18
100032ac:	1027883a 	mov	r19,r2
100032b0:	00040ec0 	call	100040ec <__mulsi3>
100032b4:	9885883a 	add	r2,r19,r2
100032b8:	1447883a 	add	r3,r2,r17
100032bc:	8005883a 	mov	r2,r16
100032c0:	dfc00917 	ldw	ra,36(sp)
100032c4:	df000817 	ldw	fp,32(sp)
100032c8:	ddc00717 	ldw	r23,28(sp)
100032cc:	dd800617 	ldw	r22,24(sp)
100032d0:	dd400517 	ldw	r21,20(sp)
100032d4:	dd000417 	ldw	r20,16(sp)
100032d8:	dcc00317 	ldw	r19,12(sp)
100032dc:	dc800217 	ldw	r18,8(sp)
100032e0:	dc400117 	ldw	r17,4(sp)
100032e4:	dc000017 	ldw	r16,0(sp)
100032e8:	dec00a04 	addi	sp,sp,40
100032ec:	f800283a 	ret

100032f0 <__fixunsdfsi>:
100032f0:	defffd04 	addi	sp,sp,-12
100032f4:	000d883a 	mov	r6,zero
100032f8:	01d07834 	movhi	r7,16864
100032fc:	dc400115 	stw	r17,4(sp)
10003300:	dc000015 	stw	r16,0(sp)
10003304:	dfc00215 	stw	ra,8(sp)
10003308:	2023883a 	mov	r17,r4
1000330c:	2821883a 	mov	r16,r5
10003310:	00053b40 	call	100053b4 <__gedf2>
10003314:	1000080e 	bge	r2,zero,10003338 <__fixunsdfsi+0x48>
10003318:	8809883a 	mov	r4,r17
1000331c:	800b883a 	mov	r5,r16
10003320:	00066b00 	call	100066b0 <__fixdfsi>
10003324:	dfc00217 	ldw	ra,8(sp)
10003328:	dc400117 	ldw	r17,4(sp)
1000332c:	dc000017 	ldw	r16,0(sp)
10003330:	dec00304 	addi	sp,sp,12
10003334:	f800283a 	ret
10003338:	000d883a 	mov	r6,zero
1000333c:	01d07834 	movhi	r7,16864
10003340:	8809883a 	mov	r4,r17
10003344:	800b883a 	mov	r5,r16
10003348:	0005de00 	call	10005de0 <__subdf3>
1000334c:	180b883a 	mov	r5,r3
10003350:	1009883a 	mov	r4,r2
10003354:	00066b00 	call	100066b0 <__fixdfsi>
10003358:	00e00034 	movhi	r3,32768
1000335c:	10c5883a 	add	r2,r2,r3
10003360:	003ff006 	br	10003324 <__alt_data_end+0xf8003324>

10003364 <__udivdi3>:
10003364:	defff504 	addi	sp,sp,-44
10003368:	dcc00415 	stw	r19,16(sp)
1000336c:	dc000115 	stw	r16,4(sp)
10003370:	dfc00a15 	stw	ra,40(sp)
10003374:	df000915 	stw	fp,36(sp)
10003378:	ddc00815 	stw	r23,32(sp)
1000337c:	dd800715 	stw	r22,28(sp)
10003380:	dd400615 	stw	r21,24(sp)
10003384:	dd000515 	stw	r20,20(sp)
10003388:	dc800315 	stw	r18,12(sp)
1000338c:	dc400215 	stw	r17,8(sp)
10003390:	2027883a 	mov	r19,r4
10003394:	2821883a 	mov	r16,r5
10003398:	3800471e 	bne	r7,zero,100034b8 <__udivdi3+0x154>
1000339c:	3025883a 	mov	r18,r6
100033a0:	2023883a 	mov	r17,r4
100033a4:	2980592e 	bgeu	r5,r6,1000350c <__udivdi3+0x1a8>
100033a8:	00bfffd4 	movui	r2,65535
100033ac:	2829883a 	mov	r20,r5
100033b0:	1180b236 	bltu	r2,r6,1000367c <__udivdi3+0x318>
100033b4:	00803fc4 	movi	r2,255
100033b8:	1181622e 	bgeu	r2,r6,10003944 <__udivdi3+0x5e0>
100033bc:	00800204 	movi	r2,8
100033c0:	1007883a 	mov	r3,r2
100033c4:	3084d83a 	srl	r2,r6,r2
100033c8:	01040074 	movhi	r4,4097
100033cc:	21091204 	addi	r4,r4,9288
100033d0:	2085883a 	add	r2,r4,r2
100033d4:	11000003 	ldbu	r4,0(r2)
100033d8:	20c9883a 	add	r4,r4,r3
100033dc:	00c00804 	movi	r3,32
100033e0:	1907c83a 	sub	r3,r3,r4
100033e4:	18000526 	beq	r3,zero,100033fc <__udivdi3+0x98>
100033e8:	80e0983a 	sll	r16,r16,r3
100033ec:	9908d83a 	srl	r4,r19,r4
100033f0:	30e4983a 	sll	r18,r6,r3
100033f4:	98e2983a 	sll	r17,r19,r3
100033f8:	8128b03a 	or	r20,r16,r4
100033fc:	902ad43a 	srli	r21,r18,16
10003400:	a009883a 	mov	r4,r20
10003404:	95bfffcc 	andi	r22,r18,65535
10003408:	a80b883a 	mov	r5,r21
1000340c:	00040e40 	call	100040e4 <__umodsi3>
10003410:	a009883a 	mov	r4,r20
10003414:	a80b883a 	mov	r5,r21
10003418:	102f883a 	mov	r23,r2
1000341c:	00040dc0 	call	100040dc <__udivsi3>
10003420:	1009883a 	mov	r4,r2
10003424:	b00b883a 	mov	r5,r22
10003428:	1021883a 	mov	r16,r2
1000342c:	00040ec0 	call	100040ec <__mulsi3>
10003430:	b82e943a 	slli	r23,r23,16
10003434:	8808d43a 	srli	r4,r17,16
10003438:	b906b03a 	or	r3,r23,r4
1000343c:	1880052e 	bgeu	r3,r2,10003454 <__udivdi3+0xf0>
10003440:	1c87883a 	add	r3,r3,r18
10003444:	813fffc4 	addi	r4,r16,-1
10003448:	1c800136 	bltu	r3,r18,10003450 <__udivdi3+0xec>
1000344c:	18815236 	bltu	r3,r2,10003998 <__udivdi3+0x634>
10003450:	2021883a 	mov	r16,r4
10003454:	18a7c83a 	sub	r19,r3,r2
10003458:	9809883a 	mov	r4,r19
1000345c:	a80b883a 	mov	r5,r21
10003460:	00040e40 	call	100040e4 <__umodsi3>
10003464:	1029883a 	mov	r20,r2
10003468:	9809883a 	mov	r4,r19
1000346c:	a80b883a 	mov	r5,r21
10003470:	a028943a 	slli	r20,r20,16
10003474:	00040dc0 	call	100040dc <__udivsi3>
10003478:	1009883a 	mov	r4,r2
1000347c:	b00b883a 	mov	r5,r22
10003480:	8c7fffcc 	andi	r17,r17,65535
10003484:	1027883a 	mov	r19,r2
10003488:	a462b03a 	or	r17,r20,r17
1000348c:	00040ec0 	call	100040ec <__mulsi3>
10003490:	8880052e 	bgeu	r17,r2,100034a8 <__udivdi3+0x144>
10003494:	8ca3883a 	add	r17,r17,r18
10003498:	98ffffc4 	addi	r3,r19,-1
1000349c:	8c811036 	bltu	r17,r18,100038e0 <__udivdi3+0x57c>
100034a0:	88810f2e 	bgeu	r17,r2,100038e0 <__udivdi3+0x57c>
100034a4:	9cffff84 	addi	r19,r19,-2
100034a8:	8020943a 	slli	r16,r16,16
100034ac:	0007883a 	mov	r3,zero
100034b0:	9c04b03a 	or	r2,r19,r16
100034b4:	00006006 	br	10003638 <__udivdi3+0x2d4>
100034b8:	29c05d36 	bltu	r5,r7,10003630 <__udivdi3+0x2cc>
100034bc:	00bfffd4 	movui	r2,65535
100034c0:	11c0692e 	bgeu	r2,r7,10003668 <__udivdi3+0x304>
100034c4:	00804034 	movhi	r2,256
100034c8:	10bfffc4 	addi	r2,r2,-1
100034cc:	11c10e2e 	bgeu	r2,r7,10003908 <__udivdi3+0x5a4>
100034d0:	01400604 	movi	r5,24
100034d4:	2811883a 	mov	r8,r5
100034d8:	394ad83a 	srl	r5,r7,r5
100034dc:	00840074 	movhi	r2,4097
100034e0:	10891204 	addi	r2,r2,9288
100034e4:	114b883a 	add	r5,r2,r5
100034e8:	29400003 	ldbu	r5,0(r5)
100034ec:	00c00804 	movi	r3,32
100034f0:	2a0b883a 	add	r5,r5,r8
100034f4:	196fc83a 	sub	r23,r3,r5
100034f8:	b8006b1e 	bne	r23,zero,100036a8 <__udivdi3+0x344>
100034fc:	3c011436 	bltu	r7,r16,10003950 <__udivdi3+0x5ec>
10003500:	9985403a 	cmpgeu	r2,r19,r6
10003504:	0007883a 	mov	r3,zero
10003508:	00004b06 	br	10003638 <__udivdi3+0x2d4>
1000350c:	3000041e 	bne	r6,zero,10003520 <__udivdi3+0x1bc>
10003510:	01000044 	movi	r4,1
10003514:	000b883a 	mov	r5,zero
10003518:	00040dc0 	call	100040dc <__udivsi3>
1000351c:	1025883a 	mov	r18,r2
10003520:	00bfffd4 	movui	r2,65535
10003524:	14805b2e 	bgeu	r2,r18,10003694 <__udivdi3+0x330>
10003528:	00804034 	movhi	r2,256
1000352c:	10bfffc4 	addi	r2,r2,-1
10003530:	1480fe2e 	bgeu	r2,r18,1000392c <__udivdi3+0x5c8>
10003534:	00800604 	movi	r2,24
10003538:	1007883a 	mov	r3,r2
1000353c:	9084d83a 	srl	r2,r18,r2
10003540:	01040074 	movhi	r4,4097
10003544:	21091204 	addi	r4,r4,9288
10003548:	2085883a 	add	r2,r4,r2
1000354c:	11800003 	ldbu	r6,0(r2)
10003550:	01c00804 	movi	r7,32
10003554:	30c7883a 	add	r3,r6,r3
10003558:	38cfc83a 	sub	r7,r7,r3
1000355c:	3800a71e 	bne	r7,zero,100037fc <__udivdi3+0x498>
10003560:	9028d43a 	srli	r20,r18,16
10003564:	84a1c83a 	sub	r16,r16,r18
10003568:	957fffcc 	andi	r21,r18,65535
1000356c:	00c00044 	movi	r3,1
10003570:	8009883a 	mov	r4,r16
10003574:	a00b883a 	mov	r5,r20
10003578:	d8c00015 	stw	r3,0(sp)
1000357c:	00040e40 	call	100040e4 <__umodsi3>
10003580:	8009883a 	mov	r4,r16
10003584:	a00b883a 	mov	r5,r20
10003588:	102d883a 	mov	r22,r2
1000358c:	00040dc0 	call	100040dc <__udivsi3>
10003590:	1009883a 	mov	r4,r2
10003594:	a80b883a 	mov	r5,r21
10003598:	1021883a 	mov	r16,r2
1000359c:	00040ec0 	call	100040ec <__mulsi3>
100035a0:	b02c943a 	slli	r22,r22,16
100035a4:	880ed43a 	srli	r7,r17,16
100035a8:	d8c00017 	ldw	r3,0(sp)
100035ac:	b1ccb03a 	or	r6,r22,r7
100035b0:	3080052e 	bgeu	r6,r2,100035c8 <__udivdi3+0x264>
100035b4:	348d883a 	add	r6,r6,r18
100035b8:	813fffc4 	addi	r4,r16,-1
100035bc:	34800136 	bltu	r6,r18,100035c4 <__udivdi3+0x260>
100035c0:	3080f236 	bltu	r6,r2,1000398c <__udivdi3+0x628>
100035c4:	2021883a 	mov	r16,r4
100035c8:	30a7c83a 	sub	r19,r6,r2
100035cc:	9809883a 	mov	r4,r19
100035d0:	a00b883a 	mov	r5,r20
100035d4:	d8c00015 	stw	r3,0(sp)
100035d8:	00040e40 	call	100040e4 <__umodsi3>
100035dc:	102d883a 	mov	r22,r2
100035e0:	9809883a 	mov	r4,r19
100035e4:	a00b883a 	mov	r5,r20
100035e8:	b02c943a 	slli	r22,r22,16
100035ec:	00040dc0 	call	100040dc <__udivsi3>
100035f0:	1009883a 	mov	r4,r2
100035f4:	a80b883a 	mov	r5,r21
100035f8:	8c7fffcc 	andi	r17,r17,65535
100035fc:	1027883a 	mov	r19,r2
10003600:	b462b03a 	or	r17,r22,r17
10003604:	00040ec0 	call	100040ec <__mulsi3>
10003608:	d8c00017 	ldw	r3,0(sp)
1000360c:	8880052e 	bgeu	r17,r2,10003624 <__udivdi3+0x2c0>
10003610:	8ca3883a 	add	r17,r17,r18
10003614:	993fffc4 	addi	r4,r19,-1
10003618:	8c80af36 	bltu	r17,r18,100038d8 <__udivdi3+0x574>
1000361c:	8880ae2e 	bgeu	r17,r2,100038d8 <__udivdi3+0x574>
10003620:	9cffff84 	addi	r19,r19,-2
10003624:	8020943a 	slli	r16,r16,16
10003628:	9c04b03a 	or	r2,r19,r16
1000362c:	00000206 	br	10003638 <__udivdi3+0x2d4>
10003630:	0007883a 	mov	r3,zero
10003634:	0005883a 	mov	r2,zero
10003638:	dfc00a17 	ldw	ra,40(sp)
1000363c:	df000917 	ldw	fp,36(sp)
10003640:	ddc00817 	ldw	r23,32(sp)
10003644:	dd800717 	ldw	r22,28(sp)
10003648:	dd400617 	ldw	r21,24(sp)
1000364c:	dd000517 	ldw	r20,20(sp)
10003650:	dcc00417 	ldw	r19,16(sp)
10003654:	dc800317 	ldw	r18,12(sp)
10003658:	dc400217 	ldw	r17,8(sp)
1000365c:	dc000117 	ldw	r16,4(sp)
10003660:	dec00b04 	addi	sp,sp,44
10003664:	f800283a 	ret
10003668:	00803fc4 	movi	r2,255
1000366c:	11c0a92e 	bgeu	r2,r7,10003914 <__udivdi3+0x5b0>
10003670:	01400204 	movi	r5,8
10003674:	2811883a 	mov	r8,r5
10003678:	003f9706 	br	100034d8 <__alt_data_end+0xf80034d8>
1000367c:	00804034 	movhi	r2,256
10003680:	10bfffc4 	addi	r2,r2,-1
10003684:	1180a62e 	bgeu	r2,r6,10003920 <__udivdi3+0x5bc>
10003688:	00800604 	movi	r2,24
1000368c:	1007883a 	mov	r3,r2
10003690:	003f4c06 	br	100033c4 <__alt_data_end+0xf80033c4>
10003694:	00803fc4 	movi	r2,255
10003698:	1480a72e 	bgeu	r2,r18,10003938 <__udivdi3+0x5d4>
1000369c:	00800204 	movi	r2,8
100036a0:	1007883a 	mov	r3,r2
100036a4:	003fa506 	br	1000353c <__alt_data_end+0xf800353c>
100036a8:	3178d83a 	srl	fp,r6,r5
100036ac:	3dce983a 	sll	r7,r7,r23
100036b0:	8168d83a 	srl	r20,r16,r5
100036b4:	9950d83a 	srl	r8,r19,r5
100036b8:	3f38b03a 	or	fp,r7,fp
100036bc:	e024d43a 	srli	r18,fp,16
100036c0:	85e0983a 	sll	r16,r16,r23
100036c4:	a009883a 	mov	r4,r20
100036c8:	900b883a 	mov	r5,r18
100036cc:	8220b03a 	or	r16,r16,r8
100036d0:	35ea983a 	sll	r21,r6,r23
100036d4:	00040e40 	call	100040e4 <__umodsi3>
100036d8:	a009883a 	mov	r4,r20
100036dc:	900b883a 	mov	r5,r18
100036e0:	1023883a 	mov	r17,r2
100036e4:	e5bfffcc 	andi	r22,fp,65535
100036e8:	00040dc0 	call	100040dc <__udivsi3>
100036ec:	1009883a 	mov	r4,r2
100036f0:	b00b883a 	mov	r5,r22
100036f4:	1029883a 	mov	r20,r2
100036f8:	00040ec0 	call	100040ec <__mulsi3>
100036fc:	8806943a 	slli	r3,r17,16
10003700:	8014d43a 	srli	r10,r16,16
10003704:	1a92b03a 	or	r9,r3,r10
10003708:	4880042e 	bgeu	r9,r2,1000371c <__udivdi3+0x3b8>
1000370c:	4f13883a 	add	r9,r9,fp
10003710:	a0ffffc4 	addi	r3,r20,-1
10003714:	4f00952e 	bgeu	r9,fp,1000396c <__udivdi3+0x608>
10003718:	1829883a 	mov	r20,r3
1000371c:	48a3c83a 	sub	r17,r9,r2
10003720:	8809883a 	mov	r4,r17
10003724:	900b883a 	mov	r5,r18
10003728:	00040e40 	call	100040e4 <__umodsi3>
1000372c:	8809883a 	mov	r4,r17
10003730:	900b883a 	mov	r5,r18
10003734:	d8800015 	stw	r2,0(sp)
10003738:	00040dc0 	call	100040dc <__udivsi3>
1000373c:	1009883a 	mov	r4,r2
10003740:	b00b883a 	mov	r5,r22
10003744:	1023883a 	mov	r17,r2
10003748:	00040ec0 	call	100040ec <__mulsi3>
1000374c:	d8c00017 	ldw	r3,0(sp)
10003750:	823fffcc 	andi	r8,r16,65535
10003754:	1806943a 	slli	r3,r3,16
10003758:	1a20b03a 	or	r16,r3,r8
1000375c:	8080042e 	bgeu	r16,r2,10003770 <__udivdi3+0x40c>
10003760:	8721883a 	add	r16,r16,fp
10003764:	88ffffc4 	addi	r3,r17,-1
10003768:	87007c2e 	bgeu	r16,fp,1000395c <__udivdi3+0x5f8>
1000376c:	1823883a 	mov	r17,r3
10003770:	a028943a 	slli	r20,r20,16
10003774:	acbfffcc 	andi	r18,r21,65535
10003778:	900b883a 	mov	r5,r18
1000377c:	8d28b03a 	or	r20,r17,r20
10003780:	a022d43a 	srli	r17,r20,16
10003784:	a5bfffcc 	andi	r22,r20,65535
10003788:	b009883a 	mov	r4,r22
1000378c:	a82ad43a 	srli	r21,r21,16
10003790:	80a1c83a 	sub	r16,r16,r2
10003794:	00040ec0 	call	100040ec <__mulsi3>
10003798:	8809883a 	mov	r4,r17
1000379c:	900b883a 	mov	r5,r18
100037a0:	1039883a 	mov	fp,r2
100037a4:	00040ec0 	call	100040ec <__mulsi3>
100037a8:	8809883a 	mov	r4,r17
100037ac:	a80b883a 	mov	r5,r21
100037b0:	1025883a 	mov	r18,r2
100037b4:	00040ec0 	call	100040ec <__mulsi3>
100037b8:	b009883a 	mov	r4,r22
100037bc:	a80b883a 	mov	r5,r21
100037c0:	1023883a 	mov	r17,r2
100037c4:	00040ec0 	call	100040ec <__mulsi3>
100037c8:	e006d43a 	srli	r3,fp,16
100037cc:	9085883a 	add	r2,r18,r2
100037d0:	10c7883a 	add	r3,r2,r3
100037d4:	1c80022e 	bgeu	r3,r18,100037e0 <__udivdi3+0x47c>
100037d8:	00800074 	movhi	r2,1
100037dc:	88a3883a 	add	r17,r17,r2
100037e0:	1808d43a 	srli	r4,r3,16
100037e4:	8909883a 	add	r4,r17,r4
100037e8:	81004436 	bltu	r16,r4,100038fc <__udivdi3+0x598>
100037ec:	81003e26 	beq	r16,r4,100038e8 <__udivdi3+0x584>
100037f0:	a005883a 	mov	r2,r20
100037f4:	0007883a 	mov	r3,zero
100037f8:	003f8f06 	br	10003638 <__alt_data_end+0xf8003638>
100037fc:	91e4983a 	sll	r18,r18,r7
10003800:	80eed83a 	srl	r23,r16,r3
10003804:	81cc983a 	sll	r6,r16,r7
10003808:	9028d43a 	srli	r20,r18,16
1000380c:	98c6d83a 	srl	r3,r19,r3
10003810:	b809883a 	mov	r4,r23
10003814:	a00b883a 	mov	r5,r20
10003818:	30ecb03a 	or	r22,r6,r3
1000381c:	99e2983a 	sll	r17,r19,r7
10003820:	00040e40 	call	100040e4 <__umodsi3>
10003824:	b809883a 	mov	r4,r23
10003828:	a00b883a 	mov	r5,r20
1000382c:	1021883a 	mov	r16,r2
10003830:	957fffcc 	andi	r21,r18,65535
10003834:	00040dc0 	call	100040dc <__udivsi3>
10003838:	a80b883a 	mov	r5,r21
1000383c:	1009883a 	mov	r4,r2
10003840:	102f883a 	mov	r23,r2
10003844:	00040ec0 	call	100040ec <__mulsi3>
10003848:	8020943a 	slli	r16,r16,16
1000384c:	b00ad43a 	srli	r5,r22,16
10003850:	814cb03a 	or	r6,r16,r5
10003854:	3080062e 	bgeu	r6,r2,10003870 <__udivdi3+0x50c>
10003858:	348d883a 	add	r6,r6,r18
1000385c:	b8ffffc4 	addi	r3,r23,-1
10003860:	34804836 	bltu	r6,r18,10003984 <__udivdi3+0x620>
10003864:	3080472e 	bgeu	r6,r2,10003984 <__udivdi3+0x620>
10003868:	bdffff84 	addi	r23,r23,-2
1000386c:	348d883a 	add	r6,r6,r18
10003870:	30a7c83a 	sub	r19,r6,r2
10003874:	9809883a 	mov	r4,r19
10003878:	a00b883a 	mov	r5,r20
1000387c:	00040e40 	call	100040e4 <__umodsi3>
10003880:	9809883a 	mov	r4,r19
10003884:	a00b883a 	mov	r5,r20
10003888:	1039883a 	mov	fp,r2
1000388c:	00040dc0 	call	100040dc <__udivsi3>
10003890:	1009883a 	mov	r4,r2
10003894:	a80b883a 	mov	r5,r21
10003898:	e038943a 	slli	fp,fp,16
1000389c:	1027883a 	mov	r19,r2
100038a0:	00040ec0 	call	100040ec <__mulsi3>
100038a4:	b1bfffcc 	andi	r6,r22,65535
100038a8:	e18cb03a 	or	r6,fp,r6
100038ac:	3080062e 	bgeu	r6,r2,100038c8 <__udivdi3+0x564>
100038b0:	348d883a 	add	r6,r6,r18
100038b4:	98ffffc4 	addi	r3,r19,-1
100038b8:	34803036 	bltu	r6,r18,1000397c <__udivdi3+0x618>
100038bc:	30802f2e 	bgeu	r6,r2,1000397c <__udivdi3+0x618>
100038c0:	9cffff84 	addi	r19,r19,-2
100038c4:	348d883a 	add	r6,r6,r18
100038c8:	b82e943a 	slli	r23,r23,16
100038cc:	30a1c83a 	sub	r16,r6,r2
100038d0:	9dc6b03a 	or	r3,r19,r23
100038d4:	003f2606 	br	10003570 <__alt_data_end+0xf8003570>
100038d8:	2027883a 	mov	r19,r4
100038dc:	003f5106 	br	10003624 <__alt_data_end+0xf8003624>
100038e0:	1827883a 	mov	r19,r3
100038e4:	003ef006 	br	100034a8 <__alt_data_end+0xf80034a8>
100038e8:	1808943a 	slli	r4,r3,16
100038ec:	9dc6983a 	sll	r3,r19,r23
100038f0:	e73fffcc 	andi	fp,fp,65535
100038f4:	2709883a 	add	r4,r4,fp
100038f8:	193fbd2e 	bgeu	r3,r4,100037f0 <__alt_data_end+0xf80037f0>
100038fc:	a0bfffc4 	addi	r2,r20,-1
10003900:	0007883a 	mov	r3,zero
10003904:	003f4c06 	br	10003638 <__alt_data_end+0xf8003638>
10003908:	01400404 	movi	r5,16
1000390c:	2811883a 	mov	r8,r5
10003910:	003ef106 	br	100034d8 <__alt_data_end+0xf80034d8>
10003914:	000b883a 	mov	r5,zero
10003918:	0011883a 	mov	r8,zero
1000391c:	003eee06 	br	100034d8 <__alt_data_end+0xf80034d8>
10003920:	00800404 	movi	r2,16
10003924:	1007883a 	mov	r3,r2
10003928:	003ea606 	br	100033c4 <__alt_data_end+0xf80033c4>
1000392c:	00800404 	movi	r2,16
10003930:	1007883a 	mov	r3,r2
10003934:	003f0106 	br	1000353c <__alt_data_end+0xf800353c>
10003938:	0005883a 	mov	r2,zero
1000393c:	0007883a 	mov	r3,zero
10003940:	003efe06 	br	1000353c <__alt_data_end+0xf800353c>
10003944:	0005883a 	mov	r2,zero
10003948:	0007883a 	mov	r3,zero
1000394c:	003e9d06 	br	100033c4 <__alt_data_end+0xf80033c4>
10003950:	0007883a 	mov	r3,zero
10003954:	00800044 	movi	r2,1
10003958:	003f3706 	br	10003638 <__alt_data_end+0xf8003638>
1000395c:	80bf832e 	bgeu	r16,r2,1000376c <__alt_data_end+0xf800376c>
10003960:	8c7fff84 	addi	r17,r17,-2
10003964:	8721883a 	add	r16,r16,fp
10003968:	003f8106 	br	10003770 <__alt_data_end+0xf8003770>
1000396c:	48bf6a2e 	bgeu	r9,r2,10003718 <__alt_data_end+0xf8003718>
10003970:	a53fff84 	addi	r20,r20,-2
10003974:	4f13883a 	add	r9,r9,fp
10003978:	003f6806 	br	1000371c <__alt_data_end+0xf800371c>
1000397c:	1827883a 	mov	r19,r3
10003980:	003fd106 	br	100038c8 <__alt_data_end+0xf80038c8>
10003984:	182f883a 	mov	r23,r3
10003988:	003fb906 	br	10003870 <__alt_data_end+0xf8003870>
1000398c:	843fff84 	addi	r16,r16,-2
10003990:	348d883a 	add	r6,r6,r18
10003994:	003f0c06 	br	100035c8 <__alt_data_end+0xf80035c8>
10003998:	843fff84 	addi	r16,r16,-2
1000399c:	1c87883a 	add	r3,r3,r18
100039a0:	003eac06 	br	10003454 <__alt_data_end+0xf8003454>

100039a4 <__umoddi3>:
100039a4:	defff404 	addi	sp,sp,-48
100039a8:	dd800815 	stw	r22,32(sp)
100039ac:	dc400315 	stw	r17,12(sp)
100039b0:	dc000215 	stw	r16,8(sp)
100039b4:	dfc00b15 	stw	ra,44(sp)
100039b8:	df000a15 	stw	fp,40(sp)
100039bc:	ddc00915 	stw	r23,36(sp)
100039c0:	dd400715 	stw	r21,28(sp)
100039c4:	dd000615 	stw	r20,24(sp)
100039c8:	dcc00515 	stw	r19,20(sp)
100039cc:	dc800415 	stw	r18,16(sp)
100039d0:	2021883a 	mov	r16,r4
100039d4:	2823883a 	mov	r17,r5
100039d8:	282d883a 	mov	r22,r5
100039dc:	38003c1e 	bne	r7,zero,10003ad0 <__umoddi3+0x12c>
100039e0:	3027883a 	mov	r19,r6
100039e4:	2029883a 	mov	r20,r4
100039e8:	2980522e 	bgeu	r5,r6,10003b34 <__umoddi3+0x190>
100039ec:	00bfffd4 	movui	r2,65535
100039f0:	1180a436 	bltu	r2,r6,10003c84 <__umoddi3+0x2e0>
100039f4:	00803fc4 	movi	r2,255
100039f8:	11815e2e 	bgeu	r2,r6,10003f74 <__umoddi3+0x5d0>
100039fc:	01400204 	movi	r5,8
10003a00:	2805883a 	mov	r2,r5
10003a04:	314ad83a 	srl	r5,r6,r5
10003a08:	00c40074 	movhi	r3,4097
10003a0c:	18c91204 	addi	r3,r3,9288
10003a10:	194b883a 	add	r5,r3,r5
10003a14:	29000003 	ldbu	r4,0(r5)
10003a18:	2089883a 	add	r4,r4,r2
10003a1c:	00800804 	movi	r2,32
10003a20:	1105c83a 	sub	r2,r2,r4
10003a24:	10010c26 	beq	r2,zero,10003e58 <__umoddi3+0x4b4>
10003a28:	88a2983a 	sll	r17,r17,r2
10003a2c:	8108d83a 	srl	r4,r16,r4
10003a30:	30a6983a 	sll	r19,r6,r2
10003a34:	80a8983a 	sll	r20,r16,r2
10003a38:	1025883a 	mov	r18,r2
10003a3c:	892cb03a 	or	r22,r17,r4
10003a40:	9822d43a 	srli	r17,r19,16
10003a44:	b009883a 	mov	r4,r22
10003a48:	9d7fffcc 	andi	r21,r19,65535
10003a4c:	880b883a 	mov	r5,r17
10003a50:	00040e40 	call	100040e4 <__umodsi3>
10003a54:	b009883a 	mov	r4,r22
10003a58:	880b883a 	mov	r5,r17
10003a5c:	102f883a 	mov	r23,r2
10003a60:	00040dc0 	call	100040dc <__udivsi3>
10003a64:	1009883a 	mov	r4,r2
10003a68:	a80b883a 	mov	r5,r21
10003a6c:	00040ec0 	call	100040ec <__mulsi3>
10003a70:	b82e943a 	slli	r23,r23,16
10003a74:	a008d43a 	srli	r4,r20,16
10003a78:	b906b03a 	or	r3,r23,r4
10003a7c:	1880042e 	bgeu	r3,r2,10003a90 <__umoddi3+0xec>
10003a80:	1cc7883a 	add	r3,r3,r19
10003a84:	1cc00236 	bltu	r3,r19,10003a90 <__umoddi3+0xec>
10003a88:	1880012e 	bgeu	r3,r2,10003a90 <__umoddi3+0xec>
10003a8c:	1cc7883a 	add	r3,r3,r19
10003a90:	18a1c83a 	sub	r16,r3,r2
10003a94:	8009883a 	mov	r4,r16
10003a98:	880b883a 	mov	r5,r17
10003a9c:	00040e40 	call	100040e4 <__umodsi3>
10003aa0:	8009883a 	mov	r4,r16
10003aa4:	880b883a 	mov	r5,r17
10003aa8:	102d883a 	mov	r22,r2
10003aac:	00040dc0 	call	100040dc <__udivsi3>
10003ab0:	1009883a 	mov	r4,r2
10003ab4:	a80b883a 	mov	r5,r21
10003ab8:	b02c943a 	slli	r22,r22,16
10003abc:	00040ec0 	call	100040ec <__mulsi3>
10003ac0:	a13fffcc 	andi	r4,r20,65535
10003ac4:	b106b03a 	or	r3,r22,r4
10003ac8:	1880572e 	bgeu	r3,r2,10003c28 <__umoddi3+0x284>
10003acc:	00005206 	br	10003c18 <__umoddi3+0x274>
10003ad0:	29c05936 	bltu	r5,r7,10003c38 <__umoddi3+0x294>
10003ad4:	00bfffd4 	movui	r2,65535
10003ad8:	11c0652e 	bgeu	r2,r7,10003c70 <__umoddi3+0x2cc>
10003adc:	00804034 	movhi	r2,256
10003ae0:	10bfffc4 	addi	r2,r2,-1
10003ae4:	11c1172e 	bgeu	r2,r7,10003f44 <__umoddi3+0x5a0>
10003ae8:	01400604 	movi	r5,24
10003aec:	282b883a 	mov	r21,r5
10003af0:	394ad83a 	srl	r5,r7,r5
10003af4:	00c40074 	movhi	r3,4097
10003af8:	18c91204 	addi	r3,r3,9288
10003afc:	194b883a 	add	r5,r3,r5
10003b00:	28800003 	ldbu	r2,0(r5)
10003b04:	00c00804 	movi	r3,32
10003b08:	156b883a 	add	r21,r2,r21
10003b0c:	1d69c83a 	sub	r20,r3,r21
10003b10:	a000671e 	bne	r20,zero,10003cb0 <__umoddi3+0x30c>
10003b14:	3c400136 	bltu	r7,r17,10003b1c <__umoddi3+0x178>
10003b18:	81812336 	bltu	r16,r6,10003fa8 <__umoddi3+0x604>
10003b1c:	8185c83a 	sub	r2,r16,r6
10003b20:	89e3c83a 	sub	r17,r17,r7
10003b24:	8087803a 	cmpltu	r3,r16,r2
10003b28:	88edc83a 	sub	r22,r17,r3
10003b2c:	b007883a 	mov	r3,r22
10003b30:	00004306 	br	10003c40 <__umoddi3+0x29c>
10003b34:	3000041e 	bne	r6,zero,10003b48 <__umoddi3+0x1a4>
10003b38:	01000044 	movi	r4,1
10003b3c:	000b883a 	mov	r5,zero
10003b40:	00040dc0 	call	100040dc <__udivsi3>
10003b44:	1027883a 	mov	r19,r2
10003b48:	00bfffd4 	movui	r2,65535
10003b4c:	14c0532e 	bgeu	r2,r19,10003c9c <__umoddi3+0x2f8>
10003b50:	00804034 	movhi	r2,256
10003b54:	10bfffc4 	addi	r2,r2,-1
10003b58:	14c1032e 	bgeu	r2,r19,10003f68 <__umoddi3+0x5c4>
10003b5c:	00800604 	movi	r2,24
10003b60:	1007883a 	mov	r3,r2
10003b64:	9884d83a 	srl	r2,r19,r2
10003b68:	01040074 	movhi	r4,4097
10003b6c:	21091204 	addi	r4,r4,9288
10003b70:	2085883a 	add	r2,r4,r2
10003b74:	11000003 	ldbu	r4,0(r2)
10003b78:	00800804 	movi	r2,32
10003b7c:	20c7883a 	add	r3,r4,r3
10003b80:	10c5c83a 	sub	r2,r2,r3
10003b84:	1000b61e 	bne	r2,zero,10003e60 <__umoddi3+0x4bc>
10003b88:	982ad43a 	srli	r21,r19,16
10003b8c:	8ce3c83a 	sub	r17,r17,r19
10003b90:	9dbfffcc 	andi	r22,r19,65535
10003b94:	0025883a 	mov	r18,zero
10003b98:	8809883a 	mov	r4,r17
10003b9c:	a80b883a 	mov	r5,r21
10003ba0:	00040e40 	call	100040e4 <__umodsi3>
10003ba4:	8809883a 	mov	r4,r17
10003ba8:	a80b883a 	mov	r5,r21
10003bac:	102f883a 	mov	r23,r2
10003bb0:	00040dc0 	call	100040dc <__udivsi3>
10003bb4:	1009883a 	mov	r4,r2
10003bb8:	b00b883a 	mov	r5,r22
10003bbc:	00040ec0 	call	100040ec <__mulsi3>
10003bc0:	b82e943a 	slli	r23,r23,16
10003bc4:	a008d43a 	srli	r4,r20,16
10003bc8:	b906b03a 	or	r3,r23,r4
10003bcc:	1880032e 	bgeu	r3,r2,10003bdc <__umoddi3+0x238>
10003bd0:	1cc7883a 	add	r3,r3,r19
10003bd4:	1cc00136 	bltu	r3,r19,10003bdc <__umoddi3+0x238>
10003bd8:	1880f136 	bltu	r3,r2,10003fa0 <__umoddi3+0x5fc>
10003bdc:	18a1c83a 	sub	r16,r3,r2
10003be0:	8009883a 	mov	r4,r16
10003be4:	a80b883a 	mov	r5,r21
10003be8:	00040e40 	call	100040e4 <__umodsi3>
10003bec:	8009883a 	mov	r4,r16
10003bf0:	a80b883a 	mov	r5,r21
10003bf4:	1023883a 	mov	r17,r2
10003bf8:	00040dc0 	call	100040dc <__udivsi3>
10003bfc:	1009883a 	mov	r4,r2
10003c00:	b00b883a 	mov	r5,r22
10003c04:	8822943a 	slli	r17,r17,16
10003c08:	00040ec0 	call	100040ec <__mulsi3>
10003c0c:	a13fffcc 	andi	r4,r20,65535
10003c10:	8906b03a 	or	r3,r17,r4
10003c14:	1880042e 	bgeu	r3,r2,10003c28 <__umoddi3+0x284>
10003c18:	1cc7883a 	add	r3,r3,r19
10003c1c:	1cc00236 	bltu	r3,r19,10003c28 <__umoddi3+0x284>
10003c20:	1880012e 	bgeu	r3,r2,10003c28 <__umoddi3+0x284>
10003c24:	1cc7883a 	add	r3,r3,r19
10003c28:	1887c83a 	sub	r3,r3,r2
10003c2c:	1c84d83a 	srl	r2,r3,r18
10003c30:	0007883a 	mov	r3,zero
10003c34:	00000206 	br	10003c40 <__umoddi3+0x29c>
10003c38:	2005883a 	mov	r2,r4
10003c3c:	2807883a 	mov	r3,r5
10003c40:	dfc00b17 	ldw	ra,44(sp)
10003c44:	df000a17 	ldw	fp,40(sp)
10003c48:	ddc00917 	ldw	r23,36(sp)
10003c4c:	dd800817 	ldw	r22,32(sp)
10003c50:	dd400717 	ldw	r21,28(sp)
10003c54:	dd000617 	ldw	r20,24(sp)
10003c58:	dcc00517 	ldw	r19,20(sp)
10003c5c:	dc800417 	ldw	r18,16(sp)
10003c60:	dc400317 	ldw	r17,12(sp)
10003c64:	dc000217 	ldw	r16,8(sp)
10003c68:	dec00c04 	addi	sp,sp,48
10003c6c:	f800283a 	ret
10003c70:	00803fc4 	movi	r2,255
10003c74:	11c0b02e 	bgeu	r2,r7,10003f38 <__umoddi3+0x594>
10003c78:	01400204 	movi	r5,8
10003c7c:	282b883a 	mov	r21,r5
10003c80:	003f9b06 	br	10003af0 <__alt_data_end+0xf8003af0>
10003c84:	00804034 	movhi	r2,256
10003c88:	10bfffc4 	addi	r2,r2,-1
10003c8c:	1180b02e 	bgeu	r2,r6,10003f50 <__umoddi3+0x5ac>
10003c90:	01400604 	movi	r5,24
10003c94:	2805883a 	mov	r2,r5
10003c98:	003f5a06 	br	10003a04 <__alt_data_end+0xf8003a04>
10003c9c:	00803fc4 	movi	r2,255
10003ca0:	14c0ae2e 	bgeu	r2,r19,10003f5c <__umoddi3+0x5b8>
10003ca4:	00800204 	movi	r2,8
10003ca8:	1007883a 	mov	r3,r2
10003cac:	003fad06 	br	10003b64 <__alt_data_end+0xf8003b64>
10003cb0:	3d0a983a 	sll	r5,r7,r20
10003cb4:	356cd83a 	srl	r22,r6,r21
10003cb8:	8d78d83a 	srl	fp,r17,r21
10003cbc:	8d10983a 	sll	r8,r17,r20
10003cc0:	2dacb03a 	or	r22,r5,r22
10003cc4:	b02ed43a 	srli	r23,r22,16
10003cc8:	8564d83a 	srl	r18,r16,r21
10003ccc:	e009883a 	mov	r4,fp
10003cd0:	b80b883a 	mov	r5,r23
10003cd4:	44a4b03a 	or	r18,r8,r18
10003cd8:	3526983a 	sll	r19,r6,r20
10003cdc:	00040e40 	call	100040e4 <__umodsi3>
10003ce0:	e009883a 	mov	r4,fp
10003ce4:	b80b883a 	mov	r5,r23
10003ce8:	b47fffcc 	andi	r17,r22,65535
10003cec:	d8800015 	stw	r2,0(sp)
10003cf0:	00040dc0 	call	100040dc <__udivsi3>
10003cf4:	1009883a 	mov	r4,r2
10003cf8:	880b883a 	mov	r5,r17
10003cfc:	1039883a 	mov	fp,r2
10003d00:	00040ec0 	call	100040ec <__mulsi3>
10003d04:	d9800017 	ldw	r6,0(sp)
10003d08:	9008d43a 	srli	r4,r18,16
10003d0c:	8520983a 	sll	r16,r16,r20
10003d10:	300c943a 	slli	r6,r6,16
10003d14:	3106b03a 	or	r3,r6,r4
10003d18:	1880042e 	bgeu	r3,r2,10003d2c <__umoddi3+0x388>
10003d1c:	1d87883a 	add	r3,r3,r22
10003d20:	e13fffc4 	addi	r4,fp,-1
10003d24:	1d809a2e 	bgeu	r3,r22,10003f90 <__umoddi3+0x5ec>
10003d28:	2039883a 	mov	fp,r4
10003d2c:	1887c83a 	sub	r3,r3,r2
10003d30:	1809883a 	mov	r4,r3
10003d34:	b80b883a 	mov	r5,r23
10003d38:	d8c00115 	stw	r3,4(sp)
10003d3c:	00040e40 	call	100040e4 <__umodsi3>
10003d40:	d8c00117 	ldw	r3,4(sp)
10003d44:	b80b883a 	mov	r5,r23
10003d48:	d8800015 	stw	r2,0(sp)
10003d4c:	1809883a 	mov	r4,r3
10003d50:	00040dc0 	call	100040dc <__udivsi3>
10003d54:	880b883a 	mov	r5,r17
10003d58:	1009883a 	mov	r4,r2
10003d5c:	102f883a 	mov	r23,r2
10003d60:	00040ec0 	call	100040ec <__mulsi3>
10003d64:	d9800017 	ldw	r6,0(sp)
10003d68:	947fffcc 	andi	r17,r18,65535
10003d6c:	300c943a 	slli	r6,r6,16
10003d70:	3464b03a 	or	r18,r6,r17
10003d74:	9080042e 	bgeu	r18,r2,10003d88 <__umoddi3+0x3e4>
10003d78:	95a5883a 	add	r18,r18,r22
10003d7c:	b8ffffc4 	addi	r3,r23,-1
10003d80:	95807f2e 	bgeu	r18,r22,10003f80 <__umoddi3+0x5dc>
10003d84:	182f883a 	mov	r23,r3
10003d88:	e038943a 	slli	fp,fp,16
10003d8c:	980cd43a 	srli	r6,r19,16
10003d90:	98ffffcc 	andi	r3,r19,65535
10003d94:	bf38b03a 	or	fp,r23,fp
10003d98:	e02ed43a 	srli	r23,fp,16
10003d9c:	e73fffcc 	andi	fp,fp,65535
10003da0:	180b883a 	mov	r5,r3
10003da4:	e009883a 	mov	r4,fp
10003da8:	d9800015 	stw	r6,0(sp)
10003dac:	d8c00115 	stw	r3,4(sp)
10003db0:	90a5c83a 	sub	r18,r18,r2
10003db4:	00040ec0 	call	100040ec <__mulsi3>
10003db8:	d8c00117 	ldw	r3,4(sp)
10003dbc:	b809883a 	mov	r4,r23
10003dc0:	1023883a 	mov	r17,r2
10003dc4:	180b883a 	mov	r5,r3
10003dc8:	00040ec0 	call	100040ec <__mulsi3>
10003dcc:	d9800017 	ldw	r6,0(sp)
10003dd0:	b809883a 	mov	r4,r23
10003dd4:	d8800115 	stw	r2,4(sp)
10003dd8:	300b883a 	mov	r5,r6
10003ddc:	302f883a 	mov	r23,r6
10003de0:	00040ec0 	call	100040ec <__mulsi3>
10003de4:	e009883a 	mov	r4,fp
10003de8:	b80b883a 	mov	r5,r23
10003dec:	d8800015 	stw	r2,0(sp)
10003df0:	00040ec0 	call	100040ec <__mulsi3>
10003df4:	d8c00117 	ldw	r3,4(sp)
10003df8:	880cd43a 	srli	r6,r17,16
10003dfc:	d9c00017 	ldw	r7,0(sp)
10003e00:	1885883a 	add	r2,r3,r2
10003e04:	118d883a 	add	r6,r2,r6
10003e08:	30c0022e 	bgeu	r6,r3,10003e14 <__umoddi3+0x470>
10003e0c:	00800074 	movhi	r2,1
10003e10:	388f883a 	add	r7,r7,r2
10003e14:	3006d43a 	srli	r3,r6,16
10003e18:	300c943a 	slli	r6,r6,16
10003e1c:	8c7fffcc 	andi	r17,r17,65535
10003e20:	38c7883a 	add	r3,r7,r3
10003e24:	3463883a 	add	r17,r6,r17
10003e28:	90c03d36 	bltu	r18,r3,10003f20 <__umoddi3+0x57c>
10003e2c:	90c06026 	beq	r18,r3,10003fb0 <__umoddi3+0x60c>
10003e30:	90c9c83a 	sub	r4,r18,r3
10003e34:	880f883a 	mov	r7,r17
10003e38:	81cfc83a 	sub	r7,r16,r7
10003e3c:	81c7803a 	cmpltu	r3,r16,r7
10003e40:	20c7c83a 	sub	r3,r4,r3
10003e44:	1d44983a 	sll	r2,r3,r21
10003e48:	3d0ed83a 	srl	r7,r7,r20
10003e4c:	1d06d83a 	srl	r3,r3,r20
10003e50:	11c4b03a 	or	r2,r2,r7
10003e54:	003f7a06 	br	10003c40 <__alt_data_end+0xf8003c40>
10003e58:	0025883a 	mov	r18,zero
10003e5c:	003ef806 	br	10003a40 <__alt_data_end+0xf8003a40>
10003e60:	98a6983a 	sll	r19,r19,r2
10003e64:	88e8d83a 	srl	r20,r17,r3
10003e68:	80c6d83a 	srl	r3,r16,r3
10003e6c:	982ad43a 	srli	r21,r19,16
10003e70:	88a2983a 	sll	r17,r17,r2
10003e74:	a009883a 	mov	r4,r20
10003e78:	a80b883a 	mov	r5,r21
10003e7c:	88eeb03a 	or	r23,r17,r3
10003e80:	1025883a 	mov	r18,r2
10003e84:	00040e40 	call	100040e4 <__umodsi3>
10003e88:	a009883a 	mov	r4,r20
10003e8c:	a80b883a 	mov	r5,r21
10003e90:	1023883a 	mov	r17,r2
10003e94:	9dbfffcc 	andi	r22,r19,65535
10003e98:	00040dc0 	call	100040dc <__udivsi3>
10003e9c:	1009883a 	mov	r4,r2
10003ea0:	b00b883a 	mov	r5,r22
10003ea4:	00040ec0 	call	100040ec <__mulsi3>
10003ea8:	8822943a 	slli	r17,r17,16
10003eac:	b808d43a 	srli	r4,r23,16
10003eb0:	84a8983a 	sll	r20,r16,r18
10003eb4:	8906b03a 	or	r3,r17,r4
10003eb8:	1880042e 	bgeu	r3,r2,10003ecc <__umoddi3+0x528>
10003ebc:	1cc7883a 	add	r3,r3,r19
10003ec0:	1cc00236 	bltu	r3,r19,10003ecc <__umoddi3+0x528>
10003ec4:	1880012e 	bgeu	r3,r2,10003ecc <__umoddi3+0x528>
10003ec8:	1cc7883a 	add	r3,r3,r19
10003ecc:	18a1c83a 	sub	r16,r3,r2
10003ed0:	8009883a 	mov	r4,r16
10003ed4:	a80b883a 	mov	r5,r21
10003ed8:	00040e40 	call	100040e4 <__umodsi3>
10003edc:	8009883a 	mov	r4,r16
10003ee0:	a80b883a 	mov	r5,r21
10003ee4:	1039883a 	mov	fp,r2
10003ee8:	00040dc0 	call	100040dc <__udivsi3>
10003eec:	1009883a 	mov	r4,r2
10003ef0:	b00b883a 	mov	r5,r22
10003ef4:	00040ec0 	call	100040ec <__mulsi3>
10003ef8:	e006943a 	slli	r3,fp,16
10003efc:	b93fffcc 	andi	r4,r23,65535
10003f00:	1906b03a 	or	r3,r3,r4
10003f04:	1880042e 	bgeu	r3,r2,10003f18 <__umoddi3+0x574>
10003f08:	1cc7883a 	add	r3,r3,r19
10003f0c:	1cc00236 	bltu	r3,r19,10003f18 <__umoddi3+0x574>
10003f10:	1880012e 	bgeu	r3,r2,10003f18 <__umoddi3+0x574>
10003f14:	1cc7883a 	add	r3,r3,r19
10003f18:	18a3c83a 	sub	r17,r3,r2
10003f1c:	003f1e06 	br	10003b98 <__alt_data_end+0xf8003b98>
10003f20:	8ccfc83a 	sub	r7,r17,r19
10003f24:	1d89c83a 	sub	r4,r3,r22
10003f28:	89e3803a 	cmpltu	r17,r17,r7
10003f2c:	2463c83a 	sub	r17,r4,r17
10003f30:	9449c83a 	sub	r4,r18,r17
10003f34:	003fc006 	br	10003e38 <__alt_data_end+0xf8003e38>
10003f38:	000b883a 	mov	r5,zero
10003f3c:	002b883a 	mov	r21,zero
10003f40:	003eeb06 	br	10003af0 <__alt_data_end+0xf8003af0>
10003f44:	01400404 	movi	r5,16
10003f48:	282b883a 	mov	r21,r5
10003f4c:	003ee806 	br	10003af0 <__alt_data_end+0xf8003af0>
10003f50:	01400404 	movi	r5,16
10003f54:	2805883a 	mov	r2,r5
10003f58:	003eaa06 	br	10003a04 <__alt_data_end+0xf8003a04>
10003f5c:	0005883a 	mov	r2,zero
10003f60:	0007883a 	mov	r3,zero
10003f64:	003eff06 	br	10003b64 <__alt_data_end+0xf8003b64>
10003f68:	00800404 	movi	r2,16
10003f6c:	1007883a 	mov	r3,r2
10003f70:	003efc06 	br	10003b64 <__alt_data_end+0xf8003b64>
10003f74:	000b883a 	mov	r5,zero
10003f78:	0005883a 	mov	r2,zero
10003f7c:	003ea106 	br	10003a04 <__alt_data_end+0xf8003a04>
10003f80:	90bf802e 	bgeu	r18,r2,10003d84 <__alt_data_end+0xf8003d84>
10003f84:	bdffff84 	addi	r23,r23,-2
10003f88:	95a5883a 	add	r18,r18,r22
10003f8c:	003f7e06 	br	10003d88 <__alt_data_end+0xf8003d88>
10003f90:	18bf652e 	bgeu	r3,r2,10003d28 <__alt_data_end+0xf8003d28>
10003f94:	e73fff84 	addi	fp,fp,-2
10003f98:	1d87883a 	add	r3,r3,r22
10003f9c:	003f6306 	br	10003d2c <__alt_data_end+0xf8003d2c>
10003fa0:	1cc7883a 	add	r3,r3,r19
10003fa4:	003f0d06 	br	10003bdc <__alt_data_end+0xf8003bdc>
10003fa8:	8005883a 	mov	r2,r16
10003fac:	003edf06 	br	10003b2c <__alt_data_end+0xf8003b2c>
10003fb0:	847fdb36 	bltu	r16,r17,10003f20 <__alt_data_end+0xf8003f20>
10003fb4:	880f883a 	mov	r7,r17
10003fb8:	0009883a 	mov	r4,zero
10003fbc:	003f9e06 	br	10003e38 <__alt_data_end+0xf8003e38>

10003fc0 <udivmodsi4>:
10003fc0:	2900182e 	bgeu	r5,r4,10004024 <udivmodsi4+0x64>
10003fc4:	28001716 	blt	r5,zero,10004024 <udivmodsi4+0x64>
10003fc8:	00800804 	movi	r2,32
10003fcc:	00c00044 	movi	r3,1
10003fd0:	00000206 	br	10003fdc <udivmodsi4+0x1c>
10003fd4:	10001126 	beq	r2,zero,1000401c <udivmodsi4+0x5c>
10003fd8:	28000516 	blt	r5,zero,10003ff0 <udivmodsi4+0x30>
10003fdc:	294b883a 	add	r5,r5,r5
10003fe0:	10bfffc4 	addi	r2,r2,-1
10003fe4:	18c7883a 	add	r3,r3,r3
10003fe8:	293ffa36 	bltu	r5,r4,10003fd4 <__alt_data_end+0xf8003fd4>
10003fec:	18000b26 	beq	r3,zero,1000401c <udivmodsi4+0x5c>
10003ff0:	0005883a 	mov	r2,zero
10003ff4:	21400236 	bltu	r4,r5,10004000 <udivmodsi4+0x40>
10003ff8:	2149c83a 	sub	r4,r4,r5
10003ffc:	10c4b03a 	or	r2,r2,r3
10004000:	1806d07a 	srli	r3,r3,1
10004004:	280ad07a 	srli	r5,r5,1
10004008:	183ffa1e 	bne	r3,zero,10003ff4 <__alt_data_end+0xf8003ff4>
1000400c:	3000011e 	bne	r6,zero,10004014 <udivmodsi4+0x54>
10004010:	f800283a 	ret
10004014:	2005883a 	mov	r2,r4
10004018:	f800283a 	ret
1000401c:	0005883a 	mov	r2,zero
10004020:	003ffa06 	br	1000400c <__alt_data_end+0xf800400c>
10004024:	00c00044 	movi	r3,1
10004028:	003ff106 	br	10003ff0 <__alt_data_end+0xf8003ff0>

1000402c <__divsi3>:
1000402c:	defffe04 	addi	sp,sp,-8
10004030:	dfc00115 	stw	ra,4(sp)
10004034:	dc000015 	stw	r16,0(sp)
10004038:	20000b16 	blt	r4,zero,10004068 <__divsi3+0x3c>
1000403c:	0021883a 	mov	r16,zero
10004040:	28000c16 	blt	r5,zero,10004074 <__divsi3+0x48>
10004044:	000d883a 	mov	r6,zero
10004048:	0003fc00 	call	10003fc0 <udivmodsi4>
1000404c:	0407c83a 	sub	r3,zero,r16
10004050:	1884f03a 	xor	r2,r3,r2
10004054:	1405883a 	add	r2,r2,r16
10004058:	dfc00117 	ldw	ra,4(sp)
1000405c:	dc000017 	ldw	r16,0(sp)
10004060:	dec00204 	addi	sp,sp,8
10004064:	f800283a 	ret
10004068:	0109c83a 	sub	r4,zero,r4
1000406c:	04000044 	movi	r16,1
10004070:	283ff40e 	bge	r5,zero,10004044 <__alt_data_end+0xf8004044>
10004074:	014bc83a 	sub	r5,zero,r5
10004078:	8400005c 	xori	r16,r16,1
1000407c:	003ff106 	br	10004044 <__alt_data_end+0xf8004044>

10004080 <__modsi3>:
10004080:	defffd04 	addi	sp,sp,-12
10004084:	dfc00215 	stw	ra,8(sp)
10004088:	dc400115 	stw	r17,4(sp)
1000408c:	dc000015 	stw	r16,0(sp)
10004090:	20000c16 	blt	r4,zero,100040c4 <__modsi3+0x44>
10004094:	0023883a 	mov	r17,zero
10004098:	0021883a 	mov	r16,zero
1000409c:	28000d16 	blt	r5,zero,100040d4 <__modsi3+0x54>
100040a0:	01800044 	movi	r6,1
100040a4:	0003fc00 	call	10003fc0 <udivmodsi4>
100040a8:	1404f03a 	xor	r2,r2,r16
100040ac:	8885883a 	add	r2,r17,r2
100040b0:	dfc00217 	ldw	ra,8(sp)
100040b4:	dc400117 	ldw	r17,4(sp)
100040b8:	dc000017 	ldw	r16,0(sp)
100040bc:	dec00304 	addi	sp,sp,12
100040c0:	f800283a 	ret
100040c4:	0109c83a 	sub	r4,zero,r4
100040c8:	04400044 	movi	r17,1
100040cc:	043fffc4 	movi	r16,-1
100040d0:	283ff30e 	bge	r5,zero,100040a0 <__alt_data_end+0xf80040a0>
100040d4:	014bc83a 	sub	r5,zero,r5
100040d8:	003ff106 	br	100040a0 <__alt_data_end+0xf80040a0>

100040dc <__udivsi3>:
100040dc:	000d883a 	mov	r6,zero
100040e0:	0003fc01 	jmpi	10003fc0 <udivmodsi4>

100040e4 <__umodsi3>:
100040e4:	01800044 	movi	r6,1
100040e8:	0003fc01 	jmpi	10003fc0 <udivmodsi4>

100040ec <__mulsi3>:
100040ec:	0005883a 	mov	r2,zero
100040f0:	20000726 	beq	r4,zero,10004110 <__mulsi3+0x24>
100040f4:	20c0004c 	andi	r3,r4,1
100040f8:	2008d07a 	srli	r4,r4,1
100040fc:	18000126 	beq	r3,zero,10004104 <__mulsi3+0x18>
10004100:	1145883a 	add	r2,r2,r5
10004104:	294b883a 	add	r5,r5,r5
10004108:	203ffa1e 	bne	r4,zero,100040f4 <__alt_data_end+0xf80040f4>
1000410c:	f800283a 	ret
10004110:	f800283a 	ret

10004114 <__adddf3>:
10004114:	02000434 	movhi	r8,16
10004118:	423fffc4 	addi	r8,r8,-1
1000411c:	defffb04 	addi	sp,sp,-20
10004120:	2a12703a 	and	r9,r5,r8
10004124:	2806d7fa 	srli	r3,r5,31
10004128:	3a10703a 	and	r8,r7,r8
1000412c:	3804d53a 	srli	r2,r7,20
10004130:	3014d77a 	srli	r10,r6,29
10004134:	dc000015 	stw	r16,0(sp)
10004138:	481290fa 	slli	r9,r9,3
1000413c:	2820d53a 	srli	r16,r5,20
10004140:	401090fa 	slli	r8,r8,3
10004144:	200ad77a 	srli	r5,r4,29
10004148:	380ed7fa 	srli	r7,r7,31
1000414c:	dc800215 	stw	r18,8(sp)
10004150:	dc400115 	stw	r17,4(sp)
10004154:	dfc00415 	stw	ra,16(sp)
10004158:	dcc00315 	stw	r19,12(sp)
1000415c:	1c803fcc 	andi	r18,r3,255
10004160:	8401ffcc 	andi	r16,r16,2047
10004164:	494ab03a 	or	r5,r9,r5
10004168:	202290fa 	slli	r17,r4,3
1000416c:	1081ffcc 	andi	r2,r2,2047
10004170:	4290b03a 	or	r8,r8,r10
10004174:	300c90fa 	slli	r6,r6,3
10004178:	91c07026 	beq	r18,r7,1000433c <__adddf3+0x228>
1000417c:	8087c83a 	sub	r3,r16,r2
10004180:	00c0b30e 	bge	zero,r3,10004450 <__adddf3+0x33c>
10004184:	10002a1e 	bne	r2,zero,10004230 <__adddf3+0x11c>
10004188:	4184b03a 	or	r2,r8,r6
1000418c:	1000991e 	bne	r2,zero,100043f4 <__adddf3+0x2e0>
10004190:	888001cc 	andi	r2,r17,7
10004194:	10005b26 	beq	r2,zero,10004304 <__adddf3+0x1f0>
10004198:	88c003cc 	andi	r3,r17,15
1000419c:	00800104 	movi	r2,4
100041a0:	18805826 	beq	r3,r2,10004304 <__adddf3+0x1f0>
100041a4:	89800104 	addi	r6,r17,4
100041a8:	3463803a 	cmpltu	r17,r6,r17
100041ac:	2c4b883a 	add	r5,r5,r17
100041b0:	2880202c 	andhi	r2,r5,128
100041b4:	9007883a 	mov	r3,r18
100041b8:	3023883a 	mov	r17,r6
100041bc:	10005426 	beq	r2,zero,10004310 <__adddf3+0x1fc>
100041c0:	84000044 	addi	r16,r16,1
100041c4:	0081ffc4 	movi	r2,2047
100041c8:	8080c126 	beq	r16,r2,100044d0 <__adddf3+0x3bc>
100041cc:	013fe034 	movhi	r4,65408
100041d0:	213fffc4 	addi	r4,r4,-1
100041d4:	290a703a 	and	r5,r5,r4
100041d8:	2804977a 	slli	r2,r5,29
100041dc:	280a927a 	slli	r5,r5,9
100041e0:	8822d0fa 	srli	r17,r17,3
100041e4:	8401ffcc 	andi	r16,r16,2047
100041e8:	2808d33a 	srli	r4,r5,12
100041ec:	1444b03a 	or	r2,r2,r17
100041f0:	8401ffcc 	andi	r16,r16,2047
100041f4:	800a953a 	slli	r5,r16,20
100041f8:	18c03fcc 	andi	r3,r3,255
100041fc:	04000434 	movhi	r16,16
10004200:	180697fa 	slli	r3,r3,31
10004204:	843fffc4 	addi	r16,r16,-1
10004208:	2420703a 	and	r16,r4,r16
1000420c:	8160b03a 	or	r16,r16,r5
10004210:	80c6b03a 	or	r3,r16,r3
10004214:	dfc00417 	ldw	ra,16(sp)
10004218:	dcc00317 	ldw	r19,12(sp)
1000421c:	dc800217 	ldw	r18,8(sp)
10004220:	dc400117 	ldw	r17,4(sp)
10004224:	dc000017 	ldw	r16,0(sp)
10004228:	dec00504 	addi	sp,sp,20
1000422c:	f800283a 	ret
10004230:	0081ffc4 	movi	r2,2047
10004234:	80bfd626 	beq	r16,r2,10004190 <__alt_data_end+0xf8004190>
10004238:	42002034 	orhi	r8,r8,128
1000423c:	00800e04 	movi	r2,56
10004240:	10c0a616 	blt	r2,r3,100044dc <__adddf3+0x3c8>
10004244:	008007c4 	movi	r2,31
10004248:	10c0c916 	blt	r2,r3,10004570 <__adddf3+0x45c>
1000424c:	00800804 	movi	r2,32
10004250:	10c5c83a 	sub	r2,r2,r3
10004254:	408e983a 	sll	r7,r8,r2
10004258:	30c8d83a 	srl	r4,r6,r3
1000425c:	3084983a 	sll	r2,r6,r2
10004260:	40c6d83a 	srl	r3,r8,r3
10004264:	390cb03a 	or	r6,r7,r4
10004268:	1004c03a 	cmpne	r2,r2,zero
1000426c:	308cb03a 	or	r6,r6,r2
10004270:	898dc83a 	sub	r6,r17,r6
10004274:	89a3803a 	cmpltu	r17,r17,r6
10004278:	28cbc83a 	sub	r5,r5,r3
1000427c:	2c4bc83a 	sub	r5,r5,r17
10004280:	3023883a 	mov	r17,r6
10004284:	2880202c 	andhi	r2,r5,128
10004288:	10006d26 	beq	r2,zero,10004440 <__adddf3+0x32c>
1000428c:	04c02034 	movhi	r19,128
10004290:	9cffffc4 	addi	r19,r19,-1
10004294:	2ce6703a 	and	r19,r5,r19
10004298:	98007e26 	beq	r19,zero,10004494 <__adddf3+0x380>
1000429c:	9809883a 	mov	r4,r19
100042a0:	00068ac0 	call	100068ac <__clzsi2>
100042a4:	10fffe04 	addi	r3,r2,-8
100042a8:	010007c4 	movi	r4,31
100042ac:	20c07f16 	blt	r4,r3,100044ac <__adddf3+0x398>
100042b0:	01400a04 	movi	r5,40
100042b4:	2885c83a 	sub	r2,r5,r2
100042b8:	888ad83a 	srl	r5,r17,r2
100042bc:	98e6983a 	sll	r19,r19,r3
100042c0:	88e2983a 	sll	r17,r17,r3
100042c4:	2ce6b03a 	or	r19,r5,r19
100042c8:	1c007c16 	blt	r3,r16,100044bc <__adddf3+0x3a8>
100042cc:	1c21c83a 	sub	r16,r3,r16
100042d0:	81400044 	addi	r5,r16,1
100042d4:	00c007c4 	movi	r3,31
100042d8:	19409816 	blt	r3,r5,1000453c <__adddf3+0x428>
100042dc:	1c21c83a 	sub	r16,r3,r16
100042e0:	8c08983a 	sll	r4,r17,r16
100042e4:	8946d83a 	srl	r3,r17,r5
100042e8:	9c20983a 	sll	r16,r19,r16
100042ec:	2008c03a 	cmpne	r4,r4,zero
100042f0:	994ad83a 	srl	r5,r19,r5
100042f4:	1c06b03a 	or	r3,r3,r16
100042f8:	1922b03a 	or	r17,r3,r4
100042fc:	0021883a 	mov	r16,zero
10004300:	003fa306 	br	10004190 <__alt_data_end+0xf8004190>
10004304:	2880202c 	andhi	r2,r5,128
10004308:	9007883a 	mov	r3,r18
1000430c:	103fac1e 	bne	r2,zero,100041c0 <__alt_data_end+0xf80041c0>
10004310:	2804977a 	slli	r2,r5,29
10004314:	8822d0fa 	srli	r17,r17,3
10004318:	0101ffc4 	movi	r4,2047
1000431c:	280ad0fa 	srli	r5,r5,3
10004320:	1444b03a 	or	r2,r2,r17
10004324:	81002c26 	beq	r16,r4,100043d8 <__adddf3+0x2c4>
10004328:	8120703a 	and	r16,r16,r4
1000432c:	01000434 	movhi	r4,16
10004330:	213fffc4 	addi	r4,r4,-1
10004334:	2908703a 	and	r4,r5,r4
10004338:	003fad06 	br	100041f0 <__alt_data_end+0xf80041f0>
1000433c:	8089c83a 	sub	r4,r16,r2
10004340:	01006a0e 	bge	zero,r4,100044ec <__adddf3+0x3d8>
10004344:	10003326 	beq	r2,zero,10004414 <__adddf3+0x300>
10004348:	0081ffc4 	movi	r2,2047
1000434c:	80bf9026 	beq	r16,r2,10004190 <__alt_data_end+0xf8004190>
10004350:	42002034 	orhi	r8,r8,128
10004354:	00800e04 	movi	r2,56
10004358:	1100b116 	blt	r2,r4,10004620 <__adddf3+0x50c>
1000435c:	008007c4 	movi	r2,31
10004360:	1100e216 	blt	r2,r4,100046ec <__adddf3+0x5d8>
10004364:	00800804 	movi	r2,32
10004368:	1105c83a 	sub	r2,r2,r4
1000436c:	4092983a 	sll	r9,r8,r2
10004370:	310ed83a 	srl	r7,r6,r4
10004374:	3084983a 	sll	r2,r6,r2
10004378:	4110d83a 	srl	r8,r8,r4
1000437c:	49ccb03a 	or	r6,r9,r7
10004380:	1004c03a 	cmpne	r2,r2,zero
10004384:	308cb03a 	or	r6,r6,r2
10004388:	344d883a 	add	r6,r6,r17
1000438c:	3463803a 	cmpltu	r17,r6,r17
10004390:	414b883a 	add	r5,r8,r5
10004394:	2c4b883a 	add	r5,r5,r17
10004398:	3023883a 	mov	r17,r6
1000439c:	2880202c 	andhi	r2,r5,128
100043a0:	10002726 	beq	r2,zero,10004440 <__adddf3+0x32c>
100043a4:	84000044 	addi	r16,r16,1
100043a8:	0081ffc4 	movi	r2,2047
100043ac:	8080ae26 	beq	r16,r2,10004668 <__adddf3+0x554>
100043b0:	00bfe034 	movhi	r2,65408
100043b4:	10bfffc4 	addi	r2,r2,-1
100043b8:	288a703a 	and	r5,r5,r2
100043bc:	880cd07a 	srli	r6,r17,1
100043c0:	280897fa 	slli	r4,r5,31
100043c4:	88c0004c 	andi	r3,r17,1
100043c8:	30e2b03a 	or	r17,r6,r3
100043cc:	280ad07a 	srli	r5,r5,1
100043d0:	8922b03a 	or	r17,r17,r4
100043d4:	003f6e06 	br	10004190 <__alt_data_end+0xf8004190>
100043d8:	1148b03a 	or	r4,r2,r5
100043dc:	20003c26 	beq	r4,zero,100044d0 <__adddf3+0x3bc>
100043e0:	29000234 	orhi	r4,r5,8
100043e4:	01400434 	movhi	r5,16
100043e8:	297fffc4 	addi	r5,r5,-1
100043ec:	2148703a 	and	r4,r4,r5
100043f0:	003f7f06 	br	100041f0 <__alt_data_end+0xf80041f0>
100043f4:	18ffffc4 	addi	r3,r3,-1
100043f8:	18004d1e 	bne	r3,zero,10004530 <__adddf3+0x41c>
100043fc:	898dc83a 	sub	r6,r17,r6
10004400:	89a3803a 	cmpltu	r17,r17,r6
10004404:	2a0bc83a 	sub	r5,r5,r8
10004408:	2c4bc83a 	sub	r5,r5,r17
1000440c:	3023883a 	mov	r17,r6
10004410:	003f9c06 	br	10004284 <__alt_data_end+0xf8004284>
10004414:	4184b03a 	or	r2,r8,r6
10004418:	103f5d26 	beq	r2,zero,10004190 <__alt_data_end+0xf8004190>
1000441c:	213fffc4 	addi	r4,r4,-1
10004420:	203fd926 	beq	r4,zero,10004388 <__alt_data_end+0xf8004388>
10004424:	0081ffc4 	movi	r2,2047
10004428:	80bfca1e 	bne	r16,r2,10004354 <__alt_data_end+0xf8004354>
1000442c:	003f5806 	br	10004190 <__alt_data_end+0xf8004190>
10004430:	10c8b03a 	or	r4,r2,r3
10004434:	20008b26 	beq	r4,zero,10004664 <__adddf3+0x550>
10004438:	100b883a 	mov	r5,r2
1000443c:	1823883a 	mov	r17,r3
10004440:	888001cc 	andi	r2,r17,7
10004444:	103f541e 	bne	r2,zero,10004198 <__alt_data_end+0xf8004198>
10004448:	9007883a 	mov	r3,r18
1000444c:	003fb006 	br	10004310 <__alt_data_end+0xf8004310>
10004450:	1800531e 	bne	r3,zero,100045a0 <__adddf3+0x48c>
10004454:	80800044 	addi	r2,r16,1
10004458:	1081ffcc 	andi	r2,r2,2047
1000445c:	00c00044 	movi	r3,1
10004460:	1880990e 	bge	r3,r2,100046c8 <__adddf3+0x5b4>
10004464:	8985c83a 	sub	r2,r17,r6
10004468:	8887803a 	cmpltu	r3,r17,r2
1000446c:	2a27c83a 	sub	r19,r5,r8
10004470:	98e7c83a 	sub	r19,r19,r3
10004474:	98c0202c 	andhi	r3,r19,128
10004478:	18006226 	beq	r3,zero,10004604 <__adddf3+0x4f0>
1000447c:	3463c83a 	sub	r17,r6,r17
10004480:	4151c83a 	sub	r8,r8,r5
10004484:	344d803a 	cmpltu	r6,r6,r17
10004488:	41a7c83a 	sub	r19,r8,r6
1000448c:	3825883a 	mov	r18,r7
10004490:	983f821e 	bne	r19,zero,1000429c <__alt_data_end+0xf800429c>
10004494:	8809883a 	mov	r4,r17
10004498:	00068ac0 	call	100068ac <__clzsi2>
1000449c:	10800804 	addi	r2,r2,32
100044a0:	10fffe04 	addi	r3,r2,-8
100044a4:	010007c4 	movi	r4,31
100044a8:	20ff810e 	bge	r4,r3,100042b0 <__alt_data_end+0xf80042b0>
100044ac:	14fff604 	addi	r19,r2,-40
100044b0:	8ce6983a 	sll	r19,r17,r19
100044b4:	0023883a 	mov	r17,zero
100044b8:	1c3f840e 	bge	r3,r16,100042cc <__alt_data_end+0xf80042cc>
100044bc:	017fe034 	movhi	r5,65408
100044c0:	297fffc4 	addi	r5,r5,-1
100044c4:	80e1c83a 	sub	r16,r16,r3
100044c8:	994a703a 	and	r5,r19,r5
100044cc:	003f3006 	br	10004190 <__alt_data_end+0xf8004190>
100044d0:	0009883a 	mov	r4,zero
100044d4:	0005883a 	mov	r2,zero
100044d8:	003f4506 	br	100041f0 <__alt_data_end+0xf80041f0>
100044dc:	418cb03a 	or	r6,r8,r6
100044e0:	300cc03a 	cmpne	r6,r6,zero
100044e4:	0007883a 	mov	r3,zero
100044e8:	003f6106 	br	10004270 <__alt_data_end+0xf8004270>
100044ec:	2000921e 	bne	r4,zero,10004738 <__adddf3+0x624>
100044f0:	80800044 	addi	r2,r16,1
100044f4:	11c1ffcc 	andi	r7,r2,2047
100044f8:	01000044 	movi	r4,1
100044fc:	21c0610e 	bge	r4,r7,10004684 <__adddf3+0x570>
10004500:	0101ffc4 	movi	r4,2047
10004504:	1100a326 	beq	r2,r4,10004794 <__adddf3+0x680>
10004508:	344d883a 	add	r6,r6,r17
1000450c:	3463803a 	cmpltu	r17,r6,r17
10004510:	414b883a 	add	r5,r8,r5
10004514:	2c4b883a 	add	r5,r5,r17
10004518:	282297fa 	slli	r17,r5,31
1000451c:	300cd07a 	srli	r6,r6,1
10004520:	280ad07a 	srli	r5,r5,1
10004524:	1021883a 	mov	r16,r2
10004528:	89a2b03a 	or	r17,r17,r6
1000452c:	003f1806 	br	10004190 <__alt_data_end+0xf8004190>
10004530:	0081ffc4 	movi	r2,2047
10004534:	80bf411e 	bne	r16,r2,1000423c <__alt_data_end+0xf800423c>
10004538:	003f1506 	br	10004190 <__alt_data_end+0xf8004190>
1000453c:	80bff844 	addi	r2,r16,-31
10004540:	00c00804 	movi	r3,32
10004544:	9884d83a 	srl	r2,r19,r2
10004548:	28c04a26 	beq	r5,r3,10004674 <__adddf3+0x560>
1000454c:	00c00fc4 	movi	r3,63
10004550:	1c21c83a 	sub	r16,r3,r16
10004554:	9c26983a 	sll	r19,r19,r16
10004558:	9c62b03a 	or	r17,r19,r17
1000455c:	8822c03a 	cmpne	r17,r17,zero
10004560:	88a2b03a 	or	r17,r17,r2
10004564:	000b883a 	mov	r5,zero
10004568:	0021883a 	mov	r16,zero
1000456c:	003fb406 	br	10004440 <__alt_data_end+0xf8004440>
10004570:	18bff804 	addi	r2,r3,-32
10004574:	01000804 	movi	r4,32
10004578:	4084d83a 	srl	r2,r8,r2
1000457c:	19003f26 	beq	r3,r4,1000467c <__adddf3+0x568>
10004580:	01001004 	movi	r4,64
10004584:	20c7c83a 	sub	r3,r4,r3
10004588:	40d0983a 	sll	r8,r8,r3
1000458c:	418cb03a 	or	r6,r8,r6
10004590:	300cc03a 	cmpne	r6,r6,zero
10004594:	308cb03a 	or	r6,r6,r2
10004598:	0007883a 	mov	r3,zero
1000459c:	003f3406 	br	10004270 <__alt_data_end+0xf8004270>
100045a0:	80002326 	beq	r16,zero,10004630 <__adddf3+0x51c>
100045a4:	0101ffc4 	movi	r4,2047
100045a8:	11005e26 	beq	r2,r4,10004724 <__adddf3+0x610>
100045ac:	00c7c83a 	sub	r3,zero,r3
100045b0:	29402034 	orhi	r5,r5,128
100045b4:	01000e04 	movi	r4,56
100045b8:	20c07216 	blt	r4,r3,10004784 <__adddf3+0x670>
100045bc:	010007c4 	movi	r4,31
100045c0:	20c0ce16 	blt	r4,r3,100048fc <__adddf3+0x7e8>
100045c4:	01000804 	movi	r4,32
100045c8:	20c9c83a 	sub	r4,r4,r3
100045cc:	2914983a 	sll	r10,r5,r4
100045d0:	88d2d83a 	srl	r9,r17,r3
100045d4:	8908983a 	sll	r4,r17,r4
100045d8:	28c6d83a 	srl	r3,r5,r3
100045dc:	5262b03a 	or	r17,r10,r9
100045e0:	2008c03a 	cmpne	r4,r4,zero
100045e4:	8922b03a 	or	r17,r17,r4
100045e8:	3463c83a 	sub	r17,r6,r17
100045ec:	40c7c83a 	sub	r3,r8,r3
100045f0:	344d803a 	cmpltu	r6,r6,r17
100045f4:	198bc83a 	sub	r5,r3,r6
100045f8:	1021883a 	mov	r16,r2
100045fc:	3825883a 	mov	r18,r7
10004600:	003f2006 	br	10004284 <__alt_data_end+0xf8004284>
10004604:	9886b03a 	or	r3,r19,r2
10004608:	1800141e 	bne	r3,zero,1000465c <__adddf3+0x548>
1000460c:	0007883a 	mov	r3,zero
10004610:	000b883a 	mov	r5,zero
10004614:	0023883a 	mov	r17,zero
10004618:	0021883a 	mov	r16,zero
1000461c:	003f3c06 	br	10004310 <__alt_data_end+0xf8004310>
10004620:	418cb03a 	or	r6,r8,r6
10004624:	300cc03a 	cmpne	r6,r6,zero
10004628:	0011883a 	mov	r8,zero
1000462c:	003f5606 	br	10004388 <__alt_data_end+0xf8004388>
10004630:	2c48b03a 	or	r4,r5,r17
10004634:	20003b26 	beq	r4,zero,10004724 <__adddf3+0x610>
10004638:	00c6303a 	nor	r3,zero,r3
1000463c:	1800371e 	bne	r3,zero,1000471c <__adddf3+0x608>
10004640:	3463c83a 	sub	r17,r6,r17
10004644:	414bc83a 	sub	r5,r8,r5
10004648:	344d803a 	cmpltu	r6,r6,r17
1000464c:	298bc83a 	sub	r5,r5,r6
10004650:	1021883a 	mov	r16,r2
10004654:	3825883a 	mov	r18,r7
10004658:	003f0a06 	br	10004284 <__alt_data_end+0xf8004284>
1000465c:	1023883a 	mov	r17,r2
10004660:	003f0d06 	br	10004298 <__alt_data_end+0xf8004298>
10004664:	0007883a 	mov	r3,zero
10004668:	000b883a 	mov	r5,zero
1000466c:	0023883a 	mov	r17,zero
10004670:	003f2706 	br	10004310 <__alt_data_end+0xf8004310>
10004674:	0027883a 	mov	r19,zero
10004678:	003fb706 	br	10004558 <__alt_data_end+0xf8004558>
1000467c:	0011883a 	mov	r8,zero
10004680:	003fc206 	br	1000458c <__alt_data_end+0xf800458c>
10004684:	2c44b03a 	or	r2,r5,r17
10004688:	8000871e 	bne	r16,zero,100048a8 <__adddf3+0x794>
1000468c:	1000b126 	beq	r2,zero,10004954 <__adddf3+0x840>
10004690:	4184b03a 	or	r2,r8,r6
10004694:	103ebe26 	beq	r2,zero,10004190 <__alt_data_end+0xf8004190>
10004698:	3445883a 	add	r2,r6,r17
1000469c:	1463803a 	cmpltu	r17,r2,r17
100046a0:	414b883a 	add	r5,r8,r5
100046a4:	2c4b883a 	add	r5,r5,r17
100046a8:	28c0202c 	andhi	r3,r5,128
100046ac:	1023883a 	mov	r17,r2
100046b0:	183f6326 	beq	r3,zero,10004440 <__alt_data_end+0xf8004440>
100046b4:	00bfe034 	movhi	r2,65408
100046b8:	10bfffc4 	addi	r2,r2,-1
100046bc:	2021883a 	mov	r16,r4
100046c0:	288a703a 	and	r5,r5,r2
100046c4:	003eb206 	br	10004190 <__alt_data_end+0xf8004190>
100046c8:	2c44b03a 	or	r2,r5,r17
100046cc:	8000251e 	bne	r16,zero,10004764 <__adddf3+0x650>
100046d0:	10004b1e 	bne	r2,zero,10004800 <__adddf3+0x6ec>
100046d4:	4184b03a 	or	r2,r8,r6
100046d8:	103fe226 	beq	r2,zero,10004664 <__alt_data_end+0xf8004664>
100046dc:	400b883a 	mov	r5,r8
100046e0:	3023883a 	mov	r17,r6
100046e4:	3825883a 	mov	r18,r7
100046e8:	003ea906 	br	10004190 <__alt_data_end+0xf8004190>
100046ec:	20bff804 	addi	r2,r4,-32
100046f0:	01c00804 	movi	r7,32
100046f4:	4084d83a 	srl	r2,r8,r2
100046f8:	21c07e26 	beq	r4,r7,100048f4 <__adddf3+0x7e0>
100046fc:	01c01004 	movi	r7,64
10004700:	3909c83a 	sub	r4,r7,r4
10004704:	4110983a 	sll	r8,r8,r4
10004708:	418cb03a 	or	r6,r8,r6
1000470c:	300cc03a 	cmpne	r6,r6,zero
10004710:	308cb03a 	or	r6,r6,r2
10004714:	0011883a 	mov	r8,zero
10004718:	003f1b06 	br	10004388 <__alt_data_end+0xf8004388>
1000471c:	0101ffc4 	movi	r4,2047
10004720:	113fa41e 	bne	r2,r4,100045b4 <__alt_data_end+0xf80045b4>
10004724:	400b883a 	mov	r5,r8
10004728:	3023883a 	mov	r17,r6
1000472c:	1021883a 	mov	r16,r2
10004730:	3825883a 	mov	r18,r7
10004734:	003e9606 	br	10004190 <__alt_data_end+0xf8004190>
10004738:	80001a1e 	bne	r16,zero,100047a4 <__adddf3+0x690>
1000473c:	2c4eb03a 	or	r7,r5,r17
10004740:	38005526 	beq	r7,zero,10004898 <__adddf3+0x784>
10004744:	0108303a 	nor	r4,zero,r4
10004748:	2000511e 	bne	r4,zero,10004890 <__adddf3+0x77c>
1000474c:	89a3883a 	add	r17,r17,r6
10004750:	414b883a 	add	r5,r8,r5
10004754:	898d803a 	cmpltu	r6,r17,r6
10004758:	298b883a 	add	r5,r5,r6
1000475c:	1021883a 	mov	r16,r2
10004760:	003f0e06 	br	1000439c <__alt_data_end+0xf800439c>
10004764:	1000341e 	bne	r2,zero,10004838 <__adddf3+0x724>
10004768:	4184b03a 	or	r2,r8,r6
1000476c:	10006f26 	beq	r2,zero,1000492c <__adddf3+0x818>
10004770:	400b883a 	mov	r5,r8
10004774:	3023883a 	mov	r17,r6
10004778:	3825883a 	mov	r18,r7
1000477c:	0401ffc4 	movi	r16,2047
10004780:	003e8306 	br	10004190 <__alt_data_end+0xf8004190>
10004784:	2c62b03a 	or	r17,r5,r17
10004788:	8822c03a 	cmpne	r17,r17,zero
1000478c:	0007883a 	mov	r3,zero
10004790:	003f9506 	br	100045e8 <__alt_data_end+0xf80045e8>
10004794:	1021883a 	mov	r16,r2
10004798:	000b883a 	mov	r5,zero
1000479c:	0023883a 	mov	r17,zero
100047a0:	003edb06 	br	10004310 <__alt_data_end+0xf8004310>
100047a4:	01c1ffc4 	movi	r7,2047
100047a8:	11c03b26 	beq	r2,r7,10004898 <__adddf3+0x784>
100047ac:	0109c83a 	sub	r4,zero,r4
100047b0:	29402034 	orhi	r5,r5,128
100047b4:	01c00e04 	movi	r7,56
100047b8:	39006216 	blt	r7,r4,10004944 <__adddf3+0x830>
100047bc:	01c007c4 	movi	r7,31
100047c0:	39006b16 	blt	r7,r4,10004970 <__adddf3+0x85c>
100047c4:	01c00804 	movi	r7,32
100047c8:	390fc83a 	sub	r7,r7,r4
100047cc:	29d4983a 	sll	r10,r5,r7
100047d0:	8912d83a 	srl	r9,r17,r4
100047d4:	89ce983a 	sll	r7,r17,r7
100047d8:	2908d83a 	srl	r4,r5,r4
100047dc:	5262b03a 	or	r17,r10,r9
100047e0:	380ac03a 	cmpne	r5,r7,zero
100047e4:	8962b03a 	or	r17,r17,r5
100047e8:	89a3883a 	add	r17,r17,r6
100047ec:	2211883a 	add	r8,r4,r8
100047f0:	898d803a 	cmpltu	r6,r17,r6
100047f4:	418b883a 	add	r5,r8,r6
100047f8:	1021883a 	mov	r16,r2
100047fc:	003ee706 	br	1000439c <__alt_data_end+0xf800439c>
10004800:	4184b03a 	or	r2,r8,r6
10004804:	103e6226 	beq	r2,zero,10004190 <__alt_data_end+0xf8004190>
10004808:	8987c83a 	sub	r3,r17,r6
1000480c:	88c9803a 	cmpltu	r4,r17,r3
10004810:	2a05c83a 	sub	r2,r5,r8
10004814:	1105c83a 	sub	r2,r2,r4
10004818:	1100202c 	andhi	r4,r2,128
1000481c:	203f0426 	beq	r4,zero,10004430 <__alt_data_end+0xf8004430>
10004820:	3463c83a 	sub	r17,r6,r17
10004824:	414bc83a 	sub	r5,r8,r5
10004828:	344d803a 	cmpltu	r6,r6,r17
1000482c:	298bc83a 	sub	r5,r5,r6
10004830:	3825883a 	mov	r18,r7
10004834:	003e5606 	br	10004190 <__alt_data_end+0xf8004190>
10004838:	4184b03a 	or	r2,r8,r6
1000483c:	10002b26 	beq	r2,zero,100048ec <__adddf3+0x7d8>
10004840:	2804d0fa 	srli	r2,r5,3
10004844:	8822d0fa 	srli	r17,r17,3
10004848:	280a977a 	slli	r5,r5,29
1000484c:	10c0022c 	andhi	r3,r2,8
10004850:	2c62b03a 	or	r17,r5,r17
10004854:	18000826 	beq	r3,zero,10004878 <__adddf3+0x764>
10004858:	4008d0fa 	srli	r4,r8,3
1000485c:	20c0022c 	andhi	r3,r4,8
10004860:	1800051e 	bne	r3,zero,10004878 <__adddf3+0x764>
10004864:	300cd0fa 	srli	r6,r6,3
10004868:	4010977a 	slli	r8,r8,29
1000486c:	2005883a 	mov	r2,r4
10004870:	3825883a 	mov	r18,r7
10004874:	41a2b03a 	or	r17,r8,r6
10004878:	880ad77a 	srli	r5,r17,29
1000487c:	100490fa 	slli	r2,r2,3
10004880:	882290fa 	slli	r17,r17,3
10004884:	0401ffc4 	movi	r16,2047
10004888:	288ab03a 	or	r5,r5,r2
1000488c:	003e4006 	br	10004190 <__alt_data_end+0xf8004190>
10004890:	01c1ffc4 	movi	r7,2047
10004894:	11ffc71e 	bne	r2,r7,100047b4 <__alt_data_end+0xf80047b4>
10004898:	400b883a 	mov	r5,r8
1000489c:	3023883a 	mov	r17,r6
100048a0:	1021883a 	mov	r16,r2
100048a4:	003e3a06 	br	10004190 <__alt_data_end+0xf8004190>
100048a8:	10002d26 	beq	r2,zero,10004960 <__adddf3+0x84c>
100048ac:	4184b03a 	or	r2,r8,r6
100048b0:	10000e26 	beq	r2,zero,100048ec <__adddf3+0x7d8>
100048b4:	2804d0fa 	srli	r2,r5,3
100048b8:	8822d0fa 	srli	r17,r17,3
100048bc:	280a977a 	slli	r5,r5,29
100048c0:	10c0022c 	andhi	r3,r2,8
100048c4:	2c62b03a 	or	r17,r5,r17
100048c8:	183feb26 	beq	r3,zero,10004878 <__alt_data_end+0xf8004878>
100048cc:	4008d0fa 	srli	r4,r8,3
100048d0:	20c0022c 	andhi	r3,r4,8
100048d4:	183fe81e 	bne	r3,zero,10004878 <__alt_data_end+0xf8004878>
100048d8:	300cd0fa 	srli	r6,r6,3
100048dc:	4010977a 	slli	r8,r8,29
100048e0:	2005883a 	mov	r2,r4
100048e4:	41a2b03a 	or	r17,r8,r6
100048e8:	003fe306 	br	10004878 <__alt_data_end+0xf8004878>
100048ec:	0401ffc4 	movi	r16,2047
100048f0:	003e2706 	br	10004190 <__alt_data_end+0xf8004190>
100048f4:	0011883a 	mov	r8,zero
100048f8:	003f8306 	br	10004708 <__alt_data_end+0xf8004708>
100048fc:	193ff804 	addi	r4,r3,-32
10004900:	02400804 	movi	r9,32
10004904:	2908d83a 	srl	r4,r5,r4
10004908:	1a402526 	beq	r3,r9,100049a0 <__adddf3+0x88c>
1000490c:	02401004 	movi	r9,64
10004910:	48c7c83a 	sub	r3,r9,r3
10004914:	28ca983a 	sll	r5,r5,r3
10004918:	2c62b03a 	or	r17,r5,r17
1000491c:	8822c03a 	cmpne	r17,r17,zero
10004920:	8922b03a 	or	r17,r17,r4
10004924:	0007883a 	mov	r3,zero
10004928:	003f2f06 	br	100045e8 <__alt_data_end+0xf80045e8>
1000492c:	01402034 	movhi	r5,128
10004930:	0007883a 	mov	r3,zero
10004934:	297fffc4 	addi	r5,r5,-1
10004938:	047ffe04 	movi	r17,-8
1000493c:	0401ffc4 	movi	r16,2047
10004940:	003e7306 	br	10004310 <__alt_data_end+0xf8004310>
10004944:	2c62b03a 	or	r17,r5,r17
10004948:	8822c03a 	cmpne	r17,r17,zero
1000494c:	0009883a 	mov	r4,zero
10004950:	003fa506 	br	100047e8 <__alt_data_end+0xf80047e8>
10004954:	400b883a 	mov	r5,r8
10004958:	3023883a 	mov	r17,r6
1000495c:	003e0c06 	br	10004190 <__alt_data_end+0xf8004190>
10004960:	400b883a 	mov	r5,r8
10004964:	3023883a 	mov	r17,r6
10004968:	0401ffc4 	movi	r16,2047
1000496c:	003e0806 	br	10004190 <__alt_data_end+0xf8004190>
10004970:	21fff804 	addi	r7,r4,-32
10004974:	02400804 	movi	r9,32
10004978:	29ced83a 	srl	r7,r5,r7
1000497c:	22400a26 	beq	r4,r9,100049a8 <__adddf3+0x894>
10004980:	02401004 	movi	r9,64
10004984:	4909c83a 	sub	r4,r9,r4
10004988:	290a983a 	sll	r5,r5,r4
1000498c:	2c62b03a 	or	r17,r5,r17
10004990:	8822c03a 	cmpne	r17,r17,zero
10004994:	89e2b03a 	or	r17,r17,r7
10004998:	0009883a 	mov	r4,zero
1000499c:	003f9206 	br	100047e8 <__alt_data_end+0xf80047e8>
100049a0:	000b883a 	mov	r5,zero
100049a4:	003fdc06 	br	10004918 <__alt_data_end+0xf8004918>
100049a8:	000b883a 	mov	r5,zero
100049ac:	003ff706 	br	1000498c <__alt_data_end+0xf800498c>

100049b0 <__divdf3>:
100049b0:	defff004 	addi	sp,sp,-64
100049b4:	dc800815 	stw	r18,32(sp)
100049b8:	2824d53a 	srli	r18,r5,20
100049bc:	dd800c15 	stw	r22,48(sp)
100049c0:	282cd7fa 	srli	r22,r5,31
100049c4:	dc000615 	stw	r16,24(sp)
100049c8:	04000434 	movhi	r16,16
100049cc:	df000e15 	stw	fp,56(sp)
100049d0:	dd000a15 	stw	r20,40(sp)
100049d4:	dcc00915 	stw	r19,36(sp)
100049d8:	dc400715 	stw	r17,28(sp)
100049dc:	843fffc4 	addi	r16,r16,-1
100049e0:	dfc00f15 	stw	ra,60(sp)
100049e4:	ddc00d15 	stw	r23,52(sp)
100049e8:	dd400b15 	stw	r21,44(sp)
100049ec:	9481ffcc 	andi	r18,r18,2047
100049f0:	2029883a 	mov	r20,r4
100049f4:	2027883a 	mov	r19,r4
100049f8:	2c22703a 	and	r17,r5,r16
100049fc:	b7003fcc 	andi	fp,r22,255
10004a00:	90005e26 	beq	r18,zero,10004b7c <__divdf3+0x1cc>
10004a04:	0081ffc4 	movi	r2,2047
10004a08:	90803526 	beq	r18,r2,10004ae0 <__divdf3+0x130>
10004a0c:	8c000434 	orhi	r16,r17,16
10004a10:	2004d77a 	srli	r2,r4,29
10004a14:	802090fa 	slli	r16,r16,3
10004a18:	202690fa 	slli	r19,r4,3
10004a1c:	94bf0044 	addi	r18,r18,-1023
10004a20:	80a2b03a 	or	r17,r16,r2
10004a24:	0029883a 	mov	r20,zero
10004a28:	0011883a 	mov	r8,zero
10004a2c:	380ad53a 	srli	r5,r7,20
10004a30:	382ed7fa 	srli	r23,r7,31
10004a34:	04000434 	movhi	r16,16
10004a38:	843fffc4 	addi	r16,r16,-1
10004a3c:	2941ffcc 	andi	r5,r5,2047
10004a40:	302b883a 	mov	r21,r6
10004a44:	3c20703a 	and	r16,r7,r16
10004a48:	ba403fcc 	andi	r9,r23,255
10004a4c:	28006726 	beq	r5,zero,10004bec <__divdf3+0x23c>
10004a50:	0081ffc4 	movi	r2,2047
10004a54:	28805f26 	beq	r5,r2,10004bd4 <__divdf3+0x224>
10004a58:	84000434 	orhi	r16,r16,16
10004a5c:	3004d77a 	srli	r2,r6,29
10004a60:	802090fa 	slli	r16,r16,3
10004a64:	302a90fa 	slli	r21,r6,3
10004a68:	297f0044 	addi	r5,r5,-1023
10004a6c:	80a0b03a 	or	r16,r16,r2
10004a70:	000f883a 	mov	r7,zero
10004a74:	3d06b03a 	or	r3,r7,r20
10004a78:	180690ba 	slli	r3,r3,2
10004a7c:	00840034 	movhi	r2,4096
10004a80:	1092a804 	addi	r2,r2,19104
10004a84:	1885883a 	add	r2,r3,r2
10004a88:	10800017 	ldw	r2,0(r2)
10004a8c:	b5c8f03a 	xor	r4,r22,r23
10004a90:	200d883a 	mov	r6,r4
10004a94:	25003fcc 	andi	r20,r4,255
10004a98:	9165c83a 	sub	r18,r18,r5
10004a9c:	1000683a 	jmp	r2
10004aa0:	10004ce8 	cmpgeui	zero,r2,307
10004aa4:	10004b18 	cmpnei	zero,r2,300
10004aa8:	10004cac 	andhi	zero,r2,306
10004aac:	10004afc 	xorhi	zero,r2,299
10004ab0:	10004cac 	andhi	zero,r2,306
10004ab4:	10004c80 	call	110004c8 <_gp+0xfe42d8>
10004ab8:	10004cac 	andhi	zero,r2,306
10004abc:	10004afc 	xorhi	zero,r2,299
10004ac0:	10004b18 	cmpnei	zero,r2,300
10004ac4:	10004b18 	cmpnei	zero,r2,300
10004ac8:	10004c80 	call	110004c8 <_gp+0xfe42d8>
10004acc:	10004afc 	xorhi	zero,r2,299
10004ad0:	10004b0c 	andi	zero,r2,300
10004ad4:	10004b0c 	andi	zero,r2,300
10004ad8:	10004b0c 	andi	zero,r2,300
10004adc:	10004cbc 	xorhi	zero,r2,306
10004ae0:	8904b03a 	or	r2,r17,r4
10004ae4:	1000631e 	bne	r2,zero,10004c74 <__divdf3+0x2c4>
10004ae8:	05000204 	movi	r20,8
10004aec:	0023883a 	mov	r17,zero
10004af0:	0027883a 	mov	r19,zero
10004af4:	02000084 	movi	r8,2
10004af8:	003fcc06 	br	10004a2c <__alt_data_end+0xf8004a2c>
10004afc:	8023883a 	mov	r17,r16
10004b00:	a827883a 	mov	r19,r21
10004b04:	4839883a 	mov	fp,r9
10004b08:	3811883a 	mov	r8,r7
10004b0c:	00800084 	movi	r2,2
10004b10:	4081531e 	bne	r8,r2,10005060 <__divdf3+0x6b0>
10004b14:	e029883a 	mov	r20,fp
10004b18:	a180004c 	andi	r6,r20,1
10004b1c:	0201ffc4 	movi	r8,2047
10004b20:	000b883a 	mov	r5,zero
10004b24:	0027883a 	mov	r19,zero
10004b28:	4010953a 	slli	r8,r8,20
10004b2c:	30c03fcc 	andi	r3,r6,255
10004b30:	04000434 	movhi	r16,16
10004b34:	180697fa 	slli	r3,r3,31
10004b38:	843fffc4 	addi	r16,r16,-1
10004b3c:	2c20703a 	and	r16,r5,r16
10004b40:	8220b03a 	or	r16,r16,r8
10004b44:	80c6b03a 	or	r3,r16,r3
10004b48:	9805883a 	mov	r2,r19
10004b4c:	dfc00f17 	ldw	ra,60(sp)
10004b50:	df000e17 	ldw	fp,56(sp)
10004b54:	ddc00d17 	ldw	r23,52(sp)
10004b58:	dd800c17 	ldw	r22,48(sp)
10004b5c:	dd400b17 	ldw	r21,44(sp)
10004b60:	dd000a17 	ldw	r20,40(sp)
10004b64:	dcc00917 	ldw	r19,36(sp)
10004b68:	dc800817 	ldw	r18,32(sp)
10004b6c:	dc400717 	ldw	r17,28(sp)
10004b70:	dc000617 	ldw	r16,24(sp)
10004b74:	dec01004 	addi	sp,sp,64
10004b78:	f800283a 	ret
10004b7c:	8904b03a 	or	r2,r17,r4
10004b80:	10003726 	beq	r2,zero,10004c60 <__divdf3+0x2b0>
10004b84:	88014d26 	beq	r17,zero,100050bc <__divdf3+0x70c>
10004b88:	8809883a 	mov	r4,r17
10004b8c:	d9800215 	stw	r6,8(sp)
10004b90:	d9c00515 	stw	r7,20(sp)
10004b94:	00068ac0 	call	100068ac <__clzsi2>
10004b98:	d9800217 	ldw	r6,8(sp)
10004b9c:	d9c00517 	ldw	r7,20(sp)
10004ba0:	1007883a 	mov	r3,r2
10004ba4:	01000a04 	movi	r4,40
10004ba8:	1cfffe04 	addi	r19,r3,-8
10004bac:	20c9c83a 	sub	r4,r4,r3
10004bb0:	8cca983a 	sll	r5,r17,r19
10004bb4:	a108d83a 	srl	r4,r20,r4
10004bb8:	a4e6983a 	sll	r19,r20,r19
10004bbc:	2162b03a 	or	r17,r4,r5
10004bc0:	04bf0344 	movi	r18,-1011
10004bc4:	90e5c83a 	sub	r18,r18,r3
10004bc8:	0029883a 	mov	r20,zero
10004bcc:	0011883a 	mov	r8,zero
10004bd0:	003f9606 	br	10004a2c <__alt_data_end+0xf8004a2c>
10004bd4:	8184b03a 	or	r2,r16,r6
10004bd8:	10001f1e 	bne	r2,zero,10004c58 <__divdf3+0x2a8>
10004bdc:	0021883a 	mov	r16,zero
10004be0:	002b883a 	mov	r21,zero
10004be4:	01c00084 	movi	r7,2
10004be8:	003fa206 	br	10004a74 <__alt_data_end+0xf8004a74>
10004bec:	8184b03a 	or	r2,r16,r6
10004bf0:	10001526 	beq	r2,zero,10004c48 <__divdf3+0x298>
10004bf4:	80013d26 	beq	r16,zero,100050ec <__divdf3+0x73c>
10004bf8:	8009883a 	mov	r4,r16
10004bfc:	d9800215 	stw	r6,8(sp)
10004c00:	da000315 	stw	r8,12(sp)
10004c04:	da400415 	stw	r9,16(sp)
10004c08:	00068ac0 	call	100068ac <__clzsi2>
10004c0c:	d9800217 	ldw	r6,8(sp)
10004c10:	da000317 	ldw	r8,12(sp)
10004c14:	da400417 	ldw	r9,16(sp)
10004c18:	1007883a 	mov	r3,r2
10004c1c:	01000a04 	movi	r4,40
10004c20:	1d7ffe04 	addi	r21,r3,-8
10004c24:	20c9c83a 	sub	r4,r4,r3
10004c28:	8560983a 	sll	r16,r16,r21
10004c2c:	3108d83a 	srl	r4,r6,r4
10004c30:	356a983a 	sll	r21,r6,r21
10004c34:	2420b03a 	or	r16,r4,r16
10004c38:	017f0344 	movi	r5,-1011
10004c3c:	28cbc83a 	sub	r5,r5,r3
10004c40:	000f883a 	mov	r7,zero
10004c44:	003f8b06 	br	10004a74 <__alt_data_end+0xf8004a74>
10004c48:	0021883a 	mov	r16,zero
10004c4c:	002b883a 	mov	r21,zero
10004c50:	01c00044 	movi	r7,1
10004c54:	003f8706 	br	10004a74 <__alt_data_end+0xf8004a74>
10004c58:	01c000c4 	movi	r7,3
10004c5c:	003f8506 	br	10004a74 <__alt_data_end+0xf8004a74>
10004c60:	05000104 	movi	r20,4
10004c64:	0023883a 	mov	r17,zero
10004c68:	0027883a 	mov	r19,zero
10004c6c:	02000044 	movi	r8,1
10004c70:	003f6e06 	br	10004a2c <__alt_data_end+0xf8004a2c>
10004c74:	05000304 	movi	r20,12
10004c78:	020000c4 	movi	r8,3
10004c7c:	003f6b06 	br	10004a2c <__alt_data_end+0xf8004a2c>
10004c80:	01400434 	movhi	r5,16
10004c84:	000d883a 	mov	r6,zero
10004c88:	297fffc4 	addi	r5,r5,-1
10004c8c:	04ffffc4 	movi	r19,-1
10004c90:	0201ffc4 	movi	r8,2047
10004c94:	003fa406 	br	10004b28 <__alt_data_end+0xf8004b28>
10004c98:	043f0084 	movi	r16,-1022
10004c9c:	84a1c83a 	sub	r16,r16,r18
10004ca0:	00800e04 	movi	r2,56
10004ca4:	14014d0e 	bge	r2,r16,100051dc <__divdf3+0x82c>
10004ca8:	a180004c 	andi	r6,r20,1
10004cac:	0011883a 	mov	r8,zero
10004cb0:	000b883a 	mov	r5,zero
10004cb4:	0027883a 	mov	r19,zero
10004cb8:	003f9b06 	br	10004b28 <__alt_data_end+0xf8004b28>
10004cbc:	8880022c 	andhi	r2,r17,8
10004cc0:	1000f026 	beq	r2,zero,10005084 <__divdf3+0x6d4>
10004cc4:	8080022c 	andhi	r2,r16,8
10004cc8:	1000ee1e 	bne	r2,zero,10005084 <__divdf3+0x6d4>
10004ccc:	00800434 	movhi	r2,16
10004cd0:	81400234 	orhi	r5,r16,8
10004cd4:	10bfffc4 	addi	r2,r2,-1
10004cd8:	b80d883a 	mov	r6,r23
10004cdc:	288a703a 	and	r5,r5,r2
10004ce0:	a827883a 	mov	r19,r21
10004ce4:	003fea06 	br	10004c90 <__alt_data_end+0xf8004c90>
10004ce8:	84411c36 	bltu	r16,r17,1000515c <__divdf3+0x7ac>
10004cec:	8c011a26 	beq	r17,r16,10005158 <__divdf3+0x7a8>
10004cf0:	94bfffc4 	addi	r18,r18,-1
10004cf4:	dcc00015 	stw	r19,0(sp)
10004cf8:	8811883a 	mov	r8,r17
10004cfc:	002d883a 	mov	r22,zero
10004d00:	a80cd63a 	srli	r6,r21,24
10004d04:	8020923a 	slli	r16,r16,8
10004d08:	a82a923a 	slli	r21,r21,8
10004d0c:	4009883a 	mov	r4,r8
10004d10:	342eb03a 	or	r23,r6,r16
10004d14:	dd400115 	stw	r21,4(sp)
10004d18:	b82ad43a 	srli	r21,r23,16
10004d1c:	da000315 	stw	r8,12(sp)
10004d20:	bcffffcc 	andi	r19,r23,65535
10004d24:	a80b883a 	mov	r5,r21
10004d28:	00040dc0 	call	100040dc <__udivsi3>
10004d2c:	1009883a 	mov	r4,r2
10004d30:	980b883a 	mov	r5,r19
10004d34:	1023883a 	mov	r17,r2
10004d38:	00040ec0 	call	100040ec <__mulsi3>
10004d3c:	da000317 	ldw	r8,12(sp)
10004d40:	a80b883a 	mov	r5,r21
10004d44:	1039883a 	mov	fp,r2
10004d48:	4009883a 	mov	r4,r8
10004d4c:	00040e40 	call	100040e4 <__umodsi3>
10004d50:	d8c00017 	ldw	r3,0(sp)
10004d54:	1004943a 	slli	r2,r2,16
10004d58:	1810d43a 	srli	r8,r3,16
10004d5c:	120eb03a 	or	r7,r2,r8
10004d60:	3f00062e 	bgeu	r7,fp,10004d7c <__divdf3+0x3cc>
10004d64:	3dcf883a 	add	r7,r7,r23
10004d68:	88bfffc4 	addi	r2,r17,-1
10004d6c:	3dc10a36 	bltu	r7,r23,10005198 <__divdf3+0x7e8>
10004d70:	3f01092e 	bgeu	r7,fp,10005198 <__divdf3+0x7e8>
10004d74:	8c7fff84 	addi	r17,r17,-2
10004d78:	3dcf883a 	add	r7,r7,r23
10004d7c:	3f39c83a 	sub	fp,r7,fp
10004d80:	e009883a 	mov	r4,fp
10004d84:	a80b883a 	mov	r5,r21
10004d88:	00040dc0 	call	100040dc <__udivsi3>
10004d8c:	1009883a 	mov	r4,r2
10004d90:	980b883a 	mov	r5,r19
10004d94:	1021883a 	mov	r16,r2
10004d98:	00040ec0 	call	100040ec <__mulsi3>
10004d9c:	e009883a 	mov	r4,fp
10004da0:	a80b883a 	mov	r5,r21
10004da4:	d8800315 	stw	r2,12(sp)
10004da8:	00040e40 	call	100040e4 <__umodsi3>
10004dac:	d9000017 	ldw	r4,0(sp)
10004db0:	1004943a 	slli	r2,r2,16
10004db4:	da000317 	ldw	r8,12(sp)
10004db8:	20ffffcc 	andi	r3,r4,65535
10004dbc:	10ceb03a 	or	r7,r2,r3
10004dc0:	3a00062e 	bgeu	r7,r8,10004ddc <__divdf3+0x42c>
10004dc4:	3dcf883a 	add	r7,r7,r23
10004dc8:	80bfffc4 	addi	r2,r16,-1
10004dcc:	3dc0f036 	bltu	r7,r23,10005190 <__divdf3+0x7e0>
10004dd0:	3a00ef2e 	bgeu	r7,r8,10005190 <__divdf3+0x7e0>
10004dd4:	843fff84 	addi	r16,r16,-2
10004dd8:	3dcf883a 	add	r7,r7,r23
10004ddc:	d8c00117 	ldw	r3,4(sp)
10004de0:	8822943a 	slli	r17,r17,16
10004de4:	3a0fc83a 	sub	r7,r7,r8
10004de8:	1806d43a 	srli	r3,r3,16
10004dec:	8462b03a 	or	r17,r16,r17
10004df0:	8affffcc 	andi	r11,r17,65535
10004df4:	d8c00015 	stw	r3,0(sp)
10004df8:	d8c00117 	ldw	r3,4(sp)
10004dfc:	8820d43a 	srli	r16,r17,16
10004e00:	5809883a 	mov	r4,r11
10004e04:	1f3fffcc 	andi	fp,r3,65535
10004e08:	e00b883a 	mov	r5,fp
10004e0c:	d9c00515 	stw	r7,20(sp)
10004e10:	dac00215 	stw	r11,8(sp)
10004e14:	00040ec0 	call	100040ec <__mulsi3>
10004e18:	8009883a 	mov	r4,r16
10004e1c:	e00b883a 	mov	r5,fp
10004e20:	d8800415 	stw	r2,16(sp)
10004e24:	00040ec0 	call	100040ec <__mulsi3>
10004e28:	d9400017 	ldw	r5,0(sp)
10004e2c:	8009883a 	mov	r4,r16
10004e30:	d8800315 	stw	r2,12(sp)
10004e34:	00040ec0 	call	100040ec <__mulsi3>
10004e38:	dac00217 	ldw	r11,8(sp)
10004e3c:	d9400017 	ldw	r5,0(sp)
10004e40:	d8800215 	stw	r2,8(sp)
10004e44:	5809883a 	mov	r4,r11
10004e48:	00040ec0 	call	100040ec <__mulsi3>
10004e4c:	da400417 	ldw	r9,16(sp)
10004e50:	da800317 	ldw	r10,12(sp)
10004e54:	d9c00517 	ldw	r7,20(sp)
10004e58:	480ad43a 	srli	r5,r9,16
10004e5c:	5085883a 	add	r2,r10,r2
10004e60:	db000217 	ldw	r12,8(sp)
10004e64:	1151883a 	add	r8,r2,r5
10004e68:	4280022e 	bgeu	r8,r10,10004e74 <__divdf3+0x4c4>
10004e6c:	00800074 	movhi	r2,1
10004e70:	6099883a 	add	r12,r12,r2
10004e74:	400ad43a 	srli	r5,r8,16
10004e78:	4010943a 	slli	r8,r8,16
10004e7c:	4c3fffcc 	andi	r16,r9,65535
10004e80:	6149883a 	add	r4,r12,r5
10004e84:	4411883a 	add	r8,r8,r16
10004e88:	3900a736 	bltu	r7,r4,10005128 <__divdf3+0x778>
10004e8c:	3900c426 	beq	r7,r4,100051a0 <__divdf3+0x7f0>
10004e90:	3909c83a 	sub	r4,r7,r4
10004e94:	b221c83a 	sub	r16,r22,r8
10004e98:	b42d803a 	cmpltu	r22,r22,r16
10004e9c:	25adc83a 	sub	r22,r4,r22
10004ea0:	b5c0c626 	beq	r22,r23,100051bc <__divdf3+0x80c>
10004ea4:	b009883a 	mov	r4,r22
10004ea8:	a80b883a 	mov	r5,r21
10004eac:	00040dc0 	call	100040dc <__udivsi3>
10004eb0:	1009883a 	mov	r4,r2
10004eb4:	980b883a 	mov	r5,r19
10004eb8:	d8800315 	stw	r2,12(sp)
10004ebc:	00040ec0 	call	100040ec <__mulsi3>
10004ec0:	a80b883a 	mov	r5,r21
10004ec4:	b009883a 	mov	r4,r22
10004ec8:	d8800415 	stw	r2,16(sp)
10004ecc:	00040e40 	call	100040e4 <__umodsi3>
10004ed0:	1004943a 	slli	r2,r2,16
10004ed4:	800ed43a 	srli	r7,r16,16
10004ed8:	da400417 	ldw	r9,16(sp)
10004edc:	da000317 	ldw	r8,12(sp)
10004ee0:	11cab03a 	or	r5,r2,r7
10004ee4:	2a40062e 	bgeu	r5,r9,10004f00 <__divdf3+0x550>
10004ee8:	2dcb883a 	add	r5,r5,r23
10004eec:	40bfffc4 	addi	r2,r8,-1
10004ef0:	2dc0b436 	bltu	r5,r23,100051c4 <__divdf3+0x814>
10004ef4:	2a40b32e 	bgeu	r5,r9,100051c4 <__divdf3+0x814>
10004ef8:	423fff84 	addi	r8,r8,-2
10004efc:	2dcb883a 	add	r5,r5,r23
10004f00:	2a6dc83a 	sub	r22,r5,r9
10004f04:	b009883a 	mov	r4,r22
10004f08:	a80b883a 	mov	r5,r21
10004f0c:	da000315 	stw	r8,12(sp)
10004f10:	00040dc0 	call	100040dc <__udivsi3>
10004f14:	980b883a 	mov	r5,r19
10004f18:	1009883a 	mov	r4,r2
10004f1c:	d8800415 	stw	r2,16(sp)
10004f20:	00040ec0 	call	100040ec <__mulsi3>
10004f24:	b009883a 	mov	r4,r22
10004f28:	a80b883a 	mov	r5,r21
10004f2c:	1027883a 	mov	r19,r2
10004f30:	00040e40 	call	100040e4 <__umodsi3>
10004f34:	1004943a 	slli	r2,r2,16
10004f38:	843fffcc 	andi	r16,r16,65535
10004f3c:	da000317 	ldw	r8,12(sp)
10004f40:	140eb03a 	or	r7,r2,r16
10004f44:	da400417 	ldw	r9,16(sp)
10004f48:	3cc0062e 	bgeu	r7,r19,10004f64 <__divdf3+0x5b4>
10004f4c:	3dcf883a 	add	r7,r7,r23
10004f50:	48bfffc4 	addi	r2,r9,-1
10004f54:	3dc09d36 	bltu	r7,r23,100051cc <__divdf3+0x81c>
10004f58:	3cc09c2e 	bgeu	r7,r19,100051cc <__divdf3+0x81c>
10004f5c:	4a7fff84 	addi	r9,r9,-2
10004f60:	3dcf883a 	add	r7,r7,r23
10004f64:	4010943a 	slli	r8,r8,16
10004f68:	3cebc83a 	sub	r21,r7,r19
10004f6c:	e00b883a 	mov	r5,fp
10004f70:	4a26b03a 	or	r19,r9,r8
10004f74:	99ffffcc 	andi	r7,r19,65535
10004f78:	9820d43a 	srli	r16,r19,16
10004f7c:	3809883a 	mov	r4,r7
10004f80:	d9c00515 	stw	r7,20(sp)
10004f84:	00040ec0 	call	100040ec <__mulsi3>
10004f88:	8009883a 	mov	r4,r16
10004f8c:	e00b883a 	mov	r5,fp
10004f90:	102d883a 	mov	r22,r2
10004f94:	00040ec0 	call	100040ec <__mulsi3>
10004f98:	d9400017 	ldw	r5,0(sp)
10004f9c:	8009883a 	mov	r4,r16
10004fa0:	1039883a 	mov	fp,r2
10004fa4:	00040ec0 	call	100040ec <__mulsi3>
10004fa8:	d9c00517 	ldw	r7,20(sp)
10004fac:	d9400017 	ldw	r5,0(sp)
10004fb0:	1021883a 	mov	r16,r2
10004fb4:	3809883a 	mov	r4,r7
10004fb8:	00040ec0 	call	100040ec <__mulsi3>
10004fbc:	b008d43a 	srli	r4,r22,16
10004fc0:	e085883a 	add	r2,fp,r2
10004fc4:	1109883a 	add	r4,r2,r4
10004fc8:	2700022e 	bgeu	r4,fp,10004fd4 <__divdf3+0x624>
10004fcc:	00800074 	movhi	r2,1
10004fd0:	80a1883a 	add	r16,r16,r2
10004fd4:	200ad43a 	srli	r5,r4,16
10004fd8:	2008943a 	slli	r4,r4,16
10004fdc:	b5bfffcc 	andi	r22,r22,65535
10004fe0:	8145883a 	add	r2,r16,r5
10004fe4:	2589883a 	add	r4,r4,r22
10004fe8:	a8802c36 	bltu	r21,r2,1000509c <__divdf3+0x6ec>
10004fec:	a880a426 	beq	r21,r2,10005280 <__divdf3+0x8d0>
10004ff0:	9cc00054 	ori	r19,r19,1
10004ff4:	9200ffc4 	addi	r8,r18,1023
10004ff8:	023f270e 	bge	zero,r8,10004c98 <__alt_data_end+0xf8004c98>
10004ffc:	988001cc 	andi	r2,r19,7
10005000:	10000726 	beq	r2,zero,10005020 <__divdf3+0x670>
10005004:	990003cc 	andi	r4,r19,15
10005008:	00800104 	movi	r2,4
1000500c:	20800426 	beq	r4,r2,10005020 <__divdf3+0x670>
10005010:	9885883a 	add	r2,r19,r2
10005014:	14e7803a 	cmpltu	r19,r2,r19
10005018:	8ce3883a 	add	r17,r17,r19
1000501c:	1027883a 	mov	r19,r2
10005020:	8880402c 	andhi	r2,r17,256
10005024:	10000426 	beq	r2,zero,10005038 <__divdf3+0x688>
10005028:	00bfc034 	movhi	r2,65280
1000502c:	10bfffc4 	addi	r2,r2,-1
10005030:	92010004 	addi	r8,r18,1024
10005034:	88a2703a 	and	r17,r17,r2
10005038:	0081ff84 	movi	r2,2046
1000503c:	123eb616 	blt	r2,r8,10004b18 <__alt_data_end+0xf8004b18>
10005040:	9826d0fa 	srli	r19,r19,3
10005044:	8804977a 	slli	r2,r17,29
10005048:	8820927a 	slli	r16,r17,9
1000504c:	4201ffcc 	andi	r8,r8,2047
10005050:	14e6b03a 	or	r19,r2,r19
10005054:	800ad33a 	srli	r5,r16,12
10005058:	a180004c 	andi	r6,r20,1
1000505c:	003eb206 	br	10004b28 <__alt_data_end+0xf8004b28>
10005060:	008000c4 	movi	r2,3
10005064:	4080ac26 	beq	r8,r2,10005318 <__divdf3+0x968>
10005068:	00800044 	movi	r2,1
1000506c:	4080591e 	bne	r8,r2,100051d4 <__divdf3+0x824>
10005070:	e00d883a 	mov	r6,fp
10005074:	0011883a 	mov	r8,zero
10005078:	000b883a 	mov	r5,zero
1000507c:	0027883a 	mov	r19,zero
10005080:	003ea906 	br	10004b28 <__alt_data_end+0xf8004b28>
10005084:	00800434 	movhi	r2,16
10005088:	89400234 	orhi	r5,r17,8
1000508c:	10bfffc4 	addi	r2,r2,-1
10005090:	b00d883a 	mov	r6,r22
10005094:	288a703a 	and	r5,r5,r2
10005098:	003efd06 	br	10004c90 <__alt_data_end+0xf8004c90>
1000509c:	adcf883a 	add	r7,r21,r23
100050a0:	997fffc4 	addi	r5,r19,-1
100050a4:	3dc0412e 	bgeu	r7,r23,100051ac <__divdf3+0x7fc>
100050a8:	2827883a 	mov	r19,r5
100050ac:	38bfd01e 	bne	r7,r2,10004ff0 <__alt_data_end+0xf8004ff0>
100050b0:	d8c00117 	ldw	r3,4(sp)
100050b4:	193fce1e 	bne	r3,r4,10004ff0 <__alt_data_end+0xf8004ff0>
100050b8:	003fce06 	br	10004ff4 <__alt_data_end+0xf8004ff4>
100050bc:	d9800215 	stw	r6,8(sp)
100050c0:	d9c00515 	stw	r7,20(sp)
100050c4:	00068ac0 	call	100068ac <__clzsi2>
100050c8:	10c00804 	addi	r3,r2,32
100050cc:	010009c4 	movi	r4,39
100050d0:	d9800217 	ldw	r6,8(sp)
100050d4:	d9c00517 	ldw	r7,20(sp)
100050d8:	20feb20e 	bge	r4,r3,10004ba4 <__alt_data_end+0xf8004ba4>
100050dc:	117ffe04 	addi	r5,r2,-8
100050e0:	a162983a 	sll	r17,r20,r5
100050e4:	0027883a 	mov	r19,zero
100050e8:	003eb506 	br	10004bc0 <__alt_data_end+0xf8004bc0>
100050ec:	3009883a 	mov	r4,r6
100050f0:	d9800215 	stw	r6,8(sp)
100050f4:	da000315 	stw	r8,12(sp)
100050f8:	da400415 	stw	r9,16(sp)
100050fc:	00068ac0 	call	100068ac <__clzsi2>
10005100:	10c00804 	addi	r3,r2,32
10005104:	010009c4 	movi	r4,39
10005108:	d9800217 	ldw	r6,8(sp)
1000510c:	da000317 	ldw	r8,12(sp)
10005110:	da400417 	ldw	r9,16(sp)
10005114:	20fec10e 	bge	r4,r3,10004c1c <__alt_data_end+0xf8004c1c>
10005118:	10bffe04 	addi	r2,r2,-8
1000511c:	a8a0983a 	sll	r16,r21,r2
10005120:	002b883a 	mov	r21,zero
10005124:	003ec406 	br	10004c38 <__alt_data_end+0xf8004c38>
10005128:	d8c00117 	ldw	r3,4(sp)
1000512c:	b0ed883a 	add	r22,r22,r3
10005130:	b0c5803a 	cmpltu	r2,r22,r3
10005134:	15c5883a 	add	r2,r2,r23
10005138:	11cf883a 	add	r7,r2,r7
1000513c:	88bfffc4 	addi	r2,r17,-1
10005140:	b9c00d2e 	bgeu	r23,r7,10005178 <__divdf3+0x7c8>
10005144:	39003f36 	bltu	r7,r4,10005244 <__divdf3+0x894>
10005148:	21c06a26 	beq	r4,r7,100052f4 <__divdf3+0x944>
1000514c:	3909c83a 	sub	r4,r7,r4
10005150:	1023883a 	mov	r17,r2
10005154:	003f4f06 	br	10004e94 <__alt_data_end+0xf8004e94>
10005158:	9d7ee536 	bltu	r19,r21,10004cf0 <__alt_data_end+0xf8004cf0>
1000515c:	982ed07a 	srli	r23,r19,1
10005160:	880497fa 	slli	r2,r17,31
10005164:	8810d07a 	srli	r8,r17,1
10005168:	982c97fa 	slli	r22,r19,31
1000516c:	b884b03a 	or	r2,r23,r2
10005170:	d8800015 	stw	r2,0(sp)
10005174:	003ee206 	br	10004d00 <__alt_data_end+0xf8004d00>
10005178:	3dfff41e 	bne	r7,r23,1000514c <__alt_data_end+0xf800514c>
1000517c:	d8c00117 	ldw	r3,4(sp)
10005180:	b0fff02e 	bgeu	r22,r3,10005144 <__alt_data_end+0xf8005144>
10005184:	b909c83a 	sub	r4,r23,r4
10005188:	1023883a 	mov	r17,r2
1000518c:	003f4106 	br	10004e94 <__alt_data_end+0xf8004e94>
10005190:	1021883a 	mov	r16,r2
10005194:	003f1106 	br	10004ddc <__alt_data_end+0xf8004ddc>
10005198:	1023883a 	mov	r17,r2
1000519c:	003ef706 	br	10004d7c <__alt_data_end+0xf8004d7c>
100051a0:	b23fe136 	bltu	r22,r8,10005128 <__alt_data_end+0xf8005128>
100051a4:	0009883a 	mov	r4,zero
100051a8:	003f3a06 	br	10004e94 <__alt_data_end+0xf8004e94>
100051ac:	38802c36 	bltu	r7,r2,10005260 <__divdf3+0x8b0>
100051b0:	11c05326 	beq	r2,r7,10005300 <__divdf3+0x950>
100051b4:	2827883a 	mov	r19,r5
100051b8:	003f8d06 	br	10004ff0 <__alt_data_end+0xf8004ff0>
100051bc:	04ffffc4 	movi	r19,-1
100051c0:	003f8c06 	br	10004ff4 <__alt_data_end+0xf8004ff4>
100051c4:	1011883a 	mov	r8,r2
100051c8:	003f4d06 	br	10004f00 <__alt_data_end+0xf8004f00>
100051cc:	1013883a 	mov	r9,r2
100051d0:	003f6406 	br	10004f64 <__alt_data_end+0xf8004f64>
100051d4:	e029883a 	mov	r20,fp
100051d8:	003f8606 	br	10004ff4 <__alt_data_end+0xf8004ff4>
100051dc:	008007c4 	movi	r2,31
100051e0:	14002a16 	blt	r2,r16,1000528c <__divdf3+0x8dc>
100051e4:	91410784 	addi	r5,r18,1054
100051e8:	9c0cd83a 	srl	r6,r19,r16
100051ec:	8948983a 	sll	r4,r17,r5
100051f0:	9944983a 	sll	r2,r19,r5
100051f4:	8c20d83a 	srl	r16,r17,r16
100051f8:	3108b03a 	or	r4,r6,r4
100051fc:	1004c03a 	cmpne	r2,r2,zero
10005200:	2084b03a 	or	r2,r4,r2
10005204:	110001cc 	andi	r4,r2,7
10005208:	20000726 	beq	r4,zero,10005228 <__divdf3+0x878>
1000520c:	114003cc 	andi	r5,r2,15
10005210:	01000104 	movi	r4,4
10005214:	29000426 	beq	r5,r4,10005228 <__divdf3+0x878>
10005218:	11000104 	addi	r4,r2,4
1000521c:	2085803a 	cmpltu	r2,r4,r2
10005220:	80a1883a 	add	r16,r16,r2
10005224:	2005883a 	mov	r2,r4
10005228:	8100202c 	andhi	r4,r16,128
1000522c:	20002d26 	beq	r4,zero,100052e4 <__divdf3+0x934>
10005230:	a180004c 	andi	r6,r20,1
10005234:	02000044 	movi	r8,1
10005238:	000b883a 	mov	r5,zero
1000523c:	0027883a 	mov	r19,zero
10005240:	003e3906 	br	10004b28 <__alt_data_end+0xf8004b28>
10005244:	d8c00117 	ldw	r3,4(sp)
10005248:	8c7fff84 	addi	r17,r17,-2
1000524c:	b0ed883a 	add	r22,r22,r3
10005250:	b0c5803a 	cmpltu	r2,r22,r3
10005254:	15c5883a 	add	r2,r2,r23
10005258:	11cf883a 	add	r7,r2,r7
1000525c:	003f0c06 	br	10004e90 <__alt_data_end+0xf8004e90>
10005260:	d8c00117 	ldw	r3,4(sp)
10005264:	997fff84 	addi	r5,r19,-2
10005268:	18d1883a 	add	r8,r3,r3
1000526c:	40c7803a 	cmpltu	r3,r8,r3
10005270:	1dcd883a 	add	r6,r3,r23
10005274:	398f883a 	add	r7,r7,r6
10005278:	da000115 	stw	r8,4(sp)
1000527c:	003f8a06 	br	100050a8 <__alt_data_end+0xf80050a8>
10005280:	203f861e 	bne	r4,zero,1000509c <__alt_data_end+0xf800509c>
10005284:	d8000115 	stw	zero,4(sp)
10005288:	003f8906 	br	100050b0 <__alt_data_end+0xf80050b0>
1000528c:	00bef884 	movi	r2,-1054
10005290:	1485c83a 	sub	r2,r2,r18
10005294:	01000804 	movi	r4,32
10005298:	8884d83a 	srl	r2,r17,r2
1000529c:	81001c26 	beq	r16,r4,10005310 <__divdf3+0x960>
100052a0:	91010f84 	addi	r4,r18,1086
100052a4:	8908983a 	sll	r4,r17,r4
100052a8:	24c8b03a 	or	r4,r4,r19
100052ac:	2008c03a 	cmpne	r4,r4,zero
100052b0:	2084b03a 	or	r2,r4,r2
100052b4:	140001cc 	andi	r16,r2,7
100052b8:	8000061e 	bne	r16,zero,100052d4 <__divdf3+0x924>
100052bc:	000b883a 	mov	r5,zero
100052c0:	1004d0fa 	srli	r2,r2,3
100052c4:	a180004c 	andi	r6,r20,1
100052c8:	0011883a 	mov	r8,zero
100052cc:	1426b03a 	or	r19,r2,r16
100052d0:	003e1506 	br	10004b28 <__alt_data_end+0xf8004b28>
100052d4:	114003cc 	andi	r5,r2,15
100052d8:	01000104 	movi	r4,4
100052dc:	0021883a 	mov	r16,zero
100052e0:	293fcd1e 	bne	r5,r4,10005218 <__alt_data_end+0xf8005218>
100052e4:	800a927a 	slli	r5,r16,9
100052e8:	8020977a 	slli	r16,r16,29
100052ec:	280ad33a 	srli	r5,r5,12
100052f0:	003ff306 	br	100052c0 <__alt_data_end+0xf80052c0>
100052f4:	b23fd336 	bltu	r22,r8,10005244 <__alt_data_end+0xf8005244>
100052f8:	1023883a 	mov	r17,r2
100052fc:	003fa906 	br	100051a4 <__alt_data_end+0xf80051a4>
10005300:	d8c00117 	ldw	r3,4(sp)
10005304:	193fd636 	bltu	r3,r4,10005260 <__alt_data_end+0xf8005260>
10005308:	2827883a 	mov	r19,r5
1000530c:	003f6806 	br	100050b0 <__alt_data_end+0xf80050b0>
10005310:	0009883a 	mov	r4,zero
10005314:	003fe406 	br	100052a8 <__alt_data_end+0xf80052a8>
10005318:	00800434 	movhi	r2,16
1000531c:	89400234 	orhi	r5,r17,8
10005320:	10bfffc4 	addi	r2,r2,-1
10005324:	e00d883a 	mov	r6,fp
10005328:	288a703a 	and	r5,r5,r2
1000532c:	003e5806 	br	10004c90 <__alt_data_end+0xf8004c90>

10005330 <__eqdf2>:
10005330:	2804d53a 	srli	r2,r5,20
10005334:	3806d53a 	srli	r3,r7,20
10005338:	02000434 	movhi	r8,16
1000533c:	423fffc4 	addi	r8,r8,-1
10005340:	1081ffcc 	andi	r2,r2,2047
10005344:	0241ffc4 	movi	r9,2047
10005348:	2a14703a 	and	r10,r5,r8
1000534c:	18c1ffcc 	andi	r3,r3,2047
10005350:	3a10703a 	and	r8,r7,r8
10005354:	280ad7fa 	srli	r5,r5,31
10005358:	380ed7fa 	srli	r7,r7,31
1000535c:	12400f26 	beq	r2,r9,1000539c <__eqdf2+0x6c>
10005360:	0241ffc4 	movi	r9,2047
10005364:	1a400326 	beq	r3,r9,10005374 <__eqdf2+0x44>
10005368:	10c00526 	beq	r2,r3,10005380 <__eqdf2+0x50>
1000536c:	00800044 	movi	r2,1
10005370:	f800283a 	ret
10005374:	4192b03a 	or	r9,r8,r6
10005378:	483ffc1e 	bne	r9,zero,1000536c <__alt_data_end+0xf800536c>
1000537c:	10fffb1e 	bne	r2,r3,1000536c <__alt_data_end+0xf800536c>
10005380:	523ffa1e 	bne	r10,r8,1000536c <__alt_data_end+0xf800536c>
10005384:	21bff91e 	bne	r4,r6,1000536c <__alt_data_end+0xf800536c>
10005388:	29c00826 	beq	r5,r7,100053ac <__eqdf2+0x7c>
1000538c:	103ff71e 	bne	r2,zero,1000536c <__alt_data_end+0xf800536c>
10005390:	5104b03a 	or	r2,r10,r4
10005394:	1004c03a 	cmpne	r2,r2,zero
10005398:	f800283a 	ret
1000539c:	5112b03a 	or	r9,r10,r4
100053a0:	483fef26 	beq	r9,zero,10005360 <__alt_data_end+0xf8005360>
100053a4:	00800044 	movi	r2,1
100053a8:	f800283a 	ret
100053ac:	0005883a 	mov	r2,zero
100053b0:	f800283a 	ret

100053b4 <__gedf2>:
100053b4:	2804d53a 	srli	r2,r5,20
100053b8:	3806d53a 	srli	r3,r7,20
100053bc:	02000434 	movhi	r8,16
100053c0:	423fffc4 	addi	r8,r8,-1
100053c4:	0241ffc4 	movi	r9,2047
100053c8:	1081ffcc 	andi	r2,r2,2047
100053cc:	2a14703a 	and	r10,r5,r8
100053d0:	1a46703a 	and	r3,r3,r9
100053d4:	3a10703a 	and	r8,r7,r8
100053d8:	280ad7fa 	srli	r5,r5,31
100053dc:	380ed7fa 	srli	r7,r7,31
100053e0:	12400b26 	beq	r2,r9,10005410 <__gedf2+0x5c>
100053e4:	1a401626 	beq	r3,r9,10005440 <__gedf2+0x8c>
100053e8:	10000c1e 	bne	r2,zero,1000541c <__gedf2+0x68>
100053ec:	5112b03a 	or	r9,r10,r4
100053f0:	4813003a 	cmpeq	r9,r9,zero
100053f4:	4817883a 	mov	r11,r9
100053f8:	18000c1e 	bne	r3,zero,1000542c <__gedf2+0x78>
100053fc:	4198b03a 	or	r12,r8,r6
10005400:	60000a1e 	bne	r12,zero,1000542c <__gedf2+0x78>
10005404:	48001326 	beq	r9,zero,10005454 <__gedf2+0xa0>
10005408:	0005883a 	mov	r2,zero
1000540c:	f800283a 	ret
10005410:	5112b03a 	or	r9,r10,r4
10005414:	4800191e 	bne	r9,zero,1000547c <__gedf2+0xc8>
10005418:	18800926 	beq	r3,r2,10005440 <__gedf2+0x8c>
1000541c:	18000b1e 	bne	r3,zero,1000544c <__gedf2+0x98>
10005420:	4192b03a 	or	r9,r8,r6
10005424:	0017883a 	mov	r11,zero
10005428:	48000a26 	beq	r9,zero,10005454 <__gedf2+0xa0>
1000542c:	39c03fcc 	andi	r7,r7,255
10005430:	58000726 	beq	r11,zero,10005450 <__gedf2+0x9c>
10005434:	3800081e 	bne	r7,zero,10005458 <__gedf2+0xa4>
10005438:	00bfffc4 	movi	r2,-1
1000543c:	f800283a 	ret
10005440:	4192b03a 	or	r9,r8,r6
10005444:	48000d1e 	bne	r9,zero,1000547c <__gedf2+0xc8>
10005448:	103fe826 	beq	r2,zero,100053ec <__alt_data_end+0xf80053ec>
1000544c:	39c03fcc 	andi	r7,r7,255
10005450:	29c00326 	beq	r5,r7,10005460 <__gedf2+0xac>
10005454:	283ff81e 	bne	r5,zero,10005438 <__alt_data_end+0xf8005438>
10005458:	00800044 	movi	r2,1
1000545c:	f800283a 	ret
10005460:	18bffc16 	blt	r3,r2,10005454 <__alt_data_end+0xf8005454>
10005464:	10c00316 	blt	r2,r3,10005474 <__gedf2+0xc0>
10005468:	42bffa36 	bltu	r8,r10,10005454 <__alt_data_end+0xf8005454>
1000546c:	52000526 	beq	r10,r8,10005484 <__gedf2+0xd0>
10005470:	523fe52e 	bgeu	r10,r8,10005408 <__alt_data_end+0xf8005408>
10005474:	283ff026 	beq	r5,zero,10005438 <__alt_data_end+0xf8005438>
10005478:	003ff706 	br	10005458 <__alt_data_end+0xf8005458>
1000547c:	00bfff84 	movi	r2,-2
10005480:	f800283a 	ret
10005484:	313ff336 	bltu	r6,r4,10005454 <__alt_data_end+0xf8005454>
10005488:	21bfdf2e 	bgeu	r4,r6,10005408 <__alt_data_end+0xf8005408>
1000548c:	283fea26 	beq	r5,zero,10005438 <__alt_data_end+0xf8005438>
10005490:	003ff106 	br	10005458 <__alt_data_end+0xf8005458>

10005494 <__ledf2>:
10005494:	2804d53a 	srli	r2,r5,20
10005498:	3810d53a 	srli	r8,r7,20
1000549c:	00c00434 	movhi	r3,16
100054a0:	18ffffc4 	addi	r3,r3,-1
100054a4:	0241ffc4 	movi	r9,2047
100054a8:	1081ffcc 	andi	r2,r2,2047
100054ac:	28d4703a 	and	r10,r5,r3
100054b0:	4250703a 	and	r8,r8,r9
100054b4:	38c6703a 	and	r3,r7,r3
100054b8:	280ad7fa 	srli	r5,r5,31
100054bc:	380ed7fa 	srli	r7,r7,31
100054c0:	12400b26 	beq	r2,r9,100054f0 <__ledf2+0x5c>
100054c4:	42401926 	beq	r8,r9,1000552c <__ledf2+0x98>
100054c8:	10000c1e 	bne	r2,zero,100054fc <__ledf2+0x68>
100054cc:	5112b03a 	or	r9,r10,r4
100054d0:	4813003a 	cmpeq	r9,r9,zero
100054d4:	4817883a 	mov	r11,r9
100054d8:	40000f26 	beq	r8,zero,10005518 <__ledf2+0x84>
100054dc:	39c03fcc 	andi	r7,r7,255
100054e0:	58001826 	beq	r11,zero,10005544 <__ledf2+0xb0>
100054e4:	38000a1e 	bne	r7,zero,10005510 <__ledf2+0x7c>
100054e8:	00bfffc4 	movi	r2,-1
100054ec:	f800283a 	ret
100054f0:	5112b03a 	or	r9,r10,r4
100054f4:	48000f1e 	bne	r9,zero,10005534 <__ledf2+0xa0>
100054f8:	40800c26 	beq	r8,r2,1000552c <__ledf2+0x98>
100054fc:	4000101e 	bne	r8,zero,10005540 <__ledf2+0xac>
10005500:	1992b03a 	or	r9,r3,r6
10005504:	0017883a 	mov	r11,zero
10005508:	483ff41e 	bne	r9,zero,100054dc <__alt_data_end+0xf80054dc>
1000550c:	283ff61e 	bne	r5,zero,100054e8 <__alt_data_end+0xf80054e8>
10005510:	00800044 	movi	r2,1
10005514:	f800283a 	ret
10005518:	1998b03a 	or	r12,r3,r6
1000551c:	603fef1e 	bne	r12,zero,100054dc <__alt_data_end+0xf80054dc>
10005520:	483ffa26 	beq	r9,zero,1000550c <__alt_data_end+0xf800550c>
10005524:	0005883a 	mov	r2,zero
10005528:	f800283a 	ret
1000552c:	1992b03a 	or	r9,r3,r6
10005530:	48000226 	beq	r9,zero,1000553c <__ledf2+0xa8>
10005534:	00800084 	movi	r2,2
10005538:	f800283a 	ret
1000553c:	103fe326 	beq	r2,zero,100054cc <__alt_data_end+0xf80054cc>
10005540:	39c03fcc 	andi	r7,r7,255
10005544:	29fff11e 	bne	r5,r7,1000550c <__alt_data_end+0xf800550c>
10005548:	40bff016 	blt	r8,r2,1000550c <__alt_data_end+0xf800550c>
1000554c:	12000316 	blt	r2,r8,1000555c <__ledf2+0xc8>
10005550:	1abfee36 	bltu	r3,r10,1000550c <__alt_data_end+0xf800550c>
10005554:	50c00326 	beq	r10,r3,10005564 <__ledf2+0xd0>
10005558:	50fff22e 	bgeu	r10,r3,10005524 <__alt_data_end+0xf8005524>
1000555c:	283fe226 	beq	r5,zero,100054e8 <__alt_data_end+0xf80054e8>
10005560:	003feb06 	br	10005510 <__alt_data_end+0xf8005510>
10005564:	313fe936 	bltu	r6,r4,1000550c <__alt_data_end+0xf800550c>
10005568:	21bfee2e 	bgeu	r4,r6,10005524 <__alt_data_end+0xf8005524>
1000556c:	283fde26 	beq	r5,zero,100054e8 <__alt_data_end+0xf80054e8>
10005570:	003fe706 	br	10005510 <__alt_data_end+0xf8005510>

10005574 <__muldf3>:
10005574:	deffee04 	addi	sp,sp,-72
10005578:	dd000c15 	stw	r20,48(sp)
1000557c:	2828d53a 	srli	r20,r5,20
10005580:	dd400d15 	stw	r21,52(sp)
10005584:	282ad7fa 	srli	r21,r5,31
10005588:	dc000815 	stw	r16,32(sp)
1000558c:	04000434 	movhi	r16,16
10005590:	ddc00f15 	stw	r23,60(sp)
10005594:	dcc00b15 	stw	r19,44(sp)
10005598:	dc800a15 	stw	r18,40(sp)
1000559c:	843fffc4 	addi	r16,r16,-1
100055a0:	dfc01115 	stw	ra,68(sp)
100055a4:	df001015 	stw	fp,64(sp)
100055a8:	dd800e15 	stw	r22,56(sp)
100055ac:	dc400915 	stw	r17,36(sp)
100055b0:	a501ffcc 	andi	r20,r20,2047
100055b4:	2025883a 	mov	r18,r4
100055b8:	202f883a 	mov	r23,r4
100055bc:	2c20703a 	and	r16,r5,r16
100055c0:	a827883a 	mov	r19,r21
100055c4:	aa403fcc 	andi	r9,r21,255
100055c8:	a0005926 	beq	r20,zero,10005730 <__muldf3+0x1bc>
100055cc:	0081ffc4 	movi	r2,2047
100055d0:	a0803426 	beq	r20,r2,100056a4 <__muldf3+0x130>
100055d4:	84000434 	orhi	r16,r16,16
100055d8:	2004d77a 	srli	r2,r4,29
100055dc:	802090fa 	slli	r16,r16,3
100055e0:	202e90fa 	slli	r23,r4,3
100055e4:	a53f0044 	addi	r20,r20,-1023
100055e8:	80a0b03a 	or	r16,r16,r2
100055ec:	000b883a 	mov	r5,zero
100055f0:	0039883a 	mov	fp,zero
100055f4:	3806d53a 	srli	r3,r7,20
100055f8:	382cd7fa 	srli	r22,r7,31
100055fc:	00800434 	movhi	r2,16
10005600:	10bfffc4 	addi	r2,r2,-1
10005604:	18c1ffcc 	andi	r3,r3,2047
10005608:	3025883a 	mov	r18,r6
1000560c:	38a2703a 	and	r17,r7,r2
10005610:	b2803fcc 	andi	r10,r22,255
10005614:	18006426 	beq	r3,zero,100057a8 <__muldf3+0x234>
10005618:	0081ffc4 	movi	r2,2047
1000561c:	18805c26 	beq	r3,r2,10005790 <__muldf3+0x21c>
10005620:	8c400434 	orhi	r17,r17,16
10005624:	3004d77a 	srli	r2,r6,29
10005628:	882290fa 	slli	r17,r17,3
1000562c:	302490fa 	slli	r18,r6,3
10005630:	18ff0044 	addi	r3,r3,-1023
10005634:	88a2b03a 	or	r17,r17,r2
10005638:	000f883a 	mov	r7,zero
1000563c:	394ab03a 	or	r5,r7,r5
10005640:	280a90ba 	slli	r5,r5,2
10005644:	00840034 	movhi	r2,4096
10005648:	10959904 	addi	r2,r2,22116
1000564c:	288b883a 	add	r5,r5,r2
10005650:	28800017 	ldw	r2,0(r5)
10005654:	a0c7883a 	add	r3,r20,r3
10005658:	b54cf03a 	xor	r6,r22,r21
1000565c:	1a000044 	addi	r8,r3,1
10005660:	1000683a 	jmp	r2
10005664:	100058a8 	cmpgeui	zero,r2,354
10005668:	10005894 	ori	zero,r2,354
1000566c:	10005894 	ori	zero,r2,354
10005670:	10005880 	call	11000588 <_gp+0xfe4398>
10005674:	100056c0 	call	1100056c <_gp+0xfe437c>
10005678:	100056c0 	call	1100056c <_gp+0xfe437c>
1000567c:	10005868 	cmpgeui	zero,r2,353
10005680:	10005880 	call	11000588 <_gp+0xfe4398>
10005684:	100056c0 	call	1100056c <_gp+0xfe437c>
10005688:	10005868 	cmpgeui	zero,r2,353
1000568c:	100056c0 	call	1100056c <_gp+0xfe437c>
10005690:	10005880 	call	11000588 <_gp+0xfe4398>
10005694:	100056c4 	addi	zero,r2,347
10005698:	100056c4 	addi	zero,r2,347
1000569c:	100056c4 	addi	zero,r2,347
100056a0:	10005be4 	muli	zero,r2,367
100056a4:	8104b03a 	or	r2,r16,r4
100056a8:	10006c1e 	bne	r2,zero,1000585c <__muldf3+0x2e8>
100056ac:	01400204 	movi	r5,8
100056b0:	0021883a 	mov	r16,zero
100056b4:	002f883a 	mov	r23,zero
100056b8:	07000084 	movi	fp,2
100056bc:	003fcd06 	br	100055f4 <__alt_data_end+0xf80055f4>
100056c0:	3013883a 	mov	r9,r6
100056c4:	00800084 	movi	r2,2
100056c8:	e080501e 	bne	fp,r2,1000580c <__muldf3+0x298>
100056cc:	4cc0004c 	andi	r19,r9,1
100056d0:	0101ffc4 	movi	r4,2047
100056d4:	0021883a 	mov	r16,zero
100056d8:	002f883a 	mov	r23,zero
100056dc:	2008953a 	slli	r4,r4,20
100056e0:	98c03fcc 	andi	r3,r19,255
100056e4:	04400434 	movhi	r17,16
100056e8:	8c7fffc4 	addi	r17,r17,-1
100056ec:	180697fa 	slli	r3,r3,31
100056f0:	8460703a 	and	r16,r16,r17
100056f4:	8120b03a 	or	r16,r16,r4
100056f8:	80c6b03a 	or	r3,r16,r3
100056fc:	b805883a 	mov	r2,r23
10005700:	dfc01117 	ldw	ra,68(sp)
10005704:	df001017 	ldw	fp,64(sp)
10005708:	ddc00f17 	ldw	r23,60(sp)
1000570c:	dd800e17 	ldw	r22,56(sp)
10005710:	dd400d17 	ldw	r21,52(sp)
10005714:	dd000c17 	ldw	r20,48(sp)
10005718:	dcc00b17 	ldw	r19,44(sp)
1000571c:	dc800a17 	ldw	r18,40(sp)
10005720:	dc400917 	ldw	r17,36(sp)
10005724:	dc000817 	ldw	r16,32(sp)
10005728:	dec01204 	addi	sp,sp,72
1000572c:	f800283a 	ret
10005730:	8104b03a 	or	r2,r16,r4
10005734:	10004426 	beq	r2,zero,10005848 <__muldf3+0x2d4>
10005738:	80014b26 	beq	r16,zero,10005c68 <__muldf3+0x6f4>
1000573c:	8009883a 	mov	r4,r16
10005740:	d9800715 	stw	r6,28(sp)
10005744:	d9c00215 	stw	r7,8(sp)
10005748:	da400415 	stw	r9,16(sp)
1000574c:	00068ac0 	call	100068ac <__clzsi2>
10005750:	d9800717 	ldw	r6,28(sp)
10005754:	d9c00217 	ldw	r7,8(sp)
10005758:	da400417 	ldw	r9,16(sp)
1000575c:	1007883a 	mov	r3,r2
10005760:	01000a04 	movi	r4,40
10005764:	1dfffe04 	addi	r23,r3,-8
10005768:	20c9c83a 	sub	r4,r4,r3
1000576c:	85e0983a 	sll	r16,r16,r23
10005770:	9108d83a 	srl	r4,r18,r4
10005774:	95ee983a 	sll	r23,r18,r23
10005778:	2420b03a 	or	r16,r4,r16
1000577c:	053f0344 	movi	r20,-1011
10005780:	a0e9c83a 	sub	r20,r20,r3
10005784:	000b883a 	mov	r5,zero
10005788:	0039883a 	mov	fp,zero
1000578c:	003f9906 	br	100055f4 <__alt_data_end+0xf80055f4>
10005790:	8984b03a 	or	r2,r17,r6
10005794:	10002a1e 	bne	r2,zero,10005840 <__muldf3+0x2cc>
10005798:	0023883a 	mov	r17,zero
1000579c:	0025883a 	mov	r18,zero
100057a0:	01c00084 	movi	r7,2
100057a4:	003fa506 	br	1000563c <__alt_data_end+0xf800563c>
100057a8:	8984b03a 	or	r2,r17,r6
100057ac:	10002026 	beq	r2,zero,10005830 <__muldf3+0x2bc>
100057b0:	88011c26 	beq	r17,zero,10005c24 <__muldf3+0x6b0>
100057b4:	8809883a 	mov	r4,r17
100057b8:	d9400215 	stw	r5,8(sp)
100057bc:	d9800715 	stw	r6,28(sp)
100057c0:	da400415 	stw	r9,16(sp)
100057c4:	da800315 	stw	r10,12(sp)
100057c8:	00068ac0 	call	100068ac <__clzsi2>
100057cc:	d9400217 	ldw	r5,8(sp)
100057d0:	d9800717 	ldw	r6,28(sp)
100057d4:	da400417 	ldw	r9,16(sp)
100057d8:	da800317 	ldw	r10,12(sp)
100057dc:	1007883a 	mov	r3,r2
100057e0:	01000a04 	movi	r4,40
100057e4:	1cbffe04 	addi	r18,r3,-8
100057e8:	20c9c83a 	sub	r4,r4,r3
100057ec:	8ca2983a 	sll	r17,r17,r18
100057f0:	3108d83a 	srl	r4,r6,r4
100057f4:	34a4983a 	sll	r18,r6,r18
100057f8:	2462b03a 	or	r17,r4,r17
100057fc:	00bf0344 	movi	r2,-1011
10005800:	10c7c83a 	sub	r3,r2,r3
10005804:	000f883a 	mov	r7,zero
10005808:	003f8c06 	br	1000563c <__alt_data_end+0xf800563c>
1000580c:	008000c4 	movi	r2,3
10005810:	e0816d26 	beq	fp,r2,10005dc8 <__muldf3+0x854>
10005814:	00800044 	movi	r2,1
10005818:	e081321e 	bne	fp,r2,10005ce4 <__muldf3+0x770>
1000581c:	48a6703a 	and	r19,r9,r2
10005820:	0009883a 	mov	r4,zero
10005824:	0021883a 	mov	r16,zero
10005828:	002f883a 	mov	r23,zero
1000582c:	003fab06 	br	100056dc <__alt_data_end+0xf80056dc>
10005830:	0023883a 	mov	r17,zero
10005834:	0025883a 	mov	r18,zero
10005838:	01c00044 	movi	r7,1
1000583c:	003f7f06 	br	1000563c <__alt_data_end+0xf800563c>
10005840:	01c000c4 	movi	r7,3
10005844:	003f7d06 	br	1000563c <__alt_data_end+0xf800563c>
10005848:	01400104 	movi	r5,4
1000584c:	0021883a 	mov	r16,zero
10005850:	002f883a 	mov	r23,zero
10005854:	07000044 	movi	fp,1
10005858:	003f6606 	br	100055f4 <__alt_data_end+0xf80055f4>
1000585c:	01400304 	movi	r5,12
10005860:	070000c4 	movi	fp,3
10005864:	003f6306 	br	100055f4 <__alt_data_end+0xf80055f4>
10005868:	04000434 	movhi	r16,16
1000586c:	0027883a 	mov	r19,zero
10005870:	843fffc4 	addi	r16,r16,-1
10005874:	05ffffc4 	movi	r23,-1
10005878:	0101ffc4 	movi	r4,2047
1000587c:	003f9706 	br	100056dc <__alt_data_end+0xf80056dc>
10005880:	8821883a 	mov	r16,r17
10005884:	902f883a 	mov	r23,r18
10005888:	5013883a 	mov	r9,r10
1000588c:	3839883a 	mov	fp,r7
10005890:	003f8c06 	br	100056c4 <__alt_data_end+0xf80056c4>
10005894:	8821883a 	mov	r16,r17
10005898:	902f883a 	mov	r23,r18
1000589c:	3013883a 	mov	r9,r6
100058a0:	3839883a 	mov	fp,r7
100058a4:	003f8706 	br	100056c4 <__alt_data_end+0xf80056c4>
100058a8:	b82ad43a 	srli	r21,r23,16
100058ac:	9038d43a 	srli	fp,r18,16
100058b0:	bdffffcc 	andi	r23,r23,65535
100058b4:	94bfffcc 	andi	r18,r18,65535
100058b8:	9009883a 	mov	r4,r18
100058bc:	b80b883a 	mov	r5,r23
100058c0:	d8c00515 	stw	r3,20(sp)
100058c4:	d9800715 	stw	r6,28(sp)
100058c8:	da000615 	stw	r8,24(sp)
100058cc:	00040ec0 	call	100040ec <__mulsi3>
100058d0:	9009883a 	mov	r4,r18
100058d4:	a80b883a 	mov	r5,r21
100058d8:	1029883a 	mov	r20,r2
100058dc:	00040ec0 	call	100040ec <__mulsi3>
100058e0:	e009883a 	mov	r4,fp
100058e4:	a80b883a 	mov	r5,r21
100058e8:	102d883a 	mov	r22,r2
100058ec:	00040ec0 	call	100040ec <__mulsi3>
100058f0:	e009883a 	mov	r4,fp
100058f4:	b80b883a 	mov	r5,r23
100058f8:	1027883a 	mov	r19,r2
100058fc:	00040ec0 	call	100040ec <__mulsi3>
10005900:	a008d43a 	srli	r4,r20,16
10005904:	b085883a 	add	r2,r22,r2
10005908:	d8c00517 	ldw	r3,20(sp)
1000590c:	110f883a 	add	r7,r2,r4
10005910:	d9800717 	ldw	r6,28(sp)
10005914:	da000617 	ldw	r8,24(sp)
10005918:	3d80022e 	bgeu	r7,r22,10005924 <__muldf3+0x3b0>
1000591c:	00800074 	movhi	r2,1
10005920:	98a7883a 	add	r19,r19,r2
10005924:	3804943a 	slli	r2,r7,16
10005928:	380ed43a 	srli	r7,r7,16
1000592c:	882cd43a 	srli	r22,r17,16
10005930:	a53fffcc 	andi	r20,r20,65535
10005934:	8c7fffcc 	andi	r17,r17,65535
10005938:	1529883a 	add	r20,r2,r20
1000593c:	8809883a 	mov	r4,r17
10005940:	b80b883a 	mov	r5,r23
10005944:	d8c00515 	stw	r3,20(sp)
10005948:	d9800715 	stw	r6,28(sp)
1000594c:	da000615 	stw	r8,24(sp)
10005950:	d9c00015 	stw	r7,0(sp)
10005954:	dd000115 	stw	r20,4(sp)
10005958:	00040ec0 	call	100040ec <__mulsi3>
1000595c:	a80b883a 	mov	r5,r21
10005960:	8809883a 	mov	r4,r17
10005964:	d8800415 	stw	r2,16(sp)
10005968:	00040ec0 	call	100040ec <__mulsi3>
1000596c:	a80b883a 	mov	r5,r21
10005970:	b009883a 	mov	r4,r22
10005974:	1029883a 	mov	r20,r2
10005978:	00040ec0 	call	100040ec <__mulsi3>
1000597c:	b009883a 	mov	r4,r22
10005980:	b80b883a 	mov	r5,r23
10005984:	102b883a 	mov	r21,r2
10005988:	00040ec0 	call	100040ec <__mulsi3>
1000598c:	da400417 	ldw	r9,16(sp)
10005990:	a085883a 	add	r2,r20,r2
10005994:	d8c00517 	ldw	r3,20(sp)
10005998:	4808d43a 	srli	r4,r9,16
1000599c:	d9800717 	ldw	r6,28(sp)
100059a0:	da000617 	ldw	r8,24(sp)
100059a4:	1109883a 	add	r4,r2,r4
100059a8:	2500022e 	bgeu	r4,r20,100059b4 <__muldf3+0x440>
100059ac:	00800074 	movhi	r2,1
100059b0:	a8ab883a 	add	r21,r21,r2
100059b4:	200e943a 	slli	r7,r4,16
100059b8:	2004d43a 	srli	r2,r4,16
100059bc:	802ed43a 	srli	r23,r16,16
100059c0:	843fffcc 	andi	r16,r16,65535
100059c4:	4d3fffcc 	andi	r20,r9,65535
100059c8:	9009883a 	mov	r4,r18
100059cc:	800b883a 	mov	r5,r16
100059d0:	3d29883a 	add	r20,r7,r20
100059d4:	d8c00515 	stw	r3,20(sp)
100059d8:	d9800715 	stw	r6,28(sp)
100059dc:	da000615 	stw	r8,24(sp)
100059e0:	a8ab883a 	add	r21,r21,r2
100059e4:	00040ec0 	call	100040ec <__mulsi3>
100059e8:	9009883a 	mov	r4,r18
100059ec:	b80b883a 	mov	r5,r23
100059f0:	d8800315 	stw	r2,12(sp)
100059f4:	00040ec0 	call	100040ec <__mulsi3>
100059f8:	e009883a 	mov	r4,fp
100059fc:	b80b883a 	mov	r5,r23
10005a00:	1025883a 	mov	r18,r2
10005a04:	00040ec0 	call	100040ec <__mulsi3>
10005a08:	e009883a 	mov	r4,fp
10005a0c:	800b883a 	mov	r5,r16
10005a10:	d8800215 	stw	r2,8(sp)
10005a14:	00040ec0 	call	100040ec <__mulsi3>
10005a18:	da800317 	ldw	r10,12(sp)
10005a1c:	d9400017 	ldw	r5,0(sp)
10005a20:	9085883a 	add	r2,r18,r2
10005a24:	5008d43a 	srli	r4,r10,16
10005a28:	a153883a 	add	r9,r20,r5
10005a2c:	d8c00517 	ldw	r3,20(sp)
10005a30:	1109883a 	add	r4,r2,r4
10005a34:	d9800717 	ldw	r6,28(sp)
10005a38:	da000617 	ldw	r8,24(sp)
10005a3c:	dac00217 	ldw	r11,8(sp)
10005a40:	2480022e 	bgeu	r4,r18,10005a4c <__muldf3+0x4d8>
10005a44:	00800074 	movhi	r2,1
10005a48:	5897883a 	add	r11,r11,r2
10005a4c:	200e943a 	slli	r7,r4,16
10005a50:	2038d43a 	srli	fp,r4,16
10005a54:	52bfffcc 	andi	r10,r10,65535
10005a58:	3a8f883a 	add	r7,r7,r10
10005a5c:	8809883a 	mov	r4,r17
10005a60:	800b883a 	mov	r5,r16
10005a64:	d8c00515 	stw	r3,20(sp)
10005a68:	d9800715 	stw	r6,28(sp)
10005a6c:	d9c00215 	stw	r7,8(sp)
10005a70:	da000615 	stw	r8,24(sp)
10005a74:	da400415 	stw	r9,16(sp)
10005a78:	5f39883a 	add	fp,r11,fp
10005a7c:	00040ec0 	call	100040ec <__mulsi3>
10005a80:	8809883a 	mov	r4,r17
10005a84:	b80b883a 	mov	r5,r23
10005a88:	1025883a 	mov	r18,r2
10005a8c:	00040ec0 	call	100040ec <__mulsi3>
10005a90:	b009883a 	mov	r4,r22
10005a94:	b80b883a 	mov	r5,r23
10005a98:	d8800315 	stw	r2,12(sp)
10005a9c:	00040ec0 	call	100040ec <__mulsi3>
10005aa0:	b009883a 	mov	r4,r22
10005aa4:	800b883a 	mov	r5,r16
10005aa8:	1023883a 	mov	r17,r2
10005aac:	00040ec0 	call	100040ec <__mulsi3>
10005ab0:	da800317 	ldw	r10,12(sp)
10005ab4:	9008d43a 	srli	r4,r18,16
10005ab8:	d8c00517 	ldw	r3,20(sp)
10005abc:	5085883a 	add	r2,r10,r2
10005ac0:	1109883a 	add	r4,r2,r4
10005ac4:	d9800717 	ldw	r6,28(sp)
10005ac8:	d9c00217 	ldw	r7,8(sp)
10005acc:	da000617 	ldw	r8,24(sp)
10005ad0:	da400417 	ldw	r9,16(sp)
10005ad4:	2280022e 	bgeu	r4,r10,10005ae0 <__muldf3+0x56c>
10005ad8:	00800074 	movhi	r2,1
10005adc:	88a3883a 	add	r17,r17,r2
10005ae0:	2004943a 	slli	r2,r4,16
10005ae4:	94bfffcc 	andi	r18,r18,65535
10005ae8:	4ce7883a 	add	r19,r9,r19
10005aec:	14a5883a 	add	r18,r2,r18
10005af0:	9d29803a 	cmpltu	r20,r19,r20
10005af4:	9565883a 	add	r18,r18,r21
10005af8:	9505883a 	add	r2,r18,r20
10005afc:	99e7883a 	add	r19,r19,r7
10005b00:	99cf803a 	cmpltu	r7,r19,r7
10005b04:	e08b883a 	add	r5,fp,r2
10005b08:	2008d43a 	srli	r4,r4,16
10005b0c:	29ef883a 	add	r23,r5,r7
10005b10:	1529803a 	cmpltu	r20,r2,r20
10005b14:	956b803a 	cmpltu	r21,r18,r21
10005b18:	b9cf803a 	cmpltu	r7,r23,r7
10005b1c:	a564b03a 	or	r18,r20,r21
10005b20:	2f39803a 	cmpltu	fp,r5,fp
10005b24:	9125883a 	add	r18,r18,r4
10005b28:	3f38b03a 	or	fp,r7,fp
10005b2c:	9725883a 	add	r18,r18,fp
10005b30:	9804927a 	slli	r2,r19,9
10005b34:	9463883a 	add	r17,r18,r17
10005b38:	d9000117 	ldw	r4,4(sp)
10005b3c:	b820d5fa 	srli	r16,r23,23
10005b40:	8822927a 	slli	r17,r17,9
10005b44:	9826d5fa 	srli	r19,r19,23
10005b48:	1104b03a 	or	r2,r2,r4
10005b4c:	b82e927a 	slli	r23,r23,9
10005b50:	1004c03a 	cmpne	r2,r2,zero
10005b54:	8c20b03a 	or	r16,r17,r16
10005b58:	14e6b03a 	or	r19,r2,r19
10005b5c:	8080402c 	andhi	r2,r16,256
10005b60:	9deeb03a 	or	r23,r19,r23
10005b64:	10000726 	beq	r2,zero,10005b84 <__muldf3+0x610>
10005b68:	b804d07a 	srli	r2,r23,1
10005b6c:	800697fa 	slli	r3,r16,31
10005b70:	bdc0004c 	andi	r23,r23,1
10005b74:	8020d07a 	srli	r16,r16,1
10005b78:	b8aeb03a 	or	r23,r23,r2
10005b7c:	b8eeb03a 	or	r23,r23,r3
10005b80:	4007883a 	mov	r3,r8
10005b84:	1900ffc4 	addi	r4,r3,1023
10005b88:	01004d0e 	bge	zero,r4,10005cc0 <__muldf3+0x74c>
10005b8c:	b88001cc 	andi	r2,r23,7
10005b90:	10000726 	beq	r2,zero,10005bb0 <__muldf3+0x63c>
10005b94:	b94003cc 	andi	r5,r23,15
10005b98:	00800104 	movi	r2,4
10005b9c:	28800426 	beq	r5,r2,10005bb0 <__muldf3+0x63c>
10005ba0:	b885883a 	add	r2,r23,r2
10005ba4:	15ef803a 	cmpltu	r23,r2,r23
10005ba8:	85e1883a 	add	r16,r16,r23
10005bac:	102f883a 	mov	r23,r2
10005bb0:	8080402c 	andhi	r2,r16,256
10005bb4:	10000426 	beq	r2,zero,10005bc8 <__muldf3+0x654>
10005bb8:	00bfc034 	movhi	r2,65280
10005bbc:	10bfffc4 	addi	r2,r2,-1
10005bc0:	19010004 	addi	r4,r3,1024
10005bc4:	80a0703a 	and	r16,r16,r2
10005bc8:	0081ff84 	movi	r2,2046
10005bcc:	1100340e 	bge	r2,r4,10005ca0 <__muldf3+0x72c>
10005bd0:	34c0004c 	andi	r19,r6,1
10005bd4:	0101ffc4 	movi	r4,2047
10005bd8:	0021883a 	mov	r16,zero
10005bdc:	002f883a 	mov	r23,zero
10005be0:	003ebe06 	br	100056dc <__alt_data_end+0xf80056dc>
10005be4:	8080022c 	andhi	r2,r16,8
10005be8:	10000926 	beq	r2,zero,10005c10 <__muldf3+0x69c>
10005bec:	8880022c 	andhi	r2,r17,8
10005bf0:	1000071e 	bne	r2,zero,10005c10 <__muldf3+0x69c>
10005bf4:	00800434 	movhi	r2,16
10005bf8:	8c000234 	orhi	r16,r17,8
10005bfc:	10bfffc4 	addi	r2,r2,-1
10005c00:	b027883a 	mov	r19,r22
10005c04:	80a0703a 	and	r16,r16,r2
10005c08:	902f883a 	mov	r23,r18
10005c0c:	003f1a06 	br	10005878 <__alt_data_end+0xf8005878>
10005c10:	00800434 	movhi	r2,16
10005c14:	84000234 	orhi	r16,r16,8
10005c18:	10bfffc4 	addi	r2,r2,-1
10005c1c:	80a0703a 	and	r16,r16,r2
10005c20:	003f1506 	br	10005878 <__alt_data_end+0xf8005878>
10005c24:	3009883a 	mov	r4,r6
10005c28:	d9400215 	stw	r5,8(sp)
10005c2c:	d9800715 	stw	r6,28(sp)
10005c30:	da400415 	stw	r9,16(sp)
10005c34:	da800315 	stw	r10,12(sp)
10005c38:	00068ac0 	call	100068ac <__clzsi2>
10005c3c:	10c00804 	addi	r3,r2,32
10005c40:	010009c4 	movi	r4,39
10005c44:	d9400217 	ldw	r5,8(sp)
10005c48:	d9800717 	ldw	r6,28(sp)
10005c4c:	da400417 	ldw	r9,16(sp)
10005c50:	da800317 	ldw	r10,12(sp)
10005c54:	20fee20e 	bge	r4,r3,100057e0 <__alt_data_end+0xf80057e0>
10005c58:	147ffe04 	addi	r17,r2,-8
10005c5c:	9462983a 	sll	r17,r18,r17
10005c60:	0025883a 	mov	r18,zero
10005c64:	003ee506 	br	100057fc <__alt_data_end+0xf80057fc>
10005c68:	d9800715 	stw	r6,28(sp)
10005c6c:	d9c00215 	stw	r7,8(sp)
10005c70:	da400415 	stw	r9,16(sp)
10005c74:	00068ac0 	call	100068ac <__clzsi2>
10005c78:	10c00804 	addi	r3,r2,32
10005c7c:	010009c4 	movi	r4,39
10005c80:	d9800717 	ldw	r6,28(sp)
10005c84:	d9c00217 	ldw	r7,8(sp)
10005c88:	da400417 	ldw	r9,16(sp)
10005c8c:	20feb40e 	bge	r4,r3,10005760 <__alt_data_end+0xf8005760>
10005c90:	143ffe04 	addi	r16,r2,-8
10005c94:	9420983a 	sll	r16,r18,r16
10005c98:	002f883a 	mov	r23,zero
10005c9c:	003eb706 	br	1000577c <__alt_data_end+0xf800577c>
10005ca0:	8004977a 	slli	r2,r16,29
10005ca4:	b82ed0fa 	srli	r23,r23,3
10005ca8:	8020927a 	slli	r16,r16,9
10005cac:	2101ffcc 	andi	r4,r4,2047
10005cb0:	15eeb03a 	or	r23,r2,r23
10005cb4:	8020d33a 	srli	r16,r16,12
10005cb8:	34c0004c 	andi	r19,r6,1
10005cbc:	003e8706 	br	100056dc <__alt_data_end+0xf80056dc>
10005cc0:	00bf0084 	movi	r2,-1022
10005cc4:	10c5c83a 	sub	r2,r2,r3
10005cc8:	01000e04 	movi	r4,56
10005ccc:	2080080e 	bge	r4,r2,10005cf0 <__muldf3+0x77c>
10005cd0:	34c0004c 	andi	r19,r6,1
10005cd4:	0009883a 	mov	r4,zero
10005cd8:	0021883a 	mov	r16,zero
10005cdc:	002f883a 	mov	r23,zero
10005ce0:	003e7e06 	br	100056dc <__alt_data_end+0xf80056dc>
10005ce4:	4007883a 	mov	r3,r8
10005ce8:	480d883a 	mov	r6,r9
10005cec:	003fa506 	br	10005b84 <__alt_data_end+0xf8005b84>
10005cf0:	010007c4 	movi	r4,31
10005cf4:	20801816 	blt	r4,r2,10005d58 <__muldf3+0x7e4>
10005cf8:	18c10784 	addi	r3,r3,1054
10005cfc:	80c8983a 	sll	r4,r16,r3
10005d00:	b88ad83a 	srl	r5,r23,r2
10005d04:	b8c6983a 	sll	r3,r23,r3
10005d08:	80a0d83a 	srl	r16,r16,r2
10005d0c:	2908b03a 	or	r4,r5,r4
10005d10:	1804c03a 	cmpne	r2,r3,zero
10005d14:	2088b03a 	or	r4,r4,r2
10005d18:	208001cc 	andi	r2,r4,7
10005d1c:	10000726 	beq	r2,zero,10005d3c <__muldf3+0x7c8>
10005d20:	20c003cc 	andi	r3,r4,15
10005d24:	00800104 	movi	r2,4
10005d28:	18800426 	beq	r3,r2,10005d3c <__muldf3+0x7c8>
10005d2c:	20c00104 	addi	r3,r4,4
10005d30:	1905803a 	cmpltu	r2,r3,r4
10005d34:	80a1883a 	add	r16,r16,r2
10005d38:	1809883a 	mov	r4,r3
10005d3c:	8080202c 	andhi	r2,r16,128
10005d40:	10001b26 	beq	r2,zero,10005db0 <__muldf3+0x83c>
10005d44:	34c0004c 	andi	r19,r6,1
10005d48:	01000044 	movi	r4,1
10005d4c:	0021883a 	mov	r16,zero
10005d50:	002f883a 	mov	r23,zero
10005d54:	003e6106 	br	100056dc <__alt_data_end+0xf80056dc>
10005d58:	013ef884 	movi	r4,-1054
10005d5c:	20c9c83a 	sub	r4,r4,r3
10005d60:	01400804 	movi	r5,32
10005d64:	8108d83a 	srl	r4,r16,r4
10005d68:	11401526 	beq	r2,r5,10005dc0 <__muldf3+0x84c>
10005d6c:	18c10f84 	addi	r3,r3,1086
10005d70:	80e0983a 	sll	r16,r16,r3
10005d74:	85eeb03a 	or	r23,r16,r23
10005d78:	b804c03a 	cmpne	r2,r23,zero
10005d7c:	1108b03a 	or	r4,r2,r4
10005d80:	20c001cc 	andi	r3,r4,7
10005d84:	1800061e 	bne	r3,zero,10005da0 <__muldf3+0x82c>
10005d88:	0021883a 	mov	r16,zero
10005d8c:	202ed0fa 	srli	r23,r4,3
10005d90:	34c0004c 	andi	r19,r6,1
10005d94:	0009883a 	mov	r4,zero
10005d98:	b8eeb03a 	or	r23,r23,r3
10005d9c:	003e4f06 	br	100056dc <__alt_data_end+0xf80056dc>
10005da0:	20c003cc 	andi	r3,r4,15
10005da4:	00800104 	movi	r2,4
10005da8:	0021883a 	mov	r16,zero
10005dac:	18bfdf1e 	bne	r3,r2,10005d2c <__alt_data_end+0xf8005d2c>
10005db0:	8004927a 	slli	r2,r16,9
10005db4:	8006977a 	slli	r3,r16,29
10005db8:	1020d33a 	srli	r16,r2,12
10005dbc:	003ff306 	br	10005d8c <__alt_data_end+0xf8005d8c>
10005dc0:	0021883a 	mov	r16,zero
10005dc4:	003feb06 	br	10005d74 <__alt_data_end+0xf8005d74>
10005dc8:	00800434 	movhi	r2,16
10005dcc:	84000234 	orhi	r16,r16,8
10005dd0:	10bfffc4 	addi	r2,r2,-1
10005dd4:	4cc0004c 	andi	r19,r9,1
10005dd8:	80a0703a 	and	r16,r16,r2
10005ddc:	003ea606 	br	10005878 <__alt_data_end+0xf8005878>

10005de0 <__subdf3>:
10005de0:	00c00434 	movhi	r3,16
10005de4:	18ffffc4 	addi	r3,r3,-1
10005de8:	defffb04 	addi	sp,sp,-20
10005dec:	28d2703a 	and	r9,r5,r3
10005df0:	3814d53a 	srli	r10,r7,20
10005df4:	38c6703a 	and	r3,r7,r3
10005df8:	3004d77a 	srli	r2,r6,29
10005dfc:	dc800215 	stw	r18,8(sp)
10005e00:	dc000015 	stw	r16,0(sp)
10005e04:	2824d7fa 	srli	r18,r5,31
10005e08:	2820d53a 	srli	r16,r5,20
10005e0c:	481290fa 	slli	r9,r9,3
10005e10:	200ad77a 	srli	r5,r4,29
10005e14:	180690fa 	slli	r3,r3,3
10005e18:	dc400115 	stw	r17,4(sp)
10005e1c:	dfc00415 	stw	ra,16(sp)
10005e20:	202290fa 	slli	r17,r4,3
10005e24:	dcc00315 	stw	r19,12(sp)
10005e28:	5281ffcc 	andi	r10,r10,2047
10005e2c:	0101ffc4 	movi	r4,2047
10005e30:	9011883a 	mov	r8,r18
10005e34:	8401ffcc 	andi	r16,r16,2047
10005e38:	94803fcc 	andi	r18,r18,255
10005e3c:	494ab03a 	or	r5,r9,r5
10005e40:	380ed7fa 	srli	r7,r7,31
10005e44:	1886b03a 	or	r3,r3,r2
10005e48:	300c90fa 	slli	r6,r6,3
10005e4c:	51009026 	beq	r10,r4,10006090 <__subdf3+0x2b0>
10005e50:	39c0005c 	xori	r7,r7,1
10005e54:	8285c83a 	sub	r2,r16,r10
10005e58:	91c06f26 	beq	r18,r7,10006018 <__subdf3+0x238>
10005e5c:	0080b10e 	bge	zero,r2,10006124 <__subdf3+0x344>
10005e60:	50002a1e 	bne	r10,zero,10005f0c <__subdf3+0x12c>
10005e64:	1988b03a 	or	r4,r3,r6
10005e68:	2000941e 	bne	r4,zero,100060bc <__subdf3+0x2dc>
10005e6c:	888001cc 	andi	r2,r17,7
10005e70:	10005b26 	beq	r2,zero,10005fe0 <__subdf3+0x200>
10005e74:	88c003cc 	andi	r3,r17,15
10005e78:	00800104 	movi	r2,4
10005e7c:	18805826 	beq	r3,r2,10005fe0 <__subdf3+0x200>
10005e80:	88c00104 	addi	r3,r17,4
10005e84:	1c63803a 	cmpltu	r17,r3,r17
10005e88:	2c4b883a 	add	r5,r5,r17
10005e8c:	2880202c 	andhi	r2,r5,128
10005e90:	9200004c 	andi	r8,r18,1
10005e94:	1823883a 	mov	r17,r3
10005e98:	10005426 	beq	r2,zero,10005fec <__subdf3+0x20c>
10005e9c:	84000044 	addi	r16,r16,1
10005ea0:	0081ffc4 	movi	r2,2047
10005ea4:	8080bf26 	beq	r16,r2,100061a4 <__subdf3+0x3c4>
10005ea8:	013fe034 	movhi	r4,65408
10005eac:	213fffc4 	addi	r4,r4,-1
10005eb0:	290a703a 	and	r5,r5,r4
10005eb4:	2804977a 	slli	r2,r5,29
10005eb8:	280a927a 	slli	r5,r5,9
10005ebc:	8822d0fa 	srli	r17,r17,3
10005ec0:	8401ffcc 	andi	r16,r16,2047
10005ec4:	2808d33a 	srli	r4,r5,12
10005ec8:	1444b03a 	or	r2,r2,r17
10005ecc:	8401ffcc 	andi	r16,r16,2047
10005ed0:	800a953a 	slli	r5,r16,20
10005ed4:	40c03fcc 	andi	r3,r8,255
10005ed8:	04000434 	movhi	r16,16
10005edc:	180697fa 	slli	r3,r3,31
10005ee0:	843fffc4 	addi	r16,r16,-1
10005ee4:	2420703a 	and	r16,r4,r16
10005ee8:	8160b03a 	or	r16,r16,r5
10005eec:	80c6b03a 	or	r3,r16,r3
10005ef0:	dfc00417 	ldw	ra,16(sp)
10005ef4:	dcc00317 	ldw	r19,12(sp)
10005ef8:	dc800217 	ldw	r18,8(sp)
10005efc:	dc400117 	ldw	r17,4(sp)
10005f00:	dc000017 	ldw	r16,0(sp)
10005f04:	dec00504 	addi	sp,sp,20
10005f08:	f800283a 	ret
10005f0c:	0101ffc4 	movi	r4,2047
10005f10:	813fd626 	beq	r16,r4,10005e6c <__alt_data_end+0xf8005e6c>
10005f14:	18c02034 	orhi	r3,r3,128
10005f18:	01000e04 	movi	r4,56
10005f1c:	2080a416 	blt	r4,r2,100061b0 <__subdf3+0x3d0>
10005f20:	010007c4 	movi	r4,31
10005f24:	2080c716 	blt	r4,r2,10006244 <__subdf3+0x464>
10005f28:	01000804 	movi	r4,32
10005f2c:	2089c83a 	sub	r4,r4,r2
10005f30:	1910983a 	sll	r8,r3,r4
10005f34:	308ed83a 	srl	r7,r6,r2
10005f38:	3108983a 	sll	r4,r6,r4
10005f3c:	1884d83a 	srl	r2,r3,r2
10005f40:	41ccb03a 	or	r6,r8,r7
10005f44:	2008c03a 	cmpne	r4,r4,zero
10005f48:	310cb03a 	or	r6,r6,r4
10005f4c:	898dc83a 	sub	r6,r17,r6
10005f50:	89a3803a 	cmpltu	r17,r17,r6
10005f54:	288bc83a 	sub	r5,r5,r2
10005f58:	2c4bc83a 	sub	r5,r5,r17
10005f5c:	3023883a 	mov	r17,r6
10005f60:	2880202c 	andhi	r2,r5,128
10005f64:	10006b26 	beq	r2,zero,10006114 <__subdf3+0x334>
10005f68:	04c02034 	movhi	r19,128
10005f6c:	9cffffc4 	addi	r19,r19,-1
10005f70:	2ce6703a 	and	r19,r5,r19
10005f74:	98007c26 	beq	r19,zero,10006168 <__subdf3+0x388>
10005f78:	9809883a 	mov	r4,r19
10005f7c:	00068ac0 	call	100068ac <__clzsi2>
10005f80:	10fffe04 	addi	r3,r2,-8
10005f84:	010007c4 	movi	r4,31
10005f88:	20c07d16 	blt	r4,r3,10006180 <__subdf3+0x3a0>
10005f8c:	01400a04 	movi	r5,40
10005f90:	2885c83a 	sub	r2,r5,r2
10005f94:	888ad83a 	srl	r5,r17,r2
10005f98:	98e6983a 	sll	r19,r19,r3
10005f9c:	88e2983a 	sll	r17,r17,r3
10005fa0:	2ce6b03a 	or	r19,r5,r19
10005fa4:	1c007a16 	blt	r3,r16,10006190 <__subdf3+0x3b0>
10005fa8:	1c21c83a 	sub	r16,r3,r16
10005fac:	81400044 	addi	r5,r16,1
10005fb0:	00c007c4 	movi	r3,31
10005fb4:	19409616 	blt	r3,r5,10006210 <__subdf3+0x430>
10005fb8:	1c21c83a 	sub	r16,r3,r16
10005fbc:	8c08983a 	sll	r4,r17,r16
10005fc0:	8946d83a 	srl	r3,r17,r5
10005fc4:	9c20983a 	sll	r16,r19,r16
10005fc8:	2008c03a 	cmpne	r4,r4,zero
10005fcc:	994ad83a 	srl	r5,r19,r5
10005fd0:	1c06b03a 	or	r3,r3,r16
10005fd4:	1922b03a 	or	r17,r3,r4
10005fd8:	0021883a 	mov	r16,zero
10005fdc:	003fa306 	br	10005e6c <__alt_data_end+0xf8005e6c>
10005fe0:	2880202c 	andhi	r2,r5,128
10005fe4:	9200004c 	andi	r8,r18,1
10005fe8:	103fac1e 	bne	r2,zero,10005e9c <__alt_data_end+0xf8005e9c>
10005fec:	2804977a 	slli	r2,r5,29
10005ff0:	8822d0fa 	srli	r17,r17,3
10005ff4:	00c1ffc4 	movi	r3,2047
10005ff8:	280ad0fa 	srli	r5,r5,3
10005ffc:	1444b03a 	or	r2,r2,r17
10006000:	80c02726 	beq	r16,r3,100060a0 <__subdf3+0x2c0>
10006004:	01000434 	movhi	r4,16
10006008:	213fffc4 	addi	r4,r4,-1
1000600c:	80e0703a 	and	r16,r16,r3
10006010:	2908703a 	and	r4,r5,r4
10006014:	003fad06 	br	10005ecc <__alt_data_end+0xf8005ecc>
10006018:	0080690e 	bge	zero,r2,100061c0 <__subdf3+0x3e0>
1000601c:	50002f26 	beq	r10,zero,100060dc <__subdf3+0x2fc>
10006020:	0101ffc4 	movi	r4,2047
10006024:	813f9126 	beq	r16,r4,10005e6c <__alt_data_end+0xf8005e6c>
10006028:	18c02034 	orhi	r3,r3,128
1000602c:	01000e04 	movi	r4,56
10006030:	2080b00e 	bge	r4,r2,100062f4 <__subdf3+0x514>
10006034:	198cb03a 	or	r6,r3,r6
10006038:	300ec03a 	cmpne	r7,r6,zero
1000603c:	0005883a 	mov	r2,zero
10006040:	3c4f883a 	add	r7,r7,r17
10006044:	3c63803a 	cmpltu	r17,r7,r17
10006048:	114b883a 	add	r5,r2,r5
1000604c:	2c4b883a 	add	r5,r5,r17
10006050:	3823883a 	mov	r17,r7
10006054:	2880202c 	andhi	r2,r5,128
10006058:	10002e26 	beq	r2,zero,10006114 <__subdf3+0x334>
1000605c:	84000044 	addi	r16,r16,1
10006060:	0081ffc4 	movi	r2,2047
10006064:	8080de26 	beq	r16,r2,100063e0 <__subdf3+0x600>
10006068:	00bfe034 	movhi	r2,65408
1000606c:	10bfffc4 	addi	r2,r2,-1
10006070:	288a703a 	and	r5,r5,r2
10006074:	880cd07a 	srli	r6,r17,1
10006078:	280897fa 	slli	r4,r5,31
1000607c:	88c0004c 	andi	r3,r17,1
10006080:	30e2b03a 	or	r17,r6,r3
10006084:	280ad07a 	srli	r5,r5,1
10006088:	8922b03a 	or	r17,r17,r4
1000608c:	003f7706 	br	10005e6c <__alt_data_end+0xf8005e6c>
10006090:	1984b03a 	or	r2,r3,r6
10006094:	103f6e26 	beq	r2,zero,10005e50 <__alt_data_end+0xf8005e50>
10006098:	39c03fcc 	andi	r7,r7,255
1000609c:	003f6d06 	br	10005e54 <__alt_data_end+0xf8005e54>
100060a0:	1146b03a 	or	r3,r2,r5
100060a4:	18003f26 	beq	r3,zero,100061a4 <__subdf3+0x3c4>
100060a8:	00c00434 	movhi	r3,16
100060ac:	29000234 	orhi	r4,r5,8
100060b0:	18ffffc4 	addi	r3,r3,-1
100060b4:	20c8703a 	and	r4,r4,r3
100060b8:	003f8406 	br	10005ecc <__alt_data_end+0xf8005ecc>
100060bc:	10bfffc4 	addi	r2,r2,-1
100060c0:	1000501e 	bne	r2,zero,10006204 <__subdf3+0x424>
100060c4:	898fc83a 	sub	r7,r17,r6
100060c8:	89e3803a 	cmpltu	r17,r17,r7
100060cc:	28cbc83a 	sub	r5,r5,r3
100060d0:	2c4bc83a 	sub	r5,r5,r17
100060d4:	3823883a 	mov	r17,r7
100060d8:	003fa106 	br	10005f60 <__alt_data_end+0xf8005f60>
100060dc:	1988b03a 	or	r4,r3,r6
100060e0:	203f6226 	beq	r4,zero,10005e6c <__alt_data_end+0xf8005e6c>
100060e4:	10bfffc4 	addi	r2,r2,-1
100060e8:	10009b1e 	bne	r2,zero,10006358 <__subdf3+0x578>
100060ec:	344d883a 	add	r6,r6,r17
100060f0:	3463803a 	cmpltu	r17,r6,r17
100060f4:	194b883a 	add	r5,r3,r5
100060f8:	2c4b883a 	add	r5,r5,r17
100060fc:	3023883a 	mov	r17,r6
10006100:	003fd406 	br	10006054 <__alt_data_end+0xf8006054>
10006104:	1106b03a 	or	r3,r2,r4
10006108:	1800b426 	beq	r3,zero,100063dc <__subdf3+0x5fc>
1000610c:	100b883a 	mov	r5,r2
10006110:	2023883a 	mov	r17,r4
10006114:	888001cc 	andi	r2,r17,7
10006118:	103f561e 	bne	r2,zero,10005e74 <__alt_data_end+0xf8005e74>
1000611c:	9200004c 	andi	r8,r18,1
10006120:	003fb206 	br	10005fec <__alt_data_end+0xf8005fec>
10006124:	1000531e 	bne	r2,zero,10006274 <__subdf3+0x494>
10006128:	80800044 	addi	r2,r16,1
1000612c:	1081ffcc 	andi	r2,r2,2047
10006130:	01000044 	movi	r4,1
10006134:	2080a00e 	bge	r4,r2,100063b8 <__subdf3+0x5d8>
10006138:	8985c83a 	sub	r2,r17,r6
1000613c:	8889803a 	cmpltu	r4,r17,r2
10006140:	28e7c83a 	sub	r19,r5,r3
10006144:	9927c83a 	sub	r19,r19,r4
10006148:	9900202c 	andhi	r4,r19,128
1000614c:	20006226 	beq	r4,zero,100062d8 <__subdf3+0x4f8>
10006150:	3463c83a 	sub	r17,r6,r17
10006154:	194bc83a 	sub	r5,r3,r5
10006158:	344d803a 	cmpltu	r6,r6,r17
1000615c:	29a7c83a 	sub	r19,r5,r6
10006160:	3825883a 	mov	r18,r7
10006164:	983f841e 	bne	r19,zero,10005f78 <__alt_data_end+0xf8005f78>
10006168:	8809883a 	mov	r4,r17
1000616c:	00068ac0 	call	100068ac <__clzsi2>
10006170:	10800804 	addi	r2,r2,32
10006174:	10fffe04 	addi	r3,r2,-8
10006178:	010007c4 	movi	r4,31
1000617c:	20ff830e 	bge	r4,r3,10005f8c <__alt_data_end+0xf8005f8c>
10006180:	14fff604 	addi	r19,r2,-40
10006184:	8ce6983a 	sll	r19,r17,r19
10006188:	0023883a 	mov	r17,zero
1000618c:	1c3f860e 	bge	r3,r16,10005fa8 <__alt_data_end+0xf8005fa8>
10006190:	017fe034 	movhi	r5,65408
10006194:	297fffc4 	addi	r5,r5,-1
10006198:	80e1c83a 	sub	r16,r16,r3
1000619c:	994a703a 	and	r5,r19,r5
100061a0:	003f3206 	br	10005e6c <__alt_data_end+0xf8005e6c>
100061a4:	0009883a 	mov	r4,zero
100061a8:	0005883a 	mov	r2,zero
100061ac:	003f4706 	br	10005ecc <__alt_data_end+0xf8005ecc>
100061b0:	198cb03a 	or	r6,r3,r6
100061b4:	300cc03a 	cmpne	r6,r6,zero
100061b8:	0005883a 	mov	r2,zero
100061bc:	003f6306 	br	10005f4c <__alt_data_end+0xf8005f4c>
100061c0:	10009d1e 	bne	r2,zero,10006438 <__subdf3+0x658>
100061c4:	81c00044 	addi	r7,r16,1
100061c8:	3881ffcc 	andi	r2,r7,2047
100061cc:	02400044 	movi	r9,1
100061d0:	4880680e 	bge	r9,r2,10006374 <__subdf3+0x594>
100061d4:	0081ffc4 	movi	r2,2047
100061d8:	3880ae26 	beq	r7,r2,10006494 <__subdf3+0x6b4>
100061dc:	344d883a 	add	r6,r6,r17
100061e0:	3463803a 	cmpltu	r17,r6,r17
100061e4:	194b883a 	add	r5,r3,r5
100061e8:	2c4b883a 	add	r5,r5,r17
100061ec:	282297fa 	slli	r17,r5,31
100061f0:	300cd07a 	srli	r6,r6,1
100061f4:	280ad07a 	srli	r5,r5,1
100061f8:	3821883a 	mov	r16,r7
100061fc:	89a2b03a 	or	r17,r17,r6
10006200:	003f1a06 	br	10005e6c <__alt_data_end+0xf8005e6c>
10006204:	0101ffc4 	movi	r4,2047
10006208:	813f431e 	bne	r16,r4,10005f18 <__alt_data_end+0xf8005f18>
1000620c:	003f1706 	br	10005e6c <__alt_data_end+0xf8005e6c>
10006210:	80bff844 	addi	r2,r16,-31
10006214:	00c00804 	movi	r3,32
10006218:	9884d83a 	srl	r2,r19,r2
1000621c:	28c05126 	beq	r5,r3,10006364 <__subdf3+0x584>
10006220:	00c00fc4 	movi	r3,63
10006224:	1c21c83a 	sub	r16,r3,r16
10006228:	9c26983a 	sll	r19,r19,r16
1000622c:	9c62b03a 	or	r17,r19,r17
10006230:	8822c03a 	cmpne	r17,r17,zero
10006234:	88a2b03a 	or	r17,r17,r2
10006238:	000b883a 	mov	r5,zero
1000623c:	0021883a 	mov	r16,zero
10006240:	003fb406 	br	10006114 <__alt_data_end+0xf8006114>
10006244:	113ff804 	addi	r4,r2,-32
10006248:	01c00804 	movi	r7,32
1000624c:	1908d83a 	srl	r4,r3,r4
10006250:	11c04626 	beq	r2,r7,1000636c <__subdf3+0x58c>
10006254:	01c01004 	movi	r7,64
10006258:	3885c83a 	sub	r2,r7,r2
1000625c:	1884983a 	sll	r2,r3,r2
10006260:	118cb03a 	or	r6,r2,r6
10006264:	300cc03a 	cmpne	r6,r6,zero
10006268:	310cb03a 	or	r6,r6,r4
1000626c:	0005883a 	mov	r2,zero
10006270:	003f3606 	br	10005f4c <__alt_data_end+0xf8005f4c>
10006274:	80002b26 	beq	r16,zero,10006324 <__subdf3+0x544>
10006278:	0101ffc4 	movi	r4,2047
1000627c:	51006926 	beq	r10,r4,10006424 <__subdf3+0x644>
10006280:	0085c83a 	sub	r2,zero,r2
10006284:	29402034 	orhi	r5,r5,128
10006288:	01000e04 	movi	r4,56
1000628c:	20807d16 	blt	r4,r2,10006484 <__subdf3+0x6a4>
10006290:	010007c4 	movi	r4,31
10006294:	2080d916 	blt	r4,r2,100065fc <__subdf3+0x81c>
10006298:	01000804 	movi	r4,32
1000629c:	2089c83a 	sub	r4,r4,r2
100062a0:	2912983a 	sll	r9,r5,r4
100062a4:	8890d83a 	srl	r8,r17,r2
100062a8:	8908983a 	sll	r4,r17,r4
100062ac:	2884d83a 	srl	r2,r5,r2
100062b0:	4a22b03a 	or	r17,r9,r8
100062b4:	2008c03a 	cmpne	r4,r4,zero
100062b8:	8922b03a 	or	r17,r17,r4
100062bc:	3463c83a 	sub	r17,r6,r17
100062c0:	1885c83a 	sub	r2,r3,r2
100062c4:	344d803a 	cmpltu	r6,r6,r17
100062c8:	118bc83a 	sub	r5,r2,r6
100062cc:	5021883a 	mov	r16,r10
100062d0:	3825883a 	mov	r18,r7
100062d4:	003f2206 	br	10005f60 <__alt_data_end+0xf8005f60>
100062d8:	9886b03a 	or	r3,r19,r2
100062dc:	18001c1e 	bne	r3,zero,10006350 <__subdf3+0x570>
100062e0:	0011883a 	mov	r8,zero
100062e4:	000b883a 	mov	r5,zero
100062e8:	0023883a 	mov	r17,zero
100062ec:	0021883a 	mov	r16,zero
100062f0:	003f3e06 	br	10005fec <__alt_data_end+0xf8005fec>
100062f4:	010007c4 	movi	r4,31
100062f8:	20803c16 	blt	r4,r2,100063ec <__subdf3+0x60c>
100062fc:	01000804 	movi	r4,32
10006300:	2089c83a 	sub	r4,r4,r2
10006304:	1912983a 	sll	r9,r3,r4
10006308:	308ed83a 	srl	r7,r6,r2
1000630c:	3108983a 	sll	r4,r6,r4
10006310:	1884d83a 	srl	r2,r3,r2
10006314:	49ceb03a 	or	r7,r9,r7
10006318:	2008c03a 	cmpne	r4,r4,zero
1000631c:	390eb03a 	or	r7,r7,r4
10006320:	003f4706 	br	10006040 <__alt_data_end+0xf8006040>
10006324:	2c48b03a 	or	r4,r5,r17
10006328:	20003e26 	beq	r4,zero,10006424 <__subdf3+0x644>
1000632c:	0084303a 	nor	r2,zero,r2
10006330:	10003a1e 	bne	r2,zero,1000641c <__subdf3+0x63c>
10006334:	3463c83a 	sub	r17,r6,r17
10006338:	194bc83a 	sub	r5,r3,r5
1000633c:	344d803a 	cmpltu	r6,r6,r17
10006340:	298bc83a 	sub	r5,r5,r6
10006344:	5021883a 	mov	r16,r10
10006348:	3825883a 	mov	r18,r7
1000634c:	003f0406 	br	10005f60 <__alt_data_end+0xf8005f60>
10006350:	1023883a 	mov	r17,r2
10006354:	003f0706 	br	10005f74 <__alt_data_end+0xf8005f74>
10006358:	0101ffc4 	movi	r4,2047
1000635c:	813f331e 	bne	r16,r4,1000602c <__alt_data_end+0xf800602c>
10006360:	003ec206 	br	10005e6c <__alt_data_end+0xf8005e6c>
10006364:	0027883a 	mov	r19,zero
10006368:	003fb006 	br	1000622c <__alt_data_end+0xf800622c>
1000636c:	0005883a 	mov	r2,zero
10006370:	003fbb06 	br	10006260 <__alt_data_end+0xf8006260>
10006374:	2c44b03a 	or	r2,r5,r17
10006378:	80008b1e 	bne	r16,zero,100065a8 <__subdf3+0x7c8>
1000637c:	1000b526 	beq	r2,zero,10006654 <__subdf3+0x874>
10006380:	1984b03a 	or	r2,r3,r6
10006384:	103eb926 	beq	r2,zero,10005e6c <__alt_data_end+0xf8005e6c>
10006388:	3449883a 	add	r4,r6,r17
1000638c:	2463803a 	cmpltu	r17,r4,r17
10006390:	194b883a 	add	r5,r3,r5
10006394:	2c4b883a 	add	r5,r5,r17
10006398:	2880202c 	andhi	r2,r5,128
1000639c:	2023883a 	mov	r17,r4
100063a0:	103f5c26 	beq	r2,zero,10006114 <__alt_data_end+0xf8006114>
100063a4:	00bfe034 	movhi	r2,65408
100063a8:	10bfffc4 	addi	r2,r2,-1
100063ac:	4821883a 	mov	r16,r9
100063b0:	288a703a 	and	r5,r5,r2
100063b4:	003ead06 	br	10005e6c <__alt_data_end+0xf8005e6c>
100063b8:	2c44b03a 	or	r2,r5,r17
100063bc:	8000291e 	bne	r16,zero,10006464 <__subdf3+0x684>
100063c0:	10004f1e 	bne	r2,zero,10006500 <__subdf3+0x720>
100063c4:	1984b03a 	or	r2,r3,r6
100063c8:	10000426 	beq	r2,zero,100063dc <__subdf3+0x5fc>
100063cc:	180b883a 	mov	r5,r3
100063d0:	3023883a 	mov	r17,r6
100063d4:	3825883a 	mov	r18,r7
100063d8:	003ea406 	br	10005e6c <__alt_data_end+0xf8005e6c>
100063dc:	0011883a 	mov	r8,zero
100063e0:	000b883a 	mov	r5,zero
100063e4:	0023883a 	mov	r17,zero
100063e8:	003f0006 	br	10005fec <__alt_data_end+0xf8005fec>
100063ec:	11fff804 	addi	r7,r2,-32
100063f0:	19c8d83a 	srl	r4,r3,r7
100063f4:	01c00804 	movi	r7,32
100063f8:	11c07e26 	beq	r2,r7,100065f4 <__subdf3+0x814>
100063fc:	01c01004 	movi	r7,64
10006400:	3885c83a 	sub	r2,r7,r2
10006404:	1884983a 	sll	r2,r3,r2
10006408:	118cb03a 	or	r6,r2,r6
1000640c:	300ec03a 	cmpne	r7,r6,zero
10006410:	390eb03a 	or	r7,r7,r4
10006414:	0005883a 	mov	r2,zero
10006418:	003f0906 	br	10006040 <__alt_data_end+0xf8006040>
1000641c:	0101ffc4 	movi	r4,2047
10006420:	513f991e 	bne	r10,r4,10006288 <__alt_data_end+0xf8006288>
10006424:	180b883a 	mov	r5,r3
10006428:	3023883a 	mov	r17,r6
1000642c:	5021883a 	mov	r16,r10
10006430:	3825883a 	mov	r18,r7
10006434:	003e8d06 	br	10005e6c <__alt_data_end+0xf8005e6c>
10006438:	80001a1e 	bne	r16,zero,100064a4 <__subdf3+0x6c4>
1000643c:	2c48b03a 	or	r4,r5,r17
10006440:	20005526 	beq	r4,zero,10006598 <__subdf3+0x7b8>
10006444:	0084303a 	nor	r2,zero,r2
10006448:	1000511e 	bne	r2,zero,10006590 <__subdf3+0x7b0>
1000644c:	89a3883a 	add	r17,r17,r6
10006450:	194b883a 	add	r5,r3,r5
10006454:	898d803a 	cmpltu	r6,r17,r6
10006458:	298b883a 	add	r5,r5,r6
1000645c:	5021883a 	mov	r16,r10
10006460:	003efc06 	br	10006054 <__alt_data_end+0xf8006054>
10006464:	1000341e 	bne	r2,zero,10006538 <__subdf3+0x758>
10006468:	1984b03a 	or	r2,r3,r6
1000646c:	10006f26 	beq	r2,zero,1000662c <__subdf3+0x84c>
10006470:	180b883a 	mov	r5,r3
10006474:	3023883a 	mov	r17,r6
10006478:	3825883a 	mov	r18,r7
1000647c:	0401ffc4 	movi	r16,2047
10006480:	003e7a06 	br	10005e6c <__alt_data_end+0xf8005e6c>
10006484:	2c62b03a 	or	r17,r5,r17
10006488:	8822c03a 	cmpne	r17,r17,zero
1000648c:	0005883a 	mov	r2,zero
10006490:	003f8a06 	br	100062bc <__alt_data_end+0xf80062bc>
10006494:	3821883a 	mov	r16,r7
10006498:	000b883a 	mov	r5,zero
1000649c:	0023883a 	mov	r17,zero
100064a0:	003ed206 	br	10005fec <__alt_data_end+0xf8005fec>
100064a4:	0101ffc4 	movi	r4,2047
100064a8:	51003b26 	beq	r10,r4,10006598 <__subdf3+0x7b8>
100064ac:	0085c83a 	sub	r2,zero,r2
100064b0:	29402034 	orhi	r5,r5,128
100064b4:	01000e04 	movi	r4,56
100064b8:	20806216 	blt	r4,r2,10006644 <__subdf3+0x864>
100064bc:	010007c4 	movi	r4,31
100064c0:	20806b16 	blt	r4,r2,10006670 <__subdf3+0x890>
100064c4:	01000804 	movi	r4,32
100064c8:	2089c83a 	sub	r4,r4,r2
100064cc:	2912983a 	sll	r9,r5,r4
100064d0:	888ed83a 	srl	r7,r17,r2
100064d4:	8908983a 	sll	r4,r17,r4
100064d8:	2884d83a 	srl	r2,r5,r2
100064dc:	49e2b03a 	or	r17,r9,r7
100064e0:	2008c03a 	cmpne	r4,r4,zero
100064e4:	8922b03a 	or	r17,r17,r4
100064e8:	89a3883a 	add	r17,r17,r6
100064ec:	10c5883a 	add	r2,r2,r3
100064f0:	898d803a 	cmpltu	r6,r17,r6
100064f4:	118b883a 	add	r5,r2,r6
100064f8:	5021883a 	mov	r16,r10
100064fc:	003ed506 	br	10006054 <__alt_data_end+0xf8006054>
10006500:	1984b03a 	or	r2,r3,r6
10006504:	103e5926 	beq	r2,zero,10005e6c <__alt_data_end+0xf8005e6c>
10006508:	8989c83a 	sub	r4,r17,r6
1000650c:	8911803a 	cmpltu	r8,r17,r4
10006510:	28c5c83a 	sub	r2,r5,r3
10006514:	1205c83a 	sub	r2,r2,r8
10006518:	1200202c 	andhi	r8,r2,128
1000651c:	403ef926 	beq	r8,zero,10006104 <__alt_data_end+0xf8006104>
10006520:	3463c83a 	sub	r17,r6,r17
10006524:	194bc83a 	sub	r5,r3,r5
10006528:	344d803a 	cmpltu	r6,r6,r17
1000652c:	298bc83a 	sub	r5,r5,r6
10006530:	3825883a 	mov	r18,r7
10006534:	003e4d06 	br	10005e6c <__alt_data_end+0xf8005e6c>
10006538:	1984b03a 	or	r2,r3,r6
1000653c:	10002b26 	beq	r2,zero,100065ec <__subdf3+0x80c>
10006540:	2808d0fa 	srli	r4,r5,3
10006544:	8822d0fa 	srli	r17,r17,3
10006548:	280a977a 	slli	r5,r5,29
1000654c:	2080022c 	andhi	r2,r4,8
10006550:	2c62b03a 	or	r17,r5,r17
10006554:	10000826 	beq	r2,zero,10006578 <__subdf3+0x798>
10006558:	1810d0fa 	srli	r8,r3,3
1000655c:	4080022c 	andhi	r2,r8,8
10006560:	1000051e 	bne	r2,zero,10006578 <__subdf3+0x798>
10006564:	300cd0fa 	srli	r6,r6,3
10006568:	1804977a 	slli	r2,r3,29
1000656c:	4009883a 	mov	r4,r8
10006570:	3825883a 	mov	r18,r7
10006574:	11a2b03a 	or	r17,r2,r6
10006578:	880ad77a 	srli	r5,r17,29
1000657c:	200890fa 	slli	r4,r4,3
10006580:	882290fa 	slli	r17,r17,3
10006584:	0401ffc4 	movi	r16,2047
10006588:	290ab03a 	or	r5,r5,r4
1000658c:	003e3706 	br	10005e6c <__alt_data_end+0xf8005e6c>
10006590:	0101ffc4 	movi	r4,2047
10006594:	513fc71e 	bne	r10,r4,100064b4 <__alt_data_end+0xf80064b4>
10006598:	180b883a 	mov	r5,r3
1000659c:	3023883a 	mov	r17,r6
100065a0:	5021883a 	mov	r16,r10
100065a4:	003e3106 	br	10005e6c <__alt_data_end+0xf8005e6c>
100065a8:	10002d26 	beq	r2,zero,10006660 <__subdf3+0x880>
100065ac:	1984b03a 	or	r2,r3,r6
100065b0:	10000e26 	beq	r2,zero,100065ec <__subdf3+0x80c>
100065b4:	2808d0fa 	srli	r4,r5,3
100065b8:	8822d0fa 	srli	r17,r17,3
100065bc:	280a977a 	slli	r5,r5,29
100065c0:	2080022c 	andhi	r2,r4,8
100065c4:	2c62b03a 	or	r17,r5,r17
100065c8:	103feb26 	beq	r2,zero,10006578 <__alt_data_end+0xf8006578>
100065cc:	180ed0fa 	srli	r7,r3,3
100065d0:	3880022c 	andhi	r2,r7,8
100065d4:	103fe81e 	bne	r2,zero,10006578 <__alt_data_end+0xf8006578>
100065d8:	300cd0fa 	srli	r6,r6,3
100065dc:	1804977a 	slli	r2,r3,29
100065e0:	3809883a 	mov	r4,r7
100065e4:	11a2b03a 	or	r17,r2,r6
100065e8:	003fe306 	br	10006578 <__alt_data_end+0xf8006578>
100065ec:	0401ffc4 	movi	r16,2047
100065f0:	003e1e06 	br	10005e6c <__alt_data_end+0xf8005e6c>
100065f4:	0005883a 	mov	r2,zero
100065f8:	003f8306 	br	10006408 <__alt_data_end+0xf8006408>
100065fc:	113ff804 	addi	r4,r2,-32
10006600:	02000804 	movi	r8,32
10006604:	2908d83a 	srl	r4,r5,r4
10006608:	12002526 	beq	r2,r8,100066a0 <__subdf3+0x8c0>
1000660c:	02001004 	movi	r8,64
10006610:	4085c83a 	sub	r2,r8,r2
10006614:	288a983a 	sll	r5,r5,r2
10006618:	2c62b03a 	or	r17,r5,r17
1000661c:	8822c03a 	cmpne	r17,r17,zero
10006620:	8922b03a 	or	r17,r17,r4
10006624:	0005883a 	mov	r2,zero
10006628:	003f2406 	br	100062bc <__alt_data_end+0xf80062bc>
1000662c:	01402034 	movhi	r5,128
10006630:	0011883a 	mov	r8,zero
10006634:	297fffc4 	addi	r5,r5,-1
10006638:	047ffe04 	movi	r17,-8
1000663c:	0401ffc4 	movi	r16,2047
10006640:	003e6a06 	br	10005fec <__alt_data_end+0xf8005fec>
10006644:	2c62b03a 	or	r17,r5,r17
10006648:	8822c03a 	cmpne	r17,r17,zero
1000664c:	0005883a 	mov	r2,zero
10006650:	003fa506 	br	100064e8 <__alt_data_end+0xf80064e8>
10006654:	180b883a 	mov	r5,r3
10006658:	3023883a 	mov	r17,r6
1000665c:	003e0306 	br	10005e6c <__alt_data_end+0xf8005e6c>
10006660:	180b883a 	mov	r5,r3
10006664:	3023883a 	mov	r17,r6
10006668:	0401ffc4 	movi	r16,2047
1000666c:	003dff06 	br	10005e6c <__alt_data_end+0xf8005e6c>
10006670:	113ff804 	addi	r4,r2,-32
10006674:	01c00804 	movi	r7,32
10006678:	2908d83a 	srl	r4,r5,r4
1000667c:	11c00a26 	beq	r2,r7,100066a8 <__subdf3+0x8c8>
10006680:	01c01004 	movi	r7,64
10006684:	3885c83a 	sub	r2,r7,r2
10006688:	288a983a 	sll	r5,r5,r2
1000668c:	2c62b03a 	or	r17,r5,r17
10006690:	8822c03a 	cmpne	r17,r17,zero
10006694:	8922b03a 	or	r17,r17,r4
10006698:	0005883a 	mov	r2,zero
1000669c:	003f9206 	br	100064e8 <__alt_data_end+0xf80064e8>
100066a0:	000b883a 	mov	r5,zero
100066a4:	003fdc06 	br	10006618 <__alt_data_end+0xf8006618>
100066a8:	000b883a 	mov	r5,zero
100066ac:	003ff706 	br	1000668c <__alt_data_end+0xf800668c>

100066b0 <__fixdfsi>:
100066b0:	2806d53a 	srli	r3,r5,20
100066b4:	00800434 	movhi	r2,16
100066b8:	10bfffc4 	addi	r2,r2,-1
100066bc:	18c1ffcc 	andi	r3,r3,2047
100066c0:	0180ff84 	movi	r6,1022
100066c4:	2884703a 	and	r2,r5,r2
100066c8:	280ad7fa 	srli	r5,r5,31
100066cc:	30c0130e 	bge	r6,r3,1000671c <__fixdfsi+0x6c>
100066d0:	01810744 	movi	r6,1053
100066d4:	30c00d16 	blt	r6,r3,1000670c <__fixdfsi+0x5c>
100066d8:	01810cc4 	movi	r6,1075
100066dc:	30cdc83a 	sub	r6,r6,r3
100066e0:	01c007c4 	movi	r7,31
100066e4:	10800434 	orhi	r2,r2,16
100066e8:	39800e0e 	bge	r7,r6,10006724 <__fixdfsi+0x74>
100066ec:	010104c4 	movi	r4,1043
100066f0:	20c7c83a 	sub	r3,r4,r3
100066f4:	10c6d83a 	srl	r3,r2,r3
100066f8:	29403fcc 	andi	r5,r5,255
100066fc:	0145c83a 	sub	r2,zero,r5
10006700:	1884f03a 	xor	r2,r3,r2
10006704:	1145883a 	add	r2,r2,r5
10006708:	f800283a 	ret
1000670c:	00a00034 	movhi	r2,32768
10006710:	10bfffc4 	addi	r2,r2,-1
10006714:	2885883a 	add	r2,r5,r2
10006718:	f800283a 	ret
1000671c:	0005883a 	mov	r2,zero
10006720:	f800283a 	ret
10006724:	18fefb44 	addi	r3,r3,-1043
10006728:	2188d83a 	srl	r4,r4,r6
1000672c:	10c6983a 	sll	r3,r2,r3
10006730:	20c6b03a 	or	r3,r4,r3
10006734:	003ff006 	br	100066f8 <__alt_data_end+0xf80066f8>

10006738 <__floatsidf>:
10006738:	defffd04 	addi	sp,sp,-12
1000673c:	dc400115 	stw	r17,4(sp)
10006740:	dfc00215 	stw	ra,8(sp)
10006744:	dc000015 	stw	r16,0(sp)
10006748:	2023883a 	mov	r17,r4
1000674c:	20001426 	beq	r4,zero,100067a0 <__floatsidf+0x68>
10006750:	2020d7fa 	srli	r16,r4,31
10006754:	80000126 	beq	r16,zero,1000675c <__floatsidf+0x24>
10006758:	0123c83a 	sub	r17,zero,r4
1000675c:	8809883a 	mov	r4,r17
10006760:	00068ac0 	call	100068ac <__clzsi2>
10006764:	01410784 	movi	r5,1054
10006768:	00c00284 	movi	r3,10
1000676c:	288bc83a 	sub	r5,r5,r2
10006770:	18801c16 	blt	r3,r2,100067e4 <__floatsidf+0xac>
10006774:	00c002c4 	movi	r3,11
10006778:	1887c83a 	sub	r3,r3,r2
1000677c:	88c8d83a 	srl	r4,r17,r3
10006780:	00c00434 	movhi	r3,16
10006784:	18ffffc4 	addi	r3,r3,-1
10006788:	10800544 	addi	r2,r2,21
1000678c:	20c8703a 	and	r4,r4,r3
10006790:	8884983a 	sll	r2,r17,r2
10006794:	28c1ffcc 	andi	r3,r5,2047
10006798:	800d883a 	mov	r6,r16
1000679c:	00000406 	br	100067b0 <__floatsidf+0x78>
100067a0:	000d883a 	mov	r6,zero
100067a4:	0007883a 	mov	r3,zero
100067a8:	0009883a 	mov	r4,zero
100067ac:	0005883a 	mov	r2,zero
100067b0:	180a953a 	slli	r5,r3,20
100067b4:	31803fcc 	andi	r6,r6,255
100067b8:	00c00434 	movhi	r3,16
100067bc:	300c97fa 	slli	r6,r6,31
100067c0:	18ffffc4 	addi	r3,r3,-1
100067c4:	20c6703a 	and	r3,r4,r3
100067c8:	1946b03a 	or	r3,r3,r5
100067cc:	1986b03a 	or	r3,r3,r6
100067d0:	dfc00217 	ldw	ra,8(sp)
100067d4:	dc400117 	ldw	r17,4(sp)
100067d8:	dc000017 	ldw	r16,0(sp)
100067dc:	dec00304 	addi	sp,sp,12
100067e0:	f800283a 	ret
100067e4:	10fffd44 	addi	r3,r2,-11
100067e8:	88c8983a 	sll	r4,r17,r3
100067ec:	00800434 	movhi	r2,16
100067f0:	10bfffc4 	addi	r2,r2,-1
100067f4:	2088703a 	and	r4,r4,r2
100067f8:	28c1ffcc 	andi	r3,r5,2047
100067fc:	800d883a 	mov	r6,r16
10006800:	0005883a 	mov	r2,zero
10006804:	003fea06 	br	100067b0 <__alt_data_end+0xf80067b0>

10006808 <__floatunsidf>:
10006808:	defffe04 	addi	sp,sp,-8
1000680c:	dc000015 	stw	r16,0(sp)
10006810:	dfc00115 	stw	ra,4(sp)
10006814:	2021883a 	mov	r16,r4
10006818:	20001026 	beq	r4,zero,1000685c <__floatunsidf+0x54>
1000681c:	00068ac0 	call	100068ac <__clzsi2>
10006820:	01410784 	movi	r5,1054
10006824:	100d883a 	mov	r6,r2
10006828:	288bc83a 	sub	r5,r5,r2
1000682c:	00800284 	movi	r2,10
10006830:	11801616 	blt	r2,r6,1000688c <__floatunsidf+0x84>
10006834:	008002c4 	movi	r2,11
10006838:	1185c83a 	sub	r2,r2,r6
1000683c:	8084d83a 	srl	r2,r16,r2
10006840:	00c00434 	movhi	r3,16
10006844:	31c00544 	addi	r7,r6,21
10006848:	18ffffc4 	addi	r3,r3,-1
1000684c:	81e0983a 	sll	r16,r16,r7
10006850:	10cc703a 	and	r6,r2,r3
10006854:	2941ffcc 	andi	r5,r5,2047
10006858:	00000206 	br	10006864 <__floatunsidf+0x5c>
1000685c:	000b883a 	mov	r5,zero
10006860:	000d883a 	mov	r6,zero
10006864:	280a953a 	slli	r5,r5,20
10006868:	00c00434 	movhi	r3,16
1000686c:	18ffffc4 	addi	r3,r3,-1
10006870:	30c6703a 	and	r3,r6,r3
10006874:	8005883a 	mov	r2,r16
10006878:	1946b03a 	or	r3,r3,r5
1000687c:	dfc00117 	ldw	ra,4(sp)
10006880:	dc000017 	ldw	r16,0(sp)
10006884:	dec00204 	addi	sp,sp,8
10006888:	f800283a 	ret
1000688c:	31bffd44 	addi	r6,r6,-11
10006890:	818c983a 	sll	r6,r16,r6
10006894:	00800434 	movhi	r2,16
10006898:	10bfffc4 	addi	r2,r2,-1
1000689c:	2941ffcc 	andi	r5,r5,2047
100068a0:	0021883a 	mov	r16,zero
100068a4:	308c703a 	and	r6,r6,r2
100068a8:	003fee06 	br	10006864 <__alt_data_end+0xf8006864>

100068ac <__clzsi2>:
100068ac:	00bfffd4 	movui	r2,65535
100068b0:	11000b36 	bltu	r2,r4,100068e0 <__clzsi2+0x34>
100068b4:	00803fc4 	movi	r2,255
100068b8:	1100122e 	bgeu	r2,r4,10006904 <__clzsi2+0x58>
100068bc:	00c00204 	movi	r3,8
100068c0:	01400604 	movi	r5,24
100068c4:	20c8d83a 	srl	r4,r4,r3
100068c8:	00840074 	movhi	r2,4097
100068cc:	10891204 	addi	r2,r2,9288
100068d0:	1109883a 	add	r4,r2,r4
100068d4:	20800003 	ldbu	r2,0(r4)
100068d8:	2885c83a 	sub	r2,r5,r2
100068dc:	f800283a 	ret
100068e0:	00804034 	movhi	r2,256
100068e4:	10bfffc4 	addi	r2,r2,-1
100068e8:	11000336 	bltu	r2,r4,100068f8 <__clzsi2+0x4c>
100068ec:	00c00404 	movi	r3,16
100068f0:	180b883a 	mov	r5,r3
100068f4:	003ff306 	br	100068c4 <__alt_data_end+0xf80068c4>
100068f8:	00c00604 	movi	r3,24
100068fc:	01400204 	movi	r5,8
10006900:	003ff006 	br	100068c4 <__alt_data_end+0xf80068c4>
10006904:	0007883a 	mov	r3,zero
10006908:	01400804 	movi	r5,32
1000690c:	003fed06 	br	100068c4 <__alt_data_end+0xf80068c4>

10006910 <__errno>:
10006910:	00840074 	movhi	r2,4097
10006914:	10907e04 	addi	r2,r2,16888
10006918:	10800017 	ldw	r2,0(r2)
1000691c:	f800283a 	ret

10006920 <_printf_r>:
10006920:	defffd04 	addi	sp,sp,-12
10006924:	dfc00015 	stw	ra,0(sp)
10006928:	d9800115 	stw	r6,4(sp)
1000692c:	d9c00215 	stw	r7,8(sp)
10006930:	280d883a 	mov	r6,r5
10006934:	21400217 	ldw	r5,8(r4)
10006938:	d9c00104 	addi	r7,sp,4
1000693c:	0006a040 	call	10006a04 <___vfprintf_internal_r>
10006940:	dfc00017 	ldw	ra,0(sp)
10006944:	dec00304 	addi	sp,sp,12
10006948:	f800283a 	ret

1000694c <printf>:
1000694c:	defffc04 	addi	sp,sp,-16
10006950:	dfc00015 	stw	ra,0(sp)
10006954:	d9400115 	stw	r5,4(sp)
10006958:	d9800215 	stw	r6,8(sp)
1000695c:	d9c00315 	stw	r7,12(sp)
10006960:	00840074 	movhi	r2,4097
10006964:	10907e04 	addi	r2,r2,16888
10006968:	10800017 	ldw	r2,0(r2)
1000696c:	200b883a 	mov	r5,r4
10006970:	d9800104 	addi	r6,sp,4
10006974:	11000217 	ldw	r4,8(r2)
10006978:	0008b000 	call	10008b00 <__vfprintf_internal>
1000697c:	dfc00017 	ldw	ra,0(sp)
10006980:	dec00404 	addi	sp,sp,16
10006984:	f800283a 	ret

10006988 <srand>:
10006988:	00840074 	movhi	r2,4097
1000698c:	10907e04 	addi	r2,r2,16888
10006990:	10800017 	ldw	r2,0(r2)
10006994:	11002915 	stw	r4,164(r2)
10006998:	10002a15 	stw	zero,168(r2)
1000699c:	f800283a 	ret

100069a0 <rand>:
100069a0:	00840074 	movhi	r2,4097
100069a4:	defffe04 	addi	sp,sp,-8
100069a8:	10907e04 	addi	r2,r2,16888
100069ac:	dc000015 	stw	r16,0(sp)
100069b0:	14000017 	ldw	r16,0(r2)
100069b4:	dfc00115 	stw	ra,4(sp)
100069b8:	01932574 	movhi	r6,19605
100069bc:	81002917 	ldw	r4,164(r16)
100069c0:	81402a17 	ldw	r5,168(r16)
100069c4:	01d614b4 	movhi	r7,22610
100069c8:	319fcb44 	addi	r6,r6,32557
100069cc:	39fd0b44 	addi	r7,r7,-3027
100069d0:	00031e40 	call	100031e4 <__muldi3>
100069d4:	11000044 	addi	r4,r2,1
100069d8:	2085803a 	cmpltu	r2,r4,r2
100069dc:	10c7883a 	add	r3,r2,r3
100069e0:	00a00034 	movhi	r2,32768
100069e4:	10bfffc4 	addi	r2,r2,-1
100069e8:	1884703a 	and	r2,r3,r2
100069ec:	81002915 	stw	r4,164(r16)
100069f0:	80c02a15 	stw	r3,168(r16)
100069f4:	dfc00117 	ldw	ra,4(sp)
100069f8:	dc000017 	ldw	r16,0(sp)
100069fc:	dec00204 	addi	sp,sp,8
10006a00:	f800283a 	ret

10006a04 <___vfprintf_internal_r>:
10006a04:	defeb604 	addi	sp,sp,-1320
10006a08:	dfc14915 	stw	ra,1316(sp)
10006a0c:	ddc14715 	stw	r23,1308(sp)
10006a10:	dd814615 	stw	r22,1304(sp)
10006a14:	202f883a 	mov	r23,r4
10006a18:	282d883a 	mov	r22,r5
10006a1c:	d9812a15 	stw	r6,1192(sp)
10006a20:	d9c12d15 	stw	r7,1204(sp)
10006a24:	df014815 	stw	fp,1312(sp)
10006a28:	dd414515 	stw	r21,1300(sp)
10006a2c:	dd014415 	stw	r20,1296(sp)
10006a30:	dcc14315 	stw	r19,1292(sp)
10006a34:	dc814215 	stw	r18,1288(sp)
10006a38:	dc414115 	stw	r17,1284(sp)
10006a3c:	dc014015 	stw	r16,1280(sp)
10006a40:	000b1e00 	call	1000b1e0 <_localeconv_r>
10006a44:	10800017 	ldw	r2,0(r2)
10006a48:	1009883a 	mov	r4,r2
10006a4c:	d8813515 	stw	r2,1236(sp)
10006a50:	000d1340 	call	1000d134 <strlen>
10006a54:	d8813815 	stw	r2,1248(sp)
10006a58:	b8000226 	beq	r23,zero,10006a64 <___vfprintf_internal_r+0x60>
10006a5c:	b8800e17 	ldw	r2,56(r23)
10006a60:	10010526 	beq	r2,zero,10006e78 <___vfprintf_internal_r+0x474>
10006a64:	b0c0030b 	ldhu	r3,12(r22)
10006a68:	1908000c 	andi	r4,r3,8192
10006a6c:	1805883a 	mov	r2,r3
10006a70:	2000071e 	bne	r4,zero,10006a90 <___vfprintf_internal_r+0x8c>
10006a74:	b1001917 	ldw	r4,100(r22)
10006a78:	18880014 	ori	r2,r3,8192
10006a7c:	00f7ffc4 	movi	r3,-8193
10006a80:	20c8703a 	and	r4,r4,r3
10006a84:	b080030d 	sth	r2,12(r22)
10006a88:	1007883a 	mov	r3,r2
10006a8c:	b1001915 	stw	r4,100(r22)
10006a90:	1100020c 	andi	r4,r2,8
10006a94:	2000a826 	beq	r4,zero,10006d38 <___vfprintf_internal_r+0x334>
10006a98:	b1000417 	ldw	r4,16(r22)
10006a9c:	2000a626 	beq	r4,zero,10006d38 <___vfprintf_internal_r+0x334>
10006aa0:	1080068c 	andi	r2,r2,26
10006aa4:	01000284 	movi	r4,10
10006aa8:	1100ac26 	beq	r2,r4,10006d5c <___vfprintf_internal_r+0x358>
10006aac:	d8c10e04 	addi	r3,sp,1080
10006ab0:	d9010dc4 	addi	r4,sp,1079
10006ab4:	d9400404 	addi	r5,sp,16
10006ab8:	05040074 	movhi	r20,4097
10006abc:	1905c83a 	sub	r2,r3,r4
10006ac0:	a5096384 	addi	r20,r20,9614
10006ac4:	d8c12815 	stw	r3,1184(sp)
10006ac8:	d9012915 	stw	r4,1188(sp)
10006acc:	d9411e15 	stw	r5,1144(sp)
10006ad0:	d8012015 	stw	zero,1152(sp)
10006ad4:	d8011f15 	stw	zero,1148(sp)
10006ad8:	d8013315 	stw	zero,1228(sp)
10006adc:	d8013715 	stw	zero,1244(sp)
10006ae0:	d8013915 	stw	zero,1252(sp)
10006ae4:	d8013b15 	stw	zero,1260(sp)
10006ae8:	d8013a15 	stw	zero,1256(sp)
10006aec:	d8012f15 	stw	zero,1212(sp)
10006af0:	2811883a 	mov	r8,r5
10006af4:	d8813c15 	stw	r2,1264(sp)
10006af8:	d8c12a17 	ldw	r3,1192(sp)
10006afc:	18800007 	ldb	r2,0(r3)
10006b00:	10021326 	beq	r2,zero,10007350 <___vfprintf_internal_r+0x94c>
10006b04:	00c00944 	movi	r3,37
10006b08:	dc012a17 	ldw	r16,1192(sp)
10006b0c:	10c0021e 	bne	r2,r3,10006b18 <___vfprintf_internal_r+0x114>
10006b10:	00001606 	br	10006b6c <___vfprintf_internal_r+0x168>
10006b14:	10c08526 	beq	r2,r3,10006d2c <___vfprintf_internal_r+0x328>
10006b18:	84000044 	addi	r16,r16,1
10006b1c:	80800007 	ldb	r2,0(r16)
10006b20:	103ffc1e 	bne	r2,zero,10006b14 <__alt_data_end+0xf8006b14>
10006b24:	d9012a17 	ldw	r4,1192(sp)
10006b28:	8123c83a 	sub	r17,r16,r4
10006b2c:	88000f26 	beq	r17,zero,10006b6c <___vfprintf_internal_r+0x168>
10006b30:	d8812a17 	ldw	r2,1192(sp)
10006b34:	d8c12017 	ldw	r3,1152(sp)
10006b38:	44400115 	stw	r17,4(r8)
10006b3c:	40800015 	stw	r2,0(r8)
10006b40:	d8811f17 	ldw	r2,1148(sp)
10006b44:	1c47883a 	add	r3,r3,r17
10006b48:	d8c12015 	stw	r3,1152(sp)
10006b4c:	10800044 	addi	r2,r2,1
10006b50:	d8811f15 	stw	r2,1148(sp)
10006b54:	00c001c4 	movi	r3,7
10006b58:	1880b516 	blt	r3,r2,10006e30 <___vfprintf_internal_r+0x42c>
10006b5c:	42000204 	addi	r8,r8,8
10006b60:	d8c12f17 	ldw	r3,1212(sp)
10006b64:	1c47883a 	add	r3,r3,r17
10006b68:	d8c12f15 	stw	r3,1212(sp)
10006b6c:	80800007 	ldb	r2,0(r16)
10006b70:	1000b626 	beq	r2,zero,10006e4c <___vfprintf_internal_r+0x448>
10006b74:	80800044 	addi	r2,r16,1
10006b78:	84000047 	ldb	r16,1(r16)
10006b7c:	0027883a 	mov	r19,zero
10006b80:	0039883a 	mov	fp,zero
10006b84:	dcc12b05 	stb	r19,1196(sp)
10006b88:	d8012785 	stb	zero,1182(sp)
10006b8c:	027fffc4 	movi	r9,-1
10006b90:	d8012e15 	stw	zero,1208(sp)
10006b94:	04401604 	movi	r17,88
10006b98:	04800244 	movi	r18,9
10006b9c:	da012a15 	stw	r8,1192(sp)
10006ba0:	e027883a 	mov	r19,fp
10006ba4:	17000044 	addi	fp,r2,1
10006ba8:	80bff804 	addi	r2,r16,-32
10006bac:	88831236 	bltu	r17,r2,100077f8 <___vfprintf_internal_r+0xdf4>
10006bb0:	100490ba 	slli	r2,r2,2
10006bb4:	01040034 	movhi	r4,4096
10006bb8:	211af204 	addi	r4,r4,27592
10006bbc:	1105883a 	add	r2,r2,r4
10006bc0:	10800017 	ldw	r2,0(r2)
10006bc4:	1000683a 	jmp	r2
10006bc8:	10007714 	ori	zero,r2,476
10006bcc:	100077f8 	rdprs	zero,r2,479
10006bd0:	100077f8 	rdprs	zero,r2,479
10006bd4:	10007730 	cmpltui	zero,r2,476
10006bd8:	100077f8 	rdprs	zero,r2,479
10006bdc:	100077f8 	rdprs	zero,r2,479
10006be0:	100077f8 	rdprs	zero,r2,479
10006be4:	100077f8 	rdprs	zero,r2,479
10006be8:	100077f8 	rdprs	zero,r2,479
10006bec:	100077f8 	rdprs	zero,r2,479
10006bf0:	10007740 	call	11000774 <_gp+0xfe4584>
10006bf4:	10007768 	cmpgeui	zero,r2,477
10006bf8:	100077f8 	rdprs	zero,r2,479
10006bfc:	10006e84 	addi	zero,r2,442
10006c00:	10006e94 	ori	zero,r2,442
10006c04:	100077f8 	rdprs	zero,r2,479
10006c08:	10006ee4 	muli	zero,r2,443
10006c0c:	10006ef4 	orhi	zero,r2,443
10006c10:	10006ef4 	orhi	zero,r2,443
10006c14:	10006ef4 	orhi	zero,r2,443
10006c18:	10006ef4 	orhi	zero,r2,443
10006c1c:	10006ef4 	orhi	zero,r2,443
10006c20:	10006ef4 	orhi	zero,r2,443
10006c24:	10006ef4 	orhi	zero,r2,443
10006c28:	10006ef4 	orhi	zero,r2,443
10006c2c:	10006ef4 	orhi	zero,r2,443
10006c30:	100077f8 	rdprs	zero,r2,479
10006c34:	100077f8 	rdprs	zero,r2,479
10006c38:	100077f8 	rdprs	zero,r2,479
10006c3c:	100077f8 	rdprs	zero,r2,479
10006c40:	100077f8 	rdprs	zero,r2,479
10006c44:	100077f8 	rdprs	zero,r2,479
10006c48:	100077f8 	rdprs	zero,r2,479
10006c4c:	100077f8 	rdprs	zero,r2,479
10006c50:	100077f8 	rdprs	zero,r2,479
10006c54:	100077f8 	rdprs	zero,r2,479
10006c58:	10006f38 	rdprs	zero,r2,444
10006c5c:	10007358 	cmpnei	zero,r2,461
10006c60:	100077f8 	rdprs	zero,r2,479
10006c64:	10007358 	cmpnei	zero,r2,461
10006c68:	100077f8 	rdprs	zero,r2,479
10006c6c:	100077f8 	rdprs	zero,r2,479
10006c70:	100077f8 	rdprs	zero,r2,479
10006c74:	100077f8 	rdprs	zero,r2,479
10006c78:	10007400 	call	11000740 <_gp+0xfe4550>
10006c7c:	100077f8 	rdprs	zero,r2,479
10006c80:	100077f8 	rdprs	zero,r2,479
10006c84:	10007410 	cmplti	zero,r2,464
10006c88:	100077f8 	rdprs	zero,r2,479
10006c8c:	100077f8 	rdprs	zero,r2,479
10006c90:	100077f8 	rdprs	zero,r2,479
10006c94:	100077f8 	rdprs	zero,r2,479
10006c98:	100077f8 	rdprs	zero,r2,479
10006c9c:	10007454 	ori	zero,r2,465
10006ca0:	100077f8 	rdprs	zero,r2,479
10006ca4:	100077f8 	rdprs	zero,r2,479
10006ca8:	1000748c 	andi	zero,r2,466
10006cac:	100077f8 	rdprs	zero,r2,479
10006cb0:	100077f8 	rdprs	zero,r2,479
10006cb4:	100077f8 	rdprs	zero,r2,479
10006cb8:	100077f8 	rdprs	zero,r2,479
10006cbc:	100077f8 	rdprs	zero,r2,479
10006cc0:	100077f8 	rdprs	zero,r2,479
10006cc4:	100077f8 	rdprs	zero,r2,479
10006cc8:	100077f8 	rdprs	zero,r2,479
10006ccc:	100077f8 	rdprs	zero,r2,479
10006cd0:	100077f8 	rdprs	zero,r2,479
10006cd4:	100076c8 	cmpgei	zero,r2,475
10006cd8:	10007674 	orhi	zero,r2,473
10006cdc:	10007358 	cmpnei	zero,r2,461
10006ce0:	10007358 	cmpnei	zero,r2,461
10006ce4:	10007358 	cmpnei	zero,r2,461
10006ce8:	100076b8 	rdprs	zero,r2,474
10006cec:	10007674 	orhi	zero,r2,473
10006cf0:	100077f8 	rdprs	zero,r2,479
10006cf4:	100077f8 	rdprs	zero,r2,479
10006cf8:	10007590 	cmplti	zero,r2,470
10006cfc:	100077f8 	rdprs	zero,r2,479
10006d00:	100075a8 	cmpgeui	zero,r2,470
10006d04:	100075e8 	cmpgeui	zero,r2,471
10006d08:	10007628 	cmpgeui	zero,r2,472
10006d0c:	100074f4 	orhi	zero,r2,467
10006d10:	100077f8 	rdprs	zero,r2,479
10006d14:	1000777c 	xorhi	zero,r2,477
10006d18:	100077f8 	rdprs	zero,r2,479
10006d1c:	10007504 	addi	zero,r2,468
10006d20:	100077f8 	rdprs	zero,r2,479
10006d24:	100077f8 	rdprs	zero,r2,479
10006d28:	10007544 	addi	zero,r2,469
10006d2c:	d9412a17 	ldw	r5,1192(sp)
10006d30:	8163c83a 	sub	r17,r16,r5
10006d34:	003f7d06 	br	10006b2c <__alt_data_end+0xf8006b2c>
10006d38:	b809883a 	mov	r4,r23
10006d3c:	b00b883a 	mov	r5,r22
10006d40:	0008b240 	call	10008b24 <__swsetup_r>
10006d44:	10002d1e 	bne	r2,zero,10006dfc <___vfprintf_internal_r+0x3f8>
10006d48:	b0c0030b 	ldhu	r3,12(r22)
10006d4c:	01000284 	movi	r4,10
10006d50:	1805883a 	mov	r2,r3
10006d54:	1080068c 	andi	r2,r2,26
10006d58:	113f541e 	bne	r2,r4,10006aac <__alt_data_end+0xf8006aac>
10006d5c:	b080038b 	ldhu	r2,14(r22)
10006d60:	113fffcc 	andi	r4,r2,65535
10006d64:	2120001c 	xori	r4,r4,32768
10006d68:	21200004 	addi	r4,r4,-32768
10006d6c:	203f4f16 	blt	r4,zero,10006aac <__alt_data_end+0xf8006aac>
10006d70:	b2c01917 	ldw	r11,100(r22)
10006d74:	b2800717 	ldw	r10,28(r22)
10006d78:	b2400917 	ldw	r9,36(r22)
10006d7c:	d9812a17 	ldw	r6,1192(sp)
10006d80:	d9c12d17 	ldw	r7,1204(sp)
10006d84:	02010004 	movi	r8,1024
10006d88:	18ffff4c 	andi	r3,r3,65533
10006d8c:	d881078d 	sth	r2,1054(sp)
10006d90:	b809883a 	mov	r4,r23
10006d94:	d8800404 	addi	r2,sp,16
10006d98:	d9410404 	addi	r5,sp,1040
10006d9c:	d8c1070d 	sth	r3,1052(sp)
10006da0:	dac11d15 	stw	r11,1140(sp)
10006da4:	da810b15 	stw	r10,1068(sp)
10006da8:	da410d15 	stw	r9,1076(sp)
10006dac:	d8810415 	stw	r2,1040(sp)
10006db0:	d8810815 	stw	r2,1056(sp)
10006db4:	da010615 	stw	r8,1048(sp)
10006db8:	da010915 	stw	r8,1060(sp)
10006dbc:	d8010a15 	stw	zero,1064(sp)
10006dc0:	0006a040 	call	10006a04 <___vfprintf_internal_r>
10006dc4:	1021883a 	mov	r16,r2
10006dc8:	10000416 	blt	r2,zero,10006ddc <___vfprintf_internal_r+0x3d8>
10006dcc:	b809883a 	mov	r4,r23
10006dd0:	d9410404 	addi	r5,sp,1040
10006dd4:	000a5a40 	call	1000a5a4 <_fflush_r>
10006dd8:	1007301e 	bne	r2,zero,10008a9c <___vfprintf_internal_r+0x2098>
10006ddc:	d881070b 	ldhu	r2,1052(sp)
10006de0:	1080100c 	andi	r2,r2,64
10006de4:	10000326 	beq	r2,zero,10006df4 <___vfprintf_internal_r+0x3f0>
10006de8:	b080030b 	ldhu	r2,12(r22)
10006dec:	10801014 	ori	r2,r2,64
10006df0:	b080030d 	sth	r2,12(r22)
10006df4:	8005883a 	mov	r2,r16
10006df8:	00000106 	br	10006e00 <___vfprintf_internal_r+0x3fc>
10006dfc:	00bfffc4 	movi	r2,-1
10006e00:	dfc14917 	ldw	ra,1316(sp)
10006e04:	df014817 	ldw	fp,1312(sp)
10006e08:	ddc14717 	ldw	r23,1308(sp)
10006e0c:	dd814617 	ldw	r22,1304(sp)
10006e10:	dd414517 	ldw	r21,1300(sp)
10006e14:	dd014417 	ldw	r20,1296(sp)
10006e18:	dcc14317 	ldw	r19,1292(sp)
10006e1c:	dc814217 	ldw	r18,1288(sp)
10006e20:	dc414117 	ldw	r17,1284(sp)
10006e24:	dc014017 	ldw	r16,1280(sp)
10006e28:	dec14a04 	addi	sp,sp,1320
10006e2c:	f800283a 	ret
10006e30:	b809883a 	mov	r4,r23
10006e34:	b00b883a 	mov	r5,r22
10006e38:	d9811e04 	addi	r6,sp,1144
10006e3c:	000d2c80 	call	1000d2c8 <__sprint_r>
10006e40:	1000081e 	bne	r2,zero,10006e64 <___vfprintf_internal_r+0x460>
10006e44:	da000404 	addi	r8,sp,16
10006e48:	003f4506 	br	10006b60 <__alt_data_end+0xf8006b60>
10006e4c:	d8812017 	ldw	r2,1152(sp)
10006e50:	10000426 	beq	r2,zero,10006e64 <___vfprintf_internal_r+0x460>
10006e54:	b809883a 	mov	r4,r23
10006e58:	b00b883a 	mov	r5,r22
10006e5c:	d9811e04 	addi	r6,sp,1144
10006e60:	000d2c80 	call	1000d2c8 <__sprint_r>
10006e64:	b080030b 	ldhu	r2,12(r22)
10006e68:	1080100c 	andi	r2,r2,64
10006e6c:	103fe31e 	bne	r2,zero,10006dfc <__alt_data_end+0xf8006dfc>
10006e70:	d8812f17 	ldw	r2,1212(sp)
10006e74:	003fe206 	br	10006e00 <__alt_data_end+0xf8006e00>
10006e78:	b809883a 	mov	r4,r23
10006e7c:	000ab600 	call	1000ab60 <__sinit>
10006e80:	003ef806 	br	10006a64 <__alt_data_end+0xf8006a64>
10006e84:	e005883a 	mov	r2,fp
10006e88:	9cc00114 	ori	r19,r19,4
10006e8c:	e4000007 	ldb	r16,0(fp)
10006e90:	003f4406 	br	10006ba4 <__alt_data_end+0xf8006ba4>
10006e94:	e4000007 	ldb	r16,0(fp)
10006e98:	01000a84 	movi	r4,42
10006e9c:	e0800044 	addi	r2,fp,1
10006ea0:	8106f626 	beq	r16,r4,10008a7c <___vfprintf_internal_r+0x2078>
10006ea4:	857ff404 	addi	r21,r16,-48
10006ea8:	1039883a 	mov	fp,r2
10006eac:	0013883a 	mov	r9,zero
10006eb0:	957f3d36 	bltu	r18,r21,10006ba8 <__alt_data_end+0xf8006ba8>
10006eb4:	0009883a 	mov	r4,zero
10006eb8:	01400284 	movi	r5,10
10006ebc:	00040ec0 	call	100040ec <__mulsi3>
10006ec0:	e4000007 	ldb	r16,0(fp)
10006ec4:	a889883a 	add	r4,r21,r2
10006ec8:	e7000044 	addi	fp,fp,1
10006ecc:	857ff404 	addi	r21,r16,-48
10006ed0:	957ff92e 	bgeu	r18,r21,10006eb8 <__alt_data_end+0xf8006eb8>
10006ed4:	2013883a 	mov	r9,r4
10006ed8:	203f330e 	bge	r4,zero,10006ba8 <__alt_data_end+0xf8006ba8>
10006edc:	027fffc4 	movi	r9,-1
10006ee0:	003f3106 	br	10006ba8 <__alt_data_end+0xf8006ba8>
10006ee4:	9cc02014 	ori	r19,r19,128
10006ee8:	e005883a 	mov	r2,fp
10006eec:	e4000007 	ldb	r16,0(fp)
10006ef0:	003f2c06 	br	10006ba4 <__alt_data_end+0xf8006ba4>
10006ef4:	857ff404 	addi	r21,r16,-48
10006ef8:	d8012e15 	stw	zero,1208(sp)
10006efc:	e021883a 	mov	r16,fp
10006f00:	0009883a 	mov	r4,zero
10006f04:	da412c15 	stw	r9,1200(sp)
10006f08:	01400284 	movi	r5,10
10006f0c:	00040ec0 	call	100040ec <__mulsi3>
10006f10:	81400007 	ldb	r5,0(r16)
10006f14:	1549883a 	add	r4,r2,r21
10006f18:	e7000044 	addi	fp,fp,1
10006f1c:	2d7ff404 	addi	r21,r5,-48
10006f20:	e021883a 	mov	r16,fp
10006f24:	957ff82e 	bgeu	r18,r21,10006f08 <__alt_data_end+0xf8006f08>
10006f28:	2821883a 	mov	r16,r5
10006f2c:	d9012e15 	stw	r4,1208(sp)
10006f30:	da412c17 	ldw	r9,1200(sp)
10006f34:	003f1c06 	br	10006ba8 <__alt_data_end+0xf8006ba8>
10006f38:	da012a17 	ldw	r8,1192(sp)
10006f3c:	df012a15 	stw	fp,1192(sp)
10006f40:	9839883a 	mov	fp,r19
10006f44:	dcc12b03 	ldbu	r19,1196(sp)
10006f48:	e7000414 	ori	fp,fp,16
10006f4c:	e080080c 	andi	r2,fp,32
10006f50:	dcc12785 	stb	r19,1182(sp)
10006f54:	d8c12d17 	ldw	r3,1204(sp)
10006f58:	1001ce26 	beq	r2,zero,10007694 <___vfprintf_internal_r+0xc90>
10006f5c:	d9012d17 	ldw	r4,1204(sp)
10006f60:	18800117 	ldw	r2,4(r3)
10006f64:	1c800017 	ldw	r18,0(r3)
10006f68:	21000204 	addi	r4,r4,8
10006f6c:	d9012d15 	stw	r4,1204(sp)
10006f70:	102b883a 	mov	r21,r2
10006f74:	10044916 	blt	r2,zero,1000809c <___vfprintf_internal_r+0x1698>
10006f78:	dcc12783 	ldbu	r19,1182(sp)
10006f7c:	da413215 	stw	r9,1224(sp)
10006f80:	00800044 	movi	r2,1
10006f84:	9546b03a 	or	r3,r18,r21
10006f88:	48000216 	blt	r9,zero,10006f94 <___vfprintf_internal_r+0x590>
10006f8c:	013fdfc4 	movi	r4,-129
10006f90:	e138703a 	and	fp,fp,r4
10006f94:	1802251e 	bne	r3,zero,1000782c <___vfprintf_internal_r+0xe28>
10006f98:	48031726 	beq	r9,zero,10007bf8 <___vfprintf_internal_r+0x11f4>
10006f9c:	10803fcc 	andi	r2,r2,255
10006fa0:	00c00044 	movi	r3,1
10006fa4:	10c24526 	beq	r2,r3,100078bc <___vfprintf_internal_r+0xeb8>
10006fa8:	00c00084 	movi	r3,2
10006fac:	10c33426 	beq	r2,r3,10007c80 <___vfprintf_internal_r+0x127c>
10006fb0:	d8c10e04 	addi	r3,sp,1080
10006fb4:	9008d0fa 	srli	r4,r18,3
10006fb8:	a80a977a 	slli	r5,r21,29
10006fbc:	a82ad0fa 	srli	r21,r21,3
10006fc0:	948001cc 	andi	r18,r18,7
10006fc4:	90800c04 	addi	r2,r18,48
10006fc8:	18ffffc4 	addi	r3,r3,-1
10006fcc:	2924b03a 	or	r18,r5,r4
10006fd0:	18800005 	stb	r2,0(r3)
10006fd4:	9548b03a 	or	r4,r18,r21
10006fd8:	203ff61e 	bne	r4,zero,10006fb4 <__alt_data_end+0xf8006fb4>
10006fdc:	e100004c 	andi	r4,fp,1
10006fe0:	d8c13115 	stw	r3,1220(sp)
10006fe4:	20039a1e 	bne	r4,zero,10007e50 <___vfprintf_internal_r+0x144c>
10006fe8:	d8812817 	ldw	r2,1184(sp)
10006fec:	10e3c83a 	sub	r17,r2,r3
10006ff0:	8805883a 	mov	r2,r17
10006ff4:	8a40010e 	bge	r17,r9,10006ffc <___vfprintf_internal_r+0x5f8>
10006ff8:	4805883a 	mov	r2,r9
10006ffc:	d8812b15 	stw	r2,1196(sp)
10007000:	d8013415 	stw	zero,1232(sp)
10007004:	98803fcc 	andi	r2,r19,255
10007008:	1080201c 	xori	r2,r2,128
1000700c:	10bfe004 	addi	r2,r2,-128
10007010:	10000326 	beq	r2,zero,10007020 <___vfprintf_internal_r+0x61c>
10007014:	d8c12b17 	ldw	r3,1196(sp)
10007018:	18c00044 	addi	r3,r3,1
1000701c:	d8c12b15 	stw	r3,1196(sp)
10007020:	e0c0008c 	andi	r3,fp,2
10007024:	d8c12c15 	stw	r3,1200(sp)
10007028:	18000326 	beq	r3,zero,10007038 <___vfprintf_internal_r+0x634>
1000702c:	d8c12b17 	ldw	r3,1196(sp)
10007030:	18c00084 	addi	r3,r3,2
10007034:	d8c12b15 	stw	r3,1196(sp)
10007038:	e0c0210c 	andi	r3,fp,132
1000703c:	d8c13015 	stw	r3,1216(sp)
10007040:	1801f81e 	bne	r3,zero,10007824 <___vfprintf_internal_r+0xe20>
10007044:	d9012e17 	ldw	r4,1208(sp)
10007048:	d8c12b17 	ldw	r3,1196(sp)
1000704c:	20ebc83a 	sub	r21,r4,r3
10007050:	0541f40e 	bge	zero,r21,10007824 <___vfprintf_internal_r+0xe20>
10007054:	02400404 	movi	r9,16
10007058:	d8c12017 	ldw	r3,1152(sp)
1000705c:	d8811f17 	ldw	r2,1148(sp)
10007060:	4d45750e 	bge	r9,r21,10008638 <___vfprintf_internal_r+0x1c34>
10007064:	01440074 	movhi	r5,4097
10007068:	29496784 	addi	r5,r5,9630
1000706c:	d9413615 	stw	r5,1240(sp)
10007070:	4827883a 	mov	r19,r9
10007074:	048001c4 	movi	r18,7
10007078:	00000306 	br	10007088 <___vfprintf_internal_r+0x684>
1000707c:	ad7ffc04 	addi	r21,r21,-16
10007080:	42000204 	addi	r8,r8,8
10007084:	9d40130e 	bge	r19,r21,100070d4 <___vfprintf_internal_r+0x6d0>
10007088:	01040074 	movhi	r4,4097
1000708c:	18c00404 	addi	r3,r3,16
10007090:	10800044 	addi	r2,r2,1
10007094:	21096784 	addi	r4,r4,9630
10007098:	41000015 	stw	r4,0(r8)
1000709c:	44c00115 	stw	r19,4(r8)
100070a0:	d8c12015 	stw	r3,1152(sp)
100070a4:	d8811f15 	stw	r2,1148(sp)
100070a8:	90bff40e 	bge	r18,r2,1000707c <__alt_data_end+0xf800707c>
100070ac:	b809883a 	mov	r4,r23
100070b0:	b00b883a 	mov	r5,r22
100070b4:	d9811e04 	addi	r6,sp,1144
100070b8:	000d2c80 	call	1000d2c8 <__sprint_r>
100070bc:	103f691e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
100070c0:	ad7ffc04 	addi	r21,r21,-16
100070c4:	d8c12017 	ldw	r3,1152(sp)
100070c8:	d8811f17 	ldw	r2,1148(sp)
100070cc:	da000404 	addi	r8,sp,16
100070d0:	9d7fed16 	blt	r19,r21,10007088 <__alt_data_end+0xf8007088>
100070d4:	d9413617 	ldw	r5,1240(sp)
100070d8:	a8c7883a 	add	r3,r21,r3
100070dc:	10800044 	addi	r2,r2,1
100070e0:	41400015 	stw	r5,0(r8)
100070e4:	45400115 	stw	r21,4(r8)
100070e8:	d8c12015 	stw	r3,1152(sp)
100070ec:	d8811f15 	stw	r2,1148(sp)
100070f0:	010001c4 	movi	r4,7
100070f4:	20832b16 	blt	r4,r2,10007da4 <___vfprintf_internal_r+0x13a0>
100070f8:	d8812787 	ldb	r2,1182(sp)
100070fc:	42000204 	addi	r8,r8,8
10007100:	10000c26 	beq	r2,zero,10007134 <___vfprintf_internal_r+0x730>
10007104:	d8811f17 	ldw	r2,1148(sp)
10007108:	d9012784 	addi	r4,sp,1182
1000710c:	18c00044 	addi	r3,r3,1
10007110:	10800044 	addi	r2,r2,1
10007114:	41000015 	stw	r4,0(r8)
10007118:	01000044 	movi	r4,1
1000711c:	41000115 	stw	r4,4(r8)
10007120:	d8c12015 	stw	r3,1152(sp)
10007124:	d8811f15 	stw	r2,1148(sp)
10007128:	010001c4 	movi	r4,7
1000712c:	2082c416 	blt	r4,r2,10007c40 <___vfprintf_internal_r+0x123c>
10007130:	42000204 	addi	r8,r8,8
10007134:	d8812c17 	ldw	r2,1200(sp)
10007138:	10000c26 	beq	r2,zero,1000716c <___vfprintf_internal_r+0x768>
1000713c:	d8811f17 	ldw	r2,1148(sp)
10007140:	d9012704 	addi	r4,sp,1180
10007144:	18c00084 	addi	r3,r3,2
10007148:	10800044 	addi	r2,r2,1
1000714c:	41000015 	stw	r4,0(r8)
10007150:	01000084 	movi	r4,2
10007154:	41000115 	stw	r4,4(r8)
10007158:	d8c12015 	stw	r3,1152(sp)
1000715c:	d8811f15 	stw	r2,1148(sp)
10007160:	010001c4 	movi	r4,7
10007164:	2082be16 	blt	r4,r2,10007c60 <___vfprintf_internal_r+0x125c>
10007168:	42000204 	addi	r8,r8,8
1000716c:	d9013017 	ldw	r4,1216(sp)
10007170:	00802004 	movi	r2,128
10007174:	20822026 	beq	r4,r2,100079f8 <___vfprintf_internal_r+0xff4>
10007178:	d9413217 	ldw	r5,1224(sp)
1000717c:	2c67c83a 	sub	r19,r5,r17
10007180:	04c0260e 	bge	zero,r19,1000721c <___vfprintf_internal_r+0x818>
10007184:	05400404 	movi	r21,16
10007188:	d8811f17 	ldw	r2,1148(sp)
1000718c:	acc4720e 	bge	r21,r19,10008358 <___vfprintf_internal_r+0x1954>
10007190:	01440074 	movhi	r5,4097
10007194:	29496384 	addi	r5,r5,9614
10007198:	d9412c15 	stw	r5,1200(sp)
1000719c:	048001c4 	movi	r18,7
100071a0:	00000306 	br	100071b0 <___vfprintf_internal_r+0x7ac>
100071a4:	9cfffc04 	addi	r19,r19,-16
100071a8:	42000204 	addi	r8,r8,8
100071ac:	acc0110e 	bge	r21,r19,100071f4 <___vfprintf_internal_r+0x7f0>
100071b0:	18c00404 	addi	r3,r3,16
100071b4:	10800044 	addi	r2,r2,1
100071b8:	45000015 	stw	r20,0(r8)
100071bc:	45400115 	stw	r21,4(r8)
100071c0:	d8c12015 	stw	r3,1152(sp)
100071c4:	d8811f15 	stw	r2,1148(sp)
100071c8:	90bff60e 	bge	r18,r2,100071a4 <__alt_data_end+0xf80071a4>
100071cc:	b809883a 	mov	r4,r23
100071d0:	b00b883a 	mov	r5,r22
100071d4:	d9811e04 	addi	r6,sp,1144
100071d8:	000d2c80 	call	1000d2c8 <__sprint_r>
100071dc:	103f211e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
100071e0:	9cfffc04 	addi	r19,r19,-16
100071e4:	d8c12017 	ldw	r3,1152(sp)
100071e8:	d8811f17 	ldw	r2,1148(sp)
100071ec:	da000404 	addi	r8,sp,16
100071f0:	acffef16 	blt	r21,r19,100071b0 <__alt_data_end+0xf80071b0>
100071f4:	d9012c17 	ldw	r4,1200(sp)
100071f8:	1cc7883a 	add	r3,r3,r19
100071fc:	10800044 	addi	r2,r2,1
10007200:	41000015 	stw	r4,0(r8)
10007204:	44c00115 	stw	r19,4(r8)
10007208:	d8c12015 	stw	r3,1152(sp)
1000720c:	d8811f15 	stw	r2,1148(sp)
10007210:	010001c4 	movi	r4,7
10007214:	20828216 	blt	r4,r2,10007c20 <___vfprintf_internal_r+0x121c>
10007218:	42000204 	addi	r8,r8,8
1000721c:	e080400c 	andi	r2,fp,256
10007220:	1001ac1e 	bne	r2,zero,100078d4 <___vfprintf_internal_r+0xed0>
10007224:	d8811f17 	ldw	r2,1148(sp)
10007228:	d9413117 	ldw	r5,1220(sp)
1000722c:	1c47883a 	add	r3,r3,r17
10007230:	10800044 	addi	r2,r2,1
10007234:	41400015 	stw	r5,0(r8)
10007238:	44400115 	stw	r17,4(r8)
1000723c:	d8c12015 	stw	r3,1152(sp)
10007240:	d8811f15 	stw	r2,1148(sp)
10007244:	010001c4 	movi	r4,7
10007248:	20825d16 	blt	r4,r2,10007bc0 <___vfprintf_internal_r+0x11bc>
1000724c:	42000204 	addi	r8,r8,8
10007250:	e080010c 	andi	r2,fp,4
10007254:	10003126 	beq	r2,zero,1000731c <___vfprintf_internal_r+0x918>
10007258:	d8812e17 	ldw	r2,1208(sp)
1000725c:	d9012b17 	ldw	r4,1196(sp)
10007260:	1121c83a 	sub	r16,r2,r4
10007264:	04002d0e 	bge	zero,r16,1000731c <___vfprintf_internal_r+0x918>
10007268:	04400404 	movi	r17,16
1000726c:	d8811f17 	ldw	r2,1148(sp)
10007270:	8c05340e 	bge	r17,r16,10008744 <___vfprintf_internal_r+0x1d40>
10007274:	01040074 	movhi	r4,4097
10007278:	21096784 	addi	r4,r4,9630
1000727c:	d9013615 	stw	r4,1240(sp)
10007280:	048001c4 	movi	r18,7
10007284:	00000306 	br	10007294 <___vfprintf_internal_r+0x890>
10007288:	843ffc04 	addi	r16,r16,-16
1000728c:	42000204 	addi	r8,r8,8
10007290:	8c00130e 	bge	r17,r16,100072e0 <___vfprintf_internal_r+0x8dc>
10007294:	01440074 	movhi	r5,4097
10007298:	18c00404 	addi	r3,r3,16
1000729c:	10800044 	addi	r2,r2,1
100072a0:	29496784 	addi	r5,r5,9630
100072a4:	41400015 	stw	r5,0(r8)
100072a8:	44400115 	stw	r17,4(r8)
100072ac:	d8c12015 	stw	r3,1152(sp)
100072b0:	d8811f15 	stw	r2,1148(sp)
100072b4:	90bff40e 	bge	r18,r2,10007288 <__alt_data_end+0xf8007288>
100072b8:	b809883a 	mov	r4,r23
100072bc:	b00b883a 	mov	r5,r22
100072c0:	d9811e04 	addi	r6,sp,1144
100072c4:	000d2c80 	call	1000d2c8 <__sprint_r>
100072c8:	103ee61e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
100072cc:	843ffc04 	addi	r16,r16,-16
100072d0:	d8c12017 	ldw	r3,1152(sp)
100072d4:	d8811f17 	ldw	r2,1148(sp)
100072d8:	da000404 	addi	r8,sp,16
100072dc:	8c3fed16 	blt	r17,r16,10007294 <__alt_data_end+0xf8007294>
100072e0:	d9013617 	ldw	r4,1240(sp)
100072e4:	1c07883a 	add	r3,r3,r16
100072e8:	10800044 	addi	r2,r2,1
100072ec:	41000015 	stw	r4,0(r8)
100072f0:	44000115 	stw	r16,4(r8)
100072f4:	d8c12015 	stw	r3,1152(sp)
100072f8:	d8811f15 	stw	r2,1148(sp)
100072fc:	010001c4 	movi	r4,7
10007300:	2080060e 	bge	r4,r2,1000731c <___vfprintf_internal_r+0x918>
10007304:	b809883a 	mov	r4,r23
10007308:	b00b883a 	mov	r5,r22
1000730c:	d9811e04 	addi	r6,sp,1144
10007310:	000d2c80 	call	1000d2c8 <__sprint_r>
10007314:	103ed31e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
10007318:	d8c12017 	ldw	r3,1152(sp)
1000731c:	df012b17 	ldw	fp,1196(sp)
10007320:	d9412e17 	ldw	r5,1208(sp)
10007324:	e140010e 	bge	fp,r5,1000732c <___vfprintf_internal_r+0x928>
10007328:	2839883a 	mov	fp,r5
1000732c:	d8812f17 	ldw	r2,1212(sp)
10007330:	1705883a 	add	r2,r2,fp
10007334:	d8812f15 	stw	r2,1212(sp)
10007338:	1802291e 	bne	r3,zero,10007be0 <___vfprintf_internal_r+0x11dc>
1000733c:	d8c12a17 	ldw	r3,1192(sp)
10007340:	d8011f15 	stw	zero,1148(sp)
10007344:	da000404 	addi	r8,sp,16
10007348:	18800007 	ldb	r2,0(r3)
1000734c:	103ded1e 	bne	r2,zero,10006b04 <__alt_data_end+0xf8006b04>
10007350:	dc012a17 	ldw	r16,1192(sp)
10007354:	003e0506 	br	10006b6c <__alt_data_end+0xf8006b6c>
10007358:	d9012d17 	ldw	r4,1204(sp)
1000735c:	d9412d17 	ldw	r5,1204(sp)
10007360:	da012a17 	ldw	r8,1192(sp)
10007364:	21000017 	ldw	r4,0(r4)
10007368:	29400117 	ldw	r5,4(r5)
1000736c:	df012a15 	stw	fp,1192(sp)
10007370:	9839883a 	mov	fp,r19
10007374:	dcc12b03 	ldbu	r19,1196(sp)
10007378:	d9013715 	stw	r4,1244(sp)
1000737c:	d9413915 	stw	r5,1252(sp)
10007380:	da013f15 	stw	r8,1276(sp)
10007384:	da413e15 	stw	r9,1272(sp)
10007388:	dcc12785 	stb	r19,1182(sp)
1000738c:	0002d900 	call	10002d90 <__fpclassifyd>
10007390:	d8c12d17 	ldw	r3,1204(sp)
10007394:	04400044 	movi	r17,1
10007398:	da013f17 	ldw	r8,1276(sp)
1000739c:	1c800204 	addi	r18,r3,8
100073a0:	da413e17 	ldw	r9,1272(sp)
100073a4:	d9013717 	ldw	r4,1244(sp)
100073a8:	d9413917 	ldw	r5,1252(sp)
100073ac:	1443451e 	bne	r2,r17,100080c4 <___vfprintf_internal_r+0x16c0>
100073b0:	000d883a 	mov	r6,zero
100073b4:	000f883a 	mov	r7,zero
100073b8:	00054940 	call	10005494 <__ledf2>
100073bc:	da013f17 	ldw	r8,1276(sp)
100073c0:	1004fe16 	blt	r2,zero,100087bc <___vfprintf_internal_r+0x1db8>
100073c4:	dcc12783 	ldbu	r19,1182(sp)
100073c8:	008011c4 	movi	r2,71
100073cc:	14045d0e 	bge	r2,r16,10008544 <___vfprintf_internal_r+0x1b40>
100073d0:	01440074 	movhi	r5,4097
100073d4:	29495404 	addi	r5,r5,9552
100073d8:	d9413115 	stw	r5,1220(sp)
100073dc:	00c000c4 	movi	r3,3
100073e0:	00bfdfc4 	movi	r2,-129
100073e4:	d8c12b15 	stw	r3,1196(sp)
100073e8:	e0b8703a 	and	fp,fp,r2
100073ec:	dc812d15 	stw	r18,1204(sp)
100073f0:	1823883a 	mov	r17,r3
100073f4:	d8013215 	stw	zero,1224(sp)
100073f8:	d8013415 	stw	zero,1232(sp)
100073fc:	003f0106 	br	10007004 <__alt_data_end+0xf8007004>
10007400:	9cc00214 	ori	r19,r19,8
10007404:	e005883a 	mov	r2,fp
10007408:	e4000007 	ldb	r16,0(fp)
1000740c:	003de506 	br	10006ba4 <__alt_data_end+0xf8006ba4>
10007410:	da012a17 	ldw	r8,1192(sp)
10007414:	df012a15 	stw	fp,1192(sp)
10007418:	9f000414 	ori	fp,r19,16
1000741c:	e0c0080c 	andi	r3,fp,32
10007420:	d8812d17 	ldw	r2,1204(sp)
10007424:	18007626 	beq	r3,zero,10007600 <___vfprintf_internal_r+0xbfc>
10007428:	d9412d17 	ldw	r5,1204(sp)
1000742c:	14800017 	ldw	r18,0(r2)
10007430:	15400117 	ldw	r21,4(r2)
10007434:	29400204 	addi	r5,r5,8
10007438:	d9412d15 	stw	r5,1204(sp)
1000743c:	0005883a 	mov	r2,zero
10007440:	9546b03a 	or	r3,r18,r21
10007444:	d8012785 	stb	zero,1182(sp)
10007448:	da413215 	stw	r9,1224(sp)
1000744c:	0027883a 	mov	r19,zero
10007450:	003ecd06 	br	10006f88 <__alt_data_end+0xf8006f88>
10007454:	da012a17 	ldw	r8,1192(sp)
10007458:	df012a15 	stw	fp,1192(sp)
1000745c:	9f000414 	ori	fp,r19,16
10007460:	e0c0080c 	andi	r3,fp,32
10007464:	d8812d17 	ldw	r2,1204(sp)
10007468:	18002c26 	beq	r3,zero,1000751c <___vfprintf_internal_r+0xb18>
1000746c:	d9012d17 	ldw	r4,1204(sp)
10007470:	14800017 	ldw	r18,0(r2)
10007474:	15400117 	ldw	r21,4(r2)
10007478:	21000204 	addi	r4,r4,8
1000747c:	d9012d15 	stw	r4,1204(sp)
10007480:	00800044 	movi	r2,1
10007484:	9546b03a 	or	r3,r18,r21
10007488:	003fee06 	br	10007444 <__alt_data_end+0xf8007444>
1000748c:	da012a17 	ldw	r8,1192(sp)
10007490:	df012a15 	stw	fp,1192(sp)
10007494:	9839883a 	mov	fp,r19
10007498:	dcc12b03 	ldbu	r19,1196(sp)
1000749c:	01440074 	movhi	r5,4097
100074a0:	29495704 	addi	r5,r5,9564
100074a4:	dcc12785 	stb	r19,1182(sp)
100074a8:	d9413b15 	stw	r5,1260(sp)
100074ac:	e0c0080c 	andi	r3,fp,32
100074b0:	d8812d17 	ldw	r2,1204(sp)
100074b4:	18002e26 	beq	r3,zero,10007570 <___vfprintf_internal_r+0xb6c>
100074b8:	d9412d17 	ldw	r5,1204(sp)
100074bc:	14800017 	ldw	r18,0(r2)
100074c0:	15400117 	ldw	r21,4(r2)
100074c4:	29400204 	addi	r5,r5,8
100074c8:	d9412d15 	stw	r5,1204(sp)
100074cc:	e080004c 	andi	r2,fp,1
100074d0:	10025c26 	beq	r2,zero,10007e44 <___vfprintf_internal_r+0x1440>
100074d4:	9546b03a 	or	r3,r18,r21
100074d8:	18038f26 	beq	r3,zero,10008318 <___vfprintf_internal_r+0x1914>
100074dc:	00800c04 	movi	r2,48
100074e0:	d8812705 	stb	r2,1180(sp)
100074e4:	dc012745 	stb	r16,1181(sp)
100074e8:	e7000094 	ori	fp,fp,2
100074ec:	00800084 	movi	r2,2
100074f0:	003fd406 	br	10007444 <__alt_data_end+0xf8007444>
100074f4:	9cc00814 	ori	r19,r19,32
100074f8:	e005883a 	mov	r2,fp
100074fc:	e4000007 	ldb	r16,0(fp)
10007500:	003da806 	br	10006ba4 <__alt_data_end+0xf8006ba4>
10007504:	da012a17 	ldw	r8,1192(sp)
10007508:	df012a15 	stw	fp,1192(sp)
1000750c:	9839883a 	mov	fp,r19
10007510:	e0c0080c 	andi	r3,fp,32
10007514:	d8812d17 	ldw	r2,1204(sp)
10007518:	183fd41e 	bne	r3,zero,1000746c <__alt_data_end+0xf800746c>
1000751c:	e0c0040c 	andi	r3,fp,16
10007520:	18035f26 	beq	r3,zero,100082a0 <___vfprintf_internal_r+0x189c>
10007524:	d9412d17 	ldw	r5,1204(sp)
10007528:	14800017 	ldw	r18,0(r2)
1000752c:	002b883a 	mov	r21,zero
10007530:	29400104 	addi	r5,r5,4
10007534:	d9412d15 	stw	r5,1204(sp)
10007538:	00800044 	movi	r2,1
1000753c:	9007883a 	mov	r3,r18
10007540:	003fc006 	br	10007444 <__alt_data_end+0xf8007444>
10007544:	da012a17 	ldw	r8,1192(sp)
10007548:	df012a15 	stw	fp,1192(sp)
1000754c:	9839883a 	mov	fp,r19
10007550:	dcc12b03 	ldbu	r19,1196(sp)
10007554:	01040074 	movhi	r4,4097
10007558:	21095c04 	addi	r4,r4,9584
1000755c:	d9013b15 	stw	r4,1260(sp)
10007560:	dcc12785 	stb	r19,1182(sp)
10007564:	e0c0080c 	andi	r3,fp,32
10007568:	d8812d17 	ldw	r2,1204(sp)
1000756c:	183fd21e 	bne	r3,zero,100074b8 <__alt_data_end+0xf80074b8>
10007570:	e0c0040c 	andi	r3,fp,16
10007574:	18035426 	beq	r3,zero,100082c8 <___vfprintf_internal_r+0x18c4>
10007578:	d8c12d17 	ldw	r3,1204(sp)
1000757c:	14800017 	ldw	r18,0(r2)
10007580:	002b883a 	mov	r21,zero
10007584:	18c00104 	addi	r3,r3,4
10007588:	d8c12d15 	stw	r3,1204(sp)
1000758c:	003fcf06 	br	100074cc <__alt_data_end+0xf80074cc>
10007590:	e4000007 	ldb	r16,0(fp)
10007594:	00801b04 	movi	r2,108
10007598:	8083f726 	beq	r16,r2,10008578 <___vfprintf_internal_r+0x1b74>
1000759c:	9cc00414 	ori	r19,r19,16
100075a0:	e005883a 	mov	r2,fp
100075a4:	003d7f06 	br	10006ba4 <__alt_data_end+0xf8006ba4>
100075a8:	da012a17 	ldw	r8,1192(sp)
100075ac:	df012a15 	stw	fp,1192(sp)
100075b0:	9839883a 	mov	fp,r19
100075b4:	dcc12b03 	ldbu	r19,1196(sp)
100075b8:	e080080c 	andi	r2,fp,32
100075bc:	dcc12785 	stb	r19,1182(sp)
100075c0:	10032226 	beq	r2,zero,1000824c <___vfprintf_internal_r+0x1848>
100075c4:	d9412d17 	ldw	r5,1204(sp)
100075c8:	d9012f17 	ldw	r4,1212(sp)
100075cc:	28800017 	ldw	r2,0(r5)
100075d0:	2007d7fa 	srai	r3,r4,31
100075d4:	29400104 	addi	r5,r5,4
100075d8:	d9412d15 	stw	r5,1204(sp)
100075dc:	11000015 	stw	r4,0(r2)
100075e0:	10c00115 	stw	r3,4(r2)
100075e4:	003d4406 	br	10006af8 <__alt_data_end+0xf8006af8>
100075e8:	da012a17 	ldw	r8,1192(sp)
100075ec:	df012a15 	stw	fp,1192(sp)
100075f0:	9839883a 	mov	fp,r19
100075f4:	e0c0080c 	andi	r3,fp,32
100075f8:	d8812d17 	ldw	r2,1204(sp)
100075fc:	183f8a1e 	bne	r3,zero,10007428 <__alt_data_end+0xf8007428>
10007600:	e0c0040c 	andi	r3,fp,16
10007604:	18031c26 	beq	r3,zero,10008278 <___vfprintf_internal_r+0x1874>
10007608:	14800017 	ldw	r18,0(r2)
1000760c:	d8812d17 	ldw	r2,1204(sp)
10007610:	002b883a 	mov	r21,zero
10007614:	9007883a 	mov	r3,r18
10007618:	10800104 	addi	r2,r2,4
1000761c:	d8812d15 	stw	r2,1204(sp)
10007620:	0005883a 	mov	r2,zero
10007624:	003f8706 	br	10007444 <__alt_data_end+0xf8007444>
10007628:	d9412d17 	ldw	r5,1204(sp)
1000762c:	00800c04 	movi	r2,48
10007630:	d8812705 	stb	r2,1180(sp)
10007634:	2c800017 	ldw	r18,0(r5)
10007638:	00801e04 	movi	r2,120
1000763c:	d8812745 	stb	r2,1181(sp)
10007640:	00840074 	movhi	r2,4097
10007644:	10895c04 	addi	r2,r2,9584
10007648:	29400104 	addi	r5,r5,4
1000764c:	da012a17 	ldw	r8,1192(sp)
10007650:	d8813b15 	stw	r2,1260(sp)
10007654:	df012a15 	stw	fp,1192(sp)
10007658:	002b883a 	mov	r21,zero
1000765c:	9f000094 	ori	fp,r19,2
10007660:	d9412d15 	stw	r5,1204(sp)
10007664:	00800084 	movi	r2,2
10007668:	04001e04 	movi	r16,120
1000766c:	9007883a 	mov	r3,r18
10007670:	003f7406 	br	10007444 <__alt_data_end+0xf8007444>
10007674:	da012a17 	ldw	r8,1192(sp)
10007678:	df012a15 	stw	fp,1192(sp)
1000767c:	9839883a 	mov	fp,r19
10007680:	dcc12b03 	ldbu	r19,1196(sp)
10007684:	e080080c 	andi	r2,fp,32
10007688:	d8c12d17 	ldw	r3,1204(sp)
1000768c:	dcc12785 	stb	r19,1182(sp)
10007690:	103e321e 	bne	r2,zero,10006f5c <__alt_data_end+0xf8006f5c>
10007694:	e080040c 	andi	r2,fp,16
10007698:	10031326 	beq	r2,zero,100082e8 <___vfprintf_internal_r+0x18e4>
1000769c:	1c800017 	ldw	r18,0(r3)
100076a0:	d9412d17 	ldw	r5,1204(sp)
100076a4:	902bd7fa 	srai	r21,r18,31
100076a8:	29400104 	addi	r5,r5,4
100076ac:	d9412d15 	stw	r5,1204(sp)
100076b0:	a805883a 	mov	r2,r21
100076b4:	003e2f06 	br	10006f74 <__alt_data_end+0xf8006f74>
100076b8:	9cc01014 	ori	r19,r19,64
100076bc:	e005883a 	mov	r2,fp
100076c0:	e4000007 	ldb	r16,0(fp)
100076c4:	003d3706 	br	10006ba4 <__alt_data_end+0xf8006ba4>
100076c8:	d8c12d17 	ldw	r3,1204(sp)
100076cc:	d9012d17 	ldw	r4,1204(sp)
100076d0:	da012a17 	ldw	r8,1192(sp)
100076d4:	18800017 	ldw	r2,0(r3)
100076d8:	21000104 	addi	r4,r4,4
100076dc:	00c00044 	movi	r3,1
100076e0:	df012a15 	stw	fp,1192(sp)
100076e4:	d8c12b15 	stw	r3,1196(sp)
100076e8:	9839883a 	mov	fp,r19
100076ec:	d8012785 	stb	zero,1182(sp)
100076f0:	d8810405 	stb	r2,1040(sp)
100076f4:	d9012d15 	stw	r4,1204(sp)
100076f8:	1823883a 	mov	r17,r3
100076fc:	d8c10404 	addi	r3,sp,1040
10007700:	d8013215 	stw	zero,1224(sp)
10007704:	d8013415 	stw	zero,1232(sp)
10007708:	d8c13115 	stw	r3,1220(sp)
1000770c:	0005883a 	mov	r2,zero
10007710:	003e4306 	br	10007020 <__alt_data_end+0xf8007020>
10007714:	d8812b07 	ldb	r2,1196(sp)
10007718:	1002fc1e 	bne	r2,zero,1000830c <___vfprintf_internal_r+0x1908>
1000771c:	00c00804 	movi	r3,32
10007720:	d8c12b05 	stb	r3,1196(sp)
10007724:	e005883a 	mov	r2,fp
10007728:	e4000007 	ldb	r16,0(fp)
1000772c:	003d1d06 	br	10006ba4 <__alt_data_end+0xf8006ba4>
10007730:	9cc00054 	ori	r19,r19,1
10007734:	e005883a 	mov	r2,fp
10007738:	e4000007 	ldb	r16,0(fp)
1000773c:	003d1906 	br	10006ba4 <__alt_data_end+0xf8006ba4>
10007740:	d9012d17 	ldw	r4,1204(sp)
10007744:	d9412d17 	ldw	r5,1204(sp)
10007748:	21000017 	ldw	r4,0(r4)
1000774c:	28c00104 	addi	r3,r5,4
10007750:	d9012e15 	stw	r4,1208(sp)
10007754:	20038c16 	blt	r4,zero,10008588 <___vfprintf_internal_r+0x1b84>
10007758:	d8c12d15 	stw	r3,1204(sp)
1000775c:	e005883a 	mov	r2,fp
10007760:	e4000007 	ldb	r16,0(fp)
10007764:	003d0f06 	br	10006ba4 <__alt_data_end+0xf8006ba4>
10007768:	00c00ac4 	movi	r3,43
1000776c:	d8c12b05 	stb	r3,1196(sp)
10007770:	e005883a 	mov	r2,fp
10007774:	e4000007 	ldb	r16,0(fp)
10007778:	003d0a06 	br	10006ba4 <__alt_data_end+0xf8006ba4>
1000777c:	d8c12d17 	ldw	r3,1204(sp)
10007780:	d9012d17 	ldw	r4,1204(sp)
10007784:	da012a17 	ldw	r8,1192(sp)
10007788:	18c00017 	ldw	r3,0(r3)
1000778c:	df012a15 	stw	fp,1192(sp)
10007790:	d8012785 	stb	zero,1182(sp)
10007794:	d8c13115 	stw	r3,1220(sp)
10007798:	9839883a 	mov	fp,r19
1000779c:	24800104 	addi	r18,r4,4
100077a0:	1803f726 	beq	r3,zero,10008780 <___vfprintf_internal_r+0x1d7c>
100077a4:	d9013117 	ldw	r4,1220(sp)
100077a8:	48038916 	blt	r9,zero,100085d0 <___vfprintf_internal_r+0x1bcc>
100077ac:	480d883a 	mov	r6,r9
100077b0:	000b883a 	mov	r5,zero
100077b4:	da013f15 	stw	r8,1276(sp)
100077b8:	da413e15 	stw	r9,1272(sp)
100077bc:	000bb740 	call	1000bb74 <memchr>
100077c0:	da013f17 	ldw	r8,1276(sp)
100077c4:	da413e17 	ldw	r9,1272(sp)
100077c8:	10045926 	beq	r2,zero,10008930 <___vfprintf_internal_r+0x1f2c>
100077cc:	d8c13117 	ldw	r3,1220(sp)
100077d0:	10e3c83a 	sub	r17,r2,r3
100077d4:	4c433516 	blt	r9,r17,100084ac <___vfprintf_internal_r+0x1aa8>
100077d8:	8805883a 	mov	r2,r17
100077dc:	88038116 	blt	r17,zero,100085e4 <___vfprintf_internal_r+0x1be0>
100077e0:	dcc12783 	ldbu	r19,1182(sp)
100077e4:	d8812b15 	stw	r2,1196(sp)
100077e8:	dc812d15 	stw	r18,1204(sp)
100077ec:	d8013215 	stw	zero,1224(sp)
100077f0:	d8013415 	stw	zero,1232(sp)
100077f4:	003e0306 	br	10007004 <__alt_data_end+0xf8007004>
100077f8:	da012a17 	ldw	r8,1192(sp)
100077fc:	df012a15 	stw	fp,1192(sp)
10007800:	9839883a 	mov	fp,r19
10007804:	dcc12b03 	ldbu	r19,1196(sp)
10007808:	dcc12785 	stb	r19,1182(sp)
1000780c:	803d8f26 	beq	r16,zero,10006e4c <__alt_data_end+0xf8006e4c>
10007810:	00c00044 	movi	r3,1
10007814:	d8c12b15 	stw	r3,1196(sp)
10007818:	dc010405 	stb	r16,1040(sp)
1000781c:	d8012785 	stb	zero,1182(sp)
10007820:	003fb506 	br	100076f8 <__alt_data_end+0xf80076f8>
10007824:	d8c12017 	ldw	r3,1152(sp)
10007828:	003e3506 	br	10007100 <__alt_data_end+0xf8007100>
1000782c:	10803fcc 	andi	r2,r2,255
10007830:	00c00044 	movi	r3,1
10007834:	10fddc1e 	bne	r2,r3,10006fa8 <__alt_data_end+0xf8006fa8>
10007838:	a800021e 	bne	r21,zero,10007844 <___vfprintf_internal_r+0xe40>
1000783c:	00800244 	movi	r2,9
10007840:	14801e2e 	bgeu	r2,r18,100078bc <___vfprintf_internal_r+0xeb8>
10007844:	dc012b15 	stw	r16,1196(sp)
10007848:	dc410e04 	addi	r17,sp,1080
1000784c:	9021883a 	mov	r16,r18
10007850:	da012c15 	stw	r8,1200(sp)
10007854:	a825883a 	mov	r18,r21
10007858:	482b883a 	mov	r21,r9
1000785c:	8009883a 	mov	r4,r16
10007860:	900b883a 	mov	r5,r18
10007864:	01800284 	movi	r6,10
10007868:	000f883a 	mov	r7,zero
1000786c:	00039a40 	call	100039a4 <__umoddi3>
10007870:	10800c04 	addi	r2,r2,48
10007874:	8c7fffc4 	addi	r17,r17,-1
10007878:	8009883a 	mov	r4,r16
1000787c:	900b883a 	mov	r5,r18
10007880:	01800284 	movi	r6,10
10007884:	000f883a 	mov	r7,zero
10007888:	88800005 	stb	r2,0(r17)
1000788c:	00033640 	call	10003364 <__udivdi3>
10007890:	1021883a 	mov	r16,r2
10007894:	10c4b03a 	or	r2,r2,r3
10007898:	1825883a 	mov	r18,r3
1000789c:	103fef1e 	bne	r2,zero,1000785c <__alt_data_end+0xf800785c>
100078a0:	d9012817 	ldw	r4,1184(sp)
100078a4:	dc413115 	stw	r17,1220(sp)
100078a8:	dc012b17 	ldw	r16,1196(sp)
100078ac:	da012c17 	ldw	r8,1200(sp)
100078b0:	a813883a 	mov	r9,r21
100078b4:	2463c83a 	sub	r17,r4,r17
100078b8:	003dcd06 	br	10006ff0 <__alt_data_end+0xf8006ff0>
100078bc:	94800c04 	addi	r18,r18,48
100078c0:	d8c10dc4 	addi	r3,sp,1079
100078c4:	dc810dc5 	stb	r18,1079(sp)
100078c8:	dc413c17 	ldw	r17,1264(sp)
100078cc:	d8c13115 	stw	r3,1220(sp)
100078d0:	003dc706 	br	10006ff0 <__alt_data_end+0xf8006ff0>
100078d4:	00801944 	movi	r2,101
100078d8:	1400720e 	bge	r2,r16,10007aa4 <___vfprintf_internal_r+0x10a0>
100078dc:	d9013717 	ldw	r4,1244(sp)
100078e0:	d9413917 	ldw	r5,1252(sp)
100078e4:	000d883a 	mov	r6,zero
100078e8:	000f883a 	mov	r7,zero
100078ec:	d8c13d15 	stw	r3,1268(sp)
100078f0:	da013f15 	stw	r8,1276(sp)
100078f4:	00053300 	call	10005330 <__eqdf2>
100078f8:	d8c13d17 	ldw	r3,1268(sp)
100078fc:	da013f17 	ldw	r8,1276(sp)
10007900:	1000f41e 	bne	r2,zero,10007cd4 <___vfprintf_internal_r+0x12d0>
10007904:	d8811f17 	ldw	r2,1148(sp)
10007908:	01040074 	movhi	r4,4097
1000790c:	21096304 	addi	r4,r4,9612
10007910:	18c00044 	addi	r3,r3,1
10007914:	10800044 	addi	r2,r2,1
10007918:	41000015 	stw	r4,0(r8)
1000791c:	01000044 	movi	r4,1
10007920:	41000115 	stw	r4,4(r8)
10007924:	d8c12015 	stw	r3,1152(sp)
10007928:	d8811f15 	stw	r2,1148(sp)
1000792c:	010001c4 	movi	r4,7
10007930:	20828d16 	blt	r4,r2,10008368 <___vfprintf_internal_r+0x1964>
10007934:	42000204 	addi	r8,r8,8
10007938:	d8812617 	ldw	r2,1176(sp)
1000793c:	d9413317 	ldw	r5,1228(sp)
10007940:	11400216 	blt	r2,r5,1000794c <___vfprintf_internal_r+0xf48>
10007944:	e080004c 	andi	r2,fp,1
10007948:	103e4126 	beq	r2,zero,10007250 <__alt_data_end+0xf8007250>
1000794c:	d8813817 	ldw	r2,1248(sp)
10007950:	d9013517 	ldw	r4,1236(sp)
10007954:	d9413817 	ldw	r5,1248(sp)
10007958:	1887883a 	add	r3,r3,r2
1000795c:	d8811f17 	ldw	r2,1148(sp)
10007960:	41000015 	stw	r4,0(r8)
10007964:	41400115 	stw	r5,4(r8)
10007968:	10800044 	addi	r2,r2,1
1000796c:	d8c12015 	stw	r3,1152(sp)
10007970:	d8811f15 	stw	r2,1148(sp)
10007974:	010001c4 	movi	r4,7
10007978:	20830916 	blt	r4,r2,100085a0 <___vfprintf_internal_r+0x1b9c>
1000797c:	42000204 	addi	r8,r8,8
10007980:	d8813317 	ldw	r2,1228(sp)
10007984:	143fffc4 	addi	r16,r2,-1
10007988:	043e310e 	bge	zero,r16,10007250 <__alt_data_end+0xf8007250>
1000798c:	04400404 	movi	r17,16
10007990:	d8811f17 	ldw	r2,1148(sp)
10007994:	8c007e0e 	bge	r17,r16,10007b90 <___vfprintf_internal_r+0x118c>
10007998:	01440074 	movhi	r5,4097
1000799c:	29496384 	addi	r5,r5,9614
100079a0:	d9412c15 	stw	r5,1200(sp)
100079a4:	04c001c4 	movi	r19,7
100079a8:	00000306 	br	100079b8 <___vfprintf_internal_r+0xfb4>
100079ac:	42000204 	addi	r8,r8,8
100079b0:	843ffc04 	addi	r16,r16,-16
100079b4:	8c00790e 	bge	r17,r16,10007b9c <___vfprintf_internal_r+0x1198>
100079b8:	18c00404 	addi	r3,r3,16
100079bc:	10800044 	addi	r2,r2,1
100079c0:	45000015 	stw	r20,0(r8)
100079c4:	44400115 	stw	r17,4(r8)
100079c8:	d8c12015 	stw	r3,1152(sp)
100079cc:	d8811f15 	stw	r2,1148(sp)
100079d0:	98bff60e 	bge	r19,r2,100079ac <__alt_data_end+0xf80079ac>
100079d4:	b809883a 	mov	r4,r23
100079d8:	b00b883a 	mov	r5,r22
100079dc:	d9811e04 	addi	r6,sp,1144
100079e0:	000d2c80 	call	1000d2c8 <__sprint_r>
100079e4:	103d1f1e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
100079e8:	d8c12017 	ldw	r3,1152(sp)
100079ec:	d8811f17 	ldw	r2,1148(sp)
100079f0:	da000404 	addi	r8,sp,16
100079f4:	003fee06 	br	100079b0 <__alt_data_end+0xf80079b0>
100079f8:	d9412e17 	ldw	r5,1208(sp)
100079fc:	d8812b17 	ldw	r2,1196(sp)
10007a00:	28a7c83a 	sub	r19,r5,r2
10007a04:	04fddc0e 	bge	zero,r19,10007178 <__alt_data_end+0xf8007178>
10007a08:	05400404 	movi	r21,16
10007a0c:	d8811f17 	ldw	r2,1148(sp)
10007a10:	acc3870e 	bge	r21,r19,10008830 <___vfprintf_internal_r+0x1e2c>
10007a14:	01440074 	movhi	r5,4097
10007a18:	29496384 	addi	r5,r5,9614
10007a1c:	d9412c15 	stw	r5,1200(sp)
10007a20:	048001c4 	movi	r18,7
10007a24:	00000306 	br	10007a34 <___vfprintf_internal_r+0x1030>
10007a28:	9cfffc04 	addi	r19,r19,-16
10007a2c:	42000204 	addi	r8,r8,8
10007a30:	acc0110e 	bge	r21,r19,10007a78 <___vfprintf_internal_r+0x1074>
10007a34:	18c00404 	addi	r3,r3,16
10007a38:	10800044 	addi	r2,r2,1
10007a3c:	45000015 	stw	r20,0(r8)
10007a40:	45400115 	stw	r21,4(r8)
10007a44:	d8c12015 	stw	r3,1152(sp)
10007a48:	d8811f15 	stw	r2,1148(sp)
10007a4c:	90bff60e 	bge	r18,r2,10007a28 <__alt_data_end+0xf8007a28>
10007a50:	b809883a 	mov	r4,r23
10007a54:	b00b883a 	mov	r5,r22
10007a58:	d9811e04 	addi	r6,sp,1144
10007a5c:	000d2c80 	call	1000d2c8 <__sprint_r>
10007a60:	103d001e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
10007a64:	9cfffc04 	addi	r19,r19,-16
10007a68:	d8c12017 	ldw	r3,1152(sp)
10007a6c:	d8811f17 	ldw	r2,1148(sp)
10007a70:	da000404 	addi	r8,sp,16
10007a74:	acffef16 	blt	r21,r19,10007a34 <__alt_data_end+0xf8007a34>
10007a78:	d9012c17 	ldw	r4,1200(sp)
10007a7c:	1cc7883a 	add	r3,r3,r19
10007a80:	10800044 	addi	r2,r2,1
10007a84:	41000015 	stw	r4,0(r8)
10007a88:	44c00115 	stw	r19,4(r8)
10007a8c:	d8c12015 	stw	r3,1152(sp)
10007a90:	d8811f15 	stw	r2,1148(sp)
10007a94:	010001c4 	movi	r4,7
10007a98:	20817816 	blt	r4,r2,1000807c <___vfprintf_internal_r+0x1678>
10007a9c:	42000204 	addi	r8,r8,8
10007aa0:	003db506 	br	10007178 <__alt_data_end+0xf8007178>
10007aa4:	d9413317 	ldw	r5,1228(sp)
10007aa8:	00800044 	movi	r2,1
10007aac:	18c00044 	addi	r3,r3,1
10007ab0:	11413e0e 	bge	r2,r5,10007fac <___vfprintf_internal_r+0x15a8>
10007ab4:	dc011f17 	ldw	r16,1148(sp)
10007ab8:	d8813117 	ldw	r2,1220(sp)
10007abc:	d8c12015 	stw	r3,1152(sp)
10007ac0:	84000044 	addi	r16,r16,1
10007ac4:	40800015 	stw	r2,0(r8)
10007ac8:	00800044 	movi	r2,1
10007acc:	40800115 	stw	r2,4(r8)
10007ad0:	dc011f15 	stw	r16,1148(sp)
10007ad4:	008001c4 	movi	r2,7
10007ad8:	14015616 	blt	r2,r16,10008034 <___vfprintf_internal_r+0x1630>
10007adc:	42000204 	addi	r8,r8,8
10007ae0:	d9013817 	ldw	r4,1248(sp)
10007ae4:	d9413517 	ldw	r5,1236(sp)
10007ae8:	84000044 	addi	r16,r16,1
10007aec:	1907883a 	add	r3,r3,r4
10007af0:	41400015 	stw	r5,0(r8)
10007af4:	41000115 	stw	r4,4(r8)
10007af8:	d8c12015 	stw	r3,1152(sp)
10007afc:	dc011f15 	stw	r16,1148(sp)
10007b00:	008001c4 	movi	r2,7
10007b04:	14015416 	blt	r2,r16,10008058 <___vfprintf_internal_r+0x1654>
10007b08:	44400204 	addi	r17,r8,8
10007b0c:	d9013717 	ldw	r4,1244(sp)
10007b10:	d9413917 	ldw	r5,1252(sp)
10007b14:	000d883a 	mov	r6,zero
10007b18:	000f883a 	mov	r7,zero
10007b1c:	d8c13d15 	stw	r3,1268(sp)
10007b20:	00053300 	call	10005330 <__eqdf2>
10007b24:	d8c13d17 	ldw	r3,1268(sp)
10007b28:	1000a726 	beq	r2,zero,10007dc8 <___vfprintf_internal_r+0x13c4>
10007b2c:	d9013317 	ldw	r4,1228(sp)
10007b30:	d9413117 	ldw	r5,1220(sp)
10007b34:	84000044 	addi	r16,r16,1
10007b38:	20bfffc4 	addi	r2,r4,-1
10007b3c:	1887883a 	add	r3,r3,r2
10007b40:	29000044 	addi	r4,r5,1
10007b44:	88800115 	stw	r2,4(r17)
10007b48:	89000015 	stw	r4,0(r17)
10007b4c:	d8c12015 	stw	r3,1152(sp)
10007b50:	dc011f15 	stw	r16,1148(sp)
10007b54:	008001c4 	movi	r2,7
10007b58:	14012d16 	blt	r2,r16,10008010 <___vfprintf_internal_r+0x160c>
10007b5c:	8c400204 	addi	r17,r17,8
10007b60:	d9413a17 	ldw	r5,1256(sp)
10007b64:	dcc122c4 	addi	r19,sp,1163
10007b68:	84000044 	addi	r16,r16,1
10007b6c:	28c7883a 	add	r3,r5,r3
10007b70:	8cc00015 	stw	r19,0(r17)
10007b74:	89400115 	stw	r5,4(r17)
10007b78:	d8c12015 	stw	r3,1152(sp)
10007b7c:	dc011f15 	stw	r16,1148(sp)
10007b80:	008001c4 	movi	r2,7
10007b84:	14000e16 	blt	r2,r16,10007bc0 <___vfprintf_internal_r+0x11bc>
10007b88:	8a000204 	addi	r8,r17,8
10007b8c:	003db006 	br	10007250 <__alt_data_end+0xf8007250>
10007b90:	01040074 	movhi	r4,4097
10007b94:	21096384 	addi	r4,r4,9614
10007b98:	d9012c15 	stw	r4,1200(sp)
10007b9c:	d9012c17 	ldw	r4,1200(sp)
10007ba0:	1c07883a 	add	r3,r3,r16
10007ba4:	44000115 	stw	r16,4(r8)
10007ba8:	41000015 	stw	r4,0(r8)
10007bac:	10800044 	addi	r2,r2,1
10007bb0:	d8c12015 	stw	r3,1152(sp)
10007bb4:	d8811f15 	stw	r2,1148(sp)
10007bb8:	010001c4 	movi	r4,7
10007bbc:	20bda30e 	bge	r4,r2,1000724c <__alt_data_end+0xf800724c>
10007bc0:	b809883a 	mov	r4,r23
10007bc4:	b00b883a 	mov	r5,r22
10007bc8:	d9811e04 	addi	r6,sp,1144
10007bcc:	000d2c80 	call	1000d2c8 <__sprint_r>
10007bd0:	103ca41e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
10007bd4:	d8c12017 	ldw	r3,1152(sp)
10007bd8:	da000404 	addi	r8,sp,16
10007bdc:	003d9c06 	br	10007250 <__alt_data_end+0xf8007250>
10007be0:	b809883a 	mov	r4,r23
10007be4:	b00b883a 	mov	r5,r22
10007be8:	d9811e04 	addi	r6,sp,1144
10007bec:	000d2c80 	call	1000d2c8 <__sprint_r>
10007bf0:	103dd226 	beq	r2,zero,1000733c <__alt_data_end+0xf800733c>
10007bf4:	003c9b06 	br	10006e64 <__alt_data_end+0xf8006e64>
10007bf8:	10803fcc 	andi	r2,r2,255
10007bfc:	1000311e 	bne	r2,zero,10007cc4 <___vfprintf_internal_r+0x12c0>
10007c00:	e080004c 	andi	r2,fp,1
10007c04:	10002f26 	beq	r2,zero,10007cc4 <___vfprintf_internal_r+0x12c0>
10007c08:	00800c04 	movi	r2,48
10007c0c:	d8c10dc4 	addi	r3,sp,1079
10007c10:	d8810dc5 	stb	r2,1079(sp)
10007c14:	dc413c17 	ldw	r17,1264(sp)
10007c18:	d8c13115 	stw	r3,1220(sp)
10007c1c:	003cf406 	br	10006ff0 <__alt_data_end+0xf8006ff0>
10007c20:	b809883a 	mov	r4,r23
10007c24:	b00b883a 	mov	r5,r22
10007c28:	d9811e04 	addi	r6,sp,1144
10007c2c:	000d2c80 	call	1000d2c8 <__sprint_r>
10007c30:	103c8c1e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
10007c34:	d8c12017 	ldw	r3,1152(sp)
10007c38:	da000404 	addi	r8,sp,16
10007c3c:	003d7706 	br	1000721c <__alt_data_end+0xf800721c>
10007c40:	b809883a 	mov	r4,r23
10007c44:	b00b883a 	mov	r5,r22
10007c48:	d9811e04 	addi	r6,sp,1144
10007c4c:	000d2c80 	call	1000d2c8 <__sprint_r>
10007c50:	103c841e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
10007c54:	d8c12017 	ldw	r3,1152(sp)
10007c58:	da000404 	addi	r8,sp,16
10007c5c:	003d3506 	br	10007134 <__alt_data_end+0xf8007134>
10007c60:	b809883a 	mov	r4,r23
10007c64:	b00b883a 	mov	r5,r22
10007c68:	d9811e04 	addi	r6,sp,1144
10007c6c:	000d2c80 	call	1000d2c8 <__sprint_r>
10007c70:	103c7c1e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
10007c74:	d8c12017 	ldw	r3,1152(sp)
10007c78:	da000404 	addi	r8,sp,16
10007c7c:	003d3b06 	br	1000716c <__alt_data_end+0xf800716c>
10007c80:	d9413b17 	ldw	r5,1260(sp)
10007c84:	d8c10e04 	addi	r3,sp,1080
10007c88:	908003cc 	andi	r2,r18,15
10007c8c:	a808973a 	slli	r4,r21,28
10007c90:	2885883a 	add	r2,r5,r2
10007c94:	9024d13a 	srli	r18,r18,4
10007c98:	10800003 	ldbu	r2,0(r2)
10007c9c:	a82ad13a 	srli	r21,r21,4
10007ca0:	18ffffc4 	addi	r3,r3,-1
10007ca4:	24a4b03a 	or	r18,r4,r18
10007ca8:	18800005 	stb	r2,0(r3)
10007cac:	9544b03a 	or	r2,r18,r21
10007cb0:	103ff51e 	bne	r2,zero,10007c88 <__alt_data_end+0xf8007c88>
10007cb4:	d9412817 	ldw	r5,1184(sp)
10007cb8:	d8c13115 	stw	r3,1220(sp)
10007cbc:	28e3c83a 	sub	r17,r5,r3
10007cc0:	003ccb06 	br	10006ff0 <__alt_data_end+0xf8006ff0>
10007cc4:	d8c10e04 	addi	r3,sp,1080
10007cc8:	0023883a 	mov	r17,zero
10007ccc:	d8c13115 	stw	r3,1220(sp)
10007cd0:	003cc706 	br	10006ff0 <__alt_data_end+0xf8006ff0>
10007cd4:	dc012617 	ldw	r16,1176(sp)
10007cd8:	0401ab0e 	bge	zero,r16,10008388 <___vfprintf_internal_r+0x1984>
10007cdc:	d8813317 	ldw	r2,1228(sp)
10007ce0:	d9413117 	ldw	r5,1220(sp)
10007ce4:	d9013417 	ldw	r4,1232(sp)
10007ce8:	1023883a 	mov	r17,r2
10007cec:	28a1883a 	add	r16,r5,r2
10007cf0:	2080010e 	bge	r4,r2,10007cf8 <___vfprintf_internal_r+0x12f4>
10007cf4:	2023883a 	mov	r17,r4
10007cf8:	04400b0e 	bge	zero,r17,10007d28 <___vfprintf_internal_r+0x1324>
10007cfc:	d8811f17 	ldw	r2,1148(sp)
10007d00:	d9413117 	ldw	r5,1220(sp)
10007d04:	1c47883a 	add	r3,r3,r17
10007d08:	10800044 	addi	r2,r2,1
10007d0c:	41400015 	stw	r5,0(r8)
10007d10:	44400115 	stw	r17,4(r8)
10007d14:	d8c12015 	stw	r3,1152(sp)
10007d18:	d8811f15 	stw	r2,1148(sp)
10007d1c:	010001c4 	movi	r4,7
10007d20:	20826716 	blt	r4,r2,100086c0 <___vfprintf_internal_r+0x1cbc>
10007d24:	42000204 	addi	r8,r8,8
10007d28:	88026316 	blt	r17,zero,100086b8 <___vfprintf_internal_r+0x1cb4>
10007d2c:	d8813417 	ldw	r2,1232(sp)
10007d30:	1463c83a 	sub	r17,r2,r17
10007d34:	0440590e 	bge	zero,r17,10007e9c <___vfprintf_internal_r+0x1498>
10007d38:	04c00404 	movi	r19,16
10007d3c:	d8811f17 	ldw	r2,1148(sp)
10007d40:	9c41770e 	bge	r19,r17,10008320 <___vfprintf_internal_r+0x191c>
10007d44:	01440074 	movhi	r5,4097
10007d48:	29496384 	addi	r5,r5,9614
10007d4c:	d9412c15 	stw	r5,1200(sp)
10007d50:	054001c4 	movi	r21,7
10007d54:	00000306 	br	10007d64 <___vfprintf_internal_r+0x1360>
10007d58:	42000204 	addi	r8,r8,8
10007d5c:	8c7ffc04 	addi	r17,r17,-16
10007d60:	9c41720e 	bge	r19,r17,1000832c <___vfprintf_internal_r+0x1928>
10007d64:	18c00404 	addi	r3,r3,16
10007d68:	10800044 	addi	r2,r2,1
10007d6c:	45000015 	stw	r20,0(r8)
10007d70:	44c00115 	stw	r19,4(r8)
10007d74:	d8c12015 	stw	r3,1152(sp)
10007d78:	d8811f15 	stw	r2,1148(sp)
10007d7c:	a8bff60e 	bge	r21,r2,10007d58 <__alt_data_end+0xf8007d58>
10007d80:	b809883a 	mov	r4,r23
10007d84:	b00b883a 	mov	r5,r22
10007d88:	d9811e04 	addi	r6,sp,1144
10007d8c:	000d2c80 	call	1000d2c8 <__sprint_r>
10007d90:	103c341e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
10007d94:	d8c12017 	ldw	r3,1152(sp)
10007d98:	d8811f17 	ldw	r2,1148(sp)
10007d9c:	da000404 	addi	r8,sp,16
10007da0:	003fee06 	br	10007d5c <__alt_data_end+0xf8007d5c>
10007da4:	b809883a 	mov	r4,r23
10007da8:	b00b883a 	mov	r5,r22
10007dac:	d9811e04 	addi	r6,sp,1144
10007db0:	000d2c80 	call	1000d2c8 <__sprint_r>
10007db4:	103c2b1e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
10007db8:	d8c12017 	ldw	r3,1152(sp)
10007dbc:	d8812787 	ldb	r2,1182(sp)
10007dc0:	da000404 	addi	r8,sp,16
10007dc4:	003cce06 	br	10007100 <__alt_data_end+0xf8007100>
10007dc8:	d8813317 	ldw	r2,1228(sp)
10007dcc:	14ffffc4 	addi	r19,r2,-1
10007dd0:	04ff630e 	bge	zero,r19,10007b60 <__alt_data_end+0xf8007b60>
10007dd4:	05400404 	movi	r21,16
10007dd8:	acc0810e 	bge	r21,r19,10007fe0 <___vfprintf_internal_r+0x15dc>
10007ddc:	01440074 	movhi	r5,4097
10007de0:	29496384 	addi	r5,r5,9614
10007de4:	d9412c15 	stw	r5,1200(sp)
10007de8:	01c001c4 	movi	r7,7
10007dec:	00000306 	br	10007dfc <___vfprintf_internal_r+0x13f8>
10007df0:	8c400204 	addi	r17,r17,8
10007df4:	9cfffc04 	addi	r19,r19,-16
10007df8:	acc07c0e 	bge	r21,r19,10007fec <___vfprintf_internal_r+0x15e8>
10007dfc:	18c00404 	addi	r3,r3,16
10007e00:	84000044 	addi	r16,r16,1
10007e04:	8d000015 	stw	r20,0(r17)
10007e08:	8d400115 	stw	r21,4(r17)
10007e0c:	d8c12015 	stw	r3,1152(sp)
10007e10:	dc011f15 	stw	r16,1148(sp)
10007e14:	3c3ff60e 	bge	r7,r16,10007df0 <__alt_data_end+0xf8007df0>
10007e18:	b809883a 	mov	r4,r23
10007e1c:	b00b883a 	mov	r5,r22
10007e20:	d9811e04 	addi	r6,sp,1144
10007e24:	d9c13d15 	stw	r7,1268(sp)
10007e28:	000d2c80 	call	1000d2c8 <__sprint_r>
10007e2c:	d9c13d17 	ldw	r7,1268(sp)
10007e30:	103c0c1e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
10007e34:	d8c12017 	ldw	r3,1152(sp)
10007e38:	dc011f17 	ldw	r16,1148(sp)
10007e3c:	dc400404 	addi	r17,sp,16
10007e40:	003fec06 	br	10007df4 <__alt_data_end+0xf8007df4>
10007e44:	00800084 	movi	r2,2
10007e48:	9546b03a 	or	r3,r18,r21
10007e4c:	003d7d06 	br	10007444 <__alt_data_end+0xf8007444>
10007e50:	10803fcc 	andi	r2,r2,255
10007e54:	1080201c 	xori	r2,r2,128
10007e58:	10bfe004 	addi	r2,r2,-128
10007e5c:	01000c04 	movi	r4,48
10007e60:	1101d726 	beq	r2,r4,100085c0 <___vfprintf_internal_r+0x1bbc>
10007e64:	d9413117 	ldw	r5,1220(sp)
10007e68:	d8812817 	ldw	r2,1184(sp)
10007e6c:	193fffc5 	stb	r4,-1(r3)
10007e70:	297fffc4 	addi	r5,r5,-1
10007e74:	d9413115 	stw	r5,1220(sp)
10007e78:	1163c83a 	sub	r17,r2,r5
10007e7c:	003c5c06 	br	10006ff0 <__alt_data_end+0xf8006ff0>
10007e80:	b809883a 	mov	r4,r23
10007e84:	b00b883a 	mov	r5,r22
10007e88:	d9811e04 	addi	r6,sp,1144
10007e8c:	000d2c80 	call	1000d2c8 <__sprint_r>
10007e90:	103bf41e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
10007e94:	d8c12017 	ldw	r3,1152(sp)
10007e98:	da000404 	addi	r8,sp,16
10007e9c:	d9413117 	ldw	r5,1220(sp)
10007ea0:	d9013417 	ldw	r4,1232(sp)
10007ea4:	d8812617 	ldw	r2,1176(sp)
10007ea8:	2923883a 	add	r17,r5,r4
10007eac:	d9413317 	ldw	r5,1228(sp)
10007eb0:	11400216 	blt	r2,r5,10007ebc <___vfprintf_internal_r+0x14b8>
10007eb4:	e100004c 	andi	r4,fp,1
10007eb8:	20000d26 	beq	r4,zero,10007ef0 <___vfprintf_internal_r+0x14ec>
10007ebc:	d9013817 	ldw	r4,1248(sp)
10007ec0:	d9413517 	ldw	r5,1236(sp)
10007ec4:	1907883a 	add	r3,r3,r4
10007ec8:	d9011f17 	ldw	r4,1148(sp)
10007ecc:	41400015 	stw	r5,0(r8)
10007ed0:	d9413817 	ldw	r5,1248(sp)
10007ed4:	21000044 	addi	r4,r4,1
10007ed8:	d8c12015 	stw	r3,1152(sp)
10007edc:	41400115 	stw	r5,4(r8)
10007ee0:	d9011f15 	stw	r4,1148(sp)
10007ee4:	014001c4 	movi	r5,7
10007ee8:	2901fd16 	blt	r5,r4,100086e0 <___vfprintf_internal_r+0x1cdc>
10007eec:	42000204 	addi	r8,r8,8
10007ef0:	d9013317 	ldw	r4,1228(sp)
10007ef4:	2085c83a 	sub	r2,r4,r2
10007ef8:	8449c83a 	sub	r4,r16,r17
10007efc:	1021883a 	mov	r16,r2
10007f00:	2080010e 	bge	r4,r2,10007f08 <___vfprintf_internal_r+0x1504>
10007f04:	2021883a 	mov	r16,r4
10007f08:	04000a0e 	bge	zero,r16,10007f34 <___vfprintf_internal_r+0x1530>
10007f0c:	d9011f17 	ldw	r4,1148(sp)
10007f10:	1c07883a 	add	r3,r3,r16
10007f14:	44400015 	stw	r17,0(r8)
10007f18:	21000044 	addi	r4,r4,1
10007f1c:	44000115 	stw	r16,4(r8)
10007f20:	d8c12015 	stw	r3,1152(sp)
10007f24:	d9011f15 	stw	r4,1148(sp)
10007f28:	014001c4 	movi	r5,7
10007f2c:	29020916 	blt	r5,r4,10008754 <___vfprintf_internal_r+0x1d50>
10007f30:	42000204 	addi	r8,r8,8
10007f34:	80020116 	blt	r16,zero,1000873c <___vfprintf_internal_r+0x1d38>
10007f38:	1421c83a 	sub	r16,r2,r16
10007f3c:	043cc40e 	bge	zero,r16,10007250 <__alt_data_end+0xf8007250>
10007f40:	04400404 	movi	r17,16
10007f44:	d8811f17 	ldw	r2,1148(sp)
10007f48:	8c3f110e 	bge	r17,r16,10007b90 <__alt_data_end+0xf8007b90>
10007f4c:	01440074 	movhi	r5,4097
10007f50:	29496384 	addi	r5,r5,9614
10007f54:	d9412c15 	stw	r5,1200(sp)
10007f58:	04c001c4 	movi	r19,7
10007f5c:	00000306 	br	10007f6c <___vfprintf_internal_r+0x1568>
10007f60:	42000204 	addi	r8,r8,8
10007f64:	843ffc04 	addi	r16,r16,-16
10007f68:	8c3f0c0e 	bge	r17,r16,10007b9c <__alt_data_end+0xf8007b9c>
10007f6c:	18c00404 	addi	r3,r3,16
10007f70:	10800044 	addi	r2,r2,1
10007f74:	45000015 	stw	r20,0(r8)
10007f78:	44400115 	stw	r17,4(r8)
10007f7c:	d8c12015 	stw	r3,1152(sp)
10007f80:	d8811f15 	stw	r2,1148(sp)
10007f84:	98bff60e 	bge	r19,r2,10007f60 <__alt_data_end+0xf8007f60>
10007f88:	b809883a 	mov	r4,r23
10007f8c:	b00b883a 	mov	r5,r22
10007f90:	d9811e04 	addi	r6,sp,1144
10007f94:	000d2c80 	call	1000d2c8 <__sprint_r>
10007f98:	103bb21e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
10007f9c:	d8c12017 	ldw	r3,1152(sp)
10007fa0:	d8811f17 	ldw	r2,1148(sp)
10007fa4:	da000404 	addi	r8,sp,16
10007fa8:	003fee06 	br	10007f64 <__alt_data_end+0xf8007f64>
10007fac:	e088703a 	and	r4,fp,r2
10007fb0:	203ec01e 	bne	r4,zero,10007ab4 <__alt_data_end+0xf8007ab4>
10007fb4:	dc011f17 	ldw	r16,1148(sp)
10007fb8:	d9013117 	ldw	r4,1220(sp)
10007fbc:	40800115 	stw	r2,4(r8)
10007fc0:	84000044 	addi	r16,r16,1
10007fc4:	41000015 	stw	r4,0(r8)
10007fc8:	d8c12015 	stw	r3,1152(sp)
10007fcc:	dc011f15 	stw	r16,1148(sp)
10007fd0:	008001c4 	movi	r2,7
10007fd4:	14000e16 	blt	r2,r16,10008010 <___vfprintf_internal_r+0x160c>
10007fd8:	44400204 	addi	r17,r8,8
10007fdc:	003ee006 	br	10007b60 <__alt_data_end+0xf8007b60>
10007fe0:	01040074 	movhi	r4,4097
10007fe4:	21096384 	addi	r4,r4,9614
10007fe8:	d9012c15 	stw	r4,1200(sp)
10007fec:	d8812c17 	ldw	r2,1200(sp)
10007ff0:	1cc7883a 	add	r3,r3,r19
10007ff4:	84000044 	addi	r16,r16,1
10007ff8:	88800015 	stw	r2,0(r17)
10007ffc:	8cc00115 	stw	r19,4(r17)
10008000:	d8c12015 	stw	r3,1152(sp)
10008004:	dc011f15 	stw	r16,1148(sp)
10008008:	008001c4 	movi	r2,7
1000800c:	143ed30e 	bge	r2,r16,10007b5c <__alt_data_end+0xf8007b5c>
10008010:	b809883a 	mov	r4,r23
10008014:	b00b883a 	mov	r5,r22
10008018:	d9811e04 	addi	r6,sp,1144
1000801c:	000d2c80 	call	1000d2c8 <__sprint_r>
10008020:	103b901e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
10008024:	d8c12017 	ldw	r3,1152(sp)
10008028:	dc011f17 	ldw	r16,1148(sp)
1000802c:	dc400404 	addi	r17,sp,16
10008030:	003ecb06 	br	10007b60 <__alt_data_end+0xf8007b60>
10008034:	b809883a 	mov	r4,r23
10008038:	b00b883a 	mov	r5,r22
1000803c:	d9811e04 	addi	r6,sp,1144
10008040:	000d2c80 	call	1000d2c8 <__sprint_r>
10008044:	103b871e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
10008048:	d8c12017 	ldw	r3,1152(sp)
1000804c:	dc011f17 	ldw	r16,1148(sp)
10008050:	da000404 	addi	r8,sp,16
10008054:	003ea206 	br	10007ae0 <__alt_data_end+0xf8007ae0>
10008058:	b809883a 	mov	r4,r23
1000805c:	b00b883a 	mov	r5,r22
10008060:	d9811e04 	addi	r6,sp,1144
10008064:	000d2c80 	call	1000d2c8 <__sprint_r>
10008068:	103b7e1e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
1000806c:	d8c12017 	ldw	r3,1152(sp)
10008070:	dc011f17 	ldw	r16,1148(sp)
10008074:	dc400404 	addi	r17,sp,16
10008078:	003ea406 	br	10007b0c <__alt_data_end+0xf8007b0c>
1000807c:	b809883a 	mov	r4,r23
10008080:	b00b883a 	mov	r5,r22
10008084:	d9811e04 	addi	r6,sp,1144
10008088:	000d2c80 	call	1000d2c8 <__sprint_r>
1000808c:	103b751e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
10008090:	d8c12017 	ldw	r3,1152(sp)
10008094:	da000404 	addi	r8,sp,16
10008098:	003c3706 	br	10007178 <__alt_data_end+0xf8007178>
1000809c:	04a5c83a 	sub	r18,zero,r18
100080a0:	9004c03a 	cmpne	r2,r18,zero
100080a4:	056bc83a 	sub	r21,zero,r21
100080a8:	a8abc83a 	sub	r21,r21,r2
100080ac:	04c00b44 	movi	r19,45
100080b0:	dcc12785 	stb	r19,1182(sp)
100080b4:	da413215 	stw	r9,1224(sp)
100080b8:	00800044 	movi	r2,1
100080bc:	9546b03a 	or	r3,r18,r21
100080c0:	003bb106 	br	10006f88 <__alt_data_end+0xf8006f88>
100080c4:	da013f15 	stw	r8,1276(sp)
100080c8:	da413e15 	stw	r9,1272(sp)
100080cc:	0002d900 	call	10002d90 <__fpclassifyd>
100080d0:	da013f17 	ldw	r8,1276(sp)
100080d4:	da413e17 	ldw	r9,1272(sp)
100080d8:	1000e526 	beq	r2,zero,10008470 <___vfprintf_internal_r+0x1a6c>
100080dc:	04fff7c4 	movi	r19,-33
100080e0:	00bfffc4 	movi	r2,-1
100080e4:	84e6703a 	and	r19,r16,r19
100080e8:	48822926 	beq	r9,r2,10008990 <___vfprintf_internal_r+0x1f8c>
100080ec:	008011c4 	movi	r2,71
100080f0:	98821626 	beq	r19,r2,1000894c <___vfprintf_internal_r+0x1f48>
100080f4:	d9013917 	ldw	r4,1252(sp)
100080f8:	e0c04014 	ori	r3,fp,256
100080fc:	d8c12d15 	stw	r3,1204(sp)
10008100:	20021f16 	blt	r4,zero,10008980 <___vfprintf_internal_r+0x1f7c>
10008104:	dc413917 	ldw	r17,1252(sp)
10008108:	d8012b05 	stb	zero,1196(sp)
1000810c:	00801984 	movi	r2,102
10008110:	80814d26 	beq	r16,r2,10008648 <___vfprintf_internal_r+0x1c44>
10008114:	00801184 	movi	r2,70
10008118:	80814b26 	beq	r16,r2,10008648 <___vfprintf_internal_r+0x1c44>
1000811c:	00801144 	movi	r2,69
10008120:	98821d26 	beq	r19,r2,10008998 <___vfprintf_internal_r+0x1f94>
10008124:	482b883a 	mov	r21,r9
10008128:	d8812604 	addi	r2,sp,1176
1000812c:	d8800115 	stw	r2,4(sp)
10008130:	d9413717 	ldw	r5,1244(sp)
10008134:	d8812504 	addi	r2,sp,1172
10008138:	d8800215 	stw	r2,8(sp)
1000813c:	d8812104 	addi	r2,sp,1156
10008140:	dd400015 	stw	r21,0(sp)
10008144:	d8800315 	stw	r2,12(sp)
10008148:	b809883a 	mov	r4,r23
1000814c:	880d883a 	mov	r6,r17
10008150:	01c00084 	movi	r7,2
10008154:	da013f15 	stw	r8,1276(sp)
10008158:	da413e15 	stw	r9,1272(sp)
1000815c:	0008e7c0 	call	10008e7c <_dtoa_r>
10008160:	d8813115 	stw	r2,1220(sp)
10008164:	008019c4 	movi	r2,103
10008168:	da013f17 	ldw	r8,1276(sp)
1000816c:	da413e17 	ldw	r9,1272(sp)
10008170:	80800226 	beq	r16,r2,1000817c <___vfprintf_internal_r+0x1778>
10008174:	008011c4 	movi	r2,71
10008178:	8081451e 	bne	r16,r2,10008690 <___vfprintf_internal_r+0x1c8c>
1000817c:	e080004c 	andi	r2,fp,1
10008180:	10021e26 	beq	r2,zero,100089fc <___vfprintf_internal_r+0x1ff8>
10008184:	d8c13117 	ldw	r3,1220(sp)
10008188:	1d55883a 	add	r10,r3,r21
1000818c:	d9013717 	ldw	r4,1244(sp)
10008190:	880b883a 	mov	r5,r17
10008194:	000d883a 	mov	r6,zero
10008198:	000f883a 	mov	r7,zero
1000819c:	da013f15 	stw	r8,1276(sp)
100081a0:	da413e15 	stw	r9,1272(sp)
100081a4:	da813d15 	stw	r10,1268(sp)
100081a8:	00053300 	call	10005330 <__eqdf2>
100081ac:	da013f17 	ldw	r8,1276(sp)
100081b0:	da413e17 	ldw	r9,1272(sp)
100081b4:	da813d17 	ldw	r10,1268(sp)
100081b8:	1001a126 	beq	r2,zero,10008840 <___vfprintf_internal_r+0x1e3c>
100081bc:	d8812117 	ldw	r2,1156(sp)
100081c0:	1280062e 	bgeu	r2,r10,100081dc <___vfprintf_internal_r+0x17d8>
100081c4:	01000c04 	movi	r4,48
100081c8:	10c00044 	addi	r3,r2,1
100081cc:	d8c12115 	stw	r3,1156(sp)
100081d0:	11000005 	stb	r4,0(r2)
100081d4:	d8812117 	ldw	r2,1156(sp)
100081d8:	12bffb36 	bltu	r2,r10,100081c8 <__alt_data_end+0xf80081c8>
100081dc:	d8c13117 	ldw	r3,1220(sp)
100081e0:	10c5c83a 	sub	r2,r2,r3
100081e4:	d8813315 	stw	r2,1228(sp)
100081e8:	008011c4 	movi	r2,71
100081ec:	98818926 	beq	r19,r2,10008814 <___vfprintf_internal_r+0x1e10>
100081f0:	00801944 	movi	r2,101
100081f4:	14023c0e 	bge	r2,r16,10008ae8 <___vfprintf_internal_r+0x20e4>
100081f8:	d8c12617 	ldw	r3,1176(sp)
100081fc:	00801984 	movi	r2,102
10008200:	d8c13415 	stw	r3,1232(sp)
10008204:	8081ef26 	beq	r16,r2,100089c4 <___vfprintf_internal_r+0x1fc0>
10008208:	d8c13417 	ldw	r3,1232(sp)
1000820c:	d9013317 	ldw	r4,1228(sp)
10008210:	1901e316 	blt	r3,r4,100089a0 <___vfprintf_internal_r+0x1f9c>
10008214:	e080004c 	andi	r2,fp,1
10008218:	1001f426 	beq	r2,zero,100089ec <___vfprintf_internal_r+0x1fe8>
1000821c:	d8c13417 	ldw	r3,1232(sp)
10008220:	1c400044 	addi	r17,r3,1
10008224:	8839883a 	mov	fp,r17
10008228:	8801e416 	blt	r17,zero,100089bc <___vfprintf_internal_r+0x1fb8>
1000822c:	dd412b07 	ldb	r21,1196(sp)
10008230:	a801701e 	bne	r21,zero,100087f4 <___vfprintf_internal_r+0x1df0>
10008234:	df012b15 	stw	fp,1196(sp)
10008238:	dcc12783 	ldbu	r19,1182(sp)
1000823c:	df012d17 	ldw	fp,1204(sp)
10008240:	d8013215 	stw	zero,1224(sp)
10008244:	dc812d15 	stw	r18,1204(sp)
10008248:	003b6e06 	br	10007004 <__alt_data_end+0xf8007004>
1000824c:	e080040c 	andi	r2,fp,16
10008250:	1000b51e 	bne	r2,zero,10008528 <___vfprintf_internal_r+0x1b24>
10008254:	e080100c 	andi	r2,fp,64
10008258:	10015b26 	beq	r2,zero,100087c8 <___vfprintf_internal_r+0x1dc4>
1000825c:	d9012d17 	ldw	r4,1204(sp)
10008260:	d9412f17 	ldw	r5,1212(sp)
10008264:	20800017 	ldw	r2,0(r4)
10008268:	21000104 	addi	r4,r4,4
1000826c:	d9012d15 	stw	r4,1204(sp)
10008270:	1140000d 	sth	r5,0(r2)
10008274:	003a2006 	br	10006af8 <__alt_data_end+0xf8006af8>
10008278:	e0c0100c 	andi	r3,fp,64
1000827c:	1800a226 	beq	r3,zero,10008508 <___vfprintf_internal_r+0x1b04>
10008280:	d8c12d17 	ldw	r3,1204(sp)
10008284:	1480000b 	ldhu	r18,0(r2)
10008288:	002b883a 	mov	r21,zero
1000828c:	18c00104 	addi	r3,r3,4
10008290:	d8c12d15 	stw	r3,1204(sp)
10008294:	0005883a 	mov	r2,zero
10008298:	9007883a 	mov	r3,r18
1000829c:	003c6906 	br	10007444 <__alt_data_end+0xf8007444>
100082a0:	e0c0100c 	andi	r3,fp,64
100082a4:	18009026 	beq	r3,zero,100084e8 <___vfprintf_internal_r+0x1ae4>
100082a8:	1480000b 	ldhu	r18,0(r2)
100082ac:	d8812d17 	ldw	r2,1204(sp)
100082b0:	002b883a 	mov	r21,zero
100082b4:	9007883a 	mov	r3,r18
100082b8:	10800104 	addi	r2,r2,4
100082bc:	d8812d15 	stw	r2,1204(sp)
100082c0:	00800044 	movi	r2,1
100082c4:	003c5f06 	br	10007444 <__alt_data_end+0xf8007444>
100082c8:	e0c0100c 	andi	r3,fp,64
100082cc:	18008026 	beq	r3,zero,100084d0 <___vfprintf_internal_r+0x1acc>
100082d0:	d9012d17 	ldw	r4,1204(sp)
100082d4:	1480000b 	ldhu	r18,0(r2)
100082d8:	002b883a 	mov	r21,zero
100082dc:	21000104 	addi	r4,r4,4
100082e0:	d9012d15 	stw	r4,1204(sp)
100082e4:	003c7906 	br	100074cc <__alt_data_end+0xf80074cc>
100082e8:	e080100c 	andi	r2,fp,64
100082ec:	10007126 	beq	r2,zero,100084b4 <___vfprintf_internal_r+0x1ab0>
100082f0:	1c80000f 	ldh	r18,0(r3)
100082f4:	d8812d17 	ldw	r2,1204(sp)
100082f8:	902bd7fa 	srai	r21,r18,31
100082fc:	10800104 	addi	r2,r2,4
10008300:	d8812d15 	stw	r2,1204(sp)
10008304:	a805883a 	mov	r2,r21
10008308:	003b1a06 	br	10006f74 <__alt_data_end+0xf8006f74>
1000830c:	e4000007 	ldb	r16,0(fp)
10008310:	e005883a 	mov	r2,fp
10008314:	003a2306 	br	10006ba4 <__alt_data_end+0xf8006ba4>
10008318:	00800084 	movi	r2,2
1000831c:	003c4906 	br	10007444 <__alt_data_end+0xf8007444>
10008320:	01040074 	movhi	r4,4097
10008324:	21096384 	addi	r4,r4,9614
10008328:	d9012c15 	stw	r4,1200(sp)
1000832c:	d9012c17 	ldw	r4,1200(sp)
10008330:	1c47883a 	add	r3,r3,r17
10008334:	10800044 	addi	r2,r2,1
10008338:	41000015 	stw	r4,0(r8)
1000833c:	44400115 	stw	r17,4(r8)
10008340:	d8c12015 	stw	r3,1152(sp)
10008344:	d8811f15 	stw	r2,1148(sp)
10008348:	010001c4 	movi	r4,7
1000834c:	20becc16 	blt	r4,r2,10007e80 <__alt_data_end+0xf8007e80>
10008350:	42000204 	addi	r8,r8,8
10008354:	003ed106 	br	10007e9c <__alt_data_end+0xf8007e9c>
10008358:	01040074 	movhi	r4,4097
1000835c:	21096384 	addi	r4,r4,9614
10008360:	d9012c15 	stw	r4,1200(sp)
10008364:	003ba306 	br	100071f4 <__alt_data_end+0xf80071f4>
10008368:	b809883a 	mov	r4,r23
1000836c:	b00b883a 	mov	r5,r22
10008370:	d9811e04 	addi	r6,sp,1144
10008374:	000d2c80 	call	1000d2c8 <__sprint_r>
10008378:	103aba1e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
1000837c:	d8c12017 	ldw	r3,1152(sp)
10008380:	da000404 	addi	r8,sp,16
10008384:	003d6c06 	br	10007938 <__alt_data_end+0xf8007938>
10008388:	d8811f17 	ldw	r2,1148(sp)
1000838c:	01440074 	movhi	r5,4097
10008390:	01000044 	movi	r4,1
10008394:	18c00044 	addi	r3,r3,1
10008398:	10800044 	addi	r2,r2,1
1000839c:	29496304 	addi	r5,r5,9612
100083a0:	41000115 	stw	r4,4(r8)
100083a4:	41400015 	stw	r5,0(r8)
100083a8:	d8c12015 	stw	r3,1152(sp)
100083ac:	d8811f15 	stw	r2,1148(sp)
100083b0:	010001c4 	movi	r4,7
100083b4:	20806716 	blt	r4,r2,10008554 <___vfprintf_internal_r+0x1b50>
100083b8:	42000204 	addi	r8,r8,8
100083bc:	8000041e 	bne	r16,zero,100083d0 <___vfprintf_internal_r+0x19cc>
100083c0:	d8813317 	ldw	r2,1228(sp)
100083c4:	1000021e 	bne	r2,zero,100083d0 <___vfprintf_internal_r+0x19cc>
100083c8:	e080004c 	andi	r2,fp,1
100083cc:	103ba026 	beq	r2,zero,10007250 <__alt_data_end+0xf8007250>
100083d0:	d9013817 	ldw	r4,1248(sp)
100083d4:	d8811f17 	ldw	r2,1148(sp)
100083d8:	d9413517 	ldw	r5,1236(sp)
100083dc:	1907883a 	add	r3,r3,r4
100083e0:	10800044 	addi	r2,r2,1
100083e4:	41000115 	stw	r4,4(r8)
100083e8:	41400015 	stw	r5,0(r8)
100083ec:	d8c12015 	stw	r3,1152(sp)
100083f0:	d8811f15 	stw	r2,1148(sp)
100083f4:	010001c4 	movi	r4,7
100083f8:	20815716 	blt	r4,r2,10008958 <___vfprintf_internal_r+0x1f54>
100083fc:	42000204 	addi	r8,r8,8
10008400:	0421c83a 	sub	r16,zero,r16
10008404:	0400810e 	bge	zero,r16,1000860c <___vfprintf_internal_r+0x1c08>
10008408:	04400404 	movi	r17,16
1000840c:	8c00bd0e 	bge	r17,r16,10008704 <___vfprintf_internal_r+0x1d00>
10008410:	01440074 	movhi	r5,4097
10008414:	29496384 	addi	r5,r5,9614
10008418:	d9412c15 	stw	r5,1200(sp)
1000841c:	04c001c4 	movi	r19,7
10008420:	00000306 	br	10008430 <___vfprintf_internal_r+0x1a2c>
10008424:	42000204 	addi	r8,r8,8
10008428:	843ffc04 	addi	r16,r16,-16
1000842c:	8c00b80e 	bge	r17,r16,10008710 <___vfprintf_internal_r+0x1d0c>
10008430:	18c00404 	addi	r3,r3,16
10008434:	10800044 	addi	r2,r2,1
10008438:	45000015 	stw	r20,0(r8)
1000843c:	44400115 	stw	r17,4(r8)
10008440:	d8c12015 	stw	r3,1152(sp)
10008444:	d8811f15 	stw	r2,1148(sp)
10008448:	98bff60e 	bge	r19,r2,10008424 <__alt_data_end+0xf8008424>
1000844c:	b809883a 	mov	r4,r23
10008450:	b00b883a 	mov	r5,r22
10008454:	d9811e04 	addi	r6,sp,1144
10008458:	000d2c80 	call	1000d2c8 <__sprint_r>
1000845c:	103a811e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
10008460:	d8c12017 	ldw	r3,1152(sp)
10008464:	d8811f17 	ldw	r2,1148(sp)
10008468:	da000404 	addi	r8,sp,16
1000846c:	003fee06 	br	10008428 <__alt_data_end+0xf8008428>
10008470:	008011c4 	movi	r2,71
10008474:	1400db16 	blt	r2,r16,100087e4 <___vfprintf_internal_r+0x1de0>
10008478:	01040074 	movhi	r4,4097
1000847c:	21095504 	addi	r4,r4,9556
10008480:	d9013115 	stw	r4,1220(sp)
10008484:	00c000c4 	movi	r3,3
10008488:	00bfdfc4 	movi	r2,-129
1000848c:	d8c12b15 	stw	r3,1196(sp)
10008490:	e0b8703a 	and	fp,fp,r2
10008494:	dcc12783 	ldbu	r19,1182(sp)
10008498:	dc812d15 	stw	r18,1204(sp)
1000849c:	1823883a 	mov	r17,r3
100084a0:	d8013215 	stw	zero,1224(sp)
100084a4:	d8013415 	stw	zero,1232(sp)
100084a8:	003ad606 	br	10007004 <__alt_data_end+0xf8007004>
100084ac:	4823883a 	mov	r17,r9
100084b0:	003cc906 	br	100077d8 <__alt_data_end+0xf80077d8>
100084b4:	1c800017 	ldw	r18,0(r3)
100084b8:	d8c12d17 	ldw	r3,1204(sp)
100084bc:	902bd7fa 	srai	r21,r18,31
100084c0:	18c00104 	addi	r3,r3,4
100084c4:	d8c12d15 	stw	r3,1204(sp)
100084c8:	a805883a 	mov	r2,r21
100084cc:	003aa906 	br	10006f74 <__alt_data_end+0xf8006f74>
100084d0:	d9412d17 	ldw	r5,1204(sp)
100084d4:	14800017 	ldw	r18,0(r2)
100084d8:	002b883a 	mov	r21,zero
100084dc:	29400104 	addi	r5,r5,4
100084e0:	d9412d15 	stw	r5,1204(sp)
100084e4:	003bf906 	br	100074cc <__alt_data_end+0xf80074cc>
100084e8:	d8c12d17 	ldw	r3,1204(sp)
100084ec:	14800017 	ldw	r18,0(r2)
100084f0:	002b883a 	mov	r21,zero
100084f4:	18c00104 	addi	r3,r3,4
100084f8:	d8c12d15 	stw	r3,1204(sp)
100084fc:	00800044 	movi	r2,1
10008500:	9007883a 	mov	r3,r18
10008504:	003bcf06 	br	10007444 <__alt_data_end+0xf8007444>
10008508:	d9012d17 	ldw	r4,1204(sp)
1000850c:	14800017 	ldw	r18,0(r2)
10008510:	002b883a 	mov	r21,zero
10008514:	21000104 	addi	r4,r4,4
10008518:	d9012d15 	stw	r4,1204(sp)
1000851c:	0005883a 	mov	r2,zero
10008520:	9007883a 	mov	r3,r18
10008524:	003bc706 	br	10007444 <__alt_data_end+0xf8007444>
10008528:	d9412d17 	ldw	r5,1204(sp)
1000852c:	d8c12f17 	ldw	r3,1212(sp)
10008530:	28800017 	ldw	r2,0(r5)
10008534:	29400104 	addi	r5,r5,4
10008538:	d9412d15 	stw	r5,1204(sp)
1000853c:	10c00015 	stw	r3,0(r2)
10008540:	00396d06 	br	10006af8 <__alt_data_end+0xf8006af8>
10008544:	01040074 	movhi	r4,4097
10008548:	21095304 	addi	r4,r4,9548
1000854c:	d9013115 	stw	r4,1220(sp)
10008550:	003ba206 	br	100073dc <__alt_data_end+0xf80073dc>
10008554:	b809883a 	mov	r4,r23
10008558:	b00b883a 	mov	r5,r22
1000855c:	d9811e04 	addi	r6,sp,1144
10008560:	000d2c80 	call	1000d2c8 <__sprint_r>
10008564:	103a3f1e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
10008568:	dc012617 	ldw	r16,1176(sp)
1000856c:	d8c12017 	ldw	r3,1152(sp)
10008570:	da000404 	addi	r8,sp,16
10008574:	003f9106 	br	100083bc <__alt_data_end+0xf80083bc>
10008578:	e0800044 	addi	r2,fp,1
1000857c:	9cc00814 	ori	r19,r19,32
10008580:	e4000047 	ldb	r16,1(fp)
10008584:	00398706 	br	10006ba4 <__alt_data_end+0xf8006ba4>
10008588:	d8812e17 	ldw	r2,1208(sp)
1000858c:	d8c12d15 	stw	r3,1204(sp)
10008590:	0085c83a 	sub	r2,zero,r2
10008594:	d8812e15 	stw	r2,1208(sp)
10008598:	e005883a 	mov	r2,fp
1000859c:	003a3a06 	br	10006e88 <__alt_data_end+0xf8006e88>
100085a0:	b809883a 	mov	r4,r23
100085a4:	b00b883a 	mov	r5,r22
100085a8:	d9811e04 	addi	r6,sp,1144
100085ac:	000d2c80 	call	1000d2c8 <__sprint_r>
100085b0:	103a2c1e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
100085b4:	d8c12017 	ldw	r3,1152(sp)
100085b8:	da000404 	addi	r8,sp,16
100085bc:	003cf006 	br	10007980 <__alt_data_end+0xf8007980>
100085c0:	d8c12817 	ldw	r3,1184(sp)
100085c4:	d9013117 	ldw	r4,1220(sp)
100085c8:	1923c83a 	sub	r17,r3,r4
100085cc:	003a8806 	br	10006ff0 <__alt_data_end+0xf8006ff0>
100085d0:	da013f15 	stw	r8,1276(sp)
100085d4:	000d1340 	call	1000d134 <strlen>
100085d8:	1023883a 	mov	r17,r2
100085dc:	da013f17 	ldw	r8,1276(sp)
100085e0:	883c7f0e 	bge	r17,zero,100077e0 <__alt_data_end+0xf80077e0>
100085e4:	0005883a 	mov	r2,zero
100085e8:	003c7d06 	br	100077e0 <__alt_data_end+0xf80077e0>
100085ec:	b809883a 	mov	r4,r23
100085f0:	b00b883a 	mov	r5,r22
100085f4:	d9811e04 	addi	r6,sp,1144
100085f8:	000d2c80 	call	1000d2c8 <__sprint_r>
100085fc:	103a191e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
10008600:	d8c12017 	ldw	r3,1152(sp)
10008604:	d8811f17 	ldw	r2,1148(sp)
10008608:	da000404 	addi	r8,sp,16
1000860c:	d9413317 	ldw	r5,1228(sp)
10008610:	d9013117 	ldw	r4,1220(sp)
10008614:	10800044 	addi	r2,r2,1
10008618:	28c7883a 	add	r3,r5,r3
1000861c:	41000015 	stw	r4,0(r8)
10008620:	41400115 	stw	r5,4(r8)
10008624:	d8c12015 	stw	r3,1152(sp)
10008628:	d8811f15 	stw	r2,1148(sp)
1000862c:	010001c4 	movi	r4,7
10008630:	20bb060e 	bge	r4,r2,1000724c <__alt_data_end+0xf800724c>
10008634:	003d6206 	br	10007bc0 <__alt_data_end+0xf8007bc0>
10008638:	01040074 	movhi	r4,4097
1000863c:	21096784 	addi	r4,r4,9630
10008640:	d9013615 	stw	r4,1240(sp)
10008644:	003aa306 	br	100070d4 <__alt_data_end+0xf80070d4>
10008648:	d8812604 	addi	r2,sp,1176
1000864c:	d8800115 	stw	r2,4(sp)
10008650:	d9413717 	ldw	r5,1244(sp)
10008654:	d8812504 	addi	r2,sp,1172
10008658:	d8800215 	stw	r2,8(sp)
1000865c:	d8812104 	addi	r2,sp,1156
10008660:	da400015 	stw	r9,0(sp)
10008664:	d8800315 	stw	r2,12(sp)
10008668:	b809883a 	mov	r4,r23
1000866c:	880d883a 	mov	r6,r17
10008670:	01c000c4 	movi	r7,3
10008674:	da013f15 	stw	r8,1276(sp)
10008678:	da413e15 	stw	r9,1272(sp)
1000867c:	0008e7c0 	call	10008e7c <_dtoa_r>
10008680:	da413e17 	ldw	r9,1272(sp)
10008684:	da013f17 	ldw	r8,1276(sp)
10008688:	d8813115 	stw	r2,1220(sp)
1000868c:	482b883a 	mov	r21,r9
10008690:	d8c13117 	ldw	r3,1220(sp)
10008694:	00801184 	movi	r2,70
10008698:	1d55883a 	add	r10,r3,r21
1000869c:	98bebb1e 	bne	r19,r2,1000818c <__alt_data_end+0xf800818c>
100086a0:	19000007 	ldb	r4,0(r3)
100086a4:	00800c04 	movi	r2,48
100086a8:	2080dd26 	beq	r4,r2,10008a20 <___vfprintf_internal_r+0x201c>
100086ac:	d8c12617 	ldw	r3,1176(sp)
100086b0:	50d5883a 	add	r10,r10,r3
100086b4:	003eb506 	br	1000818c <__alt_data_end+0xf800818c>
100086b8:	0023883a 	mov	r17,zero
100086bc:	003d9b06 	br	10007d2c <__alt_data_end+0xf8007d2c>
100086c0:	b809883a 	mov	r4,r23
100086c4:	b00b883a 	mov	r5,r22
100086c8:	d9811e04 	addi	r6,sp,1144
100086cc:	000d2c80 	call	1000d2c8 <__sprint_r>
100086d0:	1039e41e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
100086d4:	d8c12017 	ldw	r3,1152(sp)
100086d8:	da000404 	addi	r8,sp,16
100086dc:	003d9206 	br	10007d28 <__alt_data_end+0xf8007d28>
100086e0:	b809883a 	mov	r4,r23
100086e4:	b00b883a 	mov	r5,r22
100086e8:	d9811e04 	addi	r6,sp,1144
100086ec:	000d2c80 	call	1000d2c8 <__sprint_r>
100086f0:	1039dc1e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
100086f4:	d8812617 	ldw	r2,1176(sp)
100086f8:	d8c12017 	ldw	r3,1152(sp)
100086fc:	da000404 	addi	r8,sp,16
10008700:	003dfb06 	br	10007ef0 <__alt_data_end+0xf8007ef0>
10008704:	01040074 	movhi	r4,4097
10008708:	21096384 	addi	r4,r4,9614
1000870c:	d9012c15 	stw	r4,1200(sp)
10008710:	d9012c17 	ldw	r4,1200(sp)
10008714:	1c07883a 	add	r3,r3,r16
10008718:	10800044 	addi	r2,r2,1
1000871c:	41000015 	stw	r4,0(r8)
10008720:	44000115 	stw	r16,4(r8)
10008724:	d8c12015 	stw	r3,1152(sp)
10008728:	d8811f15 	stw	r2,1148(sp)
1000872c:	010001c4 	movi	r4,7
10008730:	20bfae16 	blt	r4,r2,100085ec <__alt_data_end+0xf80085ec>
10008734:	42000204 	addi	r8,r8,8
10008738:	003fb406 	br	1000860c <__alt_data_end+0xf800860c>
1000873c:	0021883a 	mov	r16,zero
10008740:	003dfd06 	br	10007f38 <__alt_data_end+0xf8007f38>
10008744:	01440074 	movhi	r5,4097
10008748:	29496784 	addi	r5,r5,9630
1000874c:	d9413615 	stw	r5,1240(sp)
10008750:	003ae306 	br	100072e0 <__alt_data_end+0xf80072e0>
10008754:	b809883a 	mov	r4,r23
10008758:	b00b883a 	mov	r5,r22
1000875c:	d9811e04 	addi	r6,sp,1144
10008760:	000d2c80 	call	1000d2c8 <__sprint_r>
10008764:	1039bf1e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
10008768:	d8812617 	ldw	r2,1176(sp)
1000876c:	d9413317 	ldw	r5,1228(sp)
10008770:	d8c12017 	ldw	r3,1152(sp)
10008774:	da000404 	addi	r8,sp,16
10008778:	2885c83a 	sub	r2,r5,r2
1000877c:	003ded06 	br	10007f34 <__alt_data_end+0xf8007f34>
10008780:	00800184 	movi	r2,6
10008784:	1240012e 	bgeu	r2,r9,1000878c <___vfprintf_internal_r+0x1d88>
10008788:	1013883a 	mov	r9,r2
1000878c:	4823883a 	mov	r17,r9
10008790:	4805883a 	mov	r2,r9
10008794:	4800b216 	blt	r9,zero,10008a60 <___vfprintf_internal_r+0x205c>
10008798:	01440074 	movhi	r5,4097
1000879c:	29496104 	addi	r5,r5,9604
100087a0:	d8812b15 	stw	r2,1196(sp)
100087a4:	dc812d15 	stw	r18,1204(sp)
100087a8:	d8013215 	stw	zero,1224(sp)
100087ac:	d8013415 	stw	zero,1232(sp)
100087b0:	d9413115 	stw	r5,1220(sp)
100087b4:	0005883a 	mov	r2,zero
100087b8:	003a1906 	br	10007020 <__alt_data_end+0xf8007020>
100087bc:	04c00b44 	movi	r19,45
100087c0:	dcc12785 	stb	r19,1182(sp)
100087c4:	003b0006 	br	100073c8 <__alt_data_end+0xf80073c8>
100087c8:	d8c12d17 	ldw	r3,1204(sp)
100087cc:	d9012f17 	ldw	r4,1212(sp)
100087d0:	18800017 	ldw	r2,0(r3)
100087d4:	18c00104 	addi	r3,r3,4
100087d8:	d8c12d15 	stw	r3,1204(sp)
100087dc:	11000015 	stw	r4,0(r2)
100087e0:	0038c506 	br	10006af8 <__alt_data_end+0xf8006af8>
100087e4:	01440074 	movhi	r5,4097
100087e8:	29495604 	addi	r5,r5,9560
100087ec:	d9413115 	stw	r5,1220(sp)
100087f0:	003f2406 	br	10008484 <__alt_data_end+0xf8008484>
100087f4:	00800b44 	movi	r2,45
100087f8:	d8812785 	stb	r2,1182(sp)
100087fc:	df012b15 	stw	fp,1196(sp)
10008800:	d8013215 	stw	zero,1224(sp)
10008804:	df012d17 	ldw	fp,1204(sp)
10008808:	00800b44 	movi	r2,45
1000880c:	dc812d15 	stw	r18,1204(sp)
10008810:	003a0006 	br	10007014 <__alt_data_end+0xf8007014>
10008814:	d8c12617 	ldw	r3,1176(sp)
10008818:	00bfff44 	movi	r2,-3
1000881c:	18800a16 	blt	r3,r2,10008848 <___vfprintf_internal_r+0x1e44>
10008820:	48c00916 	blt	r9,r3,10008848 <___vfprintf_internal_r+0x1e44>
10008824:	d8c13415 	stw	r3,1232(sp)
10008828:	040019c4 	movi	r16,103
1000882c:	003e7606 	br	10008208 <__alt_data_end+0xf8008208>
10008830:	01040074 	movhi	r4,4097
10008834:	21096384 	addi	r4,r4,9614
10008838:	d9012c15 	stw	r4,1200(sp)
1000883c:	003c8e06 	br	10007a78 <__alt_data_end+0xf8007a78>
10008840:	5005883a 	mov	r2,r10
10008844:	003e6506 	br	100081dc <__alt_data_end+0xf80081dc>
10008848:	843fff84 	addi	r16,r16,-2
1000884c:	1d7fffc4 	addi	r21,r3,-1
10008850:	dd412615 	stw	r21,1176(sp)
10008854:	dc0122c5 	stb	r16,1163(sp)
10008858:	a8009216 	blt	r21,zero,10008aa4 <___vfprintf_internal_r+0x20a0>
1000885c:	00800ac4 	movi	r2,43
10008860:	d8812305 	stb	r2,1164(sp)
10008864:	00800244 	movi	r2,9
10008868:	1540660e 	bge	r2,r21,10008a04 <___vfprintf_internal_r+0x2000>
1000886c:	dcc122c4 	addi	r19,sp,1163
10008870:	dc012c15 	stw	r16,1200(sp)
10008874:	4023883a 	mov	r17,r8
10008878:	9821883a 	mov	r16,r19
1000887c:	a809883a 	mov	r4,r21
10008880:	01400284 	movi	r5,10
10008884:	00040800 	call	10004080 <__modsi3>
10008888:	10800c04 	addi	r2,r2,48
1000888c:	843fffc4 	addi	r16,r16,-1
10008890:	a809883a 	mov	r4,r21
10008894:	01400284 	movi	r5,10
10008898:	80800005 	stb	r2,0(r16)
1000889c:	000402c0 	call	1000402c <__divsi3>
100088a0:	01000244 	movi	r4,9
100088a4:	102b883a 	mov	r21,r2
100088a8:	20bff416 	blt	r4,r2,1000887c <__alt_data_end+0xf800887c>
100088ac:	8811883a 	mov	r8,r17
100088b0:	10800c04 	addi	r2,r2,48
100088b4:	8023883a 	mov	r17,r16
100088b8:	897fffc4 	addi	r5,r17,-1
100088bc:	88bfffc5 	stb	r2,-1(r17)
100088c0:	dc012c17 	ldw	r16,1200(sp)
100088c4:	2cc08a2e 	bgeu	r5,r19,10008af0 <___vfprintf_internal_r+0x20ec>
100088c8:	d9812384 	addi	r6,sp,1166
100088cc:	344dc83a 	sub	r6,r6,r17
100088d0:	d9012344 	addi	r4,sp,1165
100088d4:	998d883a 	add	r6,r19,r6
100088d8:	00000106 	br	100088e0 <___vfprintf_internal_r+0x1edc>
100088dc:	28800003 	ldbu	r2,0(r5)
100088e0:	20800005 	stb	r2,0(r4)
100088e4:	21000044 	addi	r4,r4,1
100088e8:	29400044 	addi	r5,r5,1
100088ec:	21bffb1e 	bne	r4,r6,100088dc <__alt_data_end+0xf80088dc>
100088f0:	d8812304 	addi	r2,sp,1164
100088f4:	1445c83a 	sub	r2,r2,r17
100088f8:	d9412344 	addi	r5,sp,1165
100088fc:	2885883a 	add	r2,r5,r2
10008900:	14e7c83a 	sub	r19,r2,r19
10008904:	d8813317 	ldw	r2,1228(sp)
10008908:	d8c13317 	ldw	r3,1228(sp)
1000890c:	dcc13a15 	stw	r19,1256(sp)
10008910:	14e3883a 	add	r17,r2,r19
10008914:	00800044 	movi	r2,1
10008918:	10c0550e 	bge	r2,r3,10008a70 <___vfprintf_internal_r+0x206c>
1000891c:	8c400044 	addi	r17,r17,1
10008920:	8839883a 	mov	fp,r17
10008924:	88005016 	blt	r17,zero,10008a68 <___vfprintf_internal_r+0x2064>
10008928:	d8013415 	stw	zero,1232(sp)
1000892c:	003e3f06 	br	1000822c <__alt_data_end+0xf800822c>
10008930:	da412b15 	stw	r9,1196(sp)
10008934:	dcc12783 	ldbu	r19,1182(sp)
10008938:	4823883a 	mov	r17,r9
1000893c:	dc812d15 	stw	r18,1204(sp)
10008940:	d8013215 	stw	zero,1224(sp)
10008944:	d8013415 	stw	zero,1232(sp)
10008948:	0039ae06 	br	10007004 <__alt_data_end+0xf8007004>
1000894c:	483de91e 	bne	r9,zero,100080f4 <__alt_data_end+0xf80080f4>
10008950:	8813883a 	mov	r9,r17
10008954:	003de706 	br	100080f4 <__alt_data_end+0xf80080f4>
10008958:	b809883a 	mov	r4,r23
1000895c:	b00b883a 	mov	r5,r22
10008960:	d9811e04 	addi	r6,sp,1144
10008964:	000d2c80 	call	1000d2c8 <__sprint_r>
10008968:	10393e1e 	bne	r2,zero,10006e64 <__alt_data_end+0xf8006e64>
1000896c:	dc012617 	ldw	r16,1176(sp)
10008970:	d8c12017 	ldw	r3,1152(sp)
10008974:	d8811f17 	ldw	r2,1148(sp)
10008978:	da000404 	addi	r8,sp,16
1000897c:	003ea006 	br	10008400 <__alt_data_end+0xf8008400>
10008980:	00c00b44 	movi	r3,45
10008984:	2460003c 	xorhi	r17,r4,32768
10008988:	d8c12b05 	stb	r3,1196(sp)
1000898c:	003ddf06 	br	1000810c <__alt_data_end+0xf800810c>
10008990:	02400184 	movi	r9,6
10008994:	003dd706 	br	100080f4 <__alt_data_end+0xf80080f4>
10008998:	4d400044 	addi	r21,r9,1
1000899c:	003de206 	br	10008128 <__alt_data_end+0xf8008128>
100089a0:	d8c13417 	ldw	r3,1232(sp)
100089a4:	00c0490e 	bge	zero,r3,10008acc <___vfprintf_internal_r+0x20c8>
100089a8:	04400044 	movi	r17,1
100089ac:	d9013317 	ldw	r4,1228(sp)
100089b0:	8923883a 	add	r17,r17,r4
100089b4:	8839883a 	mov	fp,r17
100089b8:	883e1c0e 	bge	r17,zero,1000822c <__alt_data_end+0xf800822c>
100089bc:	0039883a 	mov	fp,zero
100089c0:	003e1a06 	br	1000822c <__alt_data_end+0xf800822c>
100089c4:	00c03b0e 	bge	zero,r3,10008ab4 <___vfprintf_internal_r+0x20b0>
100089c8:	4800021e 	bne	r9,zero,100089d4 <___vfprintf_internal_r+0x1fd0>
100089cc:	e080004c 	andi	r2,fp,1
100089d0:	10000626 	beq	r2,zero,100089ec <___vfprintf_internal_r+0x1fe8>
100089d4:	d8c13417 	ldw	r3,1232(sp)
100089d8:	4a400044 	addi	r9,r9,1
100089dc:	1a63883a 	add	r17,r3,r9
100089e0:	8839883a 	mov	fp,r17
100089e4:	883e110e 	bge	r17,zero,1000822c <__alt_data_end+0xf800822c>
100089e8:	003ff406 	br	100089bc <__alt_data_end+0xf80089bc>
100089ec:	1839883a 	mov	fp,r3
100089f0:	18004116 	blt	r3,zero,10008af8 <___vfprintf_internal_r+0x20f4>
100089f4:	dc413417 	ldw	r17,1232(sp)
100089f8:	003e0c06 	br	1000822c <__alt_data_end+0xf800822c>
100089fc:	d8812117 	ldw	r2,1156(sp)
10008a00:	003df606 	br	100081dc <__alt_data_end+0xf80081dc>
10008a04:	00800c04 	movi	r2,48
10008a08:	a8c00c04 	addi	r3,r21,48
10008a0c:	d8812345 	stb	r2,1165(sp)
10008a10:	d8c12385 	stb	r3,1166(sp)
10008a14:	d88123c4 	addi	r2,sp,1167
10008a18:	dcc122c4 	addi	r19,sp,1163
10008a1c:	003fb806 	br	10008900 <__alt_data_end+0xf8008900>
10008a20:	d9013717 	ldw	r4,1244(sp)
10008a24:	880b883a 	mov	r5,r17
10008a28:	000d883a 	mov	r6,zero
10008a2c:	000f883a 	mov	r7,zero
10008a30:	da013f15 	stw	r8,1276(sp)
10008a34:	da413e15 	stw	r9,1272(sp)
10008a38:	da813d15 	stw	r10,1268(sp)
10008a3c:	00053300 	call	10005330 <__eqdf2>
10008a40:	da013f17 	ldw	r8,1276(sp)
10008a44:	da413e17 	ldw	r9,1272(sp)
10008a48:	da813d17 	ldw	r10,1268(sp)
10008a4c:	103f1726 	beq	r2,zero,100086ac <__alt_data_end+0xf80086ac>
10008a50:	00800044 	movi	r2,1
10008a54:	1547c83a 	sub	r3,r2,r21
10008a58:	d8c12615 	stw	r3,1176(sp)
10008a5c:	003f1406 	br	100086b0 <__alt_data_end+0xf80086b0>
10008a60:	0005883a 	mov	r2,zero
10008a64:	003f4c06 	br	10008798 <__alt_data_end+0xf8008798>
10008a68:	0039883a 	mov	fp,zero
10008a6c:	003fae06 	br	10008928 <__alt_data_end+0xf8008928>
10008a70:	e084703a 	and	r2,fp,r2
10008a74:	103faa26 	beq	r2,zero,10008920 <__alt_data_end+0xf8008920>
10008a78:	003fa806 	br	1000891c <__alt_data_end+0xf800891c>
10008a7c:	d9412d17 	ldw	r5,1204(sp)
10008a80:	2a400017 	ldw	r9,0(r5)
10008a84:	28c00104 	addi	r3,r5,4
10008a88:	d8c12d15 	stw	r3,1204(sp)
10008a8c:	483ebc0e 	bge	r9,zero,10008580 <__alt_data_end+0xf8008580>
10008a90:	027fffc4 	movi	r9,-1
10008a94:	e4000047 	ldb	r16,1(fp)
10008a98:	00384206 	br	10006ba4 <__alt_data_end+0xf8006ba4>
10008a9c:	043fffc4 	movi	r16,-1
10008aa0:	0038ce06 	br	10006ddc <__alt_data_end+0xf8006ddc>
10008aa4:	00800b44 	movi	r2,45
10008aa8:	056bc83a 	sub	r21,zero,r21
10008aac:	d8812305 	stb	r2,1164(sp)
10008ab0:	003f6c06 	br	10008864 <__alt_data_end+0xf8008864>
10008ab4:	4800081e 	bne	r9,zero,10008ad8 <___vfprintf_internal_r+0x20d4>
10008ab8:	e080004c 	andi	r2,fp,1
10008abc:	1000061e 	bne	r2,zero,10008ad8 <___vfprintf_internal_r+0x20d4>
10008ac0:	07000044 	movi	fp,1
10008ac4:	e023883a 	mov	r17,fp
10008ac8:	003dd806 	br	1000822c <__alt_data_end+0xf800822c>
10008acc:	04400084 	movi	r17,2
10008ad0:	88e3c83a 	sub	r17,r17,r3
10008ad4:	003fb506 	br	100089ac <__alt_data_end+0xf80089ac>
10008ad8:	4c400084 	addi	r17,r9,2
10008adc:	8839883a 	mov	fp,r17
10008ae0:	883dd20e 	bge	r17,zero,1000822c <__alt_data_end+0xf800822c>
10008ae4:	003fb506 	br	100089bc <__alt_data_end+0xf80089bc>
10008ae8:	d8c12617 	ldw	r3,1176(sp)
10008aec:	003f5706 	br	1000884c <__alt_data_end+0xf800884c>
10008af0:	d8812344 	addi	r2,sp,1165
10008af4:	003f8206 	br	10008900 <__alt_data_end+0xf8008900>
10008af8:	0039883a 	mov	fp,zero
10008afc:	003fbd06 	br	100089f4 <__alt_data_end+0xf80089f4>

10008b00 <__vfprintf_internal>:
10008b00:	2007883a 	mov	r3,r4
10008b04:	01040074 	movhi	r4,4097
10008b08:	21107e04 	addi	r4,r4,16888
10008b0c:	21000017 	ldw	r4,0(r4)
10008b10:	2805883a 	mov	r2,r5
10008b14:	300f883a 	mov	r7,r6
10008b18:	180b883a 	mov	r5,r3
10008b1c:	100d883a 	mov	r6,r2
10008b20:	0006a041 	jmpi	10006a04 <___vfprintf_internal_r>

10008b24 <__swsetup_r>:
10008b24:	00840074 	movhi	r2,4097
10008b28:	defffd04 	addi	sp,sp,-12
10008b2c:	10907e04 	addi	r2,r2,16888
10008b30:	dc400115 	stw	r17,4(sp)
10008b34:	2023883a 	mov	r17,r4
10008b38:	11000017 	ldw	r4,0(r2)
10008b3c:	dc000015 	stw	r16,0(sp)
10008b40:	dfc00215 	stw	ra,8(sp)
10008b44:	2821883a 	mov	r16,r5
10008b48:	20000226 	beq	r4,zero,10008b54 <__swsetup_r+0x30>
10008b4c:	20c00e17 	ldw	r3,56(r4)
10008b50:	18002e26 	beq	r3,zero,10008c0c <__swsetup_r+0xe8>
10008b54:	8080030b 	ldhu	r2,12(r16)
10008b58:	10c0020c 	andi	r3,r2,8
10008b5c:	100d883a 	mov	r6,r2
10008b60:	18000f26 	beq	r3,zero,10008ba0 <__swsetup_r+0x7c>
10008b64:	80c00417 	ldw	r3,16(r16)
10008b68:	18001526 	beq	r3,zero,10008bc0 <__swsetup_r+0x9c>
10008b6c:	1100004c 	andi	r4,r2,1
10008b70:	20001c1e 	bne	r4,zero,10008be4 <__swsetup_r+0xc0>
10008b74:	1080008c 	andi	r2,r2,2
10008b78:	1000261e 	bne	r2,zero,10008c14 <__swsetup_r+0xf0>
10008b7c:	80800517 	ldw	r2,20(r16)
10008b80:	80800215 	stw	r2,8(r16)
10008b84:	18001c26 	beq	r3,zero,10008bf8 <__swsetup_r+0xd4>
10008b88:	0005883a 	mov	r2,zero
10008b8c:	dfc00217 	ldw	ra,8(sp)
10008b90:	dc400117 	ldw	r17,4(sp)
10008b94:	dc000017 	ldw	r16,0(sp)
10008b98:	dec00304 	addi	sp,sp,12
10008b9c:	f800283a 	ret
10008ba0:	3080040c 	andi	r2,r6,16
10008ba4:	10001726 	beq	r2,zero,10008c04 <__swsetup_r+0xe0>
10008ba8:	3080010c 	andi	r2,r6,4
10008bac:	10001b1e 	bne	r2,zero,10008c1c <__swsetup_r+0xf8>
10008bb0:	80c00417 	ldw	r3,16(r16)
10008bb4:	30800214 	ori	r2,r6,8
10008bb8:	8080030d 	sth	r2,12(r16)
10008bbc:	183feb1e 	bne	r3,zero,10008b6c <__alt_data_end+0xf8008b6c>
10008bc0:	1140a00c 	andi	r5,r2,640
10008bc4:	01008004 	movi	r4,512
10008bc8:	293fe826 	beq	r5,r4,10008b6c <__alt_data_end+0xf8008b6c>
10008bcc:	8809883a 	mov	r4,r17
10008bd0:	800b883a 	mov	r5,r16
10008bd4:	000b2140 	call	1000b214 <__smakebuf_r>
10008bd8:	8080030b 	ldhu	r2,12(r16)
10008bdc:	80c00417 	ldw	r3,16(r16)
10008be0:	003fe206 	br	10008b6c <__alt_data_end+0xf8008b6c>
10008be4:	80800517 	ldw	r2,20(r16)
10008be8:	80000215 	stw	zero,8(r16)
10008bec:	0085c83a 	sub	r2,zero,r2
10008bf0:	80800615 	stw	r2,24(r16)
10008bf4:	183fe41e 	bne	r3,zero,10008b88 <__alt_data_end+0xf8008b88>
10008bf8:	8080030b 	ldhu	r2,12(r16)
10008bfc:	1080200c 	andi	r2,r2,128
10008c00:	103fe226 	beq	r2,zero,10008b8c <__alt_data_end+0xf8008b8c>
10008c04:	00bfffc4 	movi	r2,-1
10008c08:	003fe006 	br	10008b8c <__alt_data_end+0xf8008b8c>
10008c0c:	000ab600 	call	1000ab60 <__sinit>
10008c10:	003fd006 	br	10008b54 <__alt_data_end+0xf8008b54>
10008c14:	0005883a 	mov	r2,zero
10008c18:	003fd906 	br	10008b80 <__alt_data_end+0xf8008b80>
10008c1c:	81400c17 	ldw	r5,48(r16)
10008c20:	28000626 	beq	r5,zero,10008c3c <__swsetup_r+0x118>
10008c24:	80801004 	addi	r2,r16,64
10008c28:	28800326 	beq	r5,r2,10008c38 <__swsetup_r+0x114>
10008c2c:	8809883a 	mov	r4,r17
10008c30:	000acd40 	call	1000acd4 <_free_r>
10008c34:	8180030b 	ldhu	r6,12(r16)
10008c38:	80000c15 	stw	zero,48(r16)
10008c3c:	80c00417 	ldw	r3,16(r16)
10008c40:	00bff6c4 	movi	r2,-37
10008c44:	118c703a 	and	r6,r2,r6
10008c48:	80000115 	stw	zero,4(r16)
10008c4c:	80c00015 	stw	r3,0(r16)
10008c50:	003fd806 	br	10008bb4 <__alt_data_end+0xf8008bb4>

10008c54 <quorem>:
10008c54:	defff204 	addi	sp,sp,-56
10008c58:	ddc00b15 	stw	r23,44(sp)
10008c5c:	20800417 	ldw	r2,16(r4)
10008c60:	2dc00417 	ldw	r23,16(r5)
10008c64:	dfc00d15 	stw	ra,52(sp)
10008c68:	df000c15 	stw	fp,48(sp)
10008c6c:	dd800a15 	stw	r22,40(sp)
10008c70:	dd400915 	stw	r21,36(sp)
10008c74:	dd000815 	stw	r20,32(sp)
10008c78:	dcc00715 	stw	r19,28(sp)
10008c7c:	dc800615 	stw	r18,24(sp)
10008c80:	dc400515 	stw	r17,20(sp)
10008c84:	dc000415 	stw	r16,16(sp)
10008c88:	15c07a16 	blt	r2,r23,10008e74 <quorem+0x220>
10008c8c:	bdffffc4 	addi	r23,r23,-1
10008c90:	bde9883a 	add	r20,r23,r23
10008c94:	28c00504 	addi	r3,r5,20
10008c98:	a529883a 	add	r20,r20,r20
10008c9c:	1d39883a 	add	fp,r3,r20
10008ca0:	24c00504 	addi	r19,r4,20
10008ca4:	d9400215 	stw	r5,8(sp)
10008ca8:	9d29883a 	add	r20,r19,r20
10008cac:	e1400017 	ldw	r5,0(fp)
10008cb0:	d9000015 	stw	r4,0(sp)
10008cb4:	a1000017 	ldw	r4,0(r20)
10008cb8:	29400044 	addi	r5,r5,1
10008cbc:	d8c00115 	stw	r3,4(sp)
10008cc0:	dd000315 	stw	r20,12(sp)
10008cc4:	00040dc0 	call	100040dc <__udivsi3>
10008cc8:	1025883a 	mov	r18,r2
10008ccc:	10003026 	beq	r2,zero,10008d90 <quorem+0x13c>
10008cd0:	dc400117 	ldw	r17,4(sp)
10008cd4:	9829883a 	mov	r20,r19
10008cd8:	002d883a 	mov	r22,zero
10008cdc:	0021883a 	mov	r16,zero
10008ce0:	8d400017 	ldw	r21,0(r17)
10008ce4:	900b883a 	mov	r5,r18
10008ce8:	8c400104 	addi	r17,r17,4
10008cec:	a93fffcc 	andi	r4,r21,65535
10008cf0:	00040ec0 	call	100040ec <__mulsi3>
10008cf4:	a808d43a 	srli	r4,r21,16
10008cf8:	900b883a 	mov	r5,r18
10008cfc:	b0ad883a 	add	r22,r22,r2
10008d00:	00040ec0 	call	100040ec <__mulsi3>
10008d04:	a1000017 	ldw	r4,0(r20)
10008d08:	b00cd43a 	srli	r6,r22,16
10008d0c:	b0ffffcc 	andi	r3,r22,65535
10008d10:	217fffcc 	andi	r5,r4,65535
10008d14:	2c21883a 	add	r16,r5,r16
10008d18:	80c7c83a 	sub	r3,r16,r3
10008d1c:	2008d43a 	srli	r4,r4,16
10008d20:	3085883a 	add	r2,r6,r2
10008d24:	1821d43a 	srai	r16,r3,16
10008d28:	117fffcc 	andi	r5,r2,65535
10008d2c:	2149c83a 	sub	r4,r4,r5
10008d30:	2421883a 	add	r16,r4,r16
10008d34:	8008943a 	slli	r4,r16,16
10008d38:	18ffffcc 	andi	r3,r3,65535
10008d3c:	102cd43a 	srli	r22,r2,16
10008d40:	20c8b03a 	or	r4,r4,r3
10008d44:	a1000015 	stw	r4,0(r20)
10008d48:	8021d43a 	srai	r16,r16,16
10008d4c:	a5000104 	addi	r20,r20,4
10008d50:	e47fe32e 	bgeu	fp,r17,10008ce0 <__alt_data_end+0xf8008ce0>
10008d54:	d8c00317 	ldw	r3,12(sp)
10008d58:	18800017 	ldw	r2,0(r3)
10008d5c:	10000c1e 	bne	r2,zero,10008d90 <quorem+0x13c>
10008d60:	18bfff04 	addi	r2,r3,-4
10008d64:	9880082e 	bgeu	r19,r2,10008d88 <quorem+0x134>
10008d68:	18ffff17 	ldw	r3,-4(r3)
10008d6c:	18000326 	beq	r3,zero,10008d7c <quorem+0x128>
10008d70:	00000506 	br	10008d88 <quorem+0x134>
10008d74:	10c00017 	ldw	r3,0(r2)
10008d78:	1800031e 	bne	r3,zero,10008d88 <quorem+0x134>
10008d7c:	10bfff04 	addi	r2,r2,-4
10008d80:	bdffffc4 	addi	r23,r23,-1
10008d84:	98bffb36 	bltu	r19,r2,10008d74 <__alt_data_end+0xf8008d74>
10008d88:	d8c00017 	ldw	r3,0(sp)
10008d8c:	1dc00415 	stw	r23,16(r3)
10008d90:	d9000017 	ldw	r4,0(sp)
10008d94:	d9400217 	ldw	r5,8(sp)
10008d98:	000c8340 	call	1000c834 <__mcmp>
10008d9c:	10002816 	blt	r2,zero,10008e40 <quorem+0x1ec>
10008da0:	dc400117 	ldw	r17,4(sp)
10008da4:	94800044 	addi	r18,r18,1
10008da8:	980d883a 	mov	r6,r19
10008dac:	0007883a 	mov	r3,zero
10008db0:	31000017 	ldw	r4,0(r6)
10008db4:	89400017 	ldw	r5,0(r17)
10008db8:	31800104 	addi	r6,r6,4
10008dbc:	20bfffcc 	andi	r2,r4,65535
10008dc0:	10c7883a 	add	r3,r2,r3
10008dc4:	28bfffcc 	andi	r2,r5,65535
10008dc8:	1885c83a 	sub	r2,r3,r2
10008dcc:	280ad43a 	srli	r5,r5,16
10008dd0:	2008d43a 	srli	r4,r4,16
10008dd4:	1007d43a 	srai	r3,r2,16
10008dd8:	10bfffcc 	andi	r2,r2,65535
10008ddc:	2149c83a 	sub	r4,r4,r5
10008de0:	20c9883a 	add	r4,r4,r3
10008de4:	200a943a 	slli	r5,r4,16
10008de8:	8c400104 	addi	r17,r17,4
10008dec:	2007d43a 	srai	r3,r4,16
10008df0:	2884b03a 	or	r2,r5,r2
10008df4:	30bfff15 	stw	r2,-4(r6)
10008df8:	e47fed2e 	bgeu	fp,r17,10008db0 <__alt_data_end+0xf8008db0>
10008dfc:	bdc5883a 	add	r2,r23,r23
10008e00:	1085883a 	add	r2,r2,r2
10008e04:	9887883a 	add	r3,r19,r2
10008e08:	18800017 	ldw	r2,0(r3)
10008e0c:	10000c1e 	bne	r2,zero,10008e40 <quorem+0x1ec>
10008e10:	18bfff04 	addi	r2,r3,-4
10008e14:	9880082e 	bgeu	r19,r2,10008e38 <quorem+0x1e4>
10008e18:	18ffff17 	ldw	r3,-4(r3)
10008e1c:	18000326 	beq	r3,zero,10008e2c <quorem+0x1d8>
10008e20:	00000506 	br	10008e38 <quorem+0x1e4>
10008e24:	10c00017 	ldw	r3,0(r2)
10008e28:	1800031e 	bne	r3,zero,10008e38 <quorem+0x1e4>
10008e2c:	10bfff04 	addi	r2,r2,-4
10008e30:	bdffffc4 	addi	r23,r23,-1
10008e34:	98bffb36 	bltu	r19,r2,10008e24 <__alt_data_end+0xf8008e24>
10008e38:	d8c00017 	ldw	r3,0(sp)
10008e3c:	1dc00415 	stw	r23,16(r3)
10008e40:	9005883a 	mov	r2,r18
10008e44:	dfc00d17 	ldw	ra,52(sp)
10008e48:	df000c17 	ldw	fp,48(sp)
10008e4c:	ddc00b17 	ldw	r23,44(sp)
10008e50:	dd800a17 	ldw	r22,40(sp)
10008e54:	dd400917 	ldw	r21,36(sp)
10008e58:	dd000817 	ldw	r20,32(sp)
10008e5c:	dcc00717 	ldw	r19,28(sp)
10008e60:	dc800617 	ldw	r18,24(sp)
10008e64:	dc400517 	ldw	r17,20(sp)
10008e68:	dc000417 	ldw	r16,16(sp)
10008e6c:	dec00e04 	addi	sp,sp,56
10008e70:	f800283a 	ret
10008e74:	0005883a 	mov	r2,zero
10008e78:	003ff206 	br	10008e44 <__alt_data_end+0xf8008e44>

10008e7c <_dtoa_r>:
10008e7c:	20801017 	ldw	r2,64(r4)
10008e80:	deffde04 	addi	sp,sp,-136
10008e84:	dd401d15 	stw	r21,116(sp)
10008e88:	dcc01b15 	stw	r19,108(sp)
10008e8c:	dc801a15 	stw	r18,104(sp)
10008e90:	dc401915 	stw	r17,100(sp)
10008e94:	dc001815 	stw	r16,96(sp)
10008e98:	dfc02115 	stw	ra,132(sp)
10008e9c:	df002015 	stw	fp,128(sp)
10008ea0:	ddc01f15 	stw	r23,124(sp)
10008ea4:	dd801e15 	stw	r22,120(sp)
10008ea8:	dd001c15 	stw	r20,112(sp)
10008eac:	d9c00315 	stw	r7,12(sp)
10008eb0:	2021883a 	mov	r16,r4
10008eb4:	302b883a 	mov	r21,r6
10008eb8:	2825883a 	mov	r18,r5
10008ebc:	dc402417 	ldw	r17,144(sp)
10008ec0:	3027883a 	mov	r19,r6
10008ec4:	10000826 	beq	r2,zero,10008ee8 <_dtoa_r+0x6c>
10008ec8:	21801117 	ldw	r6,68(r4)
10008ecc:	00c00044 	movi	r3,1
10008ed0:	100b883a 	mov	r5,r2
10008ed4:	1986983a 	sll	r3,r3,r6
10008ed8:	11800115 	stw	r6,4(r2)
10008edc:	10c00215 	stw	r3,8(r2)
10008ee0:	000bf600 	call	1000bf60 <_Bfree>
10008ee4:	80001015 	stw	zero,64(r16)
10008ee8:	a8002d16 	blt	r21,zero,10008fa0 <_dtoa_r+0x124>
10008eec:	88000015 	stw	zero,0(r17)
10008ef0:	a8dffc2c 	andhi	r3,r21,32752
10008ef4:	009ffc34 	movhi	r2,32752
10008ef8:	18801b26 	beq	r3,r2,10008f68 <_dtoa_r+0xec>
10008efc:	9009883a 	mov	r4,r18
10008f00:	980b883a 	mov	r5,r19
10008f04:	000d883a 	mov	r6,zero
10008f08:	000f883a 	mov	r7,zero
10008f0c:	00053300 	call	10005330 <__eqdf2>
10008f10:	10002a1e 	bne	r2,zero,10008fbc <_dtoa_r+0x140>
10008f14:	d8c02317 	ldw	r3,140(sp)
10008f18:	d9002517 	ldw	r4,148(sp)
10008f1c:	00800044 	movi	r2,1
10008f20:	18800015 	stw	r2,0(r3)
10008f24:	2001a226 	beq	r4,zero,100095b0 <_dtoa_r+0x734>
10008f28:	00840074 	movhi	r2,4097
10008f2c:	10896344 	addi	r2,r2,9613
10008f30:	20800015 	stw	r2,0(r4)
10008f34:	10bfffc4 	addi	r2,r2,-1
10008f38:	dfc02117 	ldw	ra,132(sp)
10008f3c:	df002017 	ldw	fp,128(sp)
10008f40:	ddc01f17 	ldw	r23,124(sp)
10008f44:	dd801e17 	ldw	r22,120(sp)
10008f48:	dd401d17 	ldw	r21,116(sp)
10008f4c:	dd001c17 	ldw	r20,112(sp)
10008f50:	dcc01b17 	ldw	r19,108(sp)
10008f54:	dc801a17 	ldw	r18,104(sp)
10008f58:	dc401917 	ldw	r17,100(sp)
10008f5c:	dc001817 	ldw	r16,96(sp)
10008f60:	dec02204 	addi	sp,sp,136
10008f64:	f800283a 	ret
10008f68:	d8c02317 	ldw	r3,140(sp)
10008f6c:	0089c3c4 	movi	r2,9999
10008f70:	18800015 	stw	r2,0(r3)
10008f74:	90017c26 	beq	r18,zero,10009568 <_dtoa_r+0x6ec>
10008f78:	00840074 	movhi	r2,4097
10008f7c:	10896f04 	addi	r2,r2,9660
10008f80:	d9002517 	ldw	r4,148(sp)
10008f84:	203fec26 	beq	r4,zero,10008f38 <__alt_data_end+0xf8008f38>
10008f88:	10c000c7 	ldb	r3,3(r2)
10008f8c:	18017d1e 	bne	r3,zero,10009584 <_dtoa_r+0x708>
10008f90:	10c000c4 	addi	r3,r2,3
10008f94:	d9802517 	ldw	r6,148(sp)
10008f98:	30c00015 	stw	r3,0(r6)
10008f9c:	003fe606 	br	10008f38 <__alt_data_end+0xf8008f38>
10008fa0:	04e00034 	movhi	r19,32768
10008fa4:	9cffffc4 	addi	r19,r19,-1
10008fa8:	00800044 	movi	r2,1
10008fac:	ace6703a 	and	r19,r21,r19
10008fb0:	88800015 	stw	r2,0(r17)
10008fb4:	982b883a 	mov	r21,r19
10008fb8:	003fcd06 	br	10008ef0 <__alt_data_end+0xf8008ef0>
10008fbc:	d8800204 	addi	r2,sp,8
10008fc0:	a822d53a 	srli	r17,r21,20
10008fc4:	d8800015 	stw	r2,0(sp)
10008fc8:	8009883a 	mov	r4,r16
10008fcc:	900b883a 	mov	r5,r18
10008fd0:	980d883a 	mov	r6,r19
10008fd4:	d9c00104 	addi	r7,sp,4
10008fd8:	000cba80 	call	1000cba8 <__d2b>
10008fdc:	1039883a 	mov	fp,r2
10008fe0:	88016a1e 	bne	r17,zero,1000958c <_dtoa_r+0x710>
10008fe4:	dd000217 	ldw	r20,8(sp)
10008fe8:	dc400117 	ldw	r17,4(sp)
10008fec:	00befbc4 	movi	r2,-1041
10008ff0:	a463883a 	add	r17,r20,r17
10008ff4:	8882ea16 	blt	r17,r2,10009ba0 <_dtoa_r+0xd24>
10008ff8:	00bf0384 	movi	r2,-1010
10008ffc:	1445c83a 	sub	r2,r2,r17
10009000:	89010484 	addi	r4,r17,1042
10009004:	a8aa983a 	sll	r21,r21,r2
10009008:	9108d83a 	srl	r4,r18,r4
1000900c:	a908b03a 	or	r4,r21,r4
10009010:	00068080 	call	10006808 <__floatunsidf>
10009014:	017f8434 	movhi	r5,65040
10009018:	01800044 	movi	r6,1
1000901c:	1009883a 	mov	r4,r2
10009020:	194b883a 	add	r5,r3,r5
10009024:	8c7fffc4 	addi	r17,r17,-1
10009028:	d9800f15 	stw	r6,60(sp)
1000902c:	000d883a 	mov	r6,zero
10009030:	01cffe34 	movhi	r7,16376
10009034:	0005de00 	call	10005de0 <__subdf3>
10009038:	0198dbf4 	movhi	r6,25455
1000903c:	01cff4f4 	movhi	r7,16339
10009040:	1009883a 	mov	r4,r2
10009044:	180b883a 	mov	r5,r3
10009048:	3190d844 	addi	r6,r6,17249
1000904c:	39e1e9c4 	addi	r7,r7,-30809
10009050:	00055740 	call	10005574 <__muldf3>
10009054:	01a2d874 	movhi	r6,35681
10009058:	01cff1f4 	movhi	r7,16327
1000905c:	180b883a 	mov	r5,r3
10009060:	31b22cc4 	addi	r6,r6,-14157
10009064:	39e28a04 	addi	r7,r7,-30168
10009068:	1009883a 	mov	r4,r2
1000906c:	00041140 	call	10004114 <__adddf3>
10009070:	8809883a 	mov	r4,r17
10009074:	102d883a 	mov	r22,r2
10009078:	182b883a 	mov	r21,r3
1000907c:	00067380 	call	10006738 <__floatsidf>
10009080:	019427f4 	movhi	r6,20639
10009084:	01cff4f4 	movhi	r7,16339
10009088:	1009883a 	mov	r4,r2
1000908c:	180b883a 	mov	r5,r3
10009090:	319e7ec4 	addi	r6,r6,31227
10009094:	39d104c4 	addi	r7,r7,17427
10009098:	00055740 	call	10005574 <__muldf3>
1000909c:	b009883a 	mov	r4,r22
100090a0:	a80b883a 	mov	r5,r21
100090a4:	100d883a 	mov	r6,r2
100090a8:	180f883a 	mov	r7,r3
100090ac:	00041140 	call	10004114 <__adddf3>
100090b0:	1009883a 	mov	r4,r2
100090b4:	180b883a 	mov	r5,r3
100090b8:	102d883a 	mov	r22,r2
100090bc:	182b883a 	mov	r21,r3
100090c0:	00066b00 	call	100066b0 <__fixdfsi>
100090c4:	b009883a 	mov	r4,r22
100090c8:	a80b883a 	mov	r5,r21
100090cc:	000d883a 	mov	r6,zero
100090d0:	000f883a 	mov	r7,zero
100090d4:	d8800515 	stw	r2,20(sp)
100090d8:	00054940 	call	10005494 <__ledf2>
100090dc:	10023116 	blt	r2,zero,100099a4 <_dtoa_r+0xb28>
100090e0:	d8c00517 	ldw	r3,20(sp)
100090e4:	00800584 	movi	r2,22
100090e8:	10c21f36 	bltu	r2,r3,10009968 <_dtoa_r+0xaec>
100090ec:	180490fa 	slli	r2,r3,3
100090f0:	00c40074 	movhi	r3,4097
100090f4:	18c98a04 	addi	r3,r3,9768
100090f8:	1885883a 	add	r2,r3,r2
100090fc:	11000017 	ldw	r4,0(r2)
10009100:	11400117 	ldw	r5,4(r2)
10009104:	900d883a 	mov	r6,r18
10009108:	980f883a 	mov	r7,r19
1000910c:	00053b40 	call	100053b4 <__gedf2>
10009110:	0082a70e 	bge	zero,r2,10009bb0 <_dtoa_r+0xd34>
10009114:	d9000517 	ldw	r4,20(sp)
10009118:	d8000c15 	stw	zero,48(sp)
1000911c:	213fffc4 	addi	r4,r4,-1
10009120:	d9000515 	stw	r4,20(sp)
10009124:	a463c83a 	sub	r17,r20,r17
10009128:	8dbfffc4 	addi	r22,r17,-1
1000912c:	b0021916 	blt	r22,zero,10009994 <_dtoa_r+0xb18>
10009130:	d8000815 	stw	zero,32(sp)
10009134:	d8800517 	ldw	r2,20(sp)
10009138:	10020e16 	blt	r2,zero,10009974 <_dtoa_r+0xaf8>
1000913c:	b0ad883a 	add	r22,r22,r2
10009140:	d8800a15 	stw	r2,40(sp)
10009144:	d8000915 	stw	zero,36(sp)
10009148:	d8c00317 	ldw	r3,12(sp)
1000914c:	00800244 	movi	r2,9
10009150:	10c11a36 	bltu	r2,r3,100095bc <_dtoa_r+0x740>
10009154:	00800144 	movi	r2,5
10009158:	10c4fc0e 	bge	r2,r3,1000a54c <_dtoa_r+0x16d0>
1000915c:	18ffff04 	addi	r3,r3,-4
10009160:	d8c00315 	stw	r3,12(sp)
10009164:	0029883a 	mov	r20,zero
10009168:	d9800317 	ldw	r6,12(sp)
1000916c:	008000c4 	movi	r2,3
10009170:	3083bd26 	beq	r6,r2,1000a068 <_dtoa_r+0x11ec>
10009174:	1183670e 	bge	r2,r6,10009f14 <_dtoa_r+0x1098>
10009178:	d8c00317 	ldw	r3,12(sp)
1000917c:	00800104 	movi	r2,4
10009180:	1882e726 	beq	r3,r2,10009d20 <_dtoa_r+0xea4>
10009184:	00800144 	movi	r2,5
10009188:	1884f21e 	bne	r3,r2,1000a554 <_dtoa_r+0x16d8>
1000918c:	00800044 	movi	r2,1
10009190:	d8800b15 	stw	r2,44(sp)
10009194:	d8c02217 	ldw	r3,136(sp)
10009198:	d9000517 	ldw	r4,20(sp)
1000919c:	1907883a 	add	r3,r3,r4
100091a0:	19800044 	addi	r6,r3,1
100091a4:	d8c00d15 	stw	r3,52(sp)
100091a8:	d9800615 	stw	r6,24(sp)
100091ac:	0183c30e 	bge	zero,r6,1000a0bc <_dtoa_r+0x1240>
100091b0:	d9800617 	ldw	r6,24(sp)
100091b4:	3023883a 	mov	r17,r6
100091b8:	80001115 	stw	zero,68(r16)
100091bc:	008005c4 	movi	r2,23
100091c0:	1184f62e 	bgeu	r2,r6,1000a59c <_dtoa_r+0x1720>
100091c4:	00c00044 	movi	r3,1
100091c8:	00800104 	movi	r2,4
100091cc:	1085883a 	add	r2,r2,r2
100091d0:	11000504 	addi	r4,r2,20
100091d4:	180b883a 	mov	r5,r3
100091d8:	18c00044 	addi	r3,r3,1
100091dc:	313ffb2e 	bgeu	r6,r4,100091cc <__alt_data_end+0xf80091cc>
100091e0:	81401115 	stw	r5,68(r16)
100091e4:	8009883a 	mov	r4,r16
100091e8:	000beb80 	call	1000beb8 <_Balloc>
100091ec:	d8800715 	stw	r2,28(sp)
100091f0:	80801015 	stw	r2,64(r16)
100091f4:	00800384 	movi	r2,14
100091f8:	1440fd36 	bltu	r2,r17,100095f0 <_dtoa_r+0x774>
100091fc:	a000fc26 	beq	r20,zero,100095f0 <_dtoa_r+0x774>
10009200:	d8800517 	ldw	r2,20(sp)
10009204:	0083b90e 	bge	zero,r2,1000a0ec <_dtoa_r+0x1270>
10009208:	d8c00517 	ldw	r3,20(sp)
1000920c:	108003cc 	andi	r2,r2,15
10009210:	100490fa 	slli	r2,r2,3
10009214:	182fd13a 	srai	r23,r3,4
10009218:	00c40074 	movhi	r3,4097
1000921c:	18c98a04 	addi	r3,r3,9768
10009220:	1885883a 	add	r2,r3,r2
10009224:	b8c0040c 	andi	r3,r23,16
10009228:	12c00017 	ldw	r11,0(r2)
1000922c:	12800117 	ldw	r10,4(r2)
10009230:	18039726 	beq	r3,zero,1000a090 <_dtoa_r+0x1214>
10009234:	00840074 	movhi	r2,4097
10009238:	10898004 	addi	r2,r2,9728
1000923c:	11800817 	ldw	r6,32(r2)
10009240:	11c00917 	ldw	r7,36(r2)
10009244:	9009883a 	mov	r4,r18
10009248:	980b883a 	mov	r5,r19
1000924c:	da801615 	stw	r10,88(sp)
10009250:	dac01515 	stw	r11,84(sp)
10009254:	00049b00 	call	100049b0 <__divdf3>
10009258:	da801617 	ldw	r10,88(sp)
1000925c:	dac01517 	ldw	r11,84(sp)
10009260:	bdc003cc 	andi	r23,r23,15
10009264:	044000c4 	movi	r17,3
10009268:	d8800e15 	stw	r2,56(sp)
1000926c:	182b883a 	mov	r21,r3
10009270:	b8001126 	beq	r23,zero,100092b8 <_dtoa_r+0x43c>
10009274:	05040074 	movhi	r20,4097
10009278:	a5098004 	addi	r20,r20,9728
1000927c:	5805883a 	mov	r2,r11
10009280:	5007883a 	mov	r3,r10
10009284:	b980004c 	andi	r6,r23,1
10009288:	1009883a 	mov	r4,r2
1000928c:	b82fd07a 	srai	r23,r23,1
10009290:	180b883a 	mov	r5,r3
10009294:	30000426 	beq	r6,zero,100092a8 <_dtoa_r+0x42c>
10009298:	a1800017 	ldw	r6,0(r20)
1000929c:	a1c00117 	ldw	r7,4(r20)
100092a0:	8c400044 	addi	r17,r17,1
100092a4:	00055740 	call	10005574 <__muldf3>
100092a8:	a5000204 	addi	r20,r20,8
100092ac:	b83ff51e 	bne	r23,zero,10009284 <__alt_data_end+0xf8009284>
100092b0:	1017883a 	mov	r11,r2
100092b4:	1815883a 	mov	r10,r3
100092b8:	d9000e17 	ldw	r4,56(sp)
100092bc:	a80b883a 	mov	r5,r21
100092c0:	580d883a 	mov	r6,r11
100092c4:	500f883a 	mov	r7,r10
100092c8:	00049b00 	call	100049b0 <__divdf3>
100092cc:	1029883a 	mov	r20,r2
100092d0:	182b883a 	mov	r21,r3
100092d4:	d9800c17 	ldw	r6,48(sp)
100092d8:	30000626 	beq	r6,zero,100092f4 <_dtoa_r+0x478>
100092dc:	a009883a 	mov	r4,r20
100092e0:	a80b883a 	mov	r5,r21
100092e4:	000d883a 	mov	r6,zero
100092e8:	01cffc34 	movhi	r7,16368
100092ec:	00054940 	call	10005494 <__ledf2>
100092f0:	10043216 	blt	r2,zero,1000a3bc <_dtoa_r+0x1540>
100092f4:	8809883a 	mov	r4,r17
100092f8:	00067380 	call	10006738 <__floatsidf>
100092fc:	1009883a 	mov	r4,r2
10009300:	180b883a 	mov	r5,r3
10009304:	a00d883a 	mov	r6,r20
10009308:	a80f883a 	mov	r7,r21
1000930c:	00055740 	call	10005574 <__muldf3>
10009310:	000d883a 	mov	r6,zero
10009314:	1009883a 	mov	r4,r2
10009318:	180b883a 	mov	r5,r3
1000931c:	01d00734 	movhi	r7,16412
10009320:	00041140 	call	10004114 <__adddf3>
10009324:	1023883a 	mov	r17,r2
10009328:	d9800617 	ldw	r6,24(sp)
1000932c:	00bf3034 	movhi	r2,64704
10009330:	1885883a 	add	r2,r3,r2
10009334:	d8800e15 	stw	r2,56(sp)
10009338:	30032e26 	beq	r6,zero,10009ff4 <_dtoa_r+0x1178>
1000933c:	d8c00517 	ldw	r3,20(sp)
10009340:	da800617 	ldw	r10,24(sp)
10009344:	d8c01215 	stw	r3,72(sp)
10009348:	d9000b17 	ldw	r4,44(sp)
1000934c:	2003b026 	beq	r4,zero,1000a210 <_dtoa_r+0x1394>
10009350:	50bfffc4 	addi	r2,r10,-1
10009354:	100490fa 	slli	r2,r2,3
10009358:	00c40074 	movhi	r3,4097
1000935c:	18c98a04 	addi	r3,r3,9768
10009360:	1885883a 	add	r2,r3,r2
10009364:	11800017 	ldw	r6,0(r2)
10009368:	11c00117 	ldw	r7,4(r2)
1000936c:	d8800717 	ldw	r2,28(sp)
10009370:	0009883a 	mov	r4,zero
10009374:	014ff834 	movhi	r5,16352
10009378:	da801615 	stw	r10,88(sp)
1000937c:	15c00044 	addi	r23,r2,1
10009380:	00049b00 	call	100049b0 <__divdf3>
10009384:	d9c00e17 	ldw	r7,56(sp)
10009388:	880d883a 	mov	r6,r17
1000938c:	1009883a 	mov	r4,r2
10009390:	180b883a 	mov	r5,r3
10009394:	0005de00 	call	10005de0 <__subdf3>
10009398:	a80b883a 	mov	r5,r21
1000939c:	a009883a 	mov	r4,r20
100093a0:	d8c01015 	stw	r3,64(sp)
100093a4:	d8800e15 	stw	r2,56(sp)
100093a8:	00066b00 	call	100066b0 <__fixdfsi>
100093ac:	1009883a 	mov	r4,r2
100093b0:	d8801715 	stw	r2,92(sp)
100093b4:	00067380 	call	10006738 <__floatsidf>
100093b8:	a009883a 	mov	r4,r20
100093bc:	a80b883a 	mov	r5,r21
100093c0:	100d883a 	mov	r6,r2
100093c4:	180f883a 	mov	r7,r3
100093c8:	0005de00 	call	10005de0 <__subdf3>
100093cc:	da001717 	ldw	r8,92(sp)
100093d0:	1829883a 	mov	r20,r3
100093d4:	d8c00717 	ldw	r3,28(sp)
100093d8:	d9000e17 	ldw	r4,56(sp)
100093dc:	d9401017 	ldw	r5,64(sp)
100093e0:	42000c04 	addi	r8,r8,48
100093e4:	1023883a 	mov	r17,r2
100093e8:	1a000005 	stb	r8,0(r3)
100093ec:	880d883a 	mov	r6,r17
100093f0:	a00f883a 	mov	r7,r20
100093f4:	402b883a 	mov	r21,r8
100093f8:	00053b40 	call	100053b4 <__gedf2>
100093fc:	00844516 	blt	zero,r2,1000a514 <_dtoa_r+0x1698>
10009400:	0009883a 	mov	r4,zero
10009404:	014ffc34 	movhi	r5,16368
10009408:	880d883a 	mov	r6,r17
1000940c:	a00f883a 	mov	r7,r20
10009410:	0005de00 	call	10005de0 <__subdf3>
10009414:	d9000e17 	ldw	r4,56(sp)
10009418:	d9401017 	ldw	r5,64(sp)
1000941c:	100d883a 	mov	r6,r2
10009420:	180f883a 	mov	r7,r3
10009424:	00053b40 	call	100053b4 <__gedf2>
10009428:	da801617 	ldw	r10,88(sp)
1000942c:	00843616 	blt	zero,r2,1000a508 <_dtoa_r+0x168c>
10009430:	00800044 	movi	r2,1
10009434:	12806e0e 	bge	r2,r10,100095f0 <_dtoa_r+0x774>
10009438:	d9000717 	ldw	r4,28(sp)
1000943c:	dd801315 	stw	r22,76(sp)
10009440:	dc001115 	stw	r16,68(sp)
10009444:	2295883a 	add	r10,r4,r10
10009448:	dcc01415 	stw	r19,80(sp)
1000944c:	502d883a 	mov	r22,r10
10009450:	dcc01017 	ldw	r19,64(sp)
10009454:	b821883a 	mov	r16,r23
10009458:	dc801015 	stw	r18,64(sp)
1000945c:	dc800e17 	ldw	r18,56(sp)
10009460:	00000906 	br	10009488 <_dtoa_r+0x60c>
10009464:	0005de00 	call	10005de0 <__subdf3>
10009468:	1009883a 	mov	r4,r2
1000946c:	180b883a 	mov	r5,r3
10009470:	900d883a 	mov	r6,r18
10009474:	980f883a 	mov	r7,r19
10009478:	00054940 	call	10005494 <__ledf2>
1000947c:	10040e16 	blt	r2,zero,1000a4b8 <_dtoa_r+0x163c>
10009480:	b821883a 	mov	r16,r23
10009484:	bd841026 	beq	r23,r22,1000a4c8 <_dtoa_r+0x164c>
10009488:	9009883a 	mov	r4,r18
1000948c:	980b883a 	mov	r5,r19
10009490:	000d883a 	mov	r6,zero
10009494:	01d00934 	movhi	r7,16420
10009498:	00055740 	call	10005574 <__muldf3>
1000949c:	000d883a 	mov	r6,zero
100094a0:	01d00934 	movhi	r7,16420
100094a4:	8809883a 	mov	r4,r17
100094a8:	a00b883a 	mov	r5,r20
100094ac:	1025883a 	mov	r18,r2
100094b0:	1827883a 	mov	r19,r3
100094b4:	00055740 	call	10005574 <__muldf3>
100094b8:	180b883a 	mov	r5,r3
100094bc:	1009883a 	mov	r4,r2
100094c0:	1823883a 	mov	r17,r3
100094c4:	1029883a 	mov	r20,r2
100094c8:	00066b00 	call	100066b0 <__fixdfsi>
100094cc:	1009883a 	mov	r4,r2
100094d0:	102b883a 	mov	r21,r2
100094d4:	00067380 	call	10006738 <__floatsidf>
100094d8:	a009883a 	mov	r4,r20
100094dc:	880b883a 	mov	r5,r17
100094e0:	100d883a 	mov	r6,r2
100094e4:	180f883a 	mov	r7,r3
100094e8:	0005de00 	call	10005de0 <__subdf3>
100094ec:	ad400c04 	addi	r21,r21,48
100094f0:	1009883a 	mov	r4,r2
100094f4:	180b883a 	mov	r5,r3
100094f8:	900d883a 	mov	r6,r18
100094fc:	980f883a 	mov	r7,r19
10009500:	85400005 	stb	r21,0(r16)
10009504:	1023883a 	mov	r17,r2
10009508:	1829883a 	mov	r20,r3
1000950c:	00054940 	call	10005494 <__ledf2>
10009510:	bdc00044 	addi	r23,r23,1
10009514:	0009883a 	mov	r4,zero
10009518:	014ffc34 	movhi	r5,16368
1000951c:	880d883a 	mov	r6,r17
10009520:	a00f883a 	mov	r7,r20
10009524:	103fcf0e 	bge	r2,zero,10009464 <__alt_data_end+0xf8009464>
10009528:	d9801217 	ldw	r6,72(sp)
1000952c:	dc001117 	ldw	r16,68(sp)
10009530:	d9800515 	stw	r6,20(sp)
10009534:	8009883a 	mov	r4,r16
10009538:	e00b883a 	mov	r5,fp
1000953c:	000bf600 	call	1000bf60 <_Bfree>
10009540:	d8c00517 	ldw	r3,20(sp)
10009544:	d9002317 	ldw	r4,140(sp)
10009548:	d9802517 	ldw	r6,148(sp)
1000954c:	b8000005 	stb	zero,0(r23)
10009550:	18800044 	addi	r2,r3,1
10009554:	20800015 	stw	r2,0(r4)
10009558:	30027226 	beq	r6,zero,10009f24 <_dtoa_r+0x10a8>
1000955c:	35c00015 	stw	r23,0(r6)
10009560:	d8800717 	ldw	r2,28(sp)
10009564:	003e7406 	br	10008f38 <__alt_data_end+0xf8008f38>
10009568:	00800434 	movhi	r2,16
1000956c:	10bfffc4 	addi	r2,r2,-1
10009570:	a8aa703a 	and	r21,r21,r2
10009574:	a83e801e 	bne	r21,zero,10008f78 <__alt_data_end+0xf8008f78>
10009578:	00840074 	movhi	r2,4097
1000957c:	10896c04 	addi	r2,r2,9648
10009580:	003e7f06 	br	10008f80 <__alt_data_end+0xf8008f80>
10009584:	10c00204 	addi	r3,r2,8
10009588:	003e8206 	br	10008f94 <__alt_data_end+0xf8008f94>
1000958c:	01400434 	movhi	r5,16
10009590:	297fffc4 	addi	r5,r5,-1
10009594:	994a703a 	and	r5,r19,r5
10009598:	9009883a 	mov	r4,r18
1000959c:	8c7f0044 	addi	r17,r17,-1023
100095a0:	294ffc34 	orhi	r5,r5,16368
100095a4:	dd000217 	ldw	r20,8(sp)
100095a8:	d8000f15 	stw	zero,60(sp)
100095ac:	003e9f06 	br	1000902c <__alt_data_end+0xf800902c>
100095b0:	00840074 	movhi	r2,4097
100095b4:	10896304 	addi	r2,r2,9612
100095b8:	003e5f06 	br	10008f38 <__alt_data_end+0xf8008f38>
100095bc:	80001115 	stw	zero,68(r16)
100095c0:	8009883a 	mov	r4,r16
100095c4:	000b883a 	mov	r5,zero
100095c8:	000beb80 	call	1000beb8 <_Balloc>
100095cc:	01bfffc4 	movi	r6,-1
100095d0:	d8800715 	stw	r2,28(sp)
100095d4:	80801015 	stw	r2,64(r16)
100095d8:	00800044 	movi	r2,1
100095dc:	d9800615 	stw	r6,24(sp)
100095e0:	d8800b15 	stw	r2,44(sp)
100095e4:	d8002215 	stw	zero,136(sp)
100095e8:	d9800d15 	stw	r6,52(sp)
100095ec:	d8000315 	stw	zero,12(sp)
100095f0:	d8800117 	ldw	r2,4(sp)
100095f4:	10008e16 	blt	r2,zero,10009830 <_dtoa_r+0x9b4>
100095f8:	d9000517 	ldw	r4,20(sp)
100095fc:	00c00384 	movi	r3,14
10009600:	19008b16 	blt	r3,r4,10009830 <_dtoa_r+0x9b4>
10009604:	200490fa 	slli	r2,r4,3
10009608:	00c40074 	movhi	r3,4097
1000960c:	d9802217 	ldw	r6,136(sp)
10009610:	18c98a04 	addi	r3,r3,9768
10009614:	1885883a 	add	r2,r3,r2
10009618:	14400017 	ldw	r17,0(r2)
1000961c:	15000117 	ldw	r20,4(r2)
10009620:	3001c716 	blt	r6,zero,10009d40 <_dtoa_r+0xec4>
10009624:	880d883a 	mov	r6,r17
10009628:	a00f883a 	mov	r7,r20
1000962c:	9009883a 	mov	r4,r18
10009630:	980b883a 	mov	r5,r19
10009634:	00049b00 	call	100049b0 <__divdf3>
10009638:	180b883a 	mov	r5,r3
1000963c:	1009883a 	mov	r4,r2
10009640:	00066b00 	call	100066b0 <__fixdfsi>
10009644:	1009883a 	mov	r4,r2
10009648:	102d883a 	mov	r22,r2
1000964c:	00067380 	call	10006738 <__floatsidf>
10009650:	1009883a 	mov	r4,r2
10009654:	180b883a 	mov	r5,r3
10009658:	880d883a 	mov	r6,r17
1000965c:	a00f883a 	mov	r7,r20
10009660:	00055740 	call	10005574 <__muldf3>
10009664:	9009883a 	mov	r4,r18
10009668:	980b883a 	mov	r5,r19
1000966c:	100d883a 	mov	r6,r2
10009670:	180f883a 	mov	r7,r3
10009674:	0005de00 	call	10005de0 <__subdf3>
10009678:	d9000717 	ldw	r4,28(sp)
1000967c:	d9800617 	ldw	r6,24(sp)
10009680:	180b883a 	mov	r5,r3
10009684:	b0c00c04 	addi	r3,r22,48
10009688:	20c00005 	stb	r3,0(r4)
1000968c:	25c00044 	addi	r23,r4,1
10009690:	01000044 	movi	r4,1
10009694:	1011883a 	mov	r8,r2
10009698:	2807883a 	mov	r3,r5
1000969c:	31003d26 	beq	r6,r4,10009794 <_dtoa_r+0x918>
100096a0:	000d883a 	mov	r6,zero
100096a4:	01d00934 	movhi	r7,16420
100096a8:	1009883a 	mov	r4,r2
100096ac:	00055740 	call	10005574 <__muldf3>
100096b0:	1009883a 	mov	r4,r2
100096b4:	180b883a 	mov	r5,r3
100096b8:	000d883a 	mov	r6,zero
100096bc:	000f883a 	mov	r7,zero
100096c0:	1027883a 	mov	r19,r2
100096c4:	182b883a 	mov	r21,r3
100096c8:	00053300 	call	10005330 <__eqdf2>
100096cc:	103f9926 	beq	r2,zero,10009534 <__alt_data_end+0xf8009534>
100096d0:	d8c00617 	ldw	r3,24(sp)
100096d4:	d9000717 	ldw	r4,28(sp)
100096d8:	b825883a 	mov	r18,r23
100096dc:	18bfffc4 	addi	r2,r3,-1
100096e0:	20ad883a 	add	r22,r4,r2
100096e4:	dc000315 	stw	r16,12(sp)
100096e8:	00000a06 	br	10009714 <_dtoa_r+0x898>
100096ec:	00055740 	call	10005574 <__muldf3>
100096f0:	1009883a 	mov	r4,r2
100096f4:	180b883a 	mov	r5,r3
100096f8:	000d883a 	mov	r6,zero
100096fc:	000f883a 	mov	r7,zero
10009700:	1027883a 	mov	r19,r2
10009704:	182b883a 	mov	r21,r3
10009708:	b825883a 	mov	r18,r23
1000970c:	00053300 	call	10005330 <__eqdf2>
10009710:	10022626 	beq	r2,zero,10009fac <_dtoa_r+0x1130>
10009714:	880d883a 	mov	r6,r17
10009718:	a00f883a 	mov	r7,r20
1000971c:	9809883a 	mov	r4,r19
10009720:	a80b883a 	mov	r5,r21
10009724:	00049b00 	call	100049b0 <__divdf3>
10009728:	180b883a 	mov	r5,r3
1000972c:	1009883a 	mov	r4,r2
10009730:	00066b00 	call	100066b0 <__fixdfsi>
10009734:	1009883a 	mov	r4,r2
10009738:	1021883a 	mov	r16,r2
1000973c:	00067380 	call	10006738 <__floatsidf>
10009740:	1009883a 	mov	r4,r2
10009744:	180b883a 	mov	r5,r3
10009748:	880d883a 	mov	r6,r17
1000974c:	a00f883a 	mov	r7,r20
10009750:	00055740 	call	10005574 <__muldf3>
10009754:	9809883a 	mov	r4,r19
10009758:	a80b883a 	mov	r5,r21
1000975c:	100d883a 	mov	r6,r2
10009760:	180f883a 	mov	r7,r3
10009764:	0005de00 	call	10005de0 <__subdf3>
10009768:	82000c04 	addi	r8,r16,48
1000976c:	92000005 	stb	r8,0(r18)
10009770:	1009883a 	mov	r4,r2
10009774:	180b883a 	mov	r5,r3
10009778:	000d883a 	mov	r6,zero
1000977c:	01d00934 	movhi	r7,16420
10009780:	1011883a 	mov	r8,r2
10009784:	bdc00044 	addi	r23,r23,1
10009788:	95bfd81e 	bne	r18,r22,100096ec <__alt_data_end+0xf80096ec>
1000978c:	802d883a 	mov	r22,r16
10009790:	dc000317 	ldw	r16,12(sp)
10009794:	4009883a 	mov	r4,r8
10009798:	180b883a 	mov	r5,r3
1000979c:	400d883a 	mov	r6,r8
100097a0:	180f883a 	mov	r7,r3
100097a4:	00041140 	call	10004114 <__adddf3>
100097a8:	8809883a 	mov	r4,r17
100097ac:	a00b883a 	mov	r5,r20
100097b0:	100d883a 	mov	r6,r2
100097b4:	180f883a 	mov	r7,r3
100097b8:	1027883a 	mov	r19,r2
100097bc:	1825883a 	mov	r18,r3
100097c0:	00054940 	call	10005494 <__ledf2>
100097c4:	10000816 	blt	r2,zero,100097e8 <_dtoa_r+0x96c>
100097c8:	8809883a 	mov	r4,r17
100097cc:	a00b883a 	mov	r5,r20
100097d0:	980d883a 	mov	r6,r19
100097d4:	900f883a 	mov	r7,r18
100097d8:	00053300 	call	10005330 <__eqdf2>
100097dc:	103f551e 	bne	r2,zero,10009534 <__alt_data_end+0xf8009534>
100097e0:	b580004c 	andi	r22,r22,1
100097e4:	b03f5326 	beq	r22,zero,10009534 <__alt_data_end+0xf8009534>
100097e8:	bd7fffc3 	ldbu	r21,-1(r23)
100097ec:	b8bfffc4 	addi	r2,r23,-1
100097f0:	1007883a 	mov	r3,r2
100097f4:	01400e44 	movi	r5,57
100097f8:	d9800717 	ldw	r6,28(sp)
100097fc:	00000506 	br	10009814 <_dtoa_r+0x998>
10009800:	18ffffc4 	addi	r3,r3,-1
10009804:	30825e26 	beq	r6,r2,1000a180 <_dtoa_r+0x1304>
10009808:	1d400003 	ldbu	r21,0(r3)
1000980c:	102f883a 	mov	r23,r2
10009810:	10bfffc4 	addi	r2,r2,-1
10009814:	a9003fcc 	andi	r4,r21,255
10009818:	2100201c 	xori	r4,r4,128
1000981c:	213fe004 	addi	r4,r4,-128
10009820:	217ff726 	beq	r4,r5,10009800 <__alt_data_end+0xf8009800>
10009824:	aa000044 	addi	r8,r21,1
10009828:	12000005 	stb	r8,0(r2)
1000982c:	003f4106 	br	10009534 <__alt_data_end+0xf8009534>
10009830:	d8c00b17 	ldw	r3,44(sp)
10009834:	18006726 	beq	r3,zero,100099d4 <_dtoa_r+0xb58>
10009838:	d9000317 	ldw	r4,12(sp)
1000983c:	00c00044 	movi	r3,1
10009840:	19016a0e 	bge	r3,r4,10009dec <_dtoa_r+0xf70>
10009844:	d8800617 	ldw	r2,24(sp)
10009848:	d8c00917 	ldw	r3,36(sp)
1000984c:	157fffc4 	addi	r21,r2,-1
10009850:	1d420716 	blt	r3,r21,1000a070 <_dtoa_r+0x11f4>
10009854:	1d6bc83a 	sub	r21,r3,r21
10009858:	d8800617 	ldw	r2,24(sp)
1000985c:	1002c716 	blt	r2,zero,1000a37c <_dtoa_r+0x1500>
10009860:	dd000817 	ldw	r20,32(sp)
10009864:	d8800617 	ldw	r2,24(sp)
10009868:	d9800817 	ldw	r6,32(sp)
1000986c:	8009883a 	mov	r4,r16
10009870:	01400044 	movi	r5,1
10009874:	308d883a 	add	r6,r6,r2
10009878:	d9800815 	stw	r6,32(sp)
1000987c:	b0ad883a 	add	r22,r22,r2
10009880:	000c2e00 	call	1000c2e0 <__i2b>
10009884:	1023883a 	mov	r17,r2
10009888:	a0000826 	beq	r20,zero,100098ac <_dtoa_r+0xa30>
1000988c:	0580070e 	bge	zero,r22,100098ac <_dtoa_r+0xa30>
10009890:	b005883a 	mov	r2,r22
10009894:	a5812016 	blt	r20,r22,10009d18 <_dtoa_r+0xe9c>
10009898:	d8c00817 	ldw	r3,32(sp)
1000989c:	a0a9c83a 	sub	r20,r20,r2
100098a0:	b0adc83a 	sub	r22,r22,r2
100098a4:	1887c83a 	sub	r3,r3,r2
100098a8:	d8c00815 	stw	r3,32(sp)
100098ac:	d9000917 	ldw	r4,36(sp)
100098b0:	0100140e 	bge	zero,r4,10009904 <_dtoa_r+0xa88>
100098b4:	d9800b17 	ldw	r6,44(sp)
100098b8:	3001e526 	beq	r6,zero,1000a050 <_dtoa_r+0x11d4>
100098bc:	05400e0e 	bge	zero,r21,100098f8 <_dtoa_r+0xa7c>
100098c0:	880b883a 	mov	r5,r17
100098c4:	8009883a 	mov	r4,r16
100098c8:	a80d883a 	mov	r6,r21
100098cc:	000c5ac0 	call	1000c5ac <__pow5mult>
100098d0:	e00d883a 	mov	r6,fp
100098d4:	8009883a 	mov	r4,r16
100098d8:	100b883a 	mov	r5,r2
100098dc:	1023883a 	mov	r17,r2
100098e0:	000c31c0 	call	1000c31c <__multiply>
100098e4:	102f883a 	mov	r23,r2
100098e8:	e00b883a 	mov	r5,fp
100098ec:	8009883a 	mov	r4,r16
100098f0:	000bf600 	call	1000bf60 <_Bfree>
100098f4:	b839883a 	mov	fp,r23
100098f8:	d8800917 	ldw	r2,36(sp)
100098fc:	154dc83a 	sub	r6,r2,r21
10009900:	3001281e 	bne	r6,zero,10009da4 <_dtoa_r+0xf28>
10009904:	05c00044 	movi	r23,1
10009908:	8009883a 	mov	r4,r16
1000990c:	b80b883a 	mov	r5,r23
10009910:	000c2e00 	call	1000c2e0 <__i2b>
10009914:	d8c00a17 	ldw	r3,40(sp)
10009918:	102b883a 	mov	r21,r2
1000991c:	00c0310e 	bge	zero,r3,100099e4 <_dtoa_r+0xb68>
10009920:	8009883a 	mov	r4,r16
10009924:	100b883a 	mov	r5,r2
10009928:	180d883a 	mov	r6,r3
1000992c:	000c5ac0 	call	1000c5ac <__pow5mult>
10009930:	d9000317 	ldw	r4,12(sp)
10009934:	102b883a 	mov	r21,r2
10009938:	b9011f0e 	bge	r23,r4,10009db8 <_dtoa_r+0xf3c>
1000993c:	0027883a 	mov	r19,zero
10009940:	a8800417 	ldw	r2,16(r21)
10009944:	10800104 	addi	r2,r2,4
10009948:	1085883a 	add	r2,r2,r2
1000994c:	1085883a 	add	r2,r2,r2
10009950:	a885883a 	add	r2,r21,r2
10009954:	11000017 	ldw	r4,0(r2)
10009958:	000c1c80 	call	1000c1c8 <__hi0bits>
1000995c:	00c00804 	movi	r3,32
10009960:	1885c83a 	sub	r2,r3,r2
10009964:	00002506 	br	100099fc <_dtoa_r+0xb80>
10009968:	01800044 	movi	r6,1
1000996c:	d9800c15 	stw	r6,48(sp)
10009970:	003dec06 	br	10009124 <__alt_data_end+0xf8009124>
10009974:	d8c00817 	ldw	r3,32(sp)
10009978:	d9000517 	ldw	r4,20(sp)
1000997c:	d8000a15 	stw	zero,40(sp)
10009980:	1907c83a 	sub	r3,r3,r4
10009984:	010dc83a 	sub	r6,zero,r4
10009988:	d8c00815 	stw	r3,32(sp)
1000998c:	d9800915 	stw	r6,36(sp)
10009990:	003ded06 	br	10009148 <__alt_data_end+0xf8009148>
10009994:	05adc83a 	sub	r22,zero,r22
10009998:	dd800815 	stw	r22,32(sp)
1000999c:	002d883a 	mov	r22,zero
100099a0:	003de406 	br	10009134 <__alt_data_end+0xf8009134>
100099a4:	d9000517 	ldw	r4,20(sp)
100099a8:	00067380 	call	10006738 <__floatsidf>
100099ac:	1009883a 	mov	r4,r2
100099b0:	180b883a 	mov	r5,r3
100099b4:	b00d883a 	mov	r6,r22
100099b8:	a80f883a 	mov	r7,r21
100099bc:	00053300 	call	10005330 <__eqdf2>
100099c0:	103dc726 	beq	r2,zero,100090e0 <__alt_data_end+0xf80090e0>
100099c4:	d8800517 	ldw	r2,20(sp)
100099c8:	10bfffc4 	addi	r2,r2,-1
100099cc:	d8800515 	stw	r2,20(sp)
100099d0:	003dc306 	br	100090e0 <__alt_data_end+0xf80090e0>
100099d4:	dd400917 	ldw	r21,36(sp)
100099d8:	dd000817 	ldw	r20,32(sp)
100099dc:	0023883a 	mov	r17,zero
100099e0:	003fa906 	br	10009888 <__alt_data_end+0xf8009888>
100099e4:	d9800317 	ldw	r6,12(sp)
100099e8:	b981670e 	bge	r23,r6,10009f88 <_dtoa_r+0x110c>
100099ec:	0027883a 	mov	r19,zero
100099f0:	d8c00a17 	ldw	r3,40(sp)
100099f4:	183fd21e 	bne	r3,zero,10009940 <__alt_data_end+0xf8009940>
100099f8:	00800044 	movi	r2,1
100099fc:	1585883a 	add	r2,r2,r22
10009a00:	108007cc 	andi	r2,r2,31
10009a04:	10005f26 	beq	r2,zero,10009b84 <_dtoa_r+0xd08>
10009a08:	00c00804 	movi	r3,32
10009a0c:	1887c83a 	sub	r3,r3,r2
10009a10:	01000104 	movi	r4,4
10009a14:	20c2dd0e 	bge	r4,r3,1000a58c <_dtoa_r+0x1710>
10009a18:	d9000817 	ldw	r4,32(sp)
10009a1c:	00c00704 	movi	r3,28
10009a20:	1885c83a 	sub	r2,r3,r2
10009a24:	2089883a 	add	r4,r4,r2
10009a28:	d9000815 	stw	r4,32(sp)
10009a2c:	a0a9883a 	add	r20,r20,r2
10009a30:	b0ad883a 	add	r22,r22,r2
10009a34:	d8800817 	ldw	r2,32(sp)
10009a38:	0080050e 	bge	zero,r2,10009a50 <_dtoa_r+0xbd4>
10009a3c:	e00b883a 	mov	r5,fp
10009a40:	8009883a 	mov	r4,r16
10009a44:	100d883a 	mov	r6,r2
10009a48:	000c6ec0 	call	1000c6ec <__lshift>
10009a4c:	1039883a 	mov	fp,r2
10009a50:	0580050e 	bge	zero,r22,10009a68 <_dtoa_r+0xbec>
10009a54:	a80b883a 	mov	r5,r21
10009a58:	8009883a 	mov	r4,r16
10009a5c:	b00d883a 	mov	r6,r22
10009a60:	000c6ec0 	call	1000c6ec <__lshift>
10009a64:	102b883a 	mov	r21,r2
10009a68:	d8c00c17 	ldw	r3,48(sp)
10009a6c:	1801161e 	bne	r3,zero,10009ec8 <_dtoa_r+0x104c>
10009a70:	d8c00617 	ldw	r3,24(sp)
10009a74:	00c12d0e 	bge	zero,r3,10009f2c <_dtoa_r+0x10b0>
10009a78:	d8c00b17 	ldw	r3,44(sp)
10009a7c:	1800571e 	bne	r3,zero,10009bdc <_dtoa_r+0xd60>
10009a80:	dc800717 	ldw	r18,28(sp)
10009a84:	dcc00617 	ldw	r19,24(sp)
10009a88:	9029883a 	mov	r20,r18
10009a8c:	00000206 	br	10009a98 <_dtoa_r+0xc1c>
10009a90:	000bf880 	call	1000bf88 <__multadd>
10009a94:	1039883a 	mov	fp,r2
10009a98:	e009883a 	mov	r4,fp
10009a9c:	a80b883a 	mov	r5,r21
10009aa0:	0008c540 	call	10008c54 <quorem>
10009aa4:	10800c04 	addi	r2,r2,48
10009aa8:	90800005 	stb	r2,0(r18)
10009aac:	94800044 	addi	r18,r18,1
10009ab0:	9507c83a 	sub	r3,r18,r20
10009ab4:	8009883a 	mov	r4,r16
10009ab8:	e00b883a 	mov	r5,fp
10009abc:	01800284 	movi	r6,10
10009ac0:	000f883a 	mov	r7,zero
10009ac4:	1cfff216 	blt	r3,r19,10009a90 <__alt_data_end+0xf8009a90>
10009ac8:	1011883a 	mov	r8,r2
10009acc:	d8800617 	ldw	r2,24(sp)
10009ad0:	00822e0e 	bge	zero,r2,1000a38c <_dtoa_r+0x1510>
10009ad4:	d9000717 	ldw	r4,28(sp)
10009ad8:	0025883a 	mov	r18,zero
10009adc:	20af883a 	add	r23,r4,r2
10009ae0:	e00b883a 	mov	r5,fp
10009ae4:	01800044 	movi	r6,1
10009ae8:	8009883a 	mov	r4,r16
10009aec:	da001715 	stw	r8,92(sp)
10009af0:	000c6ec0 	call	1000c6ec <__lshift>
10009af4:	1009883a 	mov	r4,r2
10009af8:	a80b883a 	mov	r5,r21
10009afc:	1039883a 	mov	fp,r2
10009b00:	000c8340 	call	1000c834 <__mcmp>
10009b04:	da001717 	ldw	r8,92(sp)
10009b08:	00816e0e 	bge	zero,r2,1000a0c4 <_dtoa_r+0x1248>
10009b0c:	b93fffc3 	ldbu	r4,-1(r23)
10009b10:	b8bfffc4 	addi	r2,r23,-1
10009b14:	1007883a 	mov	r3,r2
10009b18:	01800e44 	movi	r6,57
10009b1c:	d9c00717 	ldw	r7,28(sp)
10009b20:	00000506 	br	10009b38 <_dtoa_r+0xcbc>
10009b24:	18ffffc4 	addi	r3,r3,-1
10009b28:	38811926 	beq	r7,r2,10009f90 <_dtoa_r+0x1114>
10009b2c:	19000003 	ldbu	r4,0(r3)
10009b30:	102f883a 	mov	r23,r2
10009b34:	10bfffc4 	addi	r2,r2,-1
10009b38:	21403fcc 	andi	r5,r4,255
10009b3c:	2940201c 	xori	r5,r5,128
10009b40:	297fe004 	addi	r5,r5,-128
10009b44:	29bff726 	beq	r5,r6,10009b24 <__alt_data_end+0xf8009b24>
10009b48:	21000044 	addi	r4,r4,1
10009b4c:	11000005 	stb	r4,0(r2)
10009b50:	8009883a 	mov	r4,r16
10009b54:	a80b883a 	mov	r5,r21
10009b58:	000bf600 	call	1000bf60 <_Bfree>
10009b5c:	883e7526 	beq	r17,zero,10009534 <__alt_data_end+0xf8009534>
10009b60:	90000426 	beq	r18,zero,10009b74 <_dtoa_r+0xcf8>
10009b64:	94400326 	beq	r18,r17,10009b74 <_dtoa_r+0xcf8>
10009b68:	8009883a 	mov	r4,r16
10009b6c:	900b883a 	mov	r5,r18
10009b70:	000bf600 	call	1000bf60 <_Bfree>
10009b74:	8009883a 	mov	r4,r16
10009b78:	880b883a 	mov	r5,r17
10009b7c:	000bf600 	call	1000bf60 <_Bfree>
10009b80:	003e6c06 	br	10009534 <__alt_data_end+0xf8009534>
10009b84:	00800704 	movi	r2,28
10009b88:	d9800817 	ldw	r6,32(sp)
10009b8c:	a0a9883a 	add	r20,r20,r2
10009b90:	b0ad883a 	add	r22,r22,r2
10009b94:	308d883a 	add	r6,r6,r2
10009b98:	d9800815 	stw	r6,32(sp)
10009b9c:	003fa506 	br	10009a34 <__alt_data_end+0xf8009a34>
10009ba0:	013efb84 	movi	r4,-1042
10009ba4:	246bc83a 	sub	r21,r4,r17
10009ba8:	9548983a 	sll	r4,r18,r21
10009bac:	003d1806 	br	10009010 <__alt_data_end+0xf8009010>
10009bb0:	d8000c15 	stw	zero,48(sp)
10009bb4:	003d5b06 	br	10009124 <__alt_data_end+0xf8009124>
10009bb8:	880b883a 	mov	r5,r17
10009bbc:	8009883a 	mov	r4,r16
10009bc0:	01800284 	movi	r6,10
10009bc4:	000f883a 	mov	r7,zero
10009bc8:	000bf880 	call	1000bf88 <__multadd>
10009bcc:	1023883a 	mov	r17,r2
10009bd0:	d8800d17 	ldw	r2,52(sp)
10009bd4:	0082550e 	bge	zero,r2,1000a52c <_dtoa_r+0x16b0>
10009bd8:	d8800615 	stw	r2,24(sp)
10009bdc:	0500050e 	bge	zero,r20,10009bf4 <_dtoa_r+0xd78>
10009be0:	880b883a 	mov	r5,r17
10009be4:	8009883a 	mov	r4,r16
10009be8:	a00d883a 	mov	r6,r20
10009bec:	000c6ec0 	call	1000c6ec <__lshift>
10009bf0:	1023883a 	mov	r17,r2
10009bf4:	98016a1e 	bne	r19,zero,1000a1a0 <_dtoa_r+0x1324>
10009bf8:	8829883a 	mov	r20,r17
10009bfc:	d9000617 	ldw	r4,24(sp)
10009c00:	dcc00717 	ldw	r19,28(sp)
10009c04:	9480004c 	andi	r18,r18,1
10009c08:	20bfffc4 	addi	r2,r4,-1
10009c0c:	9885883a 	add	r2,r19,r2
10009c10:	d8800415 	stw	r2,16(sp)
10009c14:	dc800615 	stw	r18,24(sp)
10009c18:	e009883a 	mov	r4,fp
10009c1c:	a80b883a 	mov	r5,r21
10009c20:	0008c540 	call	10008c54 <quorem>
10009c24:	e009883a 	mov	r4,fp
10009c28:	880b883a 	mov	r5,r17
10009c2c:	102f883a 	mov	r23,r2
10009c30:	000c8340 	call	1000c834 <__mcmp>
10009c34:	8009883a 	mov	r4,r16
10009c38:	a80b883a 	mov	r5,r21
10009c3c:	a00d883a 	mov	r6,r20
10009c40:	102d883a 	mov	r22,r2
10009c44:	000c8940 	call	1000c894 <__mdiff>
10009c48:	1007883a 	mov	r3,r2
10009c4c:	10800317 	ldw	r2,12(r2)
10009c50:	bc800c04 	addi	r18,r23,48
10009c54:	1000971e 	bne	r2,zero,10009eb4 <_dtoa_r+0x1038>
10009c58:	180b883a 	mov	r5,r3
10009c5c:	e009883a 	mov	r4,fp
10009c60:	d8c01515 	stw	r3,84(sp)
10009c64:	000c8340 	call	1000c834 <__mcmp>
10009c68:	d8c01517 	ldw	r3,84(sp)
10009c6c:	8009883a 	mov	r4,r16
10009c70:	d8801515 	stw	r2,84(sp)
10009c74:	180b883a 	mov	r5,r3
10009c78:	000bf600 	call	1000bf60 <_Bfree>
10009c7c:	d8801517 	ldw	r2,84(sp)
10009c80:	1000041e 	bne	r2,zero,10009c94 <_dtoa_r+0xe18>
10009c84:	d9800317 	ldw	r6,12(sp)
10009c88:	3000021e 	bne	r6,zero,10009c94 <_dtoa_r+0xe18>
10009c8c:	d8c00617 	ldw	r3,24(sp)
10009c90:	18007626 	beq	r3,zero,10009e6c <_dtoa_r+0xff0>
10009c94:	b0005b16 	blt	r22,zero,10009e04 <_dtoa_r+0xf88>
10009c98:	b000041e 	bne	r22,zero,10009cac <_dtoa_r+0xe30>
10009c9c:	d9000317 	ldw	r4,12(sp)
10009ca0:	2000021e 	bne	r4,zero,10009cac <_dtoa_r+0xe30>
10009ca4:	d8c00617 	ldw	r3,24(sp)
10009ca8:	18005626 	beq	r3,zero,10009e04 <_dtoa_r+0xf88>
10009cac:	00814d16 	blt	zero,r2,1000a1e4 <_dtoa_r+0x1368>
10009cb0:	d8c00417 	ldw	r3,16(sp)
10009cb4:	9d800044 	addi	r22,r19,1
10009cb8:	9c800005 	stb	r18,0(r19)
10009cbc:	b02f883a 	mov	r23,r22
10009cc0:	98c14c26 	beq	r19,r3,1000a1f4 <_dtoa_r+0x1378>
10009cc4:	e00b883a 	mov	r5,fp
10009cc8:	8009883a 	mov	r4,r16
10009ccc:	01800284 	movi	r6,10
10009cd0:	000f883a 	mov	r7,zero
10009cd4:	000bf880 	call	1000bf88 <__multadd>
10009cd8:	1039883a 	mov	fp,r2
10009cdc:	8d006d26 	beq	r17,r20,10009e94 <_dtoa_r+0x1018>
10009ce0:	880b883a 	mov	r5,r17
10009ce4:	01800284 	movi	r6,10
10009ce8:	000f883a 	mov	r7,zero
10009cec:	8009883a 	mov	r4,r16
10009cf0:	000bf880 	call	1000bf88 <__multadd>
10009cf4:	a00b883a 	mov	r5,r20
10009cf8:	8009883a 	mov	r4,r16
10009cfc:	01800284 	movi	r6,10
10009d00:	000f883a 	mov	r7,zero
10009d04:	1023883a 	mov	r17,r2
10009d08:	000bf880 	call	1000bf88 <__multadd>
10009d0c:	1029883a 	mov	r20,r2
10009d10:	b027883a 	mov	r19,r22
10009d14:	003fc006 	br	10009c18 <__alt_data_end+0xf8009c18>
10009d18:	a005883a 	mov	r2,r20
10009d1c:	003ede06 	br	10009898 <__alt_data_end+0xf8009898>
10009d20:	01000044 	movi	r4,1
10009d24:	d9000b15 	stw	r4,44(sp)
10009d28:	d9802217 	ldw	r6,136(sp)
10009d2c:	0180dc0e 	bge	zero,r6,1000a0a0 <_dtoa_r+0x1224>
10009d30:	3023883a 	mov	r17,r6
10009d34:	d9800d15 	stw	r6,52(sp)
10009d38:	d9800615 	stw	r6,24(sp)
10009d3c:	003d1e06 	br	100091b8 <__alt_data_end+0xf80091b8>
10009d40:	d8800617 	ldw	r2,24(sp)
10009d44:	00be3716 	blt	zero,r2,10009624 <__alt_data_end+0xf8009624>
10009d48:	1000be1e 	bne	r2,zero,1000a044 <_dtoa_r+0x11c8>
10009d4c:	8809883a 	mov	r4,r17
10009d50:	a00b883a 	mov	r5,r20
10009d54:	000d883a 	mov	r6,zero
10009d58:	01d00534 	movhi	r7,16404
10009d5c:	00055740 	call	10005574 <__muldf3>
10009d60:	1009883a 	mov	r4,r2
10009d64:	180b883a 	mov	r5,r3
10009d68:	900d883a 	mov	r6,r18
10009d6c:	980f883a 	mov	r7,r19
10009d70:	00053b40 	call	100053b4 <__gedf2>
10009d74:	002b883a 	mov	r21,zero
10009d78:	0023883a 	mov	r17,zero
10009d7c:	10007a16 	blt	r2,zero,10009f68 <_dtoa_r+0x10ec>
10009d80:	d9002217 	ldw	r4,136(sp)
10009d84:	ddc00717 	ldw	r23,28(sp)
10009d88:	0108303a 	nor	r4,zero,r4
10009d8c:	d9000515 	stw	r4,20(sp)
10009d90:	8009883a 	mov	r4,r16
10009d94:	a80b883a 	mov	r5,r21
10009d98:	000bf600 	call	1000bf60 <_Bfree>
10009d9c:	883f751e 	bne	r17,zero,10009b74 <__alt_data_end+0xf8009b74>
10009da0:	003de406 	br	10009534 <__alt_data_end+0xf8009534>
10009da4:	e00b883a 	mov	r5,fp
10009da8:	8009883a 	mov	r4,r16
10009dac:	000c5ac0 	call	1000c5ac <__pow5mult>
10009db0:	1039883a 	mov	fp,r2
10009db4:	003ed306 	br	10009904 <__alt_data_end+0xf8009904>
10009db8:	903ee01e 	bne	r18,zero,1000993c <__alt_data_end+0xf800993c>
10009dbc:	00800434 	movhi	r2,16
10009dc0:	10bfffc4 	addi	r2,r2,-1
10009dc4:	9884703a 	and	r2,r19,r2
10009dc8:	103f081e 	bne	r2,zero,100099ec <__alt_data_end+0xf80099ec>
10009dcc:	9cdffc2c 	andhi	r19,r19,32752
10009dd0:	983f0626 	beq	r19,zero,100099ec <__alt_data_end+0xf80099ec>
10009dd4:	d8800817 	ldw	r2,32(sp)
10009dd8:	b5800044 	addi	r22,r22,1
10009ddc:	04c00044 	movi	r19,1
10009de0:	10800044 	addi	r2,r2,1
10009de4:	d8800815 	stw	r2,32(sp)
10009de8:	003f0106 	br	100099f0 <__alt_data_end+0xf80099f0>
10009dec:	d9800f17 	ldw	r6,60(sp)
10009df0:	30016826 	beq	r6,zero,1000a394 <_dtoa_r+0x1518>
10009df4:	10810cc4 	addi	r2,r2,1075
10009df8:	dd400917 	ldw	r21,36(sp)
10009dfc:	dd000817 	ldw	r20,32(sp)
10009e00:	003e9906 	br	10009868 <__alt_data_end+0xf8009868>
10009e04:	9011883a 	mov	r8,r18
10009e08:	4007883a 	mov	r3,r8
10009e0c:	e02d883a 	mov	r22,fp
10009e10:	0080100e 	bge	zero,r2,10009e54 <_dtoa_r+0xfd8>
10009e14:	01800044 	movi	r6,1
10009e18:	8009883a 	mov	r4,r16
10009e1c:	e00b883a 	mov	r5,fp
10009e20:	da001515 	stw	r8,84(sp)
10009e24:	da001715 	stw	r8,92(sp)
10009e28:	000c6ec0 	call	1000c6ec <__lshift>
10009e2c:	1009883a 	mov	r4,r2
10009e30:	a80b883a 	mov	r5,r21
10009e34:	102d883a 	mov	r22,r2
10009e38:	000c8340 	call	1000c834 <__mcmp>
10009e3c:	d8c01517 	ldw	r3,84(sp)
10009e40:	da001717 	ldw	r8,92(sp)
10009e44:	0081a50e 	bge	zero,r2,1000a4dc <_dtoa_r+0x1660>
10009e48:	00800e44 	movi	r2,57
10009e4c:	40817b26 	beq	r8,r2,1000a43c <_dtoa_r+0x15c0>
10009e50:	40c00044 	addi	r3,r8,1
10009e54:	8825883a 	mov	r18,r17
10009e58:	9dc00044 	addi	r23,r19,1
10009e5c:	98c00005 	stb	r3,0(r19)
10009e60:	a023883a 	mov	r17,r20
10009e64:	b039883a 	mov	fp,r22
10009e68:	003f3906 	br	10009b50 <__alt_data_end+0xf8009b50>
10009e6c:	00800e44 	movi	r2,57
10009e70:	9011883a 	mov	r8,r18
10009e74:	90817226 	beq	r18,r2,1000a440 <_dtoa_r+0x15c4>
10009e78:	0580010e 	bge	zero,r22,10009e80 <_dtoa_r+0x1004>
10009e7c:	ba000c44 	addi	r8,r23,49
10009e80:	8825883a 	mov	r18,r17
10009e84:	9dc00044 	addi	r23,r19,1
10009e88:	9a000005 	stb	r8,0(r19)
10009e8c:	a023883a 	mov	r17,r20
10009e90:	003f2f06 	br	10009b50 <__alt_data_end+0xf8009b50>
10009e94:	880b883a 	mov	r5,r17
10009e98:	8009883a 	mov	r4,r16
10009e9c:	01800284 	movi	r6,10
10009ea0:	000f883a 	mov	r7,zero
10009ea4:	000bf880 	call	1000bf88 <__multadd>
10009ea8:	1023883a 	mov	r17,r2
10009eac:	1029883a 	mov	r20,r2
10009eb0:	003f9706 	br	10009d10 <__alt_data_end+0xf8009d10>
10009eb4:	8009883a 	mov	r4,r16
10009eb8:	180b883a 	mov	r5,r3
10009ebc:	000bf600 	call	1000bf60 <_Bfree>
10009ec0:	00800044 	movi	r2,1
10009ec4:	003f7306 	br	10009c94 <__alt_data_end+0xf8009c94>
10009ec8:	e009883a 	mov	r4,fp
10009ecc:	a80b883a 	mov	r5,r21
10009ed0:	000c8340 	call	1000c834 <__mcmp>
10009ed4:	103ee60e 	bge	r2,zero,10009a70 <__alt_data_end+0xf8009a70>
10009ed8:	8009883a 	mov	r4,r16
10009edc:	e00b883a 	mov	r5,fp
10009ee0:	01800284 	movi	r6,10
10009ee4:	000f883a 	mov	r7,zero
10009ee8:	000bf880 	call	1000bf88 <__multadd>
10009eec:	d9000517 	ldw	r4,20(sp)
10009ef0:	d9800b17 	ldw	r6,44(sp)
10009ef4:	1039883a 	mov	fp,r2
10009ef8:	213fffc4 	addi	r4,r4,-1
10009efc:	d9000515 	stw	r4,20(sp)
10009f00:	303f2d1e 	bne	r6,zero,10009bb8 <__alt_data_end+0xf8009bb8>
10009f04:	d9000d17 	ldw	r4,52(sp)
10009f08:	0101780e 	bge	zero,r4,1000a4ec <_dtoa_r+0x1670>
10009f0c:	d9000615 	stw	r4,24(sp)
10009f10:	003edb06 	br	10009a80 <__alt_data_end+0xf8009a80>
10009f14:	00800084 	movi	r2,2
10009f18:	30818e1e 	bne	r6,r2,1000a554 <_dtoa_r+0x16d8>
10009f1c:	d8000b15 	stw	zero,44(sp)
10009f20:	003f8106 	br	10009d28 <__alt_data_end+0xf8009d28>
10009f24:	d8800717 	ldw	r2,28(sp)
10009f28:	003c0306 	br	10008f38 <__alt_data_end+0xf8008f38>
10009f2c:	d9000317 	ldw	r4,12(sp)
10009f30:	00800084 	movi	r2,2
10009f34:	113ed00e 	bge	r2,r4,10009a78 <__alt_data_end+0xf8009a78>
10009f38:	d8c00617 	ldw	r3,24(sp)
10009f3c:	183f901e 	bne	r3,zero,10009d80 <__alt_data_end+0xf8009d80>
10009f40:	a80b883a 	mov	r5,r21
10009f44:	8009883a 	mov	r4,r16
10009f48:	01800144 	movi	r6,5
10009f4c:	000f883a 	mov	r7,zero
10009f50:	000bf880 	call	1000bf88 <__multadd>
10009f54:	e009883a 	mov	r4,fp
10009f58:	100b883a 	mov	r5,r2
10009f5c:	102b883a 	mov	r21,r2
10009f60:	000c8340 	call	1000c834 <__mcmp>
10009f64:	00bf860e 	bge	zero,r2,10009d80 <__alt_data_end+0xf8009d80>
10009f68:	d9800717 	ldw	r6,28(sp)
10009f6c:	00800c44 	movi	r2,49
10009f70:	30800005 	stb	r2,0(r6)
10009f74:	d8800517 	ldw	r2,20(sp)
10009f78:	35c00044 	addi	r23,r6,1
10009f7c:	10800044 	addi	r2,r2,1
10009f80:	d8800515 	stw	r2,20(sp)
10009f84:	003f8206 	br	10009d90 <__alt_data_end+0xf8009d90>
10009f88:	903e981e 	bne	r18,zero,100099ec <__alt_data_end+0xf80099ec>
10009f8c:	003f8b06 	br	10009dbc <__alt_data_end+0xf8009dbc>
10009f90:	d9800517 	ldw	r6,20(sp)
10009f94:	d8c00717 	ldw	r3,28(sp)
10009f98:	00800c44 	movi	r2,49
10009f9c:	31800044 	addi	r6,r6,1
10009fa0:	d9800515 	stw	r6,20(sp)
10009fa4:	18800005 	stb	r2,0(r3)
10009fa8:	003ee906 	br	10009b50 <__alt_data_end+0xf8009b50>
10009fac:	dc000317 	ldw	r16,12(sp)
10009fb0:	003d6006 	br	10009534 <__alt_data_end+0xf8009534>
10009fb4:	8809883a 	mov	r4,r17
10009fb8:	00067380 	call	10006738 <__floatsidf>
10009fbc:	a009883a 	mov	r4,r20
10009fc0:	a80b883a 	mov	r5,r21
10009fc4:	100d883a 	mov	r6,r2
10009fc8:	180f883a 	mov	r7,r3
10009fcc:	00055740 	call	10005574 <__muldf3>
10009fd0:	1009883a 	mov	r4,r2
10009fd4:	180b883a 	mov	r5,r3
10009fd8:	000d883a 	mov	r6,zero
10009fdc:	01d00734 	movhi	r7,16412
10009fe0:	00041140 	call	10004114 <__adddf3>
10009fe4:	1023883a 	mov	r17,r2
10009fe8:	00bf3034 	movhi	r2,64704
10009fec:	1885883a 	add	r2,r3,r2
10009ff0:	d8800e15 	stw	r2,56(sp)
10009ff4:	a009883a 	mov	r4,r20
10009ff8:	a80b883a 	mov	r5,r21
10009ffc:	000d883a 	mov	r6,zero
1000a000:	01d00534 	movhi	r7,16404
1000a004:	0005de00 	call	10005de0 <__subdf3>
1000a008:	d9c00e17 	ldw	r7,56(sp)
1000a00c:	1009883a 	mov	r4,r2
1000a010:	180b883a 	mov	r5,r3
1000a014:	880d883a 	mov	r6,r17
1000a018:	102b883a 	mov	r21,r2
1000a01c:	1829883a 	mov	r20,r3
1000a020:	00053b40 	call	100053b4 <__gedf2>
1000a024:	00807716 	blt	zero,r2,1000a204 <_dtoa_r+0x1388>
1000a028:	d8800e17 	ldw	r2,56(sp)
1000a02c:	a809883a 	mov	r4,r21
1000a030:	a00b883a 	mov	r5,r20
1000a034:	11e0003c 	xorhi	r7,r2,32768
1000a038:	880d883a 	mov	r6,r17
1000a03c:	00054940 	call	10005494 <__ledf2>
1000a040:	103d6b0e 	bge	r2,zero,100095f0 <__alt_data_end+0xf80095f0>
1000a044:	002b883a 	mov	r21,zero
1000a048:	0023883a 	mov	r17,zero
1000a04c:	003f4c06 	br	10009d80 <__alt_data_end+0xf8009d80>
1000a050:	d9800917 	ldw	r6,36(sp)
1000a054:	e00b883a 	mov	r5,fp
1000a058:	8009883a 	mov	r4,r16
1000a05c:	000c5ac0 	call	1000c5ac <__pow5mult>
1000a060:	1039883a 	mov	fp,r2
1000a064:	003e2706 	br	10009904 <__alt_data_end+0xf8009904>
1000a068:	d8000b15 	stw	zero,44(sp)
1000a06c:	003c4906 	br	10009194 <__alt_data_end+0xf8009194>
1000a070:	d9000917 	ldw	r4,36(sp)
1000a074:	d9800a17 	ldw	r6,40(sp)
1000a078:	dd400915 	stw	r21,36(sp)
1000a07c:	a905c83a 	sub	r2,r21,r4
1000a080:	308d883a 	add	r6,r6,r2
1000a084:	d9800a15 	stw	r6,40(sp)
1000a088:	002b883a 	mov	r21,zero
1000a08c:	003df206 	br	10009858 <__alt_data_end+0xf8009858>
1000a090:	dc800e15 	stw	r18,56(sp)
1000a094:	982b883a 	mov	r21,r19
1000a098:	04400084 	movi	r17,2
1000a09c:	003c7406 	br	10009270 <__alt_data_end+0xf8009270>
1000a0a0:	04400044 	movi	r17,1
1000a0a4:	dc400d15 	stw	r17,52(sp)
1000a0a8:	dc400615 	stw	r17,24(sp)
1000a0ac:	dc402215 	stw	r17,136(sp)
1000a0b0:	80001115 	stw	zero,68(r16)
1000a0b4:	000b883a 	mov	r5,zero
1000a0b8:	003c4a06 	br	100091e4 <__alt_data_end+0xf80091e4>
1000a0bc:	3023883a 	mov	r17,r6
1000a0c0:	003ffb06 	br	1000a0b0 <__alt_data_end+0xf800a0b0>
1000a0c4:	1000021e 	bne	r2,zero,1000a0d0 <_dtoa_r+0x1254>
1000a0c8:	4200004c 	andi	r8,r8,1
1000a0cc:	403e8f1e 	bne	r8,zero,10009b0c <__alt_data_end+0xf8009b0c>
1000a0d0:	01000c04 	movi	r4,48
1000a0d4:	00000106 	br	1000a0dc <_dtoa_r+0x1260>
1000a0d8:	102f883a 	mov	r23,r2
1000a0dc:	b8bfffc4 	addi	r2,r23,-1
1000a0e0:	10c00007 	ldb	r3,0(r2)
1000a0e4:	193ffc26 	beq	r3,r4,1000a0d8 <__alt_data_end+0xf800a0d8>
1000a0e8:	003e9906 	br	10009b50 <__alt_data_end+0xf8009b50>
1000a0ec:	d9000517 	ldw	r4,20(sp)
1000a0f0:	012fc83a 	sub	r23,zero,r4
1000a0f4:	b800ad26 	beq	r23,zero,1000a3ac <_dtoa_r+0x1530>
1000a0f8:	b88003cc 	andi	r2,r23,15
1000a0fc:	100490fa 	slli	r2,r2,3
1000a100:	00c40074 	movhi	r3,4097
1000a104:	18c98a04 	addi	r3,r3,9768
1000a108:	1885883a 	add	r2,r3,r2
1000a10c:	11800017 	ldw	r6,0(r2)
1000a110:	11c00117 	ldw	r7,4(r2)
1000a114:	b82fd13a 	srai	r23,r23,4
1000a118:	9009883a 	mov	r4,r18
1000a11c:	980b883a 	mov	r5,r19
1000a120:	00055740 	call	10005574 <__muldf3>
1000a124:	1029883a 	mov	r20,r2
1000a128:	182b883a 	mov	r21,r3
1000a12c:	b800f426 	beq	r23,zero,1000a500 <_dtoa_r+0x1684>
1000a130:	02040074 	movhi	r8,4097
1000a134:	42098004 	addi	r8,r8,9728
1000a138:	8029883a 	mov	r20,r16
1000a13c:	04400084 	movi	r17,2
1000a140:	4021883a 	mov	r16,r8
1000a144:	b980004c 	andi	r6,r23,1
1000a148:	1009883a 	mov	r4,r2
1000a14c:	b82fd07a 	srai	r23,r23,1
1000a150:	180b883a 	mov	r5,r3
1000a154:	30000426 	beq	r6,zero,1000a168 <_dtoa_r+0x12ec>
1000a158:	81800017 	ldw	r6,0(r16)
1000a15c:	81c00117 	ldw	r7,4(r16)
1000a160:	8c400044 	addi	r17,r17,1
1000a164:	00055740 	call	10005574 <__muldf3>
1000a168:	84000204 	addi	r16,r16,8
1000a16c:	b83ff51e 	bne	r23,zero,1000a144 <__alt_data_end+0xf800a144>
1000a170:	a021883a 	mov	r16,r20
1000a174:	182b883a 	mov	r21,r3
1000a178:	1029883a 	mov	r20,r2
1000a17c:	003c5506 	br	100092d4 <__alt_data_end+0xf80092d4>
1000a180:	d9800517 	ldw	r6,20(sp)
1000a184:	d9000717 	ldw	r4,28(sp)
1000a188:	00c00c04 	movi	r3,48
1000a18c:	31800044 	addi	r6,r6,1
1000a190:	d9800515 	stw	r6,20(sp)
1000a194:	20c00005 	stb	r3,0(r4)
1000a198:	02000c44 	movi	r8,49
1000a19c:	003da206 	br	10009828 <__alt_data_end+0xf8009828>
1000a1a0:	89400117 	ldw	r5,4(r17)
1000a1a4:	8009883a 	mov	r4,r16
1000a1a8:	000beb80 	call	1000beb8 <_Balloc>
1000a1ac:	89800417 	ldw	r6,16(r17)
1000a1b0:	11000304 	addi	r4,r2,12
1000a1b4:	89400304 	addi	r5,r17,12
1000a1b8:	31800084 	addi	r6,r6,2
1000a1bc:	318d883a 	add	r6,r6,r6
1000a1c0:	318d883a 	add	r6,r6,r6
1000a1c4:	1027883a 	mov	r19,r2
1000a1c8:	000bc5c0 	call	1000bc5c <memcpy>
1000a1cc:	8009883a 	mov	r4,r16
1000a1d0:	980b883a 	mov	r5,r19
1000a1d4:	01800044 	movi	r6,1
1000a1d8:	000c6ec0 	call	1000c6ec <__lshift>
1000a1dc:	1029883a 	mov	r20,r2
1000a1e0:	003e8606 	br	10009bfc <__alt_data_end+0xf8009bfc>
1000a1e4:	00800e44 	movi	r2,57
1000a1e8:	90809526 	beq	r18,r2,1000a440 <_dtoa_r+0x15c4>
1000a1ec:	92000044 	addi	r8,r18,1
1000a1f0:	003f2306 	br	10009e80 <__alt_data_end+0xf8009e80>
1000a1f4:	9011883a 	mov	r8,r18
1000a1f8:	8825883a 	mov	r18,r17
1000a1fc:	a023883a 	mov	r17,r20
1000a200:	003e3706 	br	10009ae0 <__alt_data_end+0xf8009ae0>
1000a204:	002b883a 	mov	r21,zero
1000a208:	0023883a 	mov	r17,zero
1000a20c:	003f5606 	br	10009f68 <__alt_data_end+0xf8009f68>
1000a210:	51bfffc4 	addi	r6,r10,-1
1000a214:	300490fa 	slli	r2,r6,3
1000a218:	00c40074 	movhi	r3,4097
1000a21c:	18c98a04 	addi	r3,r3,9768
1000a220:	1885883a 	add	r2,r3,r2
1000a224:	d9c00e17 	ldw	r7,56(sp)
1000a228:	11000017 	ldw	r4,0(r2)
1000a22c:	11400117 	ldw	r5,4(r2)
1000a230:	d8800717 	ldw	r2,28(sp)
1000a234:	d9801015 	stw	r6,64(sp)
1000a238:	880d883a 	mov	r6,r17
1000a23c:	da801615 	stw	r10,88(sp)
1000a240:	15c00044 	addi	r23,r2,1
1000a244:	00055740 	call	10005574 <__muldf3>
1000a248:	a80b883a 	mov	r5,r21
1000a24c:	a009883a 	mov	r4,r20
1000a250:	d8c01115 	stw	r3,68(sp)
1000a254:	d8800e15 	stw	r2,56(sp)
1000a258:	00066b00 	call	100066b0 <__fixdfsi>
1000a25c:	1009883a 	mov	r4,r2
1000a260:	1023883a 	mov	r17,r2
1000a264:	00067380 	call	10006738 <__floatsidf>
1000a268:	a009883a 	mov	r4,r20
1000a26c:	a80b883a 	mov	r5,r21
1000a270:	100d883a 	mov	r6,r2
1000a274:	180f883a 	mov	r7,r3
1000a278:	0005de00 	call	10005de0 <__subdf3>
1000a27c:	1813883a 	mov	r9,r3
1000a280:	d8c00717 	ldw	r3,28(sp)
1000a284:	8c400c04 	addi	r17,r17,48
1000a288:	1011883a 	mov	r8,r2
1000a28c:	1c400005 	stb	r17,0(r3)
1000a290:	da801617 	ldw	r10,88(sp)
1000a294:	00800044 	movi	r2,1
1000a298:	50802326 	beq	r10,r2,1000a328 <_dtoa_r+0x14ac>
1000a29c:	d8800717 	ldw	r2,28(sp)
1000a2a0:	b82b883a 	mov	r21,r23
1000a2a4:	dc001315 	stw	r16,76(sp)
1000a2a8:	12a9883a 	add	r20,r2,r10
1000a2ac:	4807883a 	mov	r3,r9
1000a2b0:	4005883a 	mov	r2,r8
1000a2b4:	dc801415 	stw	r18,80(sp)
1000a2b8:	000d883a 	mov	r6,zero
1000a2bc:	01d00934 	movhi	r7,16420
1000a2c0:	1009883a 	mov	r4,r2
1000a2c4:	180b883a 	mov	r5,r3
1000a2c8:	00055740 	call	10005574 <__muldf3>
1000a2cc:	180b883a 	mov	r5,r3
1000a2d0:	1009883a 	mov	r4,r2
1000a2d4:	1821883a 	mov	r16,r3
1000a2d8:	1025883a 	mov	r18,r2
1000a2dc:	00066b00 	call	100066b0 <__fixdfsi>
1000a2e0:	1009883a 	mov	r4,r2
1000a2e4:	1023883a 	mov	r17,r2
1000a2e8:	00067380 	call	10006738 <__floatsidf>
1000a2ec:	9009883a 	mov	r4,r18
1000a2f0:	800b883a 	mov	r5,r16
1000a2f4:	100d883a 	mov	r6,r2
1000a2f8:	180f883a 	mov	r7,r3
1000a2fc:	8c400c04 	addi	r17,r17,48
1000a300:	0005de00 	call	10005de0 <__subdf3>
1000a304:	ad400044 	addi	r21,r21,1
1000a308:	ac7fffc5 	stb	r17,-1(r21)
1000a30c:	ad3fea1e 	bne	r21,r20,1000a2b8 <__alt_data_end+0xf800a2b8>
1000a310:	1813883a 	mov	r9,r3
1000a314:	d8c01017 	ldw	r3,64(sp)
1000a318:	dc001317 	ldw	r16,76(sp)
1000a31c:	dc801417 	ldw	r18,80(sp)
1000a320:	1011883a 	mov	r8,r2
1000a324:	b8ef883a 	add	r23,r23,r3
1000a328:	d9000e17 	ldw	r4,56(sp)
1000a32c:	d9401117 	ldw	r5,68(sp)
1000a330:	000d883a 	mov	r6,zero
1000a334:	01cff834 	movhi	r7,16352
1000a338:	da001715 	stw	r8,92(sp)
1000a33c:	da401515 	stw	r9,84(sp)
1000a340:	00041140 	call	10004114 <__adddf3>
1000a344:	da001717 	ldw	r8,92(sp)
1000a348:	da401517 	ldw	r9,84(sp)
1000a34c:	1009883a 	mov	r4,r2
1000a350:	400d883a 	mov	r6,r8
1000a354:	480f883a 	mov	r7,r9
1000a358:	180b883a 	mov	r5,r3
1000a35c:	00054940 	call	10005494 <__ledf2>
1000a360:	da001717 	ldw	r8,92(sp)
1000a364:	da401517 	ldw	r9,84(sp)
1000a368:	10003b0e 	bge	r2,zero,1000a458 <_dtoa_r+0x15dc>
1000a36c:	d9001217 	ldw	r4,72(sp)
1000a370:	bd7fffc3 	ldbu	r21,-1(r23)
1000a374:	d9000515 	stw	r4,20(sp)
1000a378:	003d1c06 	br	100097ec <__alt_data_end+0xf80097ec>
1000a37c:	d8c00817 	ldw	r3,32(sp)
1000a380:	18a9c83a 	sub	r20,r3,r2
1000a384:	0005883a 	mov	r2,zero
1000a388:	003d3706 	br	10009868 <__alt_data_end+0xf8009868>
1000a38c:	00800044 	movi	r2,1
1000a390:	003dd006 	br	10009ad4 <__alt_data_end+0xf8009ad4>
1000a394:	d8c00217 	ldw	r3,8(sp)
1000a398:	00800d84 	movi	r2,54
1000a39c:	dd400917 	ldw	r21,36(sp)
1000a3a0:	10c5c83a 	sub	r2,r2,r3
1000a3a4:	dd000817 	ldw	r20,32(sp)
1000a3a8:	003d2f06 	br	10009868 <__alt_data_end+0xf8009868>
1000a3ac:	9029883a 	mov	r20,r18
1000a3b0:	982b883a 	mov	r21,r19
1000a3b4:	04400084 	movi	r17,2
1000a3b8:	003bc606 	br	100092d4 <__alt_data_end+0xf80092d4>
1000a3bc:	d8800617 	ldw	r2,24(sp)
1000a3c0:	103efc26 	beq	r2,zero,10009fb4 <__alt_data_end+0xf8009fb4>
1000a3c4:	d8c00d17 	ldw	r3,52(sp)
1000a3c8:	00fc890e 	bge	zero,r3,100095f0 <__alt_data_end+0xf80095f0>
1000a3cc:	a80b883a 	mov	r5,r21
1000a3d0:	a009883a 	mov	r4,r20
1000a3d4:	000d883a 	mov	r6,zero
1000a3d8:	01d00934 	movhi	r7,16420
1000a3dc:	00055740 	call	10005574 <__muldf3>
1000a3e0:	89000044 	addi	r4,r17,1
1000a3e4:	1029883a 	mov	r20,r2
1000a3e8:	182b883a 	mov	r21,r3
1000a3ec:	00067380 	call	10006738 <__floatsidf>
1000a3f0:	a009883a 	mov	r4,r20
1000a3f4:	a80b883a 	mov	r5,r21
1000a3f8:	100d883a 	mov	r6,r2
1000a3fc:	180f883a 	mov	r7,r3
1000a400:	00055740 	call	10005574 <__muldf3>
1000a404:	1009883a 	mov	r4,r2
1000a408:	180b883a 	mov	r5,r3
1000a40c:	000d883a 	mov	r6,zero
1000a410:	01d00734 	movhi	r7,16412
1000a414:	00041140 	call	10004114 <__adddf3>
1000a418:	d9000517 	ldw	r4,20(sp)
1000a41c:	1023883a 	mov	r17,r2
1000a420:	00bf3034 	movhi	r2,64704
1000a424:	213fffc4 	addi	r4,r4,-1
1000a428:	1885883a 	add	r2,r3,r2
1000a42c:	d9001215 	stw	r4,72(sp)
1000a430:	d8800e15 	stw	r2,56(sp)
1000a434:	da800d17 	ldw	r10,52(sp)
1000a438:	003bc306 	br	10009348 <__alt_data_end+0xf8009348>
1000a43c:	b039883a 	mov	fp,r22
1000a440:	01000e44 	movi	r4,57
1000a444:	8825883a 	mov	r18,r17
1000a448:	9dc00044 	addi	r23,r19,1
1000a44c:	99000005 	stb	r4,0(r19)
1000a450:	a023883a 	mov	r17,r20
1000a454:	003dae06 	br	10009b10 <__alt_data_end+0xf8009b10>
1000a458:	d9800e17 	ldw	r6,56(sp)
1000a45c:	d9c01117 	ldw	r7,68(sp)
1000a460:	0009883a 	mov	r4,zero
1000a464:	014ff834 	movhi	r5,16352
1000a468:	da001715 	stw	r8,92(sp)
1000a46c:	da401515 	stw	r9,84(sp)
1000a470:	0005de00 	call	10005de0 <__subdf3>
1000a474:	da001717 	ldw	r8,92(sp)
1000a478:	da401517 	ldw	r9,84(sp)
1000a47c:	1009883a 	mov	r4,r2
1000a480:	180b883a 	mov	r5,r3
1000a484:	400d883a 	mov	r6,r8
1000a488:	480f883a 	mov	r7,r9
1000a48c:	00053b40 	call	100053b4 <__gedf2>
1000a490:	00bc570e 	bge	zero,r2,100095f0 <__alt_data_end+0xf80095f0>
1000a494:	01000c04 	movi	r4,48
1000a498:	00000106 	br	1000a4a0 <_dtoa_r+0x1624>
1000a49c:	102f883a 	mov	r23,r2
1000a4a0:	b8bfffc4 	addi	r2,r23,-1
1000a4a4:	10c00007 	ldb	r3,0(r2)
1000a4a8:	193ffc26 	beq	r3,r4,1000a49c <__alt_data_end+0xf800a49c>
1000a4ac:	d9801217 	ldw	r6,72(sp)
1000a4b0:	d9800515 	stw	r6,20(sp)
1000a4b4:	003c1f06 	br	10009534 <__alt_data_end+0xf8009534>
1000a4b8:	d8801217 	ldw	r2,72(sp)
1000a4bc:	dc001117 	ldw	r16,68(sp)
1000a4c0:	d8800515 	stw	r2,20(sp)
1000a4c4:	003cc906 	br	100097ec <__alt_data_end+0xf80097ec>
1000a4c8:	dd801317 	ldw	r22,76(sp)
1000a4cc:	dc001117 	ldw	r16,68(sp)
1000a4d0:	dcc01417 	ldw	r19,80(sp)
1000a4d4:	dc801017 	ldw	r18,64(sp)
1000a4d8:	003c4506 	br	100095f0 <__alt_data_end+0xf80095f0>
1000a4dc:	103e5d1e 	bne	r2,zero,10009e54 <__alt_data_end+0xf8009e54>
1000a4e0:	4080004c 	andi	r2,r8,1
1000a4e4:	103e5b26 	beq	r2,zero,10009e54 <__alt_data_end+0xf8009e54>
1000a4e8:	003e5706 	br	10009e48 <__alt_data_end+0xf8009e48>
1000a4ec:	d8c00317 	ldw	r3,12(sp)
1000a4f0:	00800084 	movi	r2,2
1000a4f4:	10c00a16 	blt	r2,r3,1000a520 <_dtoa_r+0x16a4>
1000a4f8:	d9000d17 	ldw	r4,52(sp)
1000a4fc:	003e8306 	br	10009f0c <__alt_data_end+0xf8009f0c>
1000a500:	04400084 	movi	r17,2
1000a504:	003b7306 	br	100092d4 <__alt_data_end+0xf80092d4>
1000a508:	d9801217 	ldw	r6,72(sp)
1000a50c:	d9800515 	stw	r6,20(sp)
1000a510:	003cb606 	br	100097ec <__alt_data_end+0xf80097ec>
1000a514:	d9001217 	ldw	r4,72(sp)
1000a518:	d9000515 	stw	r4,20(sp)
1000a51c:	003c0506 	br	10009534 <__alt_data_end+0xf8009534>
1000a520:	d9800d17 	ldw	r6,52(sp)
1000a524:	d9800615 	stw	r6,24(sp)
1000a528:	003e8306 	br	10009f38 <__alt_data_end+0xf8009f38>
1000a52c:	d9800317 	ldw	r6,12(sp)
1000a530:	00800084 	movi	r2,2
1000a534:	11800216 	blt	r2,r6,1000a540 <_dtoa_r+0x16c4>
1000a538:	d8800d17 	ldw	r2,52(sp)
1000a53c:	003da606 	br	10009bd8 <__alt_data_end+0xf8009bd8>
1000a540:	d8800d17 	ldw	r2,52(sp)
1000a544:	d8800615 	stw	r2,24(sp)
1000a548:	003e7b06 	br	10009f38 <__alt_data_end+0xf8009f38>
1000a54c:	05000044 	movi	r20,1
1000a550:	003b0506 	br	10009168 <__alt_data_end+0xf8009168>
1000a554:	8009883a 	mov	r4,r16
1000a558:	80001115 	stw	zero,68(r16)
1000a55c:	000b883a 	mov	r5,zero
1000a560:	000beb80 	call	1000beb8 <_Balloc>
1000a564:	d8800715 	stw	r2,28(sp)
1000a568:	d8c00717 	ldw	r3,28(sp)
1000a56c:	00bfffc4 	movi	r2,-1
1000a570:	01000044 	movi	r4,1
1000a574:	d8800615 	stw	r2,24(sp)
1000a578:	80c01015 	stw	r3,64(r16)
1000a57c:	d9000b15 	stw	r4,44(sp)
1000a580:	d8002215 	stw	zero,136(sp)
1000a584:	d8800d15 	stw	r2,52(sp)
1000a588:	003c1906 	br	100095f0 <__alt_data_end+0xf80095f0>
1000a58c:	193d2926 	beq	r3,r4,10009a34 <__alt_data_end+0xf8009a34>
1000a590:	00c00f04 	movi	r3,60
1000a594:	1885c83a 	sub	r2,r3,r2
1000a598:	003d7b06 	br	10009b88 <__alt_data_end+0xf8009b88>
1000a59c:	000b883a 	mov	r5,zero
1000a5a0:	003b1006 	br	100091e4 <__alt_data_end+0xf80091e4>

1000a5a4 <_fflush_r>:
1000a5a4:	defffb04 	addi	sp,sp,-20
1000a5a8:	dcc00315 	stw	r19,12(sp)
1000a5ac:	dc000015 	stw	r16,0(sp)
1000a5b0:	dfc00415 	stw	ra,16(sp)
1000a5b4:	dc800215 	stw	r18,8(sp)
1000a5b8:	dc400115 	stw	r17,4(sp)
1000a5bc:	2027883a 	mov	r19,r4
1000a5c0:	2821883a 	mov	r16,r5
1000a5c4:	20000226 	beq	r4,zero,1000a5d0 <_fflush_r+0x2c>
1000a5c8:	20800e17 	ldw	r2,56(r4)
1000a5cc:	10005326 	beq	r2,zero,1000a71c <_fflush_r+0x178>
1000a5d0:	8080030b 	ldhu	r2,12(r16)
1000a5d4:	10ffffcc 	andi	r3,r2,65535
1000a5d8:	18e0001c 	xori	r3,r3,32768
1000a5dc:	18e00004 	addi	r3,r3,-32768
1000a5e0:	18002c26 	beq	r3,zero,1000a694 <_fflush_r+0xf0>
1000a5e4:	10c0020c 	andi	r3,r2,8
1000a5e8:	1800321e 	bne	r3,zero,1000a6b4 <_fflush_r+0x110>
1000a5ec:	80c00117 	ldw	r3,4(r16)
1000a5f0:	10820014 	ori	r2,r2,2048
1000a5f4:	8080030d 	sth	r2,12(r16)
1000a5f8:	00c0570e 	bge	zero,r3,1000a758 <_fflush_r+0x1b4>
1000a5fc:	82000a17 	ldw	r8,40(r16)
1000a600:	40002426 	beq	r8,zero,1000a694 <_fflush_r+0xf0>
1000a604:	9c400017 	ldw	r17,0(r19)
1000a608:	10c4000c 	andi	r3,r2,4096
1000a60c:	98000015 	stw	zero,0(r19)
1000a610:	18004626 	beq	r3,zero,1000a72c <_fflush_r+0x188>
1000a614:	81801417 	ldw	r6,80(r16)
1000a618:	10c0010c 	andi	r3,r2,4
1000a61c:	18000626 	beq	r3,zero,1000a638 <_fflush_r+0x94>
1000a620:	80c00117 	ldw	r3,4(r16)
1000a624:	80800c17 	ldw	r2,48(r16)
1000a628:	30cdc83a 	sub	r6,r6,r3
1000a62c:	10000226 	beq	r2,zero,1000a638 <_fflush_r+0x94>
1000a630:	80800f17 	ldw	r2,60(r16)
1000a634:	308dc83a 	sub	r6,r6,r2
1000a638:	81400717 	ldw	r5,28(r16)
1000a63c:	9809883a 	mov	r4,r19
1000a640:	000f883a 	mov	r7,zero
1000a644:	403ee83a 	callr	r8
1000a648:	00ffffc4 	movi	r3,-1
1000a64c:	10c04526 	beq	r2,r3,1000a764 <_fflush_r+0x1c0>
1000a650:	80c0030b 	ldhu	r3,12(r16)
1000a654:	81000417 	ldw	r4,16(r16)
1000a658:	80000115 	stw	zero,4(r16)
1000a65c:	197dffcc 	andi	r5,r3,63487
1000a660:	8140030d 	sth	r5,12(r16)
1000a664:	81000015 	stw	r4,0(r16)
1000a668:	18c4000c 	andi	r3,r3,4096
1000a66c:	18000126 	beq	r3,zero,1000a674 <_fflush_r+0xd0>
1000a670:	80801415 	stw	r2,80(r16)
1000a674:	81400c17 	ldw	r5,48(r16)
1000a678:	9c400015 	stw	r17,0(r19)
1000a67c:	28000526 	beq	r5,zero,1000a694 <_fflush_r+0xf0>
1000a680:	80801004 	addi	r2,r16,64
1000a684:	28800226 	beq	r5,r2,1000a690 <_fflush_r+0xec>
1000a688:	9809883a 	mov	r4,r19
1000a68c:	000acd40 	call	1000acd4 <_free_r>
1000a690:	80000c15 	stw	zero,48(r16)
1000a694:	0005883a 	mov	r2,zero
1000a698:	dfc00417 	ldw	ra,16(sp)
1000a69c:	dcc00317 	ldw	r19,12(sp)
1000a6a0:	dc800217 	ldw	r18,8(sp)
1000a6a4:	dc400117 	ldw	r17,4(sp)
1000a6a8:	dc000017 	ldw	r16,0(sp)
1000a6ac:	dec00504 	addi	sp,sp,20
1000a6b0:	f800283a 	ret
1000a6b4:	84800417 	ldw	r18,16(r16)
1000a6b8:	903ff626 	beq	r18,zero,1000a694 <__alt_data_end+0xf800a694>
1000a6bc:	84400017 	ldw	r17,0(r16)
1000a6c0:	108000cc 	andi	r2,r2,3
1000a6c4:	84800015 	stw	r18,0(r16)
1000a6c8:	8ca3c83a 	sub	r17,r17,r18
1000a6cc:	10001526 	beq	r2,zero,1000a724 <_fflush_r+0x180>
1000a6d0:	0005883a 	mov	r2,zero
1000a6d4:	80800215 	stw	r2,8(r16)
1000a6d8:	04400316 	blt	zero,r17,1000a6e8 <_fflush_r+0x144>
1000a6dc:	003fed06 	br	1000a694 <__alt_data_end+0xf800a694>
1000a6e0:	90a5883a 	add	r18,r18,r2
1000a6e4:	047feb0e 	bge	zero,r17,1000a694 <__alt_data_end+0xf800a694>
1000a6e8:	80800917 	ldw	r2,36(r16)
1000a6ec:	81400717 	ldw	r5,28(r16)
1000a6f0:	880f883a 	mov	r7,r17
1000a6f4:	900d883a 	mov	r6,r18
1000a6f8:	9809883a 	mov	r4,r19
1000a6fc:	103ee83a 	callr	r2
1000a700:	88a3c83a 	sub	r17,r17,r2
1000a704:	00bff616 	blt	zero,r2,1000a6e0 <__alt_data_end+0xf800a6e0>
1000a708:	80c0030b 	ldhu	r3,12(r16)
1000a70c:	00bfffc4 	movi	r2,-1
1000a710:	18c01014 	ori	r3,r3,64
1000a714:	80c0030d 	sth	r3,12(r16)
1000a718:	003fdf06 	br	1000a698 <__alt_data_end+0xf800a698>
1000a71c:	000ab600 	call	1000ab60 <__sinit>
1000a720:	003fab06 	br	1000a5d0 <__alt_data_end+0xf800a5d0>
1000a724:	80800517 	ldw	r2,20(r16)
1000a728:	003fea06 	br	1000a6d4 <__alt_data_end+0xf800a6d4>
1000a72c:	81400717 	ldw	r5,28(r16)
1000a730:	000d883a 	mov	r6,zero
1000a734:	9809883a 	mov	r4,r19
1000a738:	01c00044 	movi	r7,1
1000a73c:	403ee83a 	callr	r8
1000a740:	100d883a 	mov	r6,r2
1000a744:	00bfffc4 	movi	r2,-1
1000a748:	30801326 	beq	r6,r2,1000a798 <_fflush_r+0x1f4>
1000a74c:	8080030b 	ldhu	r2,12(r16)
1000a750:	82000a17 	ldw	r8,40(r16)
1000a754:	003fb006 	br	1000a618 <__alt_data_end+0xf800a618>
1000a758:	80c00f17 	ldw	r3,60(r16)
1000a75c:	00ffa716 	blt	zero,r3,1000a5fc <__alt_data_end+0xf800a5fc>
1000a760:	003fcc06 	br	1000a694 <__alt_data_end+0xf800a694>
1000a764:	98c00017 	ldw	r3,0(r19)
1000a768:	183fb926 	beq	r3,zero,1000a650 <__alt_data_end+0xf800a650>
1000a76c:	01000744 	movi	r4,29
1000a770:	19000226 	beq	r3,r4,1000a77c <_fflush_r+0x1d8>
1000a774:	01000584 	movi	r4,22
1000a778:	1900101e 	bne	r3,r4,1000a7bc <_fflush_r+0x218>
1000a77c:	8080030b 	ldhu	r2,12(r16)
1000a780:	80c00417 	ldw	r3,16(r16)
1000a784:	80000115 	stw	zero,4(r16)
1000a788:	10bdffcc 	andi	r2,r2,63487
1000a78c:	8080030d 	sth	r2,12(r16)
1000a790:	80c00015 	stw	r3,0(r16)
1000a794:	003fb706 	br	1000a674 <__alt_data_end+0xf800a674>
1000a798:	98800017 	ldw	r2,0(r19)
1000a79c:	103feb26 	beq	r2,zero,1000a74c <__alt_data_end+0xf800a74c>
1000a7a0:	00c00744 	movi	r3,29
1000a7a4:	10c00226 	beq	r2,r3,1000a7b0 <_fflush_r+0x20c>
1000a7a8:	00c00584 	movi	r3,22
1000a7ac:	10ffd61e 	bne	r2,r3,1000a708 <__alt_data_end+0xf800a708>
1000a7b0:	9c400015 	stw	r17,0(r19)
1000a7b4:	0005883a 	mov	r2,zero
1000a7b8:	003fb706 	br	1000a698 <__alt_data_end+0xf800a698>
1000a7bc:	80c0030b 	ldhu	r3,12(r16)
1000a7c0:	18c01014 	ori	r3,r3,64
1000a7c4:	80c0030d 	sth	r3,12(r16)
1000a7c8:	003fb306 	br	1000a698 <__alt_data_end+0xf800a698>

1000a7cc <fflush>:
1000a7cc:	20000526 	beq	r4,zero,1000a7e4 <fflush+0x18>
1000a7d0:	00840074 	movhi	r2,4097
1000a7d4:	10907e04 	addi	r2,r2,16888
1000a7d8:	200b883a 	mov	r5,r4
1000a7dc:	11000017 	ldw	r4,0(r2)
1000a7e0:	000a5a41 	jmpi	1000a5a4 <_fflush_r>
1000a7e4:	00840074 	movhi	r2,4097
1000a7e8:	10907d04 	addi	r2,r2,16884
1000a7ec:	11000017 	ldw	r4,0(r2)
1000a7f0:	01440074 	movhi	r5,4097
1000a7f4:	29696904 	addi	r5,r5,-23132
1000a7f8:	000b07c1 	jmpi	1000b07c <_fwalk_reent>

1000a7fc <__fp_lock>:
1000a7fc:	0005883a 	mov	r2,zero
1000a800:	f800283a 	ret

1000a804 <__fp_unlock>:
1000a804:	0005883a 	mov	r2,zero
1000a808:	f800283a 	ret

1000a80c <_cleanup_r>:
1000a80c:	01440074 	movhi	r5,4097
1000a810:	297a6c04 	addi	r5,r5,-5712
1000a814:	000afc41 	jmpi	1000afc4 <_fwalk>

1000a818 <__sinit.part.1>:
1000a818:	defff604 	addi	sp,sp,-40
1000a81c:	00c40074 	movhi	r3,4097
1000a820:	dfc00915 	stw	ra,36(sp)
1000a824:	df000815 	stw	fp,32(sp)
1000a828:	ddc00715 	stw	r23,28(sp)
1000a82c:	dd800615 	stw	r22,24(sp)
1000a830:	dd400515 	stw	r21,20(sp)
1000a834:	dd000415 	stw	r20,16(sp)
1000a838:	dcc00315 	stw	r19,12(sp)
1000a83c:	dc800215 	stw	r18,8(sp)
1000a840:	dc400115 	stw	r17,4(sp)
1000a844:	dc000015 	stw	r16,0(sp)
1000a848:	18ea0304 	addi	r3,r3,-22516
1000a84c:	24000117 	ldw	r16,4(r4)
1000a850:	20c00f15 	stw	r3,60(r4)
1000a854:	07000044 	movi	fp,1
1000a858:	00c000c4 	movi	r3,3
1000a85c:	2080bb04 	addi	r2,r4,748
1000a860:	20c0b915 	stw	r3,740(r4)
1000a864:	27000e15 	stw	fp,56(r4)
1000a868:	2080ba15 	stw	r2,744(r4)
1000a86c:	2000b815 	stw	zero,736(r4)
1000a870:	05c00204 	movi	r23,8
1000a874:	00800104 	movi	r2,4
1000a878:	2025883a 	mov	r18,r4
1000a87c:	b80d883a 	mov	r6,r23
1000a880:	81001704 	addi	r4,r16,92
1000a884:	000b883a 	mov	r5,zero
1000a888:	80000015 	stw	zero,0(r16)
1000a88c:	80000115 	stw	zero,4(r16)
1000a890:	80000215 	stw	zero,8(r16)
1000a894:	8080030d 	sth	r2,12(r16)
1000a898:	80001915 	stw	zero,100(r16)
1000a89c:	8000038d 	sth	zero,14(r16)
1000a8a0:	80000415 	stw	zero,16(r16)
1000a8a4:	80000515 	stw	zero,20(r16)
1000a8a8:	80000615 	stw	zero,24(r16)
1000a8ac:	000bd940 	call	1000bd94 <memset>
1000a8b0:	05840074 	movhi	r22,4097
1000a8b4:	94400217 	ldw	r17,8(r18)
1000a8b8:	05440074 	movhi	r21,4097
1000a8bc:	05040074 	movhi	r20,4097
1000a8c0:	04c40074 	movhi	r19,4097
1000a8c4:	b5b3d504 	addi	r22,r22,-12460
1000a8c8:	ad73ec04 	addi	r21,r21,-12368
1000a8cc:	a5340b04 	addi	r20,r20,-12244
1000a8d0:	9cf42204 	addi	r19,r19,-12152
1000a8d4:	85800815 	stw	r22,32(r16)
1000a8d8:	85400915 	stw	r21,36(r16)
1000a8dc:	85000a15 	stw	r20,40(r16)
1000a8e0:	84c00b15 	stw	r19,44(r16)
1000a8e4:	84000715 	stw	r16,28(r16)
1000a8e8:	00800284 	movi	r2,10
1000a8ec:	89001704 	addi	r4,r17,92
1000a8f0:	b80d883a 	mov	r6,r23
1000a8f4:	000b883a 	mov	r5,zero
1000a8f8:	88000015 	stw	zero,0(r17)
1000a8fc:	88000115 	stw	zero,4(r17)
1000a900:	88000215 	stw	zero,8(r17)
1000a904:	8880030d 	sth	r2,12(r17)
1000a908:	88001915 	stw	zero,100(r17)
1000a90c:	8f00038d 	sth	fp,14(r17)
1000a910:	88000415 	stw	zero,16(r17)
1000a914:	88000515 	stw	zero,20(r17)
1000a918:	88000615 	stw	zero,24(r17)
1000a91c:	000bd940 	call	1000bd94 <memset>
1000a920:	94000317 	ldw	r16,12(r18)
1000a924:	00800484 	movi	r2,18
1000a928:	8c400715 	stw	r17,28(r17)
1000a92c:	8d800815 	stw	r22,32(r17)
1000a930:	8d400915 	stw	r21,36(r17)
1000a934:	8d000a15 	stw	r20,40(r17)
1000a938:	8cc00b15 	stw	r19,44(r17)
1000a93c:	8080030d 	sth	r2,12(r16)
1000a940:	00800084 	movi	r2,2
1000a944:	80000015 	stw	zero,0(r16)
1000a948:	80000115 	stw	zero,4(r16)
1000a94c:	80000215 	stw	zero,8(r16)
1000a950:	80001915 	stw	zero,100(r16)
1000a954:	8080038d 	sth	r2,14(r16)
1000a958:	80000415 	stw	zero,16(r16)
1000a95c:	80000515 	stw	zero,20(r16)
1000a960:	80000615 	stw	zero,24(r16)
1000a964:	81001704 	addi	r4,r16,92
1000a968:	000b883a 	mov	r5,zero
1000a96c:	b80d883a 	mov	r6,r23
1000a970:	000bd940 	call	1000bd94 <memset>
1000a974:	84000715 	stw	r16,28(r16)
1000a978:	85800815 	stw	r22,32(r16)
1000a97c:	85400915 	stw	r21,36(r16)
1000a980:	85000a15 	stw	r20,40(r16)
1000a984:	84c00b15 	stw	r19,44(r16)
1000a988:	dfc00917 	ldw	ra,36(sp)
1000a98c:	df000817 	ldw	fp,32(sp)
1000a990:	ddc00717 	ldw	r23,28(sp)
1000a994:	dd800617 	ldw	r22,24(sp)
1000a998:	dd400517 	ldw	r21,20(sp)
1000a99c:	dd000417 	ldw	r20,16(sp)
1000a9a0:	dcc00317 	ldw	r19,12(sp)
1000a9a4:	dc800217 	ldw	r18,8(sp)
1000a9a8:	dc400117 	ldw	r17,4(sp)
1000a9ac:	dc000017 	ldw	r16,0(sp)
1000a9b0:	dec00a04 	addi	sp,sp,40
1000a9b4:	f800283a 	ret

1000a9b8 <__sfmoreglue>:
1000a9b8:	defffc04 	addi	sp,sp,-16
1000a9bc:	dc800215 	stw	r18,8(sp)
1000a9c0:	2825883a 	mov	r18,r5
1000a9c4:	dc000015 	stw	r16,0(sp)
1000a9c8:	01401a04 	movi	r5,104
1000a9cc:	2021883a 	mov	r16,r4
1000a9d0:	9009883a 	mov	r4,r18
1000a9d4:	dfc00315 	stw	ra,12(sp)
1000a9d8:	dc400115 	stw	r17,4(sp)
1000a9dc:	00040ec0 	call	100040ec <__mulsi3>
1000a9e0:	8009883a 	mov	r4,r16
1000a9e4:	11400304 	addi	r5,r2,12
1000a9e8:	1023883a 	mov	r17,r2
1000a9ec:	000b3cc0 	call	1000b3cc <_malloc_r>
1000a9f0:	1021883a 	mov	r16,r2
1000a9f4:	10000726 	beq	r2,zero,1000aa14 <__sfmoreglue+0x5c>
1000a9f8:	11000304 	addi	r4,r2,12
1000a9fc:	10000015 	stw	zero,0(r2)
1000aa00:	14800115 	stw	r18,4(r2)
1000aa04:	11000215 	stw	r4,8(r2)
1000aa08:	000b883a 	mov	r5,zero
1000aa0c:	880d883a 	mov	r6,r17
1000aa10:	000bd940 	call	1000bd94 <memset>
1000aa14:	8005883a 	mov	r2,r16
1000aa18:	dfc00317 	ldw	ra,12(sp)
1000aa1c:	dc800217 	ldw	r18,8(sp)
1000aa20:	dc400117 	ldw	r17,4(sp)
1000aa24:	dc000017 	ldw	r16,0(sp)
1000aa28:	dec00404 	addi	sp,sp,16
1000aa2c:	f800283a 	ret

1000aa30 <__sfp>:
1000aa30:	00840074 	movhi	r2,4097
1000aa34:	defffb04 	addi	sp,sp,-20
1000aa38:	10907d04 	addi	r2,r2,16884
1000aa3c:	dc800215 	stw	r18,8(sp)
1000aa40:	14800017 	ldw	r18,0(r2)
1000aa44:	dcc00315 	stw	r19,12(sp)
1000aa48:	dfc00415 	stw	ra,16(sp)
1000aa4c:	90800e17 	ldw	r2,56(r18)
1000aa50:	dc400115 	stw	r17,4(sp)
1000aa54:	dc000015 	stw	r16,0(sp)
1000aa58:	2027883a 	mov	r19,r4
1000aa5c:	1000021e 	bne	r2,zero,1000aa68 <__sfp+0x38>
1000aa60:	9009883a 	mov	r4,r18
1000aa64:	000a8180 	call	1000a818 <__sinit.part.1>
1000aa68:	9480b804 	addi	r18,r18,736
1000aa6c:	047fffc4 	movi	r17,-1
1000aa70:	91400117 	ldw	r5,4(r18)
1000aa74:	94000217 	ldw	r16,8(r18)
1000aa78:	297fffc4 	addi	r5,r5,-1
1000aa7c:	28000a16 	blt	r5,zero,1000aaa8 <__sfp+0x78>
1000aa80:	8080030f 	ldh	r2,12(r16)
1000aa84:	10000c26 	beq	r2,zero,1000aab8 <__sfp+0x88>
1000aa88:	80c01d04 	addi	r3,r16,116
1000aa8c:	00000206 	br	1000aa98 <__sfp+0x68>
1000aa90:	18bfe60f 	ldh	r2,-104(r3)
1000aa94:	10000826 	beq	r2,zero,1000aab8 <__sfp+0x88>
1000aa98:	297fffc4 	addi	r5,r5,-1
1000aa9c:	1c3ffd04 	addi	r16,r3,-12
1000aaa0:	18c01a04 	addi	r3,r3,104
1000aaa4:	2c7ffa1e 	bne	r5,r17,1000aa90 <__alt_data_end+0xf800aa90>
1000aaa8:	90800017 	ldw	r2,0(r18)
1000aaac:	10001d26 	beq	r2,zero,1000ab24 <__sfp+0xf4>
1000aab0:	1025883a 	mov	r18,r2
1000aab4:	003fee06 	br	1000aa70 <__alt_data_end+0xf800aa70>
1000aab8:	00bfffc4 	movi	r2,-1
1000aabc:	8080038d 	sth	r2,14(r16)
1000aac0:	00800044 	movi	r2,1
1000aac4:	8080030d 	sth	r2,12(r16)
1000aac8:	80001915 	stw	zero,100(r16)
1000aacc:	80000015 	stw	zero,0(r16)
1000aad0:	80000215 	stw	zero,8(r16)
1000aad4:	80000115 	stw	zero,4(r16)
1000aad8:	80000415 	stw	zero,16(r16)
1000aadc:	80000515 	stw	zero,20(r16)
1000aae0:	80000615 	stw	zero,24(r16)
1000aae4:	81001704 	addi	r4,r16,92
1000aae8:	000b883a 	mov	r5,zero
1000aaec:	01800204 	movi	r6,8
1000aaf0:	000bd940 	call	1000bd94 <memset>
1000aaf4:	8005883a 	mov	r2,r16
1000aaf8:	80000c15 	stw	zero,48(r16)
1000aafc:	80000d15 	stw	zero,52(r16)
1000ab00:	80001115 	stw	zero,68(r16)
1000ab04:	80001215 	stw	zero,72(r16)
1000ab08:	dfc00417 	ldw	ra,16(sp)
1000ab0c:	dcc00317 	ldw	r19,12(sp)
1000ab10:	dc800217 	ldw	r18,8(sp)
1000ab14:	dc400117 	ldw	r17,4(sp)
1000ab18:	dc000017 	ldw	r16,0(sp)
1000ab1c:	dec00504 	addi	sp,sp,20
1000ab20:	f800283a 	ret
1000ab24:	9809883a 	mov	r4,r19
1000ab28:	01400104 	movi	r5,4
1000ab2c:	000a9b80 	call	1000a9b8 <__sfmoreglue>
1000ab30:	90800015 	stw	r2,0(r18)
1000ab34:	103fde1e 	bne	r2,zero,1000aab0 <__alt_data_end+0xf800aab0>
1000ab38:	00800304 	movi	r2,12
1000ab3c:	98800015 	stw	r2,0(r19)
1000ab40:	0005883a 	mov	r2,zero
1000ab44:	003ff006 	br	1000ab08 <__alt_data_end+0xf800ab08>

1000ab48 <_cleanup>:
1000ab48:	00840074 	movhi	r2,4097
1000ab4c:	10907d04 	addi	r2,r2,16884
1000ab50:	11000017 	ldw	r4,0(r2)
1000ab54:	01440074 	movhi	r5,4097
1000ab58:	297a6c04 	addi	r5,r5,-5712
1000ab5c:	000afc41 	jmpi	1000afc4 <_fwalk>

1000ab60 <__sinit>:
1000ab60:	20800e17 	ldw	r2,56(r4)
1000ab64:	10000126 	beq	r2,zero,1000ab6c <__sinit+0xc>
1000ab68:	f800283a 	ret
1000ab6c:	000a8181 	jmpi	1000a818 <__sinit.part.1>

1000ab70 <__sfp_lock_acquire>:
1000ab70:	f800283a 	ret

1000ab74 <__sfp_lock_release>:
1000ab74:	f800283a 	ret

1000ab78 <__sinit_lock_acquire>:
1000ab78:	f800283a 	ret

1000ab7c <__sinit_lock_release>:
1000ab7c:	f800283a 	ret

1000ab80 <__fp_lock_all>:
1000ab80:	00840074 	movhi	r2,4097
1000ab84:	10907e04 	addi	r2,r2,16888
1000ab88:	11000017 	ldw	r4,0(r2)
1000ab8c:	01440074 	movhi	r5,4097
1000ab90:	2969ff04 	addi	r5,r5,-22532
1000ab94:	000afc41 	jmpi	1000afc4 <_fwalk>

1000ab98 <__fp_unlock_all>:
1000ab98:	00840074 	movhi	r2,4097
1000ab9c:	10907e04 	addi	r2,r2,16888
1000aba0:	11000017 	ldw	r4,0(r2)
1000aba4:	01440074 	movhi	r5,4097
1000aba8:	296a0104 	addi	r5,r5,-22524
1000abac:	000afc41 	jmpi	1000afc4 <_fwalk>

1000abb0 <_malloc_trim_r>:
1000abb0:	defffb04 	addi	sp,sp,-20
1000abb4:	dcc00315 	stw	r19,12(sp)
1000abb8:	04c40074 	movhi	r19,4097
1000abbc:	dc800215 	stw	r18,8(sp)
1000abc0:	dc400115 	stw	r17,4(sp)
1000abc4:	dc000015 	stw	r16,0(sp)
1000abc8:	dfc00415 	stw	ra,16(sp)
1000abcc:	2821883a 	mov	r16,r5
1000abd0:	9ccaf804 	addi	r19,r19,11232
1000abd4:	2025883a 	mov	r18,r4
1000abd8:	00101f40 	call	100101f4 <__malloc_lock>
1000abdc:	98800217 	ldw	r2,8(r19)
1000abe0:	14400117 	ldw	r17,4(r2)
1000abe4:	00bfff04 	movi	r2,-4
1000abe8:	88a2703a 	and	r17,r17,r2
1000abec:	8c21c83a 	sub	r16,r17,r16
1000abf0:	8403fbc4 	addi	r16,r16,4079
1000abf4:	8020d33a 	srli	r16,r16,12
1000abf8:	0083ffc4 	movi	r2,4095
1000abfc:	843fffc4 	addi	r16,r16,-1
1000ac00:	8020933a 	slli	r16,r16,12
1000ac04:	1400060e 	bge	r2,r16,1000ac20 <_malloc_trim_r+0x70>
1000ac08:	9009883a 	mov	r4,r18
1000ac0c:	000b883a 	mov	r5,zero
1000ac10:	000cf000 	call	1000cf00 <_sbrk_r>
1000ac14:	98c00217 	ldw	r3,8(r19)
1000ac18:	1c47883a 	add	r3,r3,r17
1000ac1c:	10c00a26 	beq	r2,r3,1000ac48 <_malloc_trim_r+0x98>
1000ac20:	9009883a 	mov	r4,r18
1000ac24:	00102140 	call	10010214 <__malloc_unlock>
1000ac28:	0005883a 	mov	r2,zero
1000ac2c:	dfc00417 	ldw	ra,16(sp)
1000ac30:	dcc00317 	ldw	r19,12(sp)
1000ac34:	dc800217 	ldw	r18,8(sp)
1000ac38:	dc400117 	ldw	r17,4(sp)
1000ac3c:	dc000017 	ldw	r16,0(sp)
1000ac40:	dec00504 	addi	sp,sp,20
1000ac44:	f800283a 	ret
1000ac48:	9009883a 	mov	r4,r18
1000ac4c:	040bc83a 	sub	r5,zero,r16
1000ac50:	000cf000 	call	1000cf00 <_sbrk_r>
1000ac54:	00ffffc4 	movi	r3,-1
1000ac58:	10c00d26 	beq	r2,r3,1000ac90 <_malloc_trim_r+0xe0>
1000ac5c:	00c40074 	movhi	r3,4097
1000ac60:	18d75e04 	addi	r3,r3,23928
1000ac64:	18800017 	ldw	r2,0(r3)
1000ac68:	99000217 	ldw	r4,8(r19)
1000ac6c:	8c23c83a 	sub	r17,r17,r16
1000ac70:	8c400054 	ori	r17,r17,1
1000ac74:	1421c83a 	sub	r16,r2,r16
1000ac78:	24400115 	stw	r17,4(r4)
1000ac7c:	9009883a 	mov	r4,r18
1000ac80:	1c000015 	stw	r16,0(r3)
1000ac84:	00102140 	call	10010214 <__malloc_unlock>
1000ac88:	00800044 	movi	r2,1
1000ac8c:	003fe706 	br	1000ac2c <__alt_data_end+0xf800ac2c>
1000ac90:	9009883a 	mov	r4,r18
1000ac94:	000b883a 	mov	r5,zero
1000ac98:	000cf000 	call	1000cf00 <_sbrk_r>
1000ac9c:	99000217 	ldw	r4,8(r19)
1000aca0:	014003c4 	movi	r5,15
1000aca4:	1107c83a 	sub	r3,r2,r4
1000aca8:	28ffdd0e 	bge	r5,r3,1000ac20 <__alt_data_end+0xf800ac20>
1000acac:	01440074 	movhi	r5,4097
1000acb0:	29508004 	addi	r5,r5,16896
1000acb4:	29400017 	ldw	r5,0(r5)
1000acb8:	18c00054 	ori	r3,r3,1
1000acbc:	20c00115 	stw	r3,4(r4)
1000acc0:	00c40074 	movhi	r3,4097
1000acc4:	1145c83a 	sub	r2,r2,r5
1000acc8:	18d75e04 	addi	r3,r3,23928
1000accc:	18800015 	stw	r2,0(r3)
1000acd0:	003fd306 	br	1000ac20 <__alt_data_end+0xf800ac20>

1000acd4 <_free_r>:
1000acd4:	28004c26 	beq	r5,zero,1000ae08 <_free_r+0x134>
1000acd8:	defffd04 	addi	sp,sp,-12
1000acdc:	dc400115 	stw	r17,4(sp)
1000ace0:	dc000015 	stw	r16,0(sp)
1000ace4:	2023883a 	mov	r17,r4
1000ace8:	2821883a 	mov	r16,r5
1000acec:	dfc00215 	stw	ra,8(sp)
1000acf0:	00101f40 	call	100101f4 <__malloc_lock>
1000acf4:	813fff17 	ldw	r4,-4(r16)
1000acf8:	00bfff84 	movi	r2,-2
1000acfc:	02440074 	movhi	r9,4097
1000ad00:	81bffe04 	addi	r6,r16,-8
1000ad04:	2084703a 	and	r2,r4,r2
1000ad08:	4a4af804 	addi	r9,r9,11232
1000ad0c:	308b883a 	add	r5,r6,r2
1000ad10:	2a000117 	ldw	r8,4(r5)
1000ad14:	49c00217 	ldw	r7,8(r9)
1000ad18:	00ffff04 	movi	r3,-4
1000ad1c:	40c6703a 	and	r3,r8,r3
1000ad20:	39405326 	beq	r7,r5,1000ae70 <_free_r+0x19c>
1000ad24:	28c00115 	stw	r3,4(r5)
1000ad28:	2100004c 	andi	r4,r4,1
1000ad2c:	2000091e 	bne	r4,zero,1000ad54 <_free_r+0x80>
1000ad30:	81fffe17 	ldw	r7,-8(r16)
1000ad34:	4a000204 	addi	r8,r9,8
1000ad38:	31cdc83a 	sub	r6,r6,r7
1000ad3c:	31000217 	ldw	r4,8(r6)
1000ad40:	11c5883a 	add	r2,r2,r7
1000ad44:	22006126 	beq	r4,r8,1000aecc <_free_r+0x1f8>
1000ad48:	31c00317 	ldw	r7,12(r6)
1000ad4c:	21c00315 	stw	r7,12(r4)
1000ad50:	39000215 	stw	r4,8(r7)
1000ad54:	28c9883a 	add	r4,r5,r3
1000ad58:	21c00117 	ldw	r7,4(r4)
1000ad5c:	39c0004c 	andi	r7,r7,1
1000ad60:	38000d1e 	bne	r7,zero,1000ad98 <_free_r+0xc4>
1000ad64:	29000217 	ldw	r4,8(r5)
1000ad68:	10c5883a 	add	r2,r2,r3
1000ad6c:	00c40074 	movhi	r3,4097
1000ad70:	18cafa04 	addi	r3,r3,11240
1000ad74:	20c07526 	beq	r4,r3,1000af4c <_free_r+0x278>
1000ad78:	29c00317 	ldw	r7,12(r5)
1000ad7c:	11400054 	ori	r5,r2,1
1000ad80:	3087883a 	add	r3,r6,r2
1000ad84:	21c00315 	stw	r7,12(r4)
1000ad88:	39000215 	stw	r4,8(r7)
1000ad8c:	31400115 	stw	r5,4(r6)
1000ad90:	18800015 	stw	r2,0(r3)
1000ad94:	00000406 	br	1000ada8 <_free_r+0xd4>
1000ad98:	10c00054 	ori	r3,r2,1
1000ad9c:	30c00115 	stw	r3,4(r6)
1000ada0:	3087883a 	add	r3,r6,r2
1000ada4:	18800015 	stw	r2,0(r3)
1000ada8:	00c07fc4 	movi	r3,511
1000adac:	18801736 	bltu	r3,r2,1000ae0c <_free_r+0x138>
1000adb0:	1004d0fa 	srli	r2,r2,3
1000adb4:	01400044 	movi	r5,1
1000adb8:	49000117 	ldw	r4,4(r9)
1000adbc:	1087883a 	add	r3,r2,r2
1000adc0:	18c7883a 	add	r3,r3,r3
1000adc4:	1005d0ba 	srai	r2,r2,2
1000adc8:	18c7883a 	add	r3,r3,r3
1000adcc:	1a47883a 	add	r3,r3,r9
1000add0:	19c00217 	ldw	r7,8(r3)
1000add4:	2884983a 	sll	r2,r5,r2
1000add8:	30c00315 	stw	r3,12(r6)
1000addc:	31c00215 	stw	r7,8(r6)
1000ade0:	1104b03a 	or	r2,r2,r4
1000ade4:	19800215 	stw	r6,8(r3)
1000ade8:	48800115 	stw	r2,4(r9)
1000adec:	39800315 	stw	r6,12(r7)
1000adf0:	8809883a 	mov	r4,r17
1000adf4:	dfc00217 	ldw	ra,8(sp)
1000adf8:	dc400117 	ldw	r17,4(sp)
1000adfc:	dc000017 	ldw	r16,0(sp)
1000ae00:	dec00304 	addi	sp,sp,12
1000ae04:	00102141 	jmpi	10010214 <__malloc_unlock>
1000ae08:	f800283a 	ret
1000ae0c:	1006d27a 	srli	r3,r2,9
1000ae10:	01000104 	movi	r4,4
1000ae14:	20c04036 	bltu	r4,r3,1000af18 <_free_r+0x244>
1000ae18:	1006d1ba 	srli	r3,r2,6
1000ae1c:	19400e04 	addi	r5,r3,56
1000ae20:	2947883a 	add	r3,r5,r5
1000ae24:	18c7883a 	add	r3,r3,r3
1000ae28:	18c7883a 	add	r3,r3,r3
1000ae2c:	1a49883a 	add	r4,r3,r9
1000ae30:	20c00217 	ldw	r3,8(r4)
1000ae34:	01c40074 	movhi	r7,4097
1000ae38:	39caf804 	addi	r7,r7,11232
1000ae3c:	19003b26 	beq	r3,r4,1000af2c <_free_r+0x258>
1000ae40:	01ffff04 	movi	r7,-4
1000ae44:	19400117 	ldw	r5,4(r3)
1000ae48:	29ca703a 	and	r5,r5,r7
1000ae4c:	1140022e 	bgeu	r2,r5,1000ae58 <_free_r+0x184>
1000ae50:	18c00217 	ldw	r3,8(r3)
1000ae54:	20fffb1e 	bne	r4,r3,1000ae44 <__alt_data_end+0xf800ae44>
1000ae58:	18800317 	ldw	r2,12(r3)
1000ae5c:	30800315 	stw	r2,12(r6)
1000ae60:	30c00215 	stw	r3,8(r6)
1000ae64:	11800215 	stw	r6,8(r2)
1000ae68:	19800315 	stw	r6,12(r3)
1000ae6c:	003fe006 	br	1000adf0 <__alt_data_end+0xf800adf0>
1000ae70:	2100004c 	andi	r4,r4,1
1000ae74:	1885883a 	add	r2,r3,r2
1000ae78:	2000071e 	bne	r4,zero,1000ae98 <_free_r+0x1c4>
1000ae7c:	817ffe17 	ldw	r5,-8(r16)
1000ae80:	314dc83a 	sub	r6,r6,r5
1000ae84:	30c00317 	ldw	r3,12(r6)
1000ae88:	31000217 	ldw	r4,8(r6)
1000ae8c:	1145883a 	add	r2,r2,r5
1000ae90:	20c00315 	stw	r3,12(r4)
1000ae94:	19000215 	stw	r4,8(r3)
1000ae98:	10c00054 	ori	r3,r2,1
1000ae9c:	30c00115 	stw	r3,4(r6)
1000aea0:	00c40074 	movhi	r3,4097
1000aea4:	18d08104 	addi	r3,r3,16900
1000aea8:	18c00017 	ldw	r3,0(r3)
1000aeac:	49800215 	stw	r6,8(r9)
1000aeb0:	10ffcf36 	bltu	r2,r3,1000adf0 <__alt_data_end+0xf800adf0>
1000aeb4:	00840074 	movhi	r2,4097
1000aeb8:	10975504 	addi	r2,r2,23892
1000aebc:	11400017 	ldw	r5,0(r2)
1000aec0:	8809883a 	mov	r4,r17
1000aec4:	000abb00 	call	1000abb0 <_malloc_trim_r>
1000aec8:	003fc906 	br	1000adf0 <__alt_data_end+0xf800adf0>
1000aecc:	28c9883a 	add	r4,r5,r3
1000aed0:	21000117 	ldw	r4,4(r4)
1000aed4:	2100004c 	andi	r4,r4,1
1000aed8:	20000a1e 	bne	r4,zero,1000af04 <_free_r+0x230>
1000aedc:	29000317 	ldw	r4,12(r5)
1000aee0:	29400217 	ldw	r5,8(r5)
1000aee4:	10c5883a 	add	r2,r2,r3
1000aee8:	10c00054 	ori	r3,r2,1
1000aeec:	29000315 	stw	r4,12(r5)
1000aef0:	21400215 	stw	r5,8(r4)
1000aef4:	30c00115 	stw	r3,4(r6)
1000aef8:	308d883a 	add	r6,r6,r2
1000aefc:	30800015 	stw	r2,0(r6)
1000af00:	003fbb06 	br	1000adf0 <__alt_data_end+0xf800adf0>
1000af04:	10c00054 	ori	r3,r2,1
1000af08:	30c00115 	stw	r3,4(r6)
1000af0c:	308d883a 	add	r6,r6,r2
1000af10:	30800015 	stw	r2,0(r6)
1000af14:	003fb606 	br	1000adf0 <__alt_data_end+0xf800adf0>
1000af18:	01000504 	movi	r4,20
1000af1c:	20c01436 	bltu	r4,r3,1000af70 <_free_r+0x29c>
1000af20:	194016c4 	addi	r5,r3,91
1000af24:	2947883a 	add	r3,r5,r5
1000af28:	003fbe06 	br	1000ae24 <__alt_data_end+0xf800ae24>
1000af2c:	280bd0ba 	srai	r5,r5,2
1000af30:	00800044 	movi	r2,1
1000af34:	39000117 	ldw	r4,4(r7)
1000af38:	114a983a 	sll	r5,r2,r5
1000af3c:	1805883a 	mov	r2,r3
1000af40:	2908b03a 	or	r4,r5,r4
1000af44:	39000115 	stw	r4,4(r7)
1000af48:	003fc406 	br	1000ae5c <__alt_data_end+0xf800ae5c>
1000af4c:	49800515 	stw	r6,20(r9)
1000af50:	49800415 	stw	r6,16(r9)
1000af54:	10c00054 	ori	r3,r2,1
1000af58:	31000315 	stw	r4,12(r6)
1000af5c:	31000215 	stw	r4,8(r6)
1000af60:	30c00115 	stw	r3,4(r6)
1000af64:	308d883a 	add	r6,r6,r2
1000af68:	30800015 	stw	r2,0(r6)
1000af6c:	003fa006 	br	1000adf0 <__alt_data_end+0xf800adf0>
1000af70:	01001504 	movi	r4,84
1000af74:	20c00436 	bltu	r4,r3,1000af88 <_free_r+0x2b4>
1000af78:	1006d33a 	srli	r3,r2,12
1000af7c:	19401b84 	addi	r5,r3,110
1000af80:	2947883a 	add	r3,r5,r5
1000af84:	003fa706 	br	1000ae24 <__alt_data_end+0xf800ae24>
1000af88:	01005504 	movi	r4,340
1000af8c:	20c00436 	bltu	r4,r3,1000afa0 <_free_r+0x2cc>
1000af90:	1006d3fa 	srli	r3,r2,15
1000af94:	19401dc4 	addi	r5,r3,119
1000af98:	2947883a 	add	r3,r5,r5
1000af9c:	003fa106 	br	1000ae24 <__alt_data_end+0xf800ae24>
1000afa0:	01015504 	movi	r4,1364
1000afa4:	20c00436 	bltu	r4,r3,1000afb8 <_free_r+0x2e4>
1000afa8:	1006d4ba 	srli	r3,r2,18
1000afac:	19401f04 	addi	r5,r3,124
1000afb0:	2947883a 	add	r3,r5,r5
1000afb4:	003f9b06 	br	1000ae24 <__alt_data_end+0xf800ae24>
1000afb8:	00c03f04 	movi	r3,252
1000afbc:	01401f84 	movi	r5,126
1000afc0:	003f9806 	br	1000ae24 <__alt_data_end+0xf800ae24>

1000afc4 <_fwalk>:
1000afc4:	defff804 	addi	sp,sp,-32
1000afc8:	dd400515 	stw	r21,20(sp)
1000afcc:	2540b804 	addi	r21,r4,736
1000afd0:	dd800615 	stw	r22,24(sp)
1000afd4:	dd000415 	stw	r20,16(sp)
1000afd8:	dfc00715 	stw	ra,28(sp)
1000afdc:	dcc00315 	stw	r19,12(sp)
1000afe0:	dc800215 	stw	r18,8(sp)
1000afe4:	dc400115 	stw	r17,4(sp)
1000afe8:	dc000015 	stw	r16,0(sp)
1000afec:	2829883a 	mov	r20,r5
1000aff0:	002d883a 	mov	r22,zero
1000aff4:	000ab700 	call	1000ab70 <__sfp_lock_acquire>
1000aff8:	a8001426 	beq	r21,zero,1000b04c <_fwalk+0x88>
1000affc:	04ffffc4 	movi	r19,-1
1000b000:	ac400117 	ldw	r17,4(r21)
1000b004:	ac800217 	ldw	r18,8(r21)
1000b008:	8c7fffc4 	addi	r17,r17,-1
1000b00c:	88000d16 	blt	r17,zero,1000b044 <_fwalk+0x80>
1000b010:	94000304 	addi	r16,r18,12
1000b014:	94800384 	addi	r18,r18,14
1000b018:	80c0000f 	ldh	r3,0(r16)
1000b01c:	8c7fffc4 	addi	r17,r17,-1
1000b020:	813ffd04 	addi	r4,r16,-12
1000b024:	18000426 	beq	r3,zero,1000b038 <_fwalk+0x74>
1000b028:	90c0000f 	ldh	r3,0(r18)
1000b02c:	1cc00226 	beq	r3,r19,1000b038 <_fwalk+0x74>
1000b030:	a03ee83a 	callr	r20
1000b034:	b0acb03a 	or	r22,r22,r2
1000b038:	84001a04 	addi	r16,r16,104
1000b03c:	94801a04 	addi	r18,r18,104
1000b040:	8cfff51e 	bne	r17,r19,1000b018 <__alt_data_end+0xf800b018>
1000b044:	ad400017 	ldw	r21,0(r21)
1000b048:	a83fed1e 	bne	r21,zero,1000b000 <__alt_data_end+0xf800b000>
1000b04c:	000ab740 	call	1000ab74 <__sfp_lock_release>
1000b050:	b005883a 	mov	r2,r22
1000b054:	dfc00717 	ldw	ra,28(sp)
1000b058:	dd800617 	ldw	r22,24(sp)
1000b05c:	dd400517 	ldw	r21,20(sp)
1000b060:	dd000417 	ldw	r20,16(sp)
1000b064:	dcc00317 	ldw	r19,12(sp)
1000b068:	dc800217 	ldw	r18,8(sp)
1000b06c:	dc400117 	ldw	r17,4(sp)
1000b070:	dc000017 	ldw	r16,0(sp)
1000b074:	dec00804 	addi	sp,sp,32
1000b078:	f800283a 	ret

1000b07c <_fwalk_reent>:
1000b07c:	defff804 	addi	sp,sp,-32
1000b080:	dd400515 	stw	r21,20(sp)
1000b084:	2540b804 	addi	r21,r4,736
1000b088:	dd800615 	stw	r22,24(sp)
1000b08c:	dd000415 	stw	r20,16(sp)
1000b090:	dcc00315 	stw	r19,12(sp)
1000b094:	dfc00715 	stw	ra,28(sp)
1000b098:	dc800215 	stw	r18,8(sp)
1000b09c:	dc400115 	stw	r17,4(sp)
1000b0a0:	dc000015 	stw	r16,0(sp)
1000b0a4:	2027883a 	mov	r19,r4
1000b0a8:	2829883a 	mov	r20,r5
1000b0ac:	002d883a 	mov	r22,zero
1000b0b0:	000ab700 	call	1000ab70 <__sfp_lock_acquire>
1000b0b4:	a8001326 	beq	r21,zero,1000b104 <_fwalk_reent+0x88>
1000b0b8:	04bfffc4 	movi	r18,-1
1000b0bc:	ac400117 	ldw	r17,4(r21)
1000b0c0:	ac000217 	ldw	r16,8(r21)
1000b0c4:	8c7fffc4 	addi	r17,r17,-1
1000b0c8:	88000c16 	blt	r17,zero,1000b0fc <_fwalk_reent+0x80>
1000b0cc:	84000304 	addi	r16,r16,12
1000b0d0:	80c0000f 	ldh	r3,0(r16)
1000b0d4:	8c7fffc4 	addi	r17,r17,-1
1000b0d8:	817ffd04 	addi	r5,r16,-12
1000b0dc:	18000526 	beq	r3,zero,1000b0f4 <_fwalk_reent+0x78>
1000b0e0:	80c0008f 	ldh	r3,2(r16)
1000b0e4:	9809883a 	mov	r4,r19
1000b0e8:	1c800226 	beq	r3,r18,1000b0f4 <_fwalk_reent+0x78>
1000b0ec:	a03ee83a 	callr	r20
1000b0f0:	b0acb03a 	or	r22,r22,r2
1000b0f4:	84001a04 	addi	r16,r16,104
1000b0f8:	8cbff51e 	bne	r17,r18,1000b0d0 <__alt_data_end+0xf800b0d0>
1000b0fc:	ad400017 	ldw	r21,0(r21)
1000b100:	a83fee1e 	bne	r21,zero,1000b0bc <__alt_data_end+0xf800b0bc>
1000b104:	000ab740 	call	1000ab74 <__sfp_lock_release>
1000b108:	b005883a 	mov	r2,r22
1000b10c:	dfc00717 	ldw	ra,28(sp)
1000b110:	dd800617 	ldw	r22,24(sp)
1000b114:	dd400517 	ldw	r21,20(sp)
1000b118:	dd000417 	ldw	r20,16(sp)
1000b11c:	dcc00317 	ldw	r19,12(sp)
1000b120:	dc800217 	ldw	r18,8(sp)
1000b124:	dc400117 	ldw	r17,4(sp)
1000b128:	dc000017 	ldw	r16,0(sp)
1000b12c:	dec00804 	addi	sp,sp,32
1000b130:	f800283a 	ret

1000b134 <_setlocale_r>:
1000b134:	30001b26 	beq	r6,zero,1000b1a4 <_setlocale_r+0x70>
1000b138:	01440074 	movhi	r5,4097
1000b13c:	defffe04 	addi	sp,sp,-8
1000b140:	29497004 	addi	r5,r5,9664
1000b144:	3009883a 	mov	r4,r6
1000b148:	dc000015 	stw	r16,0(sp)
1000b14c:	dfc00115 	stw	ra,4(sp)
1000b150:	3021883a 	mov	r16,r6
1000b154:	000d0900 	call	1000d090 <strcmp>
1000b158:	1000061e 	bne	r2,zero,1000b174 <_setlocale_r+0x40>
1000b15c:	00840074 	movhi	r2,4097
1000b160:	10895204 	addi	r2,r2,9544
1000b164:	dfc00117 	ldw	ra,4(sp)
1000b168:	dc000017 	ldw	r16,0(sp)
1000b16c:	dec00204 	addi	sp,sp,8
1000b170:	f800283a 	ret
1000b174:	01440074 	movhi	r5,4097
1000b178:	29495204 	addi	r5,r5,9544
1000b17c:	8009883a 	mov	r4,r16
1000b180:	000d0900 	call	1000d090 <strcmp>
1000b184:	103ff526 	beq	r2,zero,1000b15c <__alt_data_end+0xf800b15c>
1000b188:	01440074 	movhi	r5,4097
1000b18c:	29495b04 	addi	r5,r5,9580
1000b190:	8009883a 	mov	r4,r16
1000b194:	000d0900 	call	1000d090 <strcmp>
1000b198:	103ff026 	beq	r2,zero,1000b15c <__alt_data_end+0xf800b15c>
1000b19c:	0005883a 	mov	r2,zero
1000b1a0:	003ff006 	br	1000b164 <__alt_data_end+0xf800b164>
1000b1a4:	00840074 	movhi	r2,4097
1000b1a8:	10895204 	addi	r2,r2,9544
1000b1ac:	f800283a 	ret

1000b1b0 <__locale_charset>:
1000b1b0:	00840074 	movhi	r2,4097
1000b1b4:	108ae204 	addi	r2,r2,11144
1000b1b8:	f800283a 	ret

1000b1bc <__locale_mb_cur_max>:
1000b1bc:	00840074 	movhi	r2,4097
1000b1c0:	10907f04 	addi	r2,r2,16892
1000b1c4:	10800017 	ldw	r2,0(r2)
1000b1c8:	f800283a 	ret

1000b1cc <__locale_msgcharset>:
1000b1cc:	00840074 	movhi	r2,4097
1000b1d0:	108ada04 	addi	r2,r2,11112
1000b1d4:	f800283a 	ret

1000b1d8 <__locale_cjk_lang>:
1000b1d8:	0005883a 	mov	r2,zero
1000b1dc:	f800283a 	ret

1000b1e0 <_localeconv_r>:
1000b1e0:	00840074 	movhi	r2,4097
1000b1e4:	108aea04 	addi	r2,r2,11176
1000b1e8:	f800283a 	ret

1000b1ec <setlocale>:
1000b1ec:	00c40074 	movhi	r3,4097
1000b1f0:	18d07e04 	addi	r3,r3,16888
1000b1f4:	2005883a 	mov	r2,r4
1000b1f8:	19000017 	ldw	r4,0(r3)
1000b1fc:	280d883a 	mov	r6,r5
1000b200:	100b883a 	mov	r5,r2
1000b204:	000b1341 	jmpi	1000b134 <_setlocale_r>

1000b208 <localeconv>:
1000b208:	00840074 	movhi	r2,4097
1000b20c:	108aea04 	addi	r2,r2,11176
1000b210:	f800283a 	ret

1000b214 <__smakebuf_r>:
1000b214:	2880030b 	ldhu	r2,12(r5)
1000b218:	10c0008c 	andi	r3,r2,2
1000b21c:	1800401e 	bne	r3,zero,1000b320 <__smakebuf_r+0x10c>
1000b220:	deffec04 	addi	sp,sp,-80
1000b224:	dc000f15 	stw	r16,60(sp)
1000b228:	2821883a 	mov	r16,r5
1000b22c:	2940038f 	ldh	r5,14(r5)
1000b230:	dc401015 	stw	r17,64(sp)
1000b234:	dfc01315 	stw	ra,76(sp)
1000b238:	dcc01215 	stw	r19,72(sp)
1000b23c:	dc801115 	stw	r18,68(sp)
1000b240:	2023883a 	mov	r17,r4
1000b244:	28001b16 	blt	r5,zero,1000b2b4 <__smakebuf_r+0xa0>
1000b248:	d80d883a 	mov	r6,sp
1000b24c:	000eba00 	call	1000eba0 <_fstat_r>
1000b250:	10001716 	blt	r2,zero,1000b2b0 <__smakebuf_r+0x9c>
1000b254:	d8800117 	ldw	r2,4(sp)
1000b258:	00e00014 	movui	r3,32768
1000b25c:	10bc000c 	andi	r2,r2,61440
1000b260:	10c03726 	beq	r2,r3,1000b340 <__smakebuf_r+0x12c>
1000b264:	80c0030b 	ldhu	r3,12(r16)
1000b268:	18c20014 	ori	r3,r3,2048
1000b26c:	80c0030d 	sth	r3,12(r16)
1000b270:	00c80004 	movi	r3,8192
1000b274:	10c03c1e 	bne	r2,r3,1000b368 <__smakebuf_r+0x154>
1000b278:	8140038f 	ldh	r5,14(r16)
1000b27c:	8809883a 	mov	r4,r17
1000b280:	000f09c0 	call	1000f09c <_isatty_r>
1000b284:	10004e26 	beq	r2,zero,1000b3c0 <__smakebuf_r+0x1ac>
1000b288:	8080030b 	ldhu	r2,12(r16)
1000b28c:	04c00044 	movi	r19,1
1000b290:	80c010c4 	addi	r3,r16,67
1000b294:	14c4b03a 	or	r2,r2,r19
1000b298:	8080030d 	sth	r2,12(r16)
1000b29c:	80c00015 	stw	r3,0(r16)
1000b2a0:	80c00415 	stw	r3,16(r16)
1000b2a4:	84c00515 	stw	r19,20(r16)
1000b2a8:	04810004 	movi	r18,1024
1000b2ac:	00000706 	br	1000b2cc <__smakebuf_r+0xb8>
1000b2b0:	8080030b 	ldhu	r2,12(r16)
1000b2b4:	10c0200c 	andi	r3,r2,128
1000b2b8:	18001f1e 	bne	r3,zero,1000b338 <__smakebuf_r+0x124>
1000b2bc:	04810004 	movi	r18,1024
1000b2c0:	10820014 	ori	r2,r2,2048
1000b2c4:	8080030d 	sth	r2,12(r16)
1000b2c8:	0027883a 	mov	r19,zero
1000b2cc:	8809883a 	mov	r4,r17
1000b2d0:	900b883a 	mov	r5,r18
1000b2d4:	000b3cc0 	call	1000b3cc <_malloc_r>
1000b2d8:	10002e26 	beq	r2,zero,1000b394 <__smakebuf_r+0x180>
1000b2dc:	80c0030b 	ldhu	r3,12(r16)
1000b2e0:	01040074 	movhi	r4,4097
1000b2e4:	212a0304 	addi	r4,r4,-22516
1000b2e8:	89000f15 	stw	r4,60(r17)
1000b2ec:	18c02014 	ori	r3,r3,128
1000b2f0:	80c0030d 	sth	r3,12(r16)
1000b2f4:	80800015 	stw	r2,0(r16)
1000b2f8:	80800415 	stw	r2,16(r16)
1000b2fc:	84800515 	stw	r18,20(r16)
1000b300:	98001c1e 	bne	r19,zero,1000b374 <__smakebuf_r+0x160>
1000b304:	dfc01317 	ldw	ra,76(sp)
1000b308:	dcc01217 	ldw	r19,72(sp)
1000b30c:	dc801117 	ldw	r18,68(sp)
1000b310:	dc401017 	ldw	r17,64(sp)
1000b314:	dc000f17 	ldw	r16,60(sp)
1000b318:	dec01404 	addi	sp,sp,80
1000b31c:	f800283a 	ret
1000b320:	288010c4 	addi	r2,r5,67
1000b324:	28800015 	stw	r2,0(r5)
1000b328:	28800415 	stw	r2,16(r5)
1000b32c:	00800044 	movi	r2,1
1000b330:	28800515 	stw	r2,20(r5)
1000b334:	f800283a 	ret
1000b338:	04801004 	movi	r18,64
1000b33c:	003fe006 	br	1000b2c0 <__alt_data_end+0xf800b2c0>
1000b340:	81000a17 	ldw	r4,40(r16)
1000b344:	00c40074 	movhi	r3,4097
1000b348:	18f40b04 	addi	r3,r3,-12244
1000b34c:	20ffc51e 	bne	r4,r3,1000b264 <__alt_data_end+0xf800b264>
1000b350:	80c0030b 	ldhu	r3,12(r16)
1000b354:	01010004 	movi	r4,1024
1000b358:	81001315 	stw	r4,76(r16)
1000b35c:	1906b03a 	or	r3,r3,r4
1000b360:	80c0030d 	sth	r3,12(r16)
1000b364:	003fc206 	br	1000b270 <__alt_data_end+0xf800b270>
1000b368:	0027883a 	mov	r19,zero
1000b36c:	04810004 	movi	r18,1024
1000b370:	003fd606 	br	1000b2cc <__alt_data_end+0xf800b2cc>
1000b374:	8140038f 	ldh	r5,14(r16)
1000b378:	8809883a 	mov	r4,r17
1000b37c:	000f09c0 	call	1000f09c <_isatty_r>
1000b380:	103fe026 	beq	r2,zero,1000b304 <__alt_data_end+0xf800b304>
1000b384:	8080030b 	ldhu	r2,12(r16)
1000b388:	10800054 	ori	r2,r2,1
1000b38c:	8080030d 	sth	r2,12(r16)
1000b390:	003fdc06 	br	1000b304 <__alt_data_end+0xf800b304>
1000b394:	8080030b 	ldhu	r2,12(r16)
1000b398:	10c0800c 	andi	r3,r2,512
1000b39c:	183fd91e 	bne	r3,zero,1000b304 <__alt_data_end+0xf800b304>
1000b3a0:	10800094 	ori	r2,r2,2
1000b3a4:	80c010c4 	addi	r3,r16,67
1000b3a8:	8080030d 	sth	r2,12(r16)
1000b3ac:	00800044 	movi	r2,1
1000b3b0:	80c00015 	stw	r3,0(r16)
1000b3b4:	80c00415 	stw	r3,16(r16)
1000b3b8:	80800515 	stw	r2,20(r16)
1000b3bc:	003fd106 	br	1000b304 <__alt_data_end+0xf800b304>
1000b3c0:	04c00044 	movi	r19,1
1000b3c4:	04810004 	movi	r18,1024
1000b3c8:	003fc006 	br	1000b2cc <__alt_data_end+0xf800b2cc>

1000b3cc <_malloc_r>:
1000b3cc:	defff504 	addi	sp,sp,-44
1000b3d0:	dc800315 	stw	r18,12(sp)
1000b3d4:	dfc00a15 	stw	ra,40(sp)
1000b3d8:	df000915 	stw	fp,36(sp)
1000b3dc:	ddc00815 	stw	r23,32(sp)
1000b3e0:	dd800715 	stw	r22,28(sp)
1000b3e4:	dd400615 	stw	r21,24(sp)
1000b3e8:	dd000515 	stw	r20,20(sp)
1000b3ec:	dcc00415 	stw	r19,16(sp)
1000b3f0:	dc400215 	stw	r17,8(sp)
1000b3f4:	dc000115 	stw	r16,4(sp)
1000b3f8:	288002c4 	addi	r2,r5,11
1000b3fc:	00c00584 	movi	r3,22
1000b400:	2025883a 	mov	r18,r4
1000b404:	18802a2e 	bgeu	r3,r2,1000b4b0 <_malloc_r+0xe4>
1000b408:	047ffe04 	movi	r17,-8
1000b40c:	1462703a 	and	r17,r2,r17
1000b410:	88009e16 	blt	r17,zero,1000b68c <_malloc_r+0x2c0>
1000b414:	89409d36 	bltu	r17,r5,1000b68c <_malloc_r+0x2c0>
1000b418:	00101f40 	call	100101f4 <__malloc_lock>
1000b41c:	00807dc4 	movi	r2,503
1000b420:	14402736 	bltu	r2,r17,1000b4c0 <_malloc_r+0xf4>
1000b424:	8806d0fa 	srli	r3,r17,3
1000b428:	04c40074 	movhi	r19,4097
1000b42c:	9ccaf804 	addi	r19,r19,11232
1000b430:	18c5883a 	add	r2,r3,r3
1000b434:	1085883a 	add	r2,r2,r2
1000b438:	1085883a 	add	r2,r2,r2
1000b43c:	9885883a 	add	r2,r19,r2
1000b440:	14000317 	ldw	r16,12(r2)
1000b444:	80814a26 	beq	r16,r2,1000b970 <_malloc_r+0x5a4>
1000b448:	80c00117 	ldw	r3,4(r16)
1000b44c:	81000317 	ldw	r4,12(r16)
1000b450:	00bfff04 	movi	r2,-4
1000b454:	1884703a 	and	r2,r3,r2
1000b458:	81400217 	ldw	r5,8(r16)
1000b45c:	8085883a 	add	r2,r16,r2
1000b460:	10c00117 	ldw	r3,4(r2)
1000b464:	29000315 	stw	r4,12(r5)
1000b468:	21400215 	stw	r5,8(r4)
1000b46c:	18c00054 	ori	r3,r3,1
1000b470:	10c00115 	stw	r3,4(r2)
1000b474:	9009883a 	mov	r4,r18
1000b478:	00102140 	call	10010214 <__malloc_unlock>
1000b47c:	80800204 	addi	r2,r16,8
1000b480:	dfc00a17 	ldw	ra,40(sp)
1000b484:	df000917 	ldw	fp,36(sp)
1000b488:	ddc00817 	ldw	r23,32(sp)
1000b48c:	dd800717 	ldw	r22,28(sp)
1000b490:	dd400617 	ldw	r21,24(sp)
1000b494:	dd000517 	ldw	r20,20(sp)
1000b498:	dcc00417 	ldw	r19,16(sp)
1000b49c:	dc800317 	ldw	r18,12(sp)
1000b4a0:	dc400217 	ldw	r17,8(sp)
1000b4a4:	dc000117 	ldw	r16,4(sp)
1000b4a8:	dec00b04 	addi	sp,sp,44
1000b4ac:	f800283a 	ret
1000b4b0:	04400404 	movi	r17,16
1000b4b4:	89407536 	bltu	r17,r5,1000b68c <_malloc_r+0x2c0>
1000b4b8:	00101f40 	call	100101f4 <__malloc_lock>
1000b4bc:	003fd906 	br	1000b424 <__alt_data_end+0xf800b424>
1000b4c0:	8806d27a 	srli	r3,r17,9
1000b4c4:	18007526 	beq	r3,zero,1000b69c <_malloc_r+0x2d0>
1000b4c8:	00800104 	movi	r2,4
1000b4cc:	10c0ef36 	bltu	r2,r3,1000b88c <_malloc_r+0x4c0>
1000b4d0:	8806d1ba 	srli	r3,r17,6
1000b4d4:	19c00e04 	addi	r7,r3,56
1000b4d8:	39cb883a 	add	r5,r7,r7
1000b4dc:	04c40074 	movhi	r19,4097
1000b4e0:	294b883a 	add	r5,r5,r5
1000b4e4:	9ccaf804 	addi	r19,r19,11232
1000b4e8:	294b883a 	add	r5,r5,r5
1000b4ec:	994b883a 	add	r5,r19,r5
1000b4f0:	2c000317 	ldw	r16,12(r5)
1000b4f4:	2c000e26 	beq	r5,r16,1000b530 <_malloc_r+0x164>
1000b4f8:	80800117 	ldw	r2,4(r16)
1000b4fc:	01bfff04 	movi	r6,-4
1000b500:	010003c4 	movi	r4,15
1000b504:	1184703a 	and	r2,r2,r6
1000b508:	1447c83a 	sub	r3,r2,r17
1000b50c:	20c00716 	blt	r4,r3,1000b52c <_malloc_r+0x160>
1000b510:	1800650e 	bge	r3,zero,1000b6a8 <_malloc_r+0x2dc>
1000b514:	84000317 	ldw	r16,12(r16)
1000b518:	2c000526 	beq	r5,r16,1000b530 <_malloc_r+0x164>
1000b51c:	80800117 	ldw	r2,4(r16)
1000b520:	1184703a 	and	r2,r2,r6
1000b524:	1447c83a 	sub	r3,r2,r17
1000b528:	20fff90e 	bge	r4,r3,1000b510 <__alt_data_end+0xf800b510>
1000b52c:	39ffffc4 	addi	r7,r7,-1
1000b530:	38c00044 	addi	r3,r7,1
1000b534:	01840074 	movhi	r6,4097
1000b538:	9c000417 	ldw	r16,16(r19)
1000b53c:	318af804 	addi	r6,r6,11232
1000b540:	32400204 	addi	r9,r6,8
1000b544:	82410326 	beq	r16,r9,1000b954 <_malloc_r+0x588>
1000b548:	81000117 	ldw	r4,4(r16)
1000b54c:	00bfff04 	movi	r2,-4
1000b550:	208e703a 	and	r7,r4,r2
1000b554:	3c45c83a 	sub	r2,r7,r17
1000b558:	010003c4 	movi	r4,15
1000b55c:	2080ee16 	blt	r4,r2,1000b918 <_malloc_r+0x54c>
1000b560:	32400515 	stw	r9,20(r6)
1000b564:	32400415 	stw	r9,16(r6)
1000b568:	1000510e 	bge	r2,zero,1000b6b0 <_malloc_r+0x2e4>
1000b56c:	00807fc4 	movi	r2,511
1000b570:	11c0ce36 	bltu	r2,r7,1000b8ac <_malloc_r+0x4e0>
1000b574:	3808d0fa 	srli	r4,r7,3
1000b578:	01c00044 	movi	r7,1
1000b57c:	30800117 	ldw	r2,4(r6)
1000b580:	210b883a 	add	r5,r4,r4
1000b584:	294b883a 	add	r5,r5,r5
1000b588:	2009d0ba 	srai	r4,r4,2
1000b58c:	294b883a 	add	r5,r5,r5
1000b590:	298b883a 	add	r5,r5,r6
1000b594:	2a000217 	ldw	r8,8(r5)
1000b598:	3908983a 	sll	r4,r7,r4
1000b59c:	81400315 	stw	r5,12(r16)
1000b5a0:	82000215 	stw	r8,8(r16)
1000b5a4:	2088b03a 	or	r4,r4,r2
1000b5a8:	2c000215 	stw	r16,8(r5)
1000b5ac:	31000115 	stw	r4,4(r6)
1000b5b0:	44000315 	stw	r16,12(r8)
1000b5b4:	1805d0ba 	srai	r2,r3,2
1000b5b8:	01400044 	movi	r5,1
1000b5bc:	288a983a 	sll	r5,r5,r2
1000b5c0:	21404336 	bltu	r4,r5,1000b6d0 <_malloc_r+0x304>
1000b5c4:	2144703a 	and	r2,r4,r5
1000b5c8:	10000a1e 	bne	r2,zero,1000b5f4 <_malloc_r+0x228>
1000b5cc:	00bfff04 	movi	r2,-4
1000b5d0:	294b883a 	add	r5,r5,r5
1000b5d4:	1886703a 	and	r3,r3,r2
1000b5d8:	2144703a 	and	r2,r4,r5
1000b5dc:	18c00104 	addi	r3,r3,4
1000b5e0:	1000041e 	bne	r2,zero,1000b5f4 <_malloc_r+0x228>
1000b5e4:	294b883a 	add	r5,r5,r5
1000b5e8:	2144703a 	and	r2,r4,r5
1000b5ec:	18c00104 	addi	r3,r3,4
1000b5f0:	103ffc26 	beq	r2,zero,1000b5e4 <__alt_data_end+0xf800b5e4>
1000b5f4:	023fff04 	movi	r8,-4
1000b5f8:	01c003c4 	movi	r7,15
1000b5fc:	18c5883a 	add	r2,r3,r3
1000b600:	1085883a 	add	r2,r2,r2
1000b604:	1085883a 	add	r2,r2,r2
1000b608:	9895883a 	add	r10,r19,r2
1000b60c:	52c00304 	addi	r11,r10,12
1000b610:	1819883a 	mov	r12,r3
1000b614:	5c000017 	ldw	r16,0(r11)
1000b618:	59bffd04 	addi	r6,r11,-12
1000b61c:	8180041e 	bne	r16,r6,1000b630 <_malloc_r+0x264>
1000b620:	0000ce06 	br	1000b95c <_malloc_r+0x590>
1000b624:	2000d70e 	bge	r4,zero,1000b984 <_malloc_r+0x5b8>
1000b628:	84000317 	ldw	r16,12(r16)
1000b62c:	8180cb26 	beq	r16,r6,1000b95c <_malloc_r+0x590>
1000b630:	80800117 	ldw	r2,4(r16)
1000b634:	1204703a 	and	r2,r2,r8
1000b638:	1449c83a 	sub	r4,r2,r17
1000b63c:	393ff90e 	bge	r7,r4,1000b624 <__alt_data_end+0xf800b624>
1000b640:	80800317 	ldw	r2,12(r16)
1000b644:	80c00217 	ldw	r3,8(r16)
1000b648:	89400054 	ori	r5,r17,1
1000b64c:	81400115 	stw	r5,4(r16)
1000b650:	18800315 	stw	r2,12(r3)
1000b654:	10c00215 	stw	r3,8(r2)
1000b658:	8463883a 	add	r17,r16,r17
1000b65c:	9c400515 	stw	r17,20(r19)
1000b660:	9c400415 	stw	r17,16(r19)
1000b664:	20800054 	ori	r2,r4,1
1000b668:	88800115 	stw	r2,4(r17)
1000b66c:	8a400315 	stw	r9,12(r17)
1000b670:	8a400215 	stw	r9,8(r17)
1000b674:	8923883a 	add	r17,r17,r4
1000b678:	89000015 	stw	r4,0(r17)
1000b67c:	9009883a 	mov	r4,r18
1000b680:	00102140 	call	10010214 <__malloc_unlock>
1000b684:	80800204 	addi	r2,r16,8
1000b688:	003f7d06 	br	1000b480 <__alt_data_end+0xf800b480>
1000b68c:	00800304 	movi	r2,12
1000b690:	90800015 	stw	r2,0(r18)
1000b694:	0005883a 	mov	r2,zero
1000b698:	003f7906 	br	1000b480 <__alt_data_end+0xf800b480>
1000b69c:	01401f84 	movi	r5,126
1000b6a0:	01c00fc4 	movi	r7,63
1000b6a4:	003f8d06 	br	1000b4dc <__alt_data_end+0xf800b4dc>
1000b6a8:	81000317 	ldw	r4,12(r16)
1000b6ac:	003f6a06 	br	1000b458 <__alt_data_end+0xf800b458>
1000b6b0:	81c5883a 	add	r2,r16,r7
1000b6b4:	10c00117 	ldw	r3,4(r2)
1000b6b8:	9009883a 	mov	r4,r18
1000b6bc:	18c00054 	ori	r3,r3,1
1000b6c0:	10c00115 	stw	r3,4(r2)
1000b6c4:	00102140 	call	10010214 <__malloc_unlock>
1000b6c8:	80800204 	addi	r2,r16,8
1000b6cc:	003f6c06 	br	1000b480 <__alt_data_end+0xf800b480>
1000b6d0:	9c000217 	ldw	r16,8(r19)
1000b6d4:	00bfff04 	movi	r2,-4
1000b6d8:	85800117 	ldw	r22,4(r16)
1000b6dc:	b0ac703a 	and	r22,r22,r2
1000b6e0:	b4400336 	bltu	r22,r17,1000b6f0 <_malloc_r+0x324>
1000b6e4:	b445c83a 	sub	r2,r22,r17
1000b6e8:	00c003c4 	movi	r3,15
1000b6ec:	18805d16 	blt	r3,r2,1000b864 <_malloc_r+0x498>
1000b6f0:	05c40074 	movhi	r23,4097
1000b6f4:	00840074 	movhi	r2,4097
1000b6f8:	bdd08004 	addi	r23,r23,16896
1000b6fc:	10975504 	addi	r2,r2,23892
1000b700:	15400017 	ldw	r21,0(r2)
1000b704:	b9000017 	ldw	r4,0(r23)
1000b708:	00ffffc4 	movi	r3,-1
1000b70c:	858d883a 	add	r6,r16,r22
1000b710:	8d6b883a 	add	r21,r17,r21
1000b714:	20c0e426 	beq	r4,r3,1000baa8 <_malloc_r+0x6dc>
1000b718:	ad4403c4 	addi	r21,r21,4111
1000b71c:	00fc0004 	movi	r3,-4096
1000b720:	a8ea703a 	and	r21,r21,r3
1000b724:	9009883a 	mov	r4,r18
1000b728:	a80b883a 	mov	r5,r21
1000b72c:	d9800015 	stw	r6,0(sp)
1000b730:	000cf000 	call	1000cf00 <_sbrk_r>
1000b734:	00ffffc4 	movi	r3,-1
1000b738:	1029883a 	mov	r20,r2
1000b73c:	d9800017 	ldw	r6,0(sp)
1000b740:	10c0a426 	beq	r2,r3,1000b9d4 <_malloc_r+0x608>
1000b744:	1180a236 	bltu	r2,r6,1000b9d0 <_malloc_r+0x604>
1000b748:	07040074 	movhi	fp,4097
1000b74c:	e7175e04 	addi	fp,fp,23928
1000b750:	e0c00017 	ldw	r3,0(fp)
1000b754:	a8c7883a 	add	r3,r21,r3
1000b758:	e0c00015 	stw	r3,0(fp)
1000b75c:	3500da26 	beq	r6,r20,1000bac8 <_malloc_r+0x6fc>
1000b760:	b9000017 	ldw	r4,0(r23)
1000b764:	00bfffc4 	movi	r2,-1
1000b768:	2080e426 	beq	r4,r2,1000bafc <_malloc_r+0x730>
1000b76c:	a185c83a 	sub	r2,r20,r6
1000b770:	1885883a 	add	r2,r3,r2
1000b774:	e0800015 	stw	r2,0(fp)
1000b778:	a0c001cc 	andi	r3,r20,7
1000b77c:	1800b526 	beq	r3,zero,1000ba54 <_malloc_r+0x688>
1000b780:	a0e9c83a 	sub	r20,r20,r3
1000b784:	00840204 	movi	r2,4104
1000b788:	a5000204 	addi	r20,r20,8
1000b78c:	10c7c83a 	sub	r3,r2,r3
1000b790:	a545883a 	add	r2,r20,r21
1000b794:	1083ffcc 	andi	r2,r2,4095
1000b798:	18abc83a 	sub	r21,r3,r2
1000b79c:	9009883a 	mov	r4,r18
1000b7a0:	a80b883a 	mov	r5,r21
1000b7a4:	000cf000 	call	1000cf00 <_sbrk_r>
1000b7a8:	00ffffc4 	movi	r3,-1
1000b7ac:	10c0d026 	beq	r2,r3,1000baf0 <_malloc_r+0x724>
1000b7b0:	1507c83a 	sub	r3,r2,r20
1000b7b4:	a8c7883a 	add	r3,r21,r3
1000b7b8:	18c00054 	ori	r3,r3,1
1000b7bc:	e0800017 	ldw	r2,0(fp)
1000b7c0:	9d000215 	stw	r20,8(r19)
1000b7c4:	a0c00115 	stw	r3,4(r20)
1000b7c8:	a887883a 	add	r3,r21,r2
1000b7cc:	e0c00015 	stw	r3,0(fp)
1000b7d0:	84c00e26 	beq	r16,r19,1000b80c <_malloc_r+0x440>
1000b7d4:	018003c4 	movi	r6,15
1000b7d8:	3580a02e 	bgeu	r6,r22,1000ba5c <_malloc_r+0x690>
1000b7dc:	81400117 	ldw	r5,4(r16)
1000b7e0:	013ffe04 	movi	r4,-8
1000b7e4:	b0bffd04 	addi	r2,r22,-12
1000b7e8:	1104703a 	and	r2,r2,r4
1000b7ec:	2900004c 	andi	r4,r5,1
1000b7f0:	1108b03a 	or	r4,r2,r4
1000b7f4:	81000115 	stw	r4,4(r16)
1000b7f8:	01400144 	movi	r5,5
1000b7fc:	8089883a 	add	r4,r16,r2
1000b800:	21400115 	stw	r5,4(r4)
1000b804:	21400215 	stw	r5,8(r4)
1000b808:	3080c036 	bltu	r6,r2,1000bb0c <_malloc_r+0x740>
1000b80c:	00840074 	movhi	r2,4097
1000b810:	10975404 	addi	r2,r2,23888
1000b814:	11000017 	ldw	r4,0(r2)
1000b818:	20c0012e 	bgeu	r4,r3,1000b820 <_malloc_r+0x454>
1000b81c:	10c00015 	stw	r3,0(r2)
1000b820:	00840074 	movhi	r2,4097
1000b824:	10975304 	addi	r2,r2,23884
1000b828:	11000017 	ldw	r4,0(r2)
1000b82c:	9c000217 	ldw	r16,8(r19)
1000b830:	20c0012e 	bgeu	r4,r3,1000b838 <_malloc_r+0x46c>
1000b834:	10c00015 	stw	r3,0(r2)
1000b838:	80c00117 	ldw	r3,4(r16)
1000b83c:	00bfff04 	movi	r2,-4
1000b840:	1886703a 	and	r3,r3,r2
1000b844:	1c45c83a 	sub	r2,r3,r17
1000b848:	1c400236 	bltu	r3,r17,1000b854 <_malloc_r+0x488>
1000b84c:	00c003c4 	movi	r3,15
1000b850:	18800416 	blt	r3,r2,1000b864 <_malloc_r+0x498>
1000b854:	9009883a 	mov	r4,r18
1000b858:	00102140 	call	10010214 <__malloc_unlock>
1000b85c:	0005883a 	mov	r2,zero
1000b860:	003f0706 	br	1000b480 <__alt_data_end+0xf800b480>
1000b864:	88c00054 	ori	r3,r17,1
1000b868:	80c00115 	stw	r3,4(r16)
1000b86c:	8463883a 	add	r17,r16,r17
1000b870:	10800054 	ori	r2,r2,1
1000b874:	9c400215 	stw	r17,8(r19)
1000b878:	88800115 	stw	r2,4(r17)
1000b87c:	9009883a 	mov	r4,r18
1000b880:	00102140 	call	10010214 <__malloc_unlock>
1000b884:	80800204 	addi	r2,r16,8
1000b888:	003efd06 	br	1000b480 <__alt_data_end+0xf800b480>
1000b88c:	00800504 	movi	r2,20
1000b890:	10c0482e 	bgeu	r2,r3,1000b9b4 <_malloc_r+0x5e8>
1000b894:	00801504 	movi	r2,84
1000b898:	10c06836 	bltu	r2,r3,1000ba3c <_malloc_r+0x670>
1000b89c:	8806d33a 	srli	r3,r17,12
1000b8a0:	19c01b84 	addi	r7,r3,110
1000b8a4:	39cb883a 	add	r5,r7,r7
1000b8a8:	003f0c06 	br	1000b4dc <__alt_data_end+0xf800b4dc>
1000b8ac:	3804d27a 	srli	r2,r7,9
1000b8b0:	01000104 	movi	r4,4
1000b8b4:	2080422e 	bgeu	r4,r2,1000b9c0 <_malloc_r+0x5f4>
1000b8b8:	01000504 	movi	r4,20
1000b8bc:	20807c36 	bltu	r4,r2,1000bab0 <_malloc_r+0x6e4>
1000b8c0:	110016c4 	addi	r4,r2,91
1000b8c4:	210b883a 	add	r5,r4,r4
1000b8c8:	294b883a 	add	r5,r5,r5
1000b8cc:	294b883a 	add	r5,r5,r5
1000b8d0:	994b883a 	add	r5,r19,r5
1000b8d4:	28800217 	ldw	r2,8(r5)
1000b8d8:	02040074 	movhi	r8,4097
1000b8dc:	420af804 	addi	r8,r8,11232
1000b8e0:	11406326 	beq	r2,r5,1000ba70 <_malloc_r+0x6a4>
1000b8e4:	01bfff04 	movi	r6,-4
1000b8e8:	11000117 	ldw	r4,4(r2)
1000b8ec:	2188703a 	and	r4,r4,r6
1000b8f0:	3900022e 	bgeu	r7,r4,1000b8fc <_malloc_r+0x530>
1000b8f4:	10800217 	ldw	r2,8(r2)
1000b8f8:	28bffb1e 	bne	r5,r2,1000b8e8 <__alt_data_end+0xf800b8e8>
1000b8fc:	11800317 	ldw	r6,12(r2)
1000b900:	99000117 	ldw	r4,4(r19)
1000b904:	81800315 	stw	r6,12(r16)
1000b908:	80800215 	stw	r2,8(r16)
1000b90c:	34000215 	stw	r16,8(r6)
1000b910:	14000315 	stw	r16,12(r2)
1000b914:	003f2706 	br	1000b5b4 <__alt_data_end+0xf800b5b4>
1000b918:	88c00054 	ori	r3,r17,1
1000b91c:	80c00115 	stw	r3,4(r16)
1000b920:	8463883a 	add	r17,r16,r17
1000b924:	34400515 	stw	r17,20(r6)
1000b928:	34400415 	stw	r17,16(r6)
1000b92c:	10c00054 	ori	r3,r2,1
1000b930:	8a400315 	stw	r9,12(r17)
1000b934:	8a400215 	stw	r9,8(r17)
1000b938:	88c00115 	stw	r3,4(r17)
1000b93c:	88a3883a 	add	r17,r17,r2
1000b940:	88800015 	stw	r2,0(r17)
1000b944:	9009883a 	mov	r4,r18
1000b948:	00102140 	call	10010214 <__malloc_unlock>
1000b94c:	80800204 	addi	r2,r16,8
1000b950:	003ecb06 	br	1000b480 <__alt_data_end+0xf800b480>
1000b954:	31000117 	ldw	r4,4(r6)
1000b958:	003f1606 	br	1000b5b4 <__alt_data_end+0xf800b5b4>
1000b95c:	63000044 	addi	r12,r12,1
1000b960:	608000cc 	andi	r2,r12,3
1000b964:	5ac00204 	addi	r11,r11,8
1000b968:	103f2a1e 	bne	r2,zero,1000b614 <__alt_data_end+0xf800b614>
1000b96c:	00002106 	br	1000b9f4 <_malloc_r+0x628>
1000b970:	80800204 	addi	r2,r16,8
1000b974:	84000517 	ldw	r16,20(r16)
1000b978:	143eb31e 	bne	r2,r16,1000b448 <__alt_data_end+0xf800b448>
1000b97c:	18c00084 	addi	r3,r3,2
1000b980:	003eec06 	br	1000b534 <__alt_data_end+0xf800b534>
1000b984:	8085883a 	add	r2,r16,r2
1000b988:	10c00117 	ldw	r3,4(r2)
1000b98c:	81000317 	ldw	r4,12(r16)
1000b990:	81400217 	ldw	r5,8(r16)
1000b994:	18c00054 	ori	r3,r3,1
1000b998:	10c00115 	stw	r3,4(r2)
1000b99c:	29000315 	stw	r4,12(r5)
1000b9a0:	21400215 	stw	r5,8(r4)
1000b9a4:	9009883a 	mov	r4,r18
1000b9a8:	00102140 	call	10010214 <__malloc_unlock>
1000b9ac:	80800204 	addi	r2,r16,8
1000b9b0:	003eb306 	br	1000b480 <__alt_data_end+0xf800b480>
1000b9b4:	19c016c4 	addi	r7,r3,91
1000b9b8:	39cb883a 	add	r5,r7,r7
1000b9bc:	003ec706 	br	1000b4dc <__alt_data_end+0xf800b4dc>
1000b9c0:	3804d1ba 	srli	r2,r7,6
1000b9c4:	11000e04 	addi	r4,r2,56
1000b9c8:	210b883a 	add	r5,r4,r4
1000b9cc:	003fbe06 	br	1000b8c8 <__alt_data_end+0xf800b8c8>
1000b9d0:	84ff5d26 	beq	r16,r19,1000b748 <__alt_data_end+0xf800b748>
1000b9d4:	9c000217 	ldw	r16,8(r19)
1000b9d8:	00bfff04 	movi	r2,-4
1000b9dc:	80c00117 	ldw	r3,4(r16)
1000b9e0:	1886703a 	and	r3,r3,r2
1000b9e4:	003f9706 	br	1000b844 <__alt_data_end+0xf800b844>
1000b9e8:	52800017 	ldw	r10,0(r10)
1000b9ec:	18ffffc4 	addi	r3,r3,-1
1000b9f0:	50805c1e 	bne	r10,r2,1000bb64 <_malloc_r+0x798>
1000b9f4:	190000cc 	andi	r4,r3,3
1000b9f8:	50bffe04 	addi	r2,r10,-8
1000b9fc:	203ffa1e 	bne	r4,zero,1000b9e8 <__alt_data_end+0xf800b9e8>
1000ba00:	98800117 	ldw	r2,4(r19)
1000ba04:	0146303a 	nor	r3,zero,r5
1000ba08:	1884703a 	and	r2,r3,r2
1000ba0c:	98800115 	stw	r2,4(r19)
1000ba10:	294b883a 	add	r5,r5,r5
1000ba14:	117f2e36 	bltu	r2,r5,1000b6d0 <__alt_data_end+0xf800b6d0>
1000ba18:	283f2d26 	beq	r5,zero,1000b6d0 <__alt_data_end+0xf800b6d0>
1000ba1c:	1146703a 	and	r3,r2,r5
1000ba20:	1800521e 	bne	r3,zero,1000bb6c <_malloc_r+0x7a0>
1000ba24:	6007883a 	mov	r3,r12
1000ba28:	294b883a 	add	r5,r5,r5
1000ba2c:	1148703a 	and	r4,r2,r5
1000ba30:	18c00104 	addi	r3,r3,4
1000ba34:	203ffc26 	beq	r4,zero,1000ba28 <__alt_data_end+0xf800ba28>
1000ba38:	003ef006 	br	1000b5fc <__alt_data_end+0xf800b5fc>
1000ba3c:	00805504 	movi	r2,340
1000ba40:	10c01336 	bltu	r2,r3,1000ba90 <_malloc_r+0x6c4>
1000ba44:	8806d3fa 	srli	r3,r17,15
1000ba48:	19c01dc4 	addi	r7,r3,119
1000ba4c:	39cb883a 	add	r5,r7,r7
1000ba50:	003ea206 	br	1000b4dc <__alt_data_end+0xf800b4dc>
1000ba54:	00c40004 	movi	r3,4096
1000ba58:	003f4d06 	br	1000b790 <__alt_data_end+0xf800b790>
1000ba5c:	00800044 	movi	r2,1
1000ba60:	a0800115 	stw	r2,4(r20)
1000ba64:	a021883a 	mov	r16,r20
1000ba68:	0007883a 	mov	r3,zero
1000ba6c:	003f7506 	br	1000b844 <__alt_data_end+0xf800b844>
1000ba70:	200bd0ba 	srai	r5,r4,2
1000ba74:	01800044 	movi	r6,1
1000ba78:	41000117 	ldw	r4,4(r8)
1000ba7c:	314a983a 	sll	r5,r6,r5
1000ba80:	100d883a 	mov	r6,r2
1000ba84:	2908b03a 	or	r4,r5,r4
1000ba88:	41000115 	stw	r4,4(r8)
1000ba8c:	003f9d06 	br	1000b904 <__alt_data_end+0xf800b904>
1000ba90:	00815504 	movi	r2,1364
1000ba94:	10c01336 	bltu	r2,r3,1000bae4 <_malloc_r+0x718>
1000ba98:	8806d4ba 	srli	r3,r17,18
1000ba9c:	19c01f04 	addi	r7,r3,124
1000baa0:	39cb883a 	add	r5,r7,r7
1000baa4:	003e8d06 	br	1000b4dc <__alt_data_end+0xf800b4dc>
1000baa8:	ad400404 	addi	r21,r21,16
1000baac:	003f1d06 	br	1000b724 <__alt_data_end+0xf800b724>
1000bab0:	01001504 	movi	r4,84
1000bab4:	20801c36 	bltu	r4,r2,1000bb28 <_malloc_r+0x75c>
1000bab8:	3804d33a 	srli	r2,r7,12
1000babc:	11001b84 	addi	r4,r2,110
1000bac0:	210b883a 	add	r5,r4,r4
1000bac4:	003f8006 	br	1000b8c8 <__alt_data_end+0xf800b8c8>
1000bac8:	3083ffcc 	andi	r2,r6,4095
1000bacc:	103f241e 	bne	r2,zero,1000b760 <__alt_data_end+0xf800b760>
1000bad0:	99000217 	ldw	r4,8(r19)
1000bad4:	ad85883a 	add	r2,r21,r22
1000bad8:	10800054 	ori	r2,r2,1
1000badc:	20800115 	stw	r2,4(r4)
1000bae0:	003f4a06 	br	1000b80c <__alt_data_end+0xf800b80c>
1000bae4:	01403f04 	movi	r5,252
1000bae8:	01c01f84 	movi	r7,126
1000baec:	003e7b06 	br	1000b4dc <__alt_data_end+0xf800b4dc>
1000baf0:	00c00044 	movi	r3,1
1000baf4:	002b883a 	mov	r21,zero
1000baf8:	003f3006 	br	1000b7bc <__alt_data_end+0xf800b7bc>
1000bafc:	00840074 	movhi	r2,4097
1000bb00:	10908004 	addi	r2,r2,16896
1000bb04:	15000015 	stw	r20,0(r2)
1000bb08:	003f1b06 	br	1000b778 <__alt_data_end+0xf800b778>
1000bb0c:	9009883a 	mov	r4,r18
1000bb10:	81400204 	addi	r5,r16,8
1000bb14:	000acd40 	call	1000acd4 <_free_r>
1000bb18:	00840074 	movhi	r2,4097
1000bb1c:	10975e04 	addi	r2,r2,23928
1000bb20:	10c00017 	ldw	r3,0(r2)
1000bb24:	003f3906 	br	1000b80c <__alt_data_end+0xf800b80c>
1000bb28:	01005504 	movi	r4,340
1000bb2c:	20800436 	bltu	r4,r2,1000bb40 <_malloc_r+0x774>
1000bb30:	3804d3fa 	srli	r2,r7,15
1000bb34:	11001dc4 	addi	r4,r2,119
1000bb38:	210b883a 	add	r5,r4,r4
1000bb3c:	003f6206 	br	1000b8c8 <__alt_data_end+0xf800b8c8>
1000bb40:	01015504 	movi	r4,1364
1000bb44:	20800436 	bltu	r4,r2,1000bb58 <_malloc_r+0x78c>
1000bb48:	3804d4ba 	srli	r2,r7,18
1000bb4c:	11001f04 	addi	r4,r2,124
1000bb50:	210b883a 	add	r5,r4,r4
1000bb54:	003f5c06 	br	1000b8c8 <__alt_data_end+0xf800b8c8>
1000bb58:	01403f04 	movi	r5,252
1000bb5c:	01001f84 	movi	r4,126
1000bb60:	003f5906 	br	1000b8c8 <__alt_data_end+0xf800b8c8>
1000bb64:	98800117 	ldw	r2,4(r19)
1000bb68:	003fa906 	br	1000ba10 <__alt_data_end+0xf800ba10>
1000bb6c:	6007883a 	mov	r3,r12
1000bb70:	003ea206 	br	1000b5fc <__alt_data_end+0xf800b5fc>

1000bb74 <memchr>:
1000bb74:	208000cc 	andi	r2,r4,3
1000bb78:	280f883a 	mov	r7,r5
1000bb7c:	10003526 	beq	r2,zero,1000bc54 <memchr+0xe0>
1000bb80:	30bfffc4 	addi	r2,r6,-1
1000bb84:	30001b26 	beq	r6,zero,1000bbf4 <memchr+0x80>
1000bb88:	21800003 	ldbu	r6,0(r4)
1000bb8c:	28c03fcc 	andi	r3,r5,255
1000bb90:	30c01a26 	beq	r6,r3,1000bbfc <memchr+0x88>
1000bb94:	180d883a 	mov	r6,r3
1000bb98:	00000406 	br	1000bbac <memchr+0x38>
1000bb9c:	10001526 	beq	r2,zero,1000bbf4 <memchr+0x80>
1000bba0:	20c00003 	ldbu	r3,0(r4)
1000bba4:	10bfffc4 	addi	r2,r2,-1
1000bba8:	19801426 	beq	r3,r6,1000bbfc <memchr+0x88>
1000bbac:	21000044 	addi	r4,r4,1
1000bbb0:	20c000cc 	andi	r3,r4,3
1000bbb4:	183ff91e 	bne	r3,zero,1000bb9c <__alt_data_end+0xf800bb9c>
1000bbb8:	024000c4 	movi	r9,3
1000bbbc:	48801136 	bltu	r9,r2,1000bc04 <memchr+0x90>
1000bbc0:	10000c26 	beq	r2,zero,1000bbf4 <memchr+0x80>
1000bbc4:	20c00003 	ldbu	r3,0(r4)
1000bbc8:	29403fcc 	andi	r5,r5,255
1000bbcc:	19400b26 	beq	r3,r5,1000bbfc <memchr+0x88>
1000bbd0:	20c00044 	addi	r3,r4,1
1000bbd4:	2085883a 	add	r2,r4,r2
1000bbd8:	39803fcc 	andi	r6,r7,255
1000bbdc:	00000306 	br	1000bbec <memchr+0x78>
1000bbe0:	18c00044 	addi	r3,r3,1
1000bbe4:	197fffc3 	ldbu	r5,-1(r3)
1000bbe8:	29800426 	beq	r5,r6,1000bbfc <memchr+0x88>
1000bbec:	1809883a 	mov	r4,r3
1000bbf0:	18bffb1e 	bne	r3,r2,1000bbe0 <__alt_data_end+0xf800bbe0>
1000bbf4:	0005883a 	mov	r2,zero
1000bbf8:	f800283a 	ret
1000bbfc:	2005883a 	mov	r2,r4
1000bc00:	f800283a 	ret
1000bc04:	28c03fcc 	andi	r3,r5,255
1000bc08:	1810923a 	slli	r8,r3,8
1000bc0c:	02ffbff4 	movhi	r11,65279
1000bc10:	02a02074 	movhi	r10,32897
1000bc14:	40c6b03a 	or	r3,r8,r3
1000bc18:	1810943a 	slli	r8,r3,16
1000bc1c:	5affbfc4 	addi	r11,r11,-257
1000bc20:	52a02004 	addi	r10,r10,-32640
1000bc24:	40d0b03a 	or	r8,r8,r3
1000bc28:	20c00017 	ldw	r3,0(r4)
1000bc2c:	40c6f03a 	xor	r3,r8,r3
1000bc30:	1acd883a 	add	r6,r3,r11
1000bc34:	00c6303a 	nor	r3,zero,r3
1000bc38:	30c6703a 	and	r3,r6,r3
1000bc3c:	1a86703a 	and	r3,r3,r10
1000bc40:	183fdf1e 	bne	r3,zero,1000bbc0 <__alt_data_end+0xf800bbc0>
1000bc44:	10bfff04 	addi	r2,r2,-4
1000bc48:	21000104 	addi	r4,r4,4
1000bc4c:	48bff636 	bltu	r9,r2,1000bc28 <__alt_data_end+0xf800bc28>
1000bc50:	003fdb06 	br	1000bbc0 <__alt_data_end+0xf800bbc0>
1000bc54:	3005883a 	mov	r2,r6
1000bc58:	003fd706 	br	1000bbb8 <__alt_data_end+0xf800bbb8>

1000bc5c <memcpy>:
1000bc5c:	deffff04 	addi	sp,sp,-4
1000bc60:	dc000015 	stw	r16,0(sp)
1000bc64:	00c003c4 	movi	r3,15
1000bc68:	2005883a 	mov	r2,r4
1000bc6c:	1980432e 	bgeu	r3,r6,1000bd7c <memcpy+0x120>
1000bc70:	2146b03a 	or	r3,r4,r5
1000bc74:	18c000cc 	andi	r3,r3,3
1000bc78:	1800421e 	bne	r3,zero,1000bd84 <memcpy+0x128>
1000bc7c:	343ffc04 	addi	r16,r6,-16
1000bc80:	8020d13a 	srli	r16,r16,4
1000bc84:	28c00104 	addi	r3,r5,4
1000bc88:	23400104 	addi	r13,r4,4
1000bc8c:	801e913a 	slli	r15,r16,4
1000bc90:	2b000204 	addi	r12,r5,8
1000bc94:	22c00204 	addi	r11,r4,8
1000bc98:	7bc00504 	addi	r15,r15,20
1000bc9c:	2a800304 	addi	r10,r5,12
1000bca0:	22400304 	addi	r9,r4,12
1000bca4:	2bdf883a 	add	r15,r5,r15
1000bca8:	2811883a 	mov	r8,r5
1000bcac:	200f883a 	mov	r7,r4
1000bcb0:	41000017 	ldw	r4,0(r8)
1000bcb4:	39c00404 	addi	r7,r7,16
1000bcb8:	18c00404 	addi	r3,r3,16
1000bcbc:	393ffc15 	stw	r4,-16(r7)
1000bcc0:	1bbffc17 	ldw	r14,-16(r3)
1000bcc4:	6b400404 	addi	r13,r13,16
1000bcc8:	5ac00404 	addi	r11,r11,16
1000bccc:	6bbffc15 	stw	r14,-16(r13)
1000bcd0:	63800017 	ldw	r14,0(r12)
1000bcd4:	4a400404 	addi	r9,r9,16
1000bcd8:	42000404 	addi	r8,r8,16
1000bcdc:	5bbffc15 	stw	r14,-16(r11)
1000bce0:	53800017 	ldw	r14,0(r10)
1000bce4:	63000404 	addi	r12,r12,16
1000bce8:	52800404 	addi	r10,r10,16
1000bcec:	4bbffc15 	stw	r14,-16(r9)
1000bcf0:	1bffef1e 	bne	r3,r15,1000bcb0 <__alt_data_end+0xf800bcb0>
1000bcf4:	81c00044 	addi	r7,r16,1
1000bcf8:	380e913a 	slli	r7,r7,4
1000bcfc:	310003cc 	andi	r4,r6,15
1000bd00:	02c000c4 	movi	r11,3
1000bd04:	11c7883a 	add	r3,r2,r7
1000bd08:	29cb883a 	add	r5,r5,r7
1000bd0c:	59001f2e 	bgeu	r11,r4,1000bd8c <memcpy+0x130>
1000bd10:	1813883a 	mov	r9,r3
1000bd14:	2811883a 	mov	r8,r5
1000bd18:	200f883a 	mov	r7,r4
1000bd1c:	42800017 	ldw	r10,0(r8)
1000bd20:	4a400104 	addi	r9,r9,4
1000bd24:	39ffff04 	addi	r7,r7,-4
1000bd28:	4abfff15 	stw	r10,-4(r9)
1000bd2c:	42000104 	addi	r8,r8,4
1000bd30:	59fffa36 	bltu	r11,r7,1000bd1c <__alt_data_end+0xf800bd1c>
1000bd34:	213fff04 	addi	r4,r4,-4
1000bd38:	2008d0ba 	srli	r4,r4,2
1000bd3c:	318000cc 	andi	r6,r6,3
1000bd40:	21000044 	addi	r4,r4,1
1000bd44:	2109883a 	add	r4,r4,r4
1000bd48:	2109883a 	add	r4,r4,r4
1000bd4c:	1907883a 	add	r3,r3,r4
1000bd50:	290b883a 	add	r5,r5,r4
1000bd54:	30000626 	beq	r6,zero,1000bd70 <memcpy+0x114>
1000bd58:	198d883a 	add	r6,r3,r6
1000bd5c:	29c00003 	ldbu	r7,0(r5)
1000bd60:	18c00044 	addi	r3,r3,1
1000bd64:	29400044 	addi	r5,r5,1
1000bd68:	19ffffc5 	stb	r7,-1(r3)
1000bd6c:	19bffb1e 	bne	r3,r6,1000bd5c <__alt_data_end+0xf800bd5c>
1000bd70:	dc000017 	ldw	r16,0(sp)
1000bd74:	dec00104 	addi	sp,sp,4
1000bd78:	f800283a 	ret
1000bd7c:	2007883a 	mov	r3,r4
1000bd80:	003ff406 	br	1000bd54 <__alt_data_end+0xf800bd54>
1000bd84:	2007883a 	mov	r3,r4
1000bd88:	003ff306 	br	1000bd58 <__alt_data_end+0xf800bd58>
1000bd8c:	200d883a 	mov	r6,r4
1000bd90:	003ff006 	br	1000bd54 <__alt_data_end+0xf800bd54>

1000bd94 <memset>:
1000bd94:	20c000cc 	andi	r3,r4,3
1000bd98:	2005883a 	mov	r2,r4
1000bd9c:	18004326 	beq	r3,zero,1000beac <memset+0x118>
1000bda0:	31ffffc4 	addi	r7,r6,-1
1000bda4:	30004026 	beq	r6,zero,1000bea8 <memset+0x114>
1000bda8:	2813883a 	mov	r9,r5
1000bdac:	200d883a 	mov	r6,r4
1000bdb0:	2007883a 	mov	r3,r4
1000bdb4:	00000406 	br	1000bdc8 <memset+0x34>
1000bdb8:	3a3fffc4 	addi	r8,r7,-1
1000bdbc:	31800044 	addi	r6,r6,1
1000bdc0:	38003926 	beq	r7,zero,1000bea8 <memset+0x114>
1000bdc4:	400f883a 	mov	r7,r8
1000bdc8:	18c00044 	addi	r3,r3,1
1000bdcc:	32400005 	stb	r9,0(r6)
1000bdd0:	1a0000cc 	andi	r8,r3,3
1000bdd4:	403ff81e 	bne	r8,zero,1000bdb8 <__alt_data_end+0xf800bdb8>
1000bdd8:	010000c4 	movi	r4,3
1000bddc:	21c02d2e 	bgeu	r4,r7,1000be94 <memset+0x100>
1000bde0:	29803fcc 	andi	r6,r5,255
1000bde4:	3008923a 	slli	r4,r6,8
1000bde8:	218cb03a 	or	r6,r4,r6
1000bdec:	3008943a 	slli	r4,r6,16
1000bdf0:	218cb03a 	or	r6,r4,r6
1000bdf4:	010003c4 	movi	r4,15
1000bdf8:	21c0182e 	bgeu	r4,r7,1000be5c <memset+0xc8>
1000bdfc:	3b3ffc04 	addi	r12,r7,-16
1000be00:	6018d13a 	srli	r12,r12,4
1000be04:	1a000104 	addi	r8,r3,4
1000be08:	1ac00204 	addi	r11,r3,8
1000be0c:	6008913a 	slli	r4,r12,4
1000be10:	1a800304 	addi	r10,r3,12
1000be14:	1813883a 	mov	r9,r3
1000be18:	21000504 	addi	r4,r4,20
1000be1c:	1909883a 	add	r4,r3,r4
1000be20:	49800015 	stw	r6,0(r9)
1000be24:	41800015 	stw	r6,0(r8)
1000be28:	59800015 	stw	r6,0(r11)
1000be2c:	51800015 	stw	r6,0(r10)
1000be30:	42000404 	addi	r8,r8,16
1000be34:	4a400404 	addi	r9,r9,16
1000be38:	5ac00404 	addi	r11,r11,16
1000be3c:	52800404 	addi	r10,r10,16
1000be40:	413ff71e 	bne	r8,r4,1000be20 <__alt_data_end+0xf800be20>
1000be44:	63000044 	addi	r12,r12,1
1000be48:	6018913a 	slli	r12,r12,4
1000be4c:	39c003cc 	andi	r7,r7,15
1000be50:	010000c4 	movi	r4,3
1000be54:	1b07883a 	add	r3,r3,r12
1000be58:	21c00e2e 	bgeu	r4,r7,1000be94 <memset+0x100>
1000be5c:	1813883a 	mov	r9,r3
1000be60:	3811883a 	mov	r8,r7
1000be64:	010000c4 	movi	r4,3
1000be68:	49800015 	stw	r6,0(r9)
1000be6c:	423fff04 	addi	r8,r8,-4
1000be70:	4a400104 	addi	r9,r9,4
1000be74:	223ffc36 	bltu	r4,r8,1000be68 <__alt_data_end+0xf800be68>
1000be78:	393fff04 	addi	r4,r7,-4
1000be7c:	2008d0ba 	srli	r4,r4,2
1000be80:	39c000cc 	andi	r7,r7,3
1000be84:	21000044 	addi	r4,r4,1
1000be88:	2109883a 	add	r4,r4,r4
1000be8c:	2109883a 	add	r4,r4,r4
1000be90:	1907883a 	add	r3,r3,r4
1000be94:	38000426 	beq	r7,zero,1000bea8 <memset+0x114>
1000be98:	19cf883a 	add	r7,r3,r7
1000be9c:	19400005 	stb	r5,0(r3)
1000bea0:	18c00044 	addi	r3,r3,1
1000bea4:	19fffd1e 	bne	r3,r7,1000be9c <__alt_data_end+0xf800be9c>
1000bea8:	f800283a 	ret
1000beac:	2007883a 	mov	r3,r4
1000beb0:	300f883a 	mov	r7,r6
1000beb4:	003fc806 	br	1000bdd8 <__alt_data_end+0xf800bdd8>

1000beb8 <_Balloc>:
1000beb8:	20801317 	ldw	r2,76(r4)
1000bebc:	defffc04 	addi	sp,sp,-16
1000bec0:	dc400115 	stw	r17,4(sp)
1000bec4:	dc000015 	stw	r16,0(sp)
1000bec8:	dfc00315 	stw	ra,12(sp)
1000becc:	dc800215 	stw	r18,8(sp)
1000bed0:	2023883a 	mov	r17,r4
1000bed4:	2821883a 	mov	r16,r5
1000bed8:	10000f26 	beq	r2,zero,1000bf18 <_Balloc+0x60>
1000bedc:	8407883a 	add	r3,r16,r16
1000bee0:	18c7883a 	add	r3,r3,r3
1000bee4:	10c7883a 	add	r3,r2,r3
1000bee8:	18800017 	ldw	r2,0(r3)
1000beec:	10001126 	beq	r2,zero,1000bf34 <_Balloc+0x7c>
1000bef0:	11000017 	ldw	r4,0(r2)
1000bef4:	19000015 	stw	r4,0(r3)
1000bef8:	10000415 	stw	zero,16(r2)
1000befc:	10000315 	stw	zero,12(r2)
1000bf00:	dfc00317 	ldw	ra,12(sp)
1000bf04:	dc800217 	ldw	r18,8(sp)
1000bf08:	dc400117 	ldw	r17,4(sp)
1000bf0c:	dc000017 	ldw	r16,0(sp)
1000bf10:	dec00404 	addi	sp,sp,16
1000bf14:	f800283a 	ret
1000bf18:	01400104 	movi	r5,4
1000bf1c:	01800844 	movi	r6,33
1000bf20:	000e7d80 	call	1000e7d8 <_calloc_r>
1000bf24:	88801315 	stw	r2,76(r17)
1000bf28:	103fec1e 	bne	r2,zero,1000bedc <__alt_data_end+0xf800bedc>
1000bf2c:	0005883a 	mov	r2,zero
1000bf30:	003ff306 	br	1000bf00 <__alt_data_end+0xf800bf00>
1000bf34:	01400044 	movi	r5,1
1000bf38:	2c24983a 	sll	r18,r5,r16
1000bf3c:	8809883a 	mov	r4,r17
1000bf40:	91800144 	addi	r6,r18,5
1000bf44:	318d883a 	add	r6,r6,r6
1000bf48:	318d883a 	add	r6,r6,r6
1000bf4c:	000e7d80 	call	1000e7d8 <_calloc_r>
1000bf50:	103ff626 	beq	r2,zero,1000bf2c <__alt_data_end+0xf800bf2c>
1000bf54:	14000115 	stw	r16,4(r2)
1000bf58:	14800215 	stw	r18,8(r2)
1000bf5c:	003fe606 	br	1000bef8 <__alt_data_end+0xf800bef8>

1000bf60 <_Bfree>:
1000bf60:	28000826 	beq	r5,zero,1000bf84 <_Bfree+0x24>
1000bf64:	28c00117 	ldw	r3,4(r5)
1000bf68:	20801317 	ldw	r2,76(r4)
1000bf6c:	18c7883a 	add	r3,r3,r3
1000bf70:	18c7883a 	add	r3,r3,r3
1000bf74:	10c5883a 	add	r2,r2,r3
1000bf78:	10c00017 	ldw	r3,0(r2)
1000bf7c:	28c00015 	stw	r3,0(r5)
1000bf80:	11400015 	stw	r5,0(r2)
1000bf84:	f800283a 	ret

1000bf88 <__multadd>:
1000bf88:	defff704 	addi	sp,sp,-36
1000bf8c:	dc800215 	stw	r18,8(sp)
1000bf90:	2c800417 	ldw	r18,16(r5)
1000bf94:	ddc00715 	stw	r23,28(sp)
1000bf98:	dd800615 	stw	r22,24(sp)
1000bf9c:	dd000415 	stw	r20,16(sp)
1000bfa0:	dcc00315 	stw	r19,12(sp)
1000bfa4:	dc400115 	stw	r17,4(sp)
1000bfa8:	dc000015 	stw	r16,0(sp)
1000bfac:	dfc00815 	stw	ra,32(sp)
1000bfb0:	dd400515 	stw	r21,20(sp)
1000bfb4:	2827883a 	mov	r19,r5
1000bfb8:	2029883a 	mov	r20,r4
1000bfbc:	3023883a 	mov	r17,r6
1000bfc0:	3821883a 	mov	r16,r7
1000bfc4:	2d800504 	addi	r22,r5,20
1000bfc8:	002f883a 	mov	r23,zero
1000bfcc:	b5400017 	ldw	r21,0(r22)
1000bfd0:	880b883a 	mov	r5,r17
1000bfd4:	bdc00044 	addi	r23,r23,1
1000bfd8:	a93fffcc 	andi	r4,r21,65535
1000bfdc:	00040ec0 	call	100040ec <__mulsi3>
1000bfe0:	1421883a 	add	r16,r2,r16
1000bfe4:	a808d43a 	srli	r4,r21,16
1000bfe8:	802ad43a 	srli	r21,r16,16
1000bfec:	880b883a 	mov	r5,r17
1000bff0:	00040ec0 	call	100040ec <__mulsi3>
1000bff4:	a88f883a 	add	r7,r21,r2
1000bff8:	3804943a 	slli	r2,r7,16
1000bffc:	80ffffcc 	andi	r3,r16,65535
1000c000:	b5800104 	addi	r22,r22,4
1000c004:	10c7883a 	add	r3,r2,r3
1000c008:	b0ffff15 	stw	r3,-4(r22)
1000c00c:	3820d43a 	srli	r16,r7,16
1000c010:	bcbfee16 	blt	r23,r18,1000bfcc <__alt_data_end+0xf800bfcc>
1000c014:	80000926 	beq	r16,zero,1000c03c <__multadd+0xb4>
1000c018:	98800217 	ldw	r2,8(r19)
1000c01c:	9080130e 	bge	r18,r2,1000c06c <__multadd+0xe4>
1000c020:	90800144 	addi	r2,r18,5
1000c024:	1085883a 	add	r2,r2,r2
1000c028:	1085883a 	add	r2,r2,r2
1000c02c:	9885883a 	add	r2,r19,r2
1000c030:	14000015 	stw	r16,0(r2)
1000c034:	94800044 	addi	r18,r18,1
1000c038:	9c800415 	stw	r18,16(r19)
1000c03c:	9805883a 	mov	r2,r19
1000c040:	dfc00817 	ldw	ra,32(sp)
1000c044:	ddc00717 	ldw	r23,28(sp)
1000c048:	dd800617 	ldw	r22,24(sp)
1000c04c:	dd400517 	ldw	r21,20(sp)
1000c050:	dd000417 	ldw	r20,16(sp)
1000c054:	dcc00317 	ldw	r19,12(sp)
1000c058:	dc800217 	ldw	r18,8(sp)
1000c05c:	dc400117 	ldw	r17,4(sp)
1000c060:	dc000017 	ldw	r16,0(sp)
1000c064:	dec00904 	addi	sp,sp,36
1000c068:	f800283a 	ret
1000c06c:	99400117 	ldw	r5,4(r19)
1000c070:	a009883a 	mov	r4,r20
1000c074:	29400044 	addi	r5,r5,1
1000c078:	000beb80 	call	1000beb8 <_Balloc>
1000c07c:	99800417 	ldw	r6,16(r19)
1000c080:	99400304 	addi	r5,r19,12
1000c084:	11000304 	addi	r4,r2,12
1000c088:	31800084 	addi	r6,r6,2
1000c08c:	318d883a 	add	r6,r6,r6
1000c090:	318d883a 	add	r6,r6,r6
1000c094:	1023883a 	mov	r17,r2
1000c098:	000bc5c0 	call	1000bc5c <memcpy>
1000c09c:	99000117 	ldw	r4,4(r19)
1000c0a0:	a0c01317 	ldw	r3,76(r20)
1000c0a4:	2109883a 	add	r4,r4,r4
1000c0a8:	2109883a 	add	r4,r4,r4
1000c0ac:	1907883a 	add	r3,r3,r4
1000c0b0:	18800017 	ldw	r2,0(r3)
1000c0b4:	98800015 	stw	r2,0(r19)
1000c0b8:	1cc00015 	stw	r19,0(r3)
1000c0bc:	8827883a 	mov	r19,r17
1000c0c0:	003fd706 	br	1000c020 <__alt_data_end+0xf800c020>

1000c0c4 <__s2b>:
1000c0c4:	defff904 	addi	sp,sp,-28
1000c0c8:	dc400115 	stw	r17,4(sp)
1000c0cc:	dc000015 	stw	r16,0(sp)
1000c0d0:	2023883a 	mov	r17,r4
1000c0d4:	2821883a 	mov	r16,r5
1000c0d8:	39000204 	addi	r4,r7,8
1000c0dc:	01400244 	movi	r5,9
1000c0e0:	dcc00315 	stw	r19,12(sp)
1000c0e4:	dc800215 	stw	r18,8(sp)
1000c0e8:	dfc00615 	stw	ra,24(sp)
1000c0ec:	dd400515 	stw	r21,20(sp)
1000c0f0:	dd000415 	stw	r20,16(sp)
1000c0f4:	3825883a 	mov	r18,r7
1000c0f8:	3027883a 	mov	r19,r6
1000c0fc:	000402c0 	call	1000402c <__divsi3>
1000c100:	00c00044 	movi	r3,1
1000c104:	000b883a 	mov	r5,zero
1000c108:	1880030e 	bge	r3,r2,1000c118 <__s2b+0x54>
1000c10c:	18c7883a 	add	r3,r3,r3
1000c110:	29400044 	addi	r5,r5,1
1000c114:	18bffd16 	blt	r3,r2,1000c10c <__alt_data_end+0xf800c10c>
1000c118:	8809883a 	mov	r4,r17
1000c11c:	000beb80 	call	1000beb8 <_Balloc>
1000c120:	d8c00717 	ldw	r3,28(sp)
1000c124:	10c00515 	stw	r3,20(r2)
1000c128:	00c00044 	movi	r3,1
1000c12c:	10c00415 	stw	r3,16(r2)
1000c130:	00c00244 	movi	r3,9
1000c134:	1cc0210e 	bge	r3,r19,1000c1bc <__s2b+0xf8>
1000c138:	80eb883a 	add	r21,r16,r3
1000c13c:	a829883a 	mov	r20,r21
1000c140:	84e1883a 	add	r16,r16,r19
1000c144:	a1c00007 	ldb	r7,0(r20)
1000c148:	8809883a 	mov	r4,r17
1000c14c:	a5000044 	addi	r20,r20,1
1000c150:	100b883a 	mov	r5,r2
1000c154:	01800284 	movi	r6,10
1000c158:	39fff404 	addi	r7,r7,-48
1000c15c:	000bf880 	call	1000bf88 <__multadd>
1000c160:	a43ff81e 	bne	r20,r16,1000c144 <__alt_data_end+0xf800c144>
1000c164:	ace1883a 	add	r16,r21,r19
1000c168:	843ffe04 	addi	r16,r16,-8
1000c16c:	9c800a0e 	bge	r19,r18,1000c198 <__s2b+0xd4>
1000c170:	94e5c83a 	sub	r18,r18,r19
1000c174:	84a5883a 	add	r18,r16,r18
1000c178:	81c00007 	ldb	r7,0(r16)
1000c17c:	8809883a 	mov	r4,r17
1000c180:	84000044 	addi	r16,r16,1
1000c184:	100b883a 	mov	r5,r2
1000c188:	01800284 	movi	r6,10
1000c18c:	39fff404 	addi	r7,r7,-48
1000c190:	000bf880 	call	1000bf88 <__multadd>
1000c194:	84bff81e 	bne	r16,r18,1000c178 <__alt_data_end+0xf800c178>
1000c198:	dfc00617 	ldw	ra,24(sp)
1000c19c:	dd400517 	ldw	r21,20(sp)
1000c1a0:	dd000417 	ldw	r20,16(sp)
1000c1a4:	dcc00317 	ldw	r19,12(sp)
1000c1a8:	dc800217 	ldw	r18,8(sp)
1000c1ac:	dc400117 	ldw	r17,4(sp)
1000c1b0:	dc000017 	ldw	r16,0(sp)
1000c1b4:	dec00704 	addi	sp,sp,28
1000c1b8:	f800283a 	ret
1000c1bc:	84000284 	addi	r16,r16,10
1000c1c0:	1827883a 	mov	r19,r3
1000c1c4:	003fe906 	br	1000c16c <__alt_data_end+0xf800c16c>

1000c1c8 <__hi0bits>:
1000c1c8:	20bfffec 	andhi	r2,r4,65535
1000c1cc:	1000141e 	bne	r2,zero,1000c220 <__hi0bits+0x58>
1000c1d0:	2008943a 	slli	r4,r4,16
1000c1d4:	00800404 	movi	r2,16
1000c1d8:	20ffc02c 	andhi	r3,r4,65280
1000c1dc:	1800021e 	bne	r3,zero,1000c1e8 <__hi0bits+0x20>
1000c1e0:	2008923a 	slli	r4,r4,8
1000c1e4:	10800204 	addi	r2,r2,8
1000c1e8:	20fc002c 	andhi	r3,r4,61440
1000c1ec:	1800021e 	bne	r3,zero,1000c1f8 <__hi0bits+0x30>
1000c1f0:	2008913a 	slli	r4,r4,4
1000c1f4:	10800104 	addi	r2,r2,4
1000c1f8:	20f0002c 	andhi	r3,r4,49152
1000c1fc:	1800031e 	bne	r3,zero,1000c20c <__hi0bits+0x44>
1000c200:	2109883a 	add	r4,r4,r4
1000c204:	10800084 	addi	r2,r2,2
1000c208:	2109883a 	add	r4,r4,r4
1000c20c:	20000316 	blt	r4,zero,1000c21c <__hi0bits+0x54>
1000c210:	2110002c 	andhi	r4,r4,16384
1000c214:	2000041e 	bne	r4,zero,1000c228 <__hi0bits+0x60>
1000c218:	00800804 	movi	r2,32
1000c21c:	f800283a 	ret
1000c220:	0005883a 	mov	r2,zero
1000c224:	003fec06 	br	1000c1d8 <__alt_data_end+0xf800c1d8>
1000c228:	10800044 	addi	r2,r2,1
1000c22c:	f800283a 	ret

1000c230 <__lo0bits>:
1000c230:	20c00017 	ldw	r3,0(r4)
1000c234:	188001cc 	andi	r2,r3,7
1000c238:	10000826 	beq	r2,zero,1000c25c <__lo0bits+0x2c>
1000c23c:	1880004c 	andi	r2,r3,1
1000c240:	1000211e 	bne	r2,zero,1000c2c8 <__lo0bits+0x98>
1000c244:	1880008c 	andi	r2,r3,2
1000c248:	1000211e 	bne	r2,zero,1000c2d0 <__lo0bits+0xa0>
1000c24c:	1806d0ba 	srli	r3,r3,2
1000c250:	00800084 	movi	r2,2
1000c254:	20c00015 	stw	r3,0(r4)
1000c258:	f800283a 	ret
1000c25c:	18bfffcc 	andi	r2,r3,65535
1000c260:	10001326 	beq	r2,zero,1000c2b0 <__lo0bits+0x80>
1000c264:	0005883a 	mov	r2,zero
1000c268:	19403fcc 	andi	r5,r3,255
1000c26c:	2800021e 	bne	r5,zero,1000c278 <__lo0bits+0x48>
1000c270:	1806d23a 	srli	r3,r3,8
1000c274:	10800204 	addi	r2,r2,8
1000c278:	194003cc 	andi	r5,r3,15
1000c27c:	2800021e 	bne	r5,zero,1000c288 <__lo0bits+0x58>
1000c280:	1806d13a 	srli	r3,r3,4
1000c284:	10800104 	addi	r2,r2,4
1000c288:	194000cc 	andi	r5,r3,3
1000c28c:	2800021e 	bne	r5,zero,1000c298 <__lo0bits+0x68>
1000c290:	1806d0ba 	srli	r3,r3,2
1000c294:	10800084 	addi	r2,r2,2
1000c298:	1940004c 	andi	r5,r3,1
1000c29c:	2800081e 	bne	r5,zero,1000c2c0 <__lo0bits+0x90>
1000c2a0:	1806d07a 	srli	r3,r3,1
1000c2a4:	1800051e 	bne	r3,zero,1000c2bc <__lo0bits+0x8c>
1000c2a8:	00800804 	movi	r2,32
1000c2ac:	f800283a 	ret
1000c2b0:	1806d43a 	srli	r3,r3,16
1000c2b4:	00800404 	movi	r2,16
1000c2b8:	003feb06 	br	1000c268 <__alt_data_end+0xf800c268>
1000c2bc:	10800044 	addi	r2,r2,1
1000c2c0:	20c00015 	stw	r3,0(r4)
1000c2c4:	f800283a 	ret
1000c2c8:	0005883a 	mov	r2,zero
1000c2cc:	f800283a 	ret
1000c2d0:	1806d07a 	srli	r3,r3,1
1000c2d4:	00800044 	movi	r2,1
1000c2d8:	20c00015 	stw	r3,0(r4)
1000c2dc:	f800283a 	ret

1000c2e0 <__i2b>:
1000c2e0:	defffd04 	addi	sp,sp,-12
1000c2e4:	dc000015 	stw	r16,0(sp)
1000c2e8:	04000044 	movi	r16,1
1000c2ec:	dc400115 	stw	r17,4(sp)
1000c2f0:	2823883a 	mov	r17,r5
1000c2f4:	800b883a 	mov	r5,r16
1000c2f8:	dfc00215 	stw	ra,8(sp)
1000c2fc:	000beb80 	call	1000beb8 <_Balloc>
1000c300:	14400515 	stw	r17,20(r2)
1000c304:	14000415 	stw	r16,16(r2)
1000c308:	dfc00217 	ldw	ra,8(sp)
1000c30c:	dc400117 	ldw	r17,4(sp)
1000c310:	dc000017 	ldw	r16,0(sp)
1000c314:	dec00304 	addi	sp,sp,12
1000c318:	f800283a 	ret

1000c31c <__multiply>:
1000c31c:	deffef04 	addi	sp,sp,-68
1000c320:	dc400815 	stw	r17,32(sp)
1000c324:	dc000715 	stw	r16,28(sp)
1000c328:	2c400417 	ldw	r17,16(r5)
1000c32c:	34000417 	ldw	r16,16(r6)
1000c330:	dd800d15 	stw	r22,52(sp)
1000c334:	dc800915 	stw	r18,36(sp)
1000c338:	dfc01015 	stw	ra,64(sp)
1000c33c:	df000f15 	stw	fp,60(sp)
1000c340:	ddc00e15 	stw	r23,56(sp)
1000c344:	dd400c15 	stw	r21,48(sp)
1000c348:	dd000b15 	stw	r20,44(sp)
1000c34c:	dcc00a15 	stw	r19,40(sp)
1000c350:	2825883a 	mov	r18,r5
1000c354:	302d883a 	mov	r22,r6
1000c358:	8c009116 	blt	r17,r16,1000c5a0 <__multiply+0x284>
1000c35c:	8005883a 	mov	r2,r16
1000c360:	8821883a 	mov	r16,r17
1000c364:	1023883a 	mov	r17,r2
1000c368:	90800217 	ldw	r2,8(r18)
1000c36c:	8447883a 	add	r3,r16,r17
1000c370:	d8c00215 	stw	r3,8(sp)
1000c374:	91400117 	ldw	r5,4(r18)
1000c378:	10c0010e 	bge	r2,r3,1000c380 <__multiply+0x64>
1000c37c:	29400044 	addi	r5,r5,1
1000c380:	000beb80 	call	1000beb8 <_Balloc>
1000c384:	d8c00217 	ldw	r3,8(sp)
1000c388:	d8800615 	stw	r2,24(sp)
1000c38c:	18eb883a 	add	r21,r3,r3
1000c390:	ad6b883a 	add	r21,r21,r21
1000c394:	10c00504 	addi	r3,r2,20
1000c398:	1d6b883a 	add	r21,r3,r21
1000c39c:	d8c00115 	stw	r3,4(sp)
1000c3a0:	dd400315 	stw	r21,12(sp)
1000c3a4:	1805883a 	mov	r2,r3
1000c3a8:	1d40042e 	bgeu	r3,r21,1000c3bc <__multiply+0xa0>
1000c3ac:	d8c00317 	ldw	r3,12(sp)
1000c3b0:	10000015 	stw	zero,0(r2)
1000c3b4:	10800104 	addi	r2,r2,4
1000c3b8:	10fffc36 	bltu	r2,r3,1000c3ac <__alt_data_end+0xf800c3ac>
1000c3bc:	8c63883a 	add	r17,r17,r17
1000c3c0:	b5800504 	addi	r22,r22,20
1000c3c4:	8c63883a 	add	r17,r17,r17
1000c3c8:	94800504 	addi	r18,r18,20
1000c3cc:	8421883a 	add	r16,r16,r16
1000c3d0:	b463883a 	add	r17,r22,r17
1000c3d4:	8421883a 	add	r16,r16,r16
1000c3d8:	dd800015 	stw	r22,0(sp)
1000c3dc:	dc800415 	stw	r18,16(sp)
1000c3e0:	dc400515 	stw	r17,20(sp)
1000c3e4:	9429883a 	add	r20,r18,r16
1000c3e8:	b4404f2e 	bgeu	r22,r17,1000c528 <__multiply+0x20c>
1000c3ec:	d8c00017 	ldw	r3,0(sp)
1000c3f0:	1c800017 	ldw	r18,0(r3)
1000c3f4:	943fffcc 	andi	r16,r18,65535
1000c3f8:	80001e26 	beq	r16,zero,1000c474 <__multiply+0x158>
1000c3fc:	dd800117 	ldw	r22,4(sp)
1000c400:	dd400417 	ldw	r21,16(sp)
1000c404:	0025883a 	mov	r18,zero
1000c408:	adc00017 	ldw	r23,0(r21)
1000c40c:	b4c00017 	ldw	r19,0(r22)
1000c410:	800b883a 	mov	r5,r16
1000c414:	b93fffcc 	andi	r4,r23,65535
1000c418:	00040ec0 	call	100040ec <__mulsi3>
1000c41c:	9c7fffcc 	andi	r17,r19,65535
1000c420:	8885883a 	add	r2,r17,r2
1000c424:	b808d43a 	srli	r4,r23,16
1000c428:	14a3883a 	add	r17,r2,r18
1000c42c:	9826d43a 	srli	r19,r19,16
1000c430:	8824d43a 	srli	r18,r17,16
1000c434:	800b883a 	mov	r5,r16
1000c438:	00040ec0 	call	100040ec <__mulsi3>
1000c43c:	9885883a 	add	r2,r19,r2
1000c440:	14a7883a 	add	r19,r2,r18
1000c444:	88ffffcc 	andi	r3,r17,65535
1000c448:	9822943a 	slli	r17,r19,16
1000c44c:	ad400104 	addi	r21,r21,4
1000c450:	b005883a 	mov	r2,r22
1000c454:	88c6b03a 	or	r3,r17,r3
1000c458:	b0c00015 	stw	r3,0(r22)
1000c45c:	9824d43a 	srli	r18,r19,16
1000c460:	b5800104 	addi	r22,r22,4
1000c464:	ad3fe836 	bltu	r21,r20,1000c408 <__alt_data_end+0xf800c408>
1000c468:	d8c00017 	ldw	r3,0(sp)
1000c46c:	14800115 	stw	r18,4(r2)
1000c470:	1c800017 	ldw	r18,0(r3)
1000c474:	9024d43a 	srli	r18,r18,16
1000c478:	90002226 	beq	r18,zero,1000c504 <__multiply+0x1e8>
1000c47c:	d8c00117 	ldw	r3,4(sp)
1000c480:	dd800417 	ldw	r22,16(sp)
1000c484:	002f883a 	mov	r23,zero
1000c488:	1f000017 	ldw	fp,0(r3)
1000c48c:	1823883a 	mov	r17,r3
1000c490:	182b883a 	mov	r21,r3
1000c494:	e021883a 	mov	r16,fp
1000c498:	00000106 	br	1000c4a0 <__multiply+0x184>
1000c49c:	982b883a 	mov	r21,r19
1000c4a0:	b100000b 	ldhu	r4,0(r22)
1000c4a4:	8020d43a 	srli	r16,r16,16
1000c4a8:	900b883a 	mov	r5,r18
1000c4ac:	00040ec0 	call	100040ec <__mulsi3>
1000c4b0:	1405883a 	add	r2,r2,r16
1000c4b4:	15ef883a 	add	r23,r2,r23
1000c4b8:	b804943a 	slli	r2,r23,16
1000c4bc:	e0ffffcc 	andi	r3,fp,65535
1000c4c0:	8c400104 	addi	r17,r17,4
1000c4c4:	10c6b03a 	or	r3,r2,r3
1000c4c8:	88ffff15 	stw	r3,-4(r17)
1000c4cc:	b5800104 	addi	r22,r22,4
1000c4d0:	b13fff17 	ldw	r4,-4(r22)
1000c4d4:	acc00104 	addi	r19,r21,4
1000c4d8:	900b883a 	mov	r5,r18
1000c4dc:	2008d43a 	srli	r4,r4,16
1000c4e0:	9c000017 	ldw	r16,0(r19)
1000c4e4:	00040ec0 	call	100040ec <__mulsi3>
1000c4e8:	b806d43a 	srli	r3,r23,16
1000c4ec:	813fffcc 	andi	r4,r16,65535
1000c4f0:	1105883a 	add	r2,r2,r4
1000c4f4:	10f9883a 	add	fp,r2,r3
1000c4f8:	e02ed43a 	srli	r23,fp,16
1000c4fc:	b53fe736 	bltu	r22,r20,1000c49c <__alt_data_end+0xf800c49c>
1000c500:	af000115 	stw	fp,4(r21)
1000c504:	d8c00017 	ldw	r3,0(sp)
1000c508:	d9000517 	ldw	r4,20(sp)
1000c50c:	18c00104 	addi	r3,r3,4
1000c510:	d8c00015 	stw	r3,0(sp)
1000c514:	d8c00117 	ldw	r3,4(sp)
1000c518:	18c00104 	addi	r3,r3,4
1000c51c:	d8c00115 	stw	r3,4(sp)
1000c520:	d8c00017 	ldw	r3,0(sp)
1000c524:	193fb136 	bltu	r3,r4,1000c3ec <__alt_data_end+0xf800c3ec>
1000c528:	d8c00217 	ldw	r3,8(sp)
1000c52c:	00c00c0e 	bge	zero,r3,1000c560 <__multiply+0x244>
1000c530:	d8c00317 	ldw	r3,12(sp)
1000c534:	18bfff17 	ldw	r2,-4(r3)
1000c538:	1d7fff04 	addi	r21,r3,-4
1000c53c:	10000326 	beq	r2,zero,1000c54c <__multiply+0x230>
1000c540:	00000706 	br	1000c560 <__multiply+0x244>
1000c544:	a8800017 	ldw	r2,0(r21)
1000c548:	1000051e 	bne	r2,zero,1000c560 <__multiply+0x244>
1000c54c:	d8c00217 	ldw	r3,8(sp)
1000c550:	ad7fff04 	addi	r21,r21,-4
1000c554:	18ffffc4 	addi	r3,r3,-1
1000c558:	d8c00215 	stw	r3,8(sp)
1000c55c:	183ff91e 	bne	r3,zero,1000c544 <__alt_data_end+0xf800c544>
1000c560:	d8c00617 	ldw	r3,24(sp)
1000c564:	d9000217 	ldw	r4,8(sp)
1000c568:	1805883a 	mov	r2,r3
1000c56c:	19000415 	stw	r4,16(r3)
1000c570:	dfc01017 	ldw	ra,64(sp)
1000c574:	df000f17 	ldw	fp,60(sp)
1000c578:	ddc00e17 	ldw	r23,56(sp)
1000c57c:	dd800d17 	ldw	r22,52(sp)
1000c580:	dd400c17 	ldw	r21,48(sp)
1000c584:	dd000b17 	ldw	r20,44(sp)
1000c588:	dcc00a17 	ldw	r19,40(sp)
1000c58c:	dc800917 	ldw	r18,36(sp)
1000c590:	dc400817 	ldw	r17,32(sp)
1000c594:	dc000717 	ldw	r16,28(sp)
1000c598:	dec01104 	addi	sp,sp,68
1000c59c:	f800283a 	ret
1000c5a0:	3025883a 	mov	r18,r6
1000c5a4:	282d883a 	mov	r22,r5
1000c5a8:	003f6f06 	br	1000c368 <__alt_data_end+0xf800c368>

1000c5ac <__pow5mult>:
1000c5ac:	defffa04 	addi	sp,sp,-24
1000c5b0:	dcc00315 	stw	r19,12(sp)
1000c5b4:	dc800215 	stw	r18,8(sp)
1000c5b8:	dc000015 	stw	r16,0(sp)
1000c5bc:	dfc00515 	stw	ra,20(sp)
1000c5c0:	dd000415 	stw	r20,16(sp)
1000c5c4:	dc400115 	stw	r17,4(sp)
1000c5c8:	308000cc 	andi	r2,r6,3
1000c5cc:	3021883a 	mov	r16,r6
1000c5d0:	2027883a 	mov	r19,r4
1000c5d4:	2825883a 	mov	r18,r5
1000c5d8:	10002e1e 	bne	r2,zero,1000c694 <__pow5mult+0xe8>
1000c5dc:	8021d0ba 	srai	r16,r16,2
1000c5e0:	80001a26 	beq	r16,zero,1000c64c <__pow5mult+0xa0>
1000c5e4:	9c401217 	ldw	r17,72(r19)
1000c5e8:	8800061e 	bne	r17,zero,1000c604 <__pow5mult+0x58>
1000c5ec:	00003406 	br	1000c6c0 <__pow5mult+0x114>
1000c5f0:	8021d07a 	srai	r16,r16,1
1000c5f4:	80001526 	beq	r16,zero,1000c64c <__pow5mult+0xa0>
1000c5f8:	88800017 	ldw	r2,0(r17)
1000c5fc:	10001c26 	beq	r2,zero,1000c670 <__pow5mult+0xc4>
1000c600:	1023883a 	mov	r17,r2
1000c604:	80c0004c 	andi	r3,r16,1
1000c608:	183ff926 	beq	r3,zero,1000c5f0 <__alt_data_end+0xf800c5f0>
1000c60c:	900b883a 	mov	r5,r18
1000c610:	880d883a 	mov	r6,r17
1000c614:	9809883a 	mov	r4,r19
1000c618:	000c31c0 	call	1000c31c <__multiply>
1000c61c:	90001b26 	beq	r18,zero,1000c68c <__pow5mult+0xe0>
1000c620:	91c00117 	ldw	r7,4(r18)
1000c624:	98c01317 	ldw	r3,76(r19)
1000c628:	8021d07a 	srai	r16,r16,1
1000c62c:	39cf883a 	add	r7,r7,r7
1000c630:	39cf883a 	add	r7,r7,r7
1000c634:	19c7883a 	add	r3,r3,r7
1000c638:	19000017 	ldw	r4,0(r3)
1000c63c:	91000015 	stw	r4,0(r18)
1000c640:	1c800015 	stw	r18,0(r3)
1000c644:	1025883a 	mov	r18,r2
1000c648:	803feb1e 	bne	r16,zero,1000c5f8 <__alt_data_end+0xf800c5f8>
1000c64c:	9005883a 	mov	r2,r18
1000c650:	dfc00517 	ldw	ra,20(sp)
1000c654:	dd000417 	ldw	r20,16(sp)
1000c658:	dcc00317 	ldw	r19,12(sp)
1000c65c:	dc800217 	ldw	r18,8(sp)
1000c660:	dc400117 	ldw	r17,4(sp)
1000c664:	dc000017 	ldw	r16,0(sp)
1000c668:	dec00604 	addi	sp,sp,24
1000c66c:	f800283a 	ret
1000c670:	9809883a 	mov	r4,r19
1000c674:	880b883a 	mov	r5,r17
1000c678:	880d883a 	mov	r6,r17
1000c67c:	000c31c0 	call	1000c31c <__multiply>
1000c680:	88800015 	stw	r2,0(r17)
1000c684:	10000015 	stw	zero,0(r2)
1000c688:	003fdd06 	br	1000c600 <__alt_data_end+0xf800c600>
1000c68c:	1025883a 	mov	r18,r2
1000c690:	003fd706 	br	1000c5f0 <__alt_data_end+0xf800c5f0>
1000c694:	10bfffc4 	addi	r2,r2,-1
1000c698:	1085883a 	add	r2,r2,r2
1000c69c:	00c40074 	movhi	r3,4097
1000c6a0:	18c97304 	addi	r3,r3,9676
1000c6a4:	1085883a 	add	r2,r2,r2
1000c6a8:	1885883a 	add	r2,r3,r2
1000c6ac:	11800017 	ldw	r6,0(r2)
1000c6b0:	000f883a 	mov	r7,zero
1000c6b4:	000bf880 	call	1000bf88 <__multadd>
1000c6b8:	1025883a 	mov	r18,r2
1000c6bc:	003fc706 	br	1000c5dc <__alt_data_end+0xf800c5dc>
1000c6c0:	05000044 	movi	r20,1
1000c6c4:	9809883a 	mov	r4,r19
1000c6c8:	a00b883a 	mov	r5,r20
1000c6cc:	000beb80 	call	1000beb8 <_Balloc>
1000c6d0:	1023883a 	mov	r17,r2
1000c6d4:	00809c44 	movi	r2,625
1000c6d8:	88800515 	stw	r2,20(r17)
1000c6dc:	8d000415 	stw	r20,16(r17)
1000c6e0:	9c401215 	stw	r17,72(r19)
1000c6e4:	88000015 	stw	zero,0(r17)
1000c6e8:	003fc606 	br	1000c604 <__alt_data_end+0xf800c604>

1000c6ec <__lshift>:
1000c6ec:	defff904 	addi	sp,sp,-28
1000c6f0:	dd000415 	stw	r20,16(sp)
1000c6f4:	dcc00315 	stw	r19,12(sp)
1000c6f8:	3029d17a 	srai	r20,r6,5
1000c6fc:	2cc00417 	ldw	r19,16(r5)
1000c700:	28800217 	ldw	r2,8(r5)
1000c704:	dd400515 	stw	r21,20(sp)
1000c708:	a4e7883a 	add	r19,r20,r19
1000c70c:	dc800215 	stw	r18,8(sp)
1000c710:	dc400115 	stw	r17,4(sp)
1000c714:	dc000015 	stw	r16,0(sp)
1000c718:	dfc00615 	stw	ra,24(sp)
1000c71c:	9c000044 	addi	r16,r19,1
1000c720:	2823883a 	mov	r17,r5
1000c724:	302b883a 	mov	r21,r6
1000c728:	2025883a 	mov	r18,r4
1000c72c:	29400117 	ldw	r5,4(r5)
1000c730:	1400030e 	bge	r2,r16,1000c740 <__lshift+0x54>
1000c734:	1085883a 	add	r2,r2,r2
1000c738:	29400044 	addi	r5,r5,1
1000c73c:	143ffd16 	blt	r2,r16,1000c734 <__alt_data_end+0xf800c734>
1000c740:	9009883a 	mov	r4,r18
1000c744:	000beb80 	call	1000beb8 <_Balloc>
1000c748:	11c00504 	addi	r7,r2,20
1000c74c:	0500090e 	bge	zero,r20,1000c774 <__lshift+0x88>
1000c750:	3811883a 	mov	r8,r7
1000c754:	0007883a 	mov	r3,zero
1000c758:	40000015 	stw	zero,0(r8)
1000c75c:	18c00044 	addi	r3,r3,1
1000c760:	42000104 	addi	r8,r8,4
1000c764:	1d3ffc1e 	bne	r3,r20,1000c758 <__alt_data_end+0xf800c758>
1000c768:	18c7883a 	add	r3,r3,r3
1000c76c:	18c7883a 	add	r3,r3,r3
1000c770:	38cf883a 	add	r7,r7,r3
1000c774:	89000417 	ldw	r4,16(r17)
1000c778:	88c00504 	addi	r3,r17,20
1000c77c:	a98007cc 	andi	r6,r21,31
1000c780:	2109883a 	add	r4,r4,r4
1000c784:	2109883a 	add	r4,r4,r4
1000c788:	1909883a 	add	r4,r3,r4
1000c78c:	30002326 	beq	r6,zero,1000c81c <__lshift+0x130>
1000c790:	01400804 	movi	r5,32
1000c794:	298bc83a 	sub	r5,r5,r6
1000c798:	0013883a 	mov	r9,zero
1000c79c:	1a000017 	ldw	r8,0(r3)
1000c7a0:	3815883a 	mov	r10,r7
1000c7a4:	39c00104 	addi	r7,r7,4
1000c7a8:	4190983a 	sll	r8,r8,r6
1000c7ac:	18c00104 	addi	r3,r3,4
1000c7b0:	4a10b03a 	or	r8,r9,r8
1000c7b4:	3a3fff15 	stw	r8,-4(r7)
1000c7b8:	1a3fff17 	ldw	r8,-4(r3)
1000c7bc:	4152d83a 	srl	r9,r8,r5
1000c7c0:	193ff636 	bltu	r3,r4,1000c79c <__alt_data_end+0xf800c79c>
1000c7c4:	52400115 	stw	r9,4(r10)
1000c7c8:	48000126 	beq	r9,zero,1000c7d0 <__lshift+0xe4>
1000c7cc:	9c000084 	addi	r16,r19,2
1000c7d0:	89000117 	ldw	r4,4(r17)
1000c7d4:	90c01317 	ldw	r3,76(r18)
1000c7d8:	843fffc4 	addi	r16,r16,-1
1000c7dc:	2109883a 	add	r4,r4,r4
1000c7e0:	2109883a 	add	r4,r4,r4
1000c7e4:	1907883a 	add	r3,r3,r4
1000c7e8:	19000017 	ldw	r4,0(r3)
1000c7ec:	14000415 	stw	r16,16(r2)
1000c7f0:	89000015 	stw	r4,0(r17)
1000c7f4:	1c400015 	stw	r17,0(r3)
1000c7f8:	dfc00617 	ldw	ra,24(sp)
1000c7fc:	dd400517 	ldw	r21,20(sp)
1000c800:	dd000417 	ldw	r20,16(sp)
1000c804:	dcc00317 	ldw	r19,12(sp)
1000c808:	dc800217 	ldw	r18,8(sp)
1000c80c:	dc400117 	ldw	r17,4(sp)
1000c810:	dc000017 	ldw	r16,0(sp)
1000c814:	dec00704 	addi	sp,sp,28
1000c818:	f800283a 	ret
1000c81c:	19400017 	ldw	r5,0(r3)
1000c820:	39c00104 	addi	r7,r7,4
1000c824:	18c00104 	addi	r3,r3,4
1000c828:	397fff15 	stw	r5,-4(r7)
1000c82c:	193ffb36 	bltu	r3,r4,1000c81c <__alt_data_end+0xf800c81c>
1000c830:	003fe706 	br	1000c7d0 <__alt_data_end+0xf800c7d0>

1000c834 <__mcmp>:
1000c834:	20800417 	ldw	r2,16(r4)
1000c838:	28c00417 	ldw	r3,16(r5)
1000c83c:	10c5c83a 	sub	r2,r2,r3
1000c840:	1000111e 	bne	r2,zero,1000c888 <__mcmp+0x54>
1000c844:	18c7883a 	add	r3,r3,r3
1000c848:	18c7883a 	add	r3,r3,r3
1000c84c:	21000504 	addi	r4,r4,20
1000c850:	29400504 	addi	r5,r5,20
1000c854:	20c5883a 	add	r2,r4,r3
1000c858:	28cb883a 	add	r5,r5,r3
1000c85c:	00000106 	br	1000c864 <__mcmp+0x30>
1000c860:	20800a2e 	bgeu	r4,r2,1000c88c <__mcmp+0x58>
1000c864:	10bfff04 	addi	r2,r2,-4
1000c868:	297fff04 	addi	r5,r5,-4
1000c86c:	11800017 	ldw	r6,0(r2)
1000c870:	28c00017 	ldw	r3,0(r5)
1000c874:	30fffa26 	beq	r6,r3,1000c860 <__alt_data_end+0xf800c860>
1000c878:	30c00236 	bltu	r6,r3,1000c884 <__mcmp+0x50>
1000c87c:	00800044 	movi	r2,1
1000c880:	f800283a 	ret
1000c884:	00bfffc4 	movi	r2,-1
1000c888:	f800283a 	ret
1000c88c:	0005883a 	mov	r2,zero
1000c890:	f800283a 	ret

1000c894 <__mdiff>:
1000c894:	defffb04 	addi	sp,sp,-20
1000c898:	dc000015 	stw	r16,0(sp)
1000c89c:	2821883a 	mov	r16,r5
1000c8a0:	dcc00315 	stw	r19,12(sp)
1000c8a4:	300b883a 	mov	r5,r6
1000c8a8:	2027883a 	mov	r19,r4
1000c8ac:	8009883a 	mov	r4,r16
1000c8b0:	dc800215 	stw	r18,8(sp)
1000c8b4:	dfc00415 	stw	ra,16(sp)
1000c8b8:	dc400115 	stw	r17,4(sp)
1000c8bc:	3025883a 	mov	r18,r6
1000c8c0:	000c8340 	call	1000c834 <__mcmp>
1000c8c4:	10005226 	beq	r2,zero,1000ca10 <__mdiff+0x17c>
1000c8c8:	10004c16 	blt	r2,zero,1000c9fc <__mdiff+0x168>
1000c8cc:	0023883a 	mov	r17,zero
1000c8d0:	81400117 	ldw	r5,4(r16)
1000c8d4:	9809883a 	mov	r4,r19
1000c8d8:	000beb80 	call	1000beb8 <_Balloc>
1000c8dc:	83400417 	ldw	r13,16(r16)
1000c8e0:	93800417 	ldw	r14,16(r18)
1000c8e4:	81000504 	addi	r4,r16,20
1000c8e8:	6b59883a 	add	r12,r13,r13
1000c8ec:	739d883a 	add	r14,r14,r14
1000c8f0:	6319883a 	add	r12,r12,r12
1000c8f4:	91800504 	addi	r6,r18,20
1000c8f8:	739d883a 	add	r14,r14,r14
1000c8fc:	14400315 	stw	r17,12(r2)
1000c900:	2319883a 	add	r12,r4,r12
1000c904:	339d883a 	add	r14,r6,r14
1000c908:	12400504 	addi	r9,r2,20
1000c90c:	0007883a 	mov	r3,zero
1000c910:	22000017 	ldw	r8,0(r4)
1000c914:	32800017 	ldw	r10,0(r6)
1000c918:	4ac00104 	addi	r11,r9,4
1000c91c:	41ffffcc 	andi	r7,r8,65535
1000c920:	38c7883a 	add	r3,r7,r3
1000c924:	51ffffcc 	andi	r7,r10,65535
1000c928:	19cfc83a 	sub	r7,r3,r7
1000c92c:	4010d43a 	srli	r8,r8,16
1000c930:	5014d43a 	srli	r10,r10,16
1000c934:	3807d43a 	srai	r3,r7,16
1000c938:	39ffffcc 	andi	r7,r7,65535
1000c93c:	4291c83a 	sub	r8,r8,r10
1000c940:	40c7883a 	add	r3,r8,r3
1000c944:	1810943a 	slli	r8,r3,16
1000c948:	31800104 	addi	r6,r6,4
1000c94c:	21000104 	addi	r4,r4,4
1000c950:	41ceb03a 	or	r7,r8,r7
1000c954:	49c00015 	stw	r7,0(r9)
1000c958:	1807d43a 	srai	r3,r3,16
1000c95c:	580b883a 	mov	r5,r11
1000c960:	5813883a 	mov	r9,r11
1000c964:	33bfea36 	bltu	r6,r14,1000c910 <__alt_data_end+0xf800c910>
1000c968:	2011883a 	mov	r8,r4
1000c96c:	2300152e 	bgeu	r4,r12,1000c9c4 <__mdiff+0x130>
1000c970:	21400017 	ldw	r5,0(r4)
1000c974:	4a400104 	addi	r9,r9,4
1000c978:	21000104 	addi	r4,r4,4
1000c97c:	29ffffcc 	andi	r7,r5,65535
1000c980:	38c7883a 	add	r3,r7,r3
1000c984:	280ad43a 	srli	r5,r5,16
1000c988:	180dd43a 	srai	r6,r3,16
1000c98c:	19ffffcc 	andi	r7,r3,65535
1000c990:	3147883a 	add	r3,r6,r5
1000c994:	180a943a 	slli	r5,r3,16
1000c998:	1807d43a 	srai	r3,r3,16
1000c99c:	29ceb03a 	or	r7,r5,r7
1000c9a0:	49ffff15 	stw	r7,-4(r9)
1000c9a4:	233ff236 	bltu	r4,r12,1000c970 <__alt_data_end+0xf800c970>
1000c9a8:	0206303a 	nor	r3,zero,r8
1000c9ac:	1b07883a 	add	r3,r3,r12
1000c9b0:	1806d0ba 	srli	r3,r3,2
1000c9b4:	18c00044 	addi	r3,r3,1
1000c9b8:	18c7883a 	add	r3,r3,r3
1000c9bc:	18c7883a 	add	r3,r3,r3
1000c9c0:	58cb883a 	add	r5,r11,r3
1000c9c4:	28ffff04 	addi	r3,r5,-4
1000c9c8:	3800041e 	bne	r7,zero,1000c9dc <__mdiff+0x148>
1000c9cc:	18ffff04 	addi	r3,r3,-4
1000c9d0:	19000017 	ldw	r4,0(r3)
1000c9d4:	6b7fffc4 	addi	r13,r13,-1
1000c9d8:	203ffc26 	beq	r4,zero,1000c9cc <__alt_data_end+0xf800c9cc>
1000c9dc:	13400415 	stw	r13,16(r2)
1000c9e0:	dfc00417 	ldw	ra,16(sp)
1000c9e4:	dcc00317 	ldw	r19,12(sp)
1000c9e8:	dc800217 	ldw	r18,8(sp)
1000c9ec:	dc400117 	ldw	r17,4(sp)
1000c9f0:	dc000017 	ldw	r16,0(sp)
1000c9f4:	dec00504 	addi	sp,sp,20
1000c9f8:	f800283a 	ret
1000c9fc:	8005883a 	mov	r2,r16
1000ca00:	04400044 	movi	r17,1
1000ca04:	9021883a 	mov	r16,r18
1000ca08:	1025883a 	mov	r18,r2
1000ca0c:	003fb006 	br	1000c8d0 <__alt_data_end+0xf800c8d0>
1000ca10:	9809883a 	mov	r4,r19
1000ca14:	000b883a 	mov	r5,zero
1000ca18:	000beb80 	call	1000beb8 <_Balloc>
1000ca1c:	00c00044 	movi	r3,1
1000ca20:	10c00415 	stw	r3,16(r2)
1000ca24:	10000515 	stw	zero,20(r2)
1000ca28:	003fed06 	br	1000c9e0 <__alt_data_end+0xf800c9e0>

1000ca2c <__ulp>:
1000ca2c:	295ffc2c 	andhi	r5,r5,32752
1000ca30:	00bf3034 	movhi	r2,64704
1000ca34:	2887883a 	add	r3,r5,r2
1000ca38:	00c0020e 	bge	zero,r3,1000ca44 <__ulp+0x18>
1000ca3c:	0005883a 	mov	r2,zero
1000ca40:	f800283a 	ret
1000ca44:	00c7c83a 	sub	r3,zero,r3
1000ca48:	180bd53a 	srai	r5,r3,20
1000ca4c:	008004c4 	movi	r2,19
1000ca50:	11400a0e 	bge	r2,r5,1000ca7c <__ulp+0x50>
1000ca54:	00800c84 	movi	r2,50
1000ca58:	0007883a 	mov	r3,zero
1000ca5c:	11400516 	blt	r2,r5,1000ca74 <__ulp+0x48>
1000ca60:	00800cc4 	movi	r2,51
1000ca64:	114bc83a 	sub	r5,r2,r5
1000ca68:	00800044 	movi	r2,1
1000ca6c:	1144983a 	sll	r2,r2,r5
1000ca70:	f800283a 	ret
1000ca74:	00800044 	movi	r2,1
1000ca78:	f800283a 	ret
1000ca7c:	00800234 	movhi	r2,8
1000ca80:	1147d83a 	sra	r3,r2,r5
1000ca84:	0005883a 	mov	r2,zero
1000ca88:	f800283a 	ret

1000ca8c <__b2d>:
1000ca8c:	defffa04 	addi	sp,sp,-24
1000ca90:	dc000015 	stw	r16,0(sp)
1000ca94:	24000417 	ldw	r16,16(r4)
1000ca98:	dc400115 	stw	r17,4(sp)
1000ca9c:	24400504 	addi	r17,r4,20
1000caa0:	8421883a 	add	r16,r16,r16
1000caa4:	8421883a 	add	r16,r16,r16
1000caa8:	8c21883a 	add	r16,r17,r16
1000caac:	dc800215 	stw	r18,8(sp)
1000cab0:	84bfff17 	ldw	r18,-4(r16)
1000cab4:	dd000415 	stw	r20,16(sp)
1000cab8:	dcc00315 	stw	r19,12(sp)
1000cabc:	9009883a 	mov	r4,r18
1000cac0:	2829883a 	mov	r20,r5
1000cac4:	dfc00515 	stw	ra,20(sp)
1000cac8:	000c1c80 	call	1000c1c8 <__hi0bits>
1000cacc:	00c00804 	movi	r3,32
1000cad0:	1887c83a 	sub	r3,r3,r2
1000cad4:	a0c00015 	stw	r3,0(r20)
1000cad8:	00c00284 	movi	r3,10
1000cadc:	84ffff04 	addi	r19,r16,-4
1000cae0:	18801216 	blt	r3,r2,1000cb2c <__b2d+0xa0>
1000cae4:	014002c4 	movi	r5,11
1000cae8:	2889c83a 	sub	r4,r5,r2
1000caec:	9106d83a 	srl	r3,r18,r4
1000caf0:	18cffc34 	orhi	r3,r3,16368
1000caf4:	8cc0282e 	bgeu	r17,r19,1000cb98 <__b2d+0x10c>
1000caf8:	817ffe17 	ldw	r5,-8(r16)
1000cafc:	290ad83a 	srl	r5,r5,r4
1000cb00:	10800544 	addi	r2,r2,21
1000cb04:	9084983a 	sll	r2,r18,r2
1000cb08:	2884b03a 	or	r2,r5,r2
1000cb0c:	dfc00517 	ldw	ra,20(sp)
1000cb10:	dd000417 	ldw	r20,16(sp)
1000cb14:	dcc00317 	ldw	r19,12(sp)
1000cb18:	dc800217 	ldw	r18,8(sp)
1000cb1c:	dc400117 	ldw	r17,4(sp)
1000cb20:	dc000017 	ldw	r16,0(sp)
1000cb24:	dec00604 	addi	sp,sp,24
1000cb28:	f800283a 	ret
1000cb2c:	113ffd44 	addi	r4,r2,-11
1000cb30:	8cc00f2e 	bgeu	r17,r19,1000cb70 <__b2d+0xe4>
1000cb34:	81bffe04 	addi	r6,r16,-8
1000cb38:	817ffe17 	ldw	r5,-8(r16)
1000cb3c:	20001326 	beq	r4,zero,1000cb8c <__b2d+0x100>
1000cb40:	00c00ac4 	movi	r3,43
1000cb44:	1885c83a 	sub	r2,r3,r2
1000cb48:	2886d83a 	srl	r3,r5,r2
1000cb4c:	9124983a 	sll	r18,r18,r4
1000cb50:	90e4b03a 	or	r18,r18,r3
1000cb54:	90cffc34 	orhi	r3,r18,16368
1000cb58:	8980112e 	bgeu	r17,r6,1000cba0 <__b2d+0x114>
1000cb5c:	81bffd17 	ldw	r6,-12(r16)
1000cb60:	308cd83a 	srl	r6,r6,r2
1000cb64:	2904983a 	sll	r2,r5,r4
1000cb68:	1184b03a 	or	r2,r2,r6
1000cb6c:	003fe706 	br	1000cb0c <__alt_data_end+0xf800cb0c>
1000cb70:	20000526 	beq	r4,zero,1000cb88 <__b2d+0xfc>
1000cb74:	9124983a 	sll	r18,r18,r4
1000cb78:	000d883a 	mov	r6,zero
1000cb7c:	000b883a 	mov	r5,zero
1000cb80:	90cffc34 	orhi	r3,r18,16368
1000cb84:	003ff706 	br	1000cb64 <__alt_data_end+0xf800cb64>
1000cb88:	000b883a 	mov	r5,zero
1000cb8c:	90cffc34 	orhi	r3,r18,16368
1000cb90:	2805883a 	mov	r2,r5
1000cb94:	003fdd06 	br	1000cb0c <__alt_data_end+0xf800cb0c>
1000cb98:	000b883a 	mov	r5,zero
1000cb9c:	003fd806 	br	1000cb00 <__alt_data_end+0xf800cb00>
1000cba0:	000d883a 	mov	r6,zero
1000cba4:	003fef06 	br	1000cb64 <__alt_data_end+0xf800cb64>

1000cba8 <__d2b>:
1000cba8:	defff704 	addi	sp,sp,-36
1000cbac:	dc000215 	stw	r16,8(sp)
1000cbb0:	3021883a 	mov	r16,r6
1000cbb4:	dc400315 	stw	r17,12(sp)
1000cbb8:	8022907a 	slli	r17,r16,1
1000cbbc:	dd400715 	stw	r21,28(sp)
1000cbc0:	282b883a 	mov	r21,r5
1000cbc4:	01400044 	movi	r5,1
1000cbc8:	dd000615 	stw	r20,24(sp)
1000cbcc:	dcc00515 	stw	r19,20(sp)
1000cbd0:	dc800415 	stw	r18,16(sp)
1000cbd4:	dfc00815 	stw	ra,32(sp)
1000cbd8:	3829883a 	mov	r20,r7
1000cbdc:	dc800917 	ldw	r18,36(sp)
1000cbe0:	8822d57a 	srli	r17,r17,21
1000cbe4:	000beb80 	call	1000beb8 <_Balloc>
1000cbe8:	1027883a 	mov	r19,r2
1000cbec:	00800434 	movhi	r2,16
1000cbf0:	10bfffc4 	addi	r2,r2,-1
1000cbf4:	808c703a 	and	r6,r16,r2
1000cbf8:	88000126 	beq	r17,zero,1000cc00 <__d2b+0x58>
1000cbfc:	31800434 	orhi	r6,r6,16
1000cc00:	d9800015 	stw	r6,0(sp)
1000cc04:	a8001f26 	beq	r21,zero,1000cc84 <__d2b+0xdc>
1000cc08:	d9000104 	addi	r4,sp,4
1000cc0c:	dd400115 	stw	r21,4(sp)
1000cc10:	000c2300 	call	1000c230 <__lo0bits>
1000cc14:	d8c00017 	ldw	r3,0(sp)
1000cc18:	1000291e 	bne	r2,zero,1000ccc0 <__d2b+0x118>
1000cc1c:	d9000117 	ldw	r4,4(sp)
1000cc20:	99000515 	stw	r4,20(r19)
1000cc24:	1820c03a 	cmpne	r16,r3,zero
1000cc28:	84000044 	addi	r16,r16,1
1000cc2c:	98c00615 	stw	r3,24(r19)
1000cc30:	9c000415 	stw	r16,16(r19)
1000cc34:	88001b1e 	bne	r17,zero,1000cca4 <__d2b+0xfc>
1000cc38:	800690ba 	slli	r3,r16,2
1000cc3c:	10bef384 	addi	r2,r2,-1074
1000cc40:	a0800015 	stw	r2,0(r20)
1000cc44:	98c5883a 	add	r2,r19,r3
1000cc48:	11000417 	ldw	r4,16(r2)
1000cc4c:	8020917a 	slli	r16,r16,5
1000cc50:	000c1c80 	call	1000c1c8 <__hi0bits>
1000cc54:	8085c83a 	sub	r2,r16,r2
1000cc58:	90800015 	stw	r2,0(r18)
1000cc5c:	9805883a 	mov	r2,r19
1000cc60:	dfc00817 	ldw	ra,32(sp)
1000cc64:	dd400717 	ldw	r21,28(sp)
1000cc68:	dd000617 	ldw	r20,24(sp)
1000cc6c:	dcc00517 	ldw	r19,20(sp)
1000cc70:	dc800417 	ldw	r18,16(sp)
1000cc74:	dc400317 	ldw	r17,12(sp)
1000cc78:	dc000217 	ldw	r16,8(sp)
1000cc7c:	dec00904 	addi	sp,sp,36
1000cc80:	f800283a 	ret
1000cc84:	d809883a 	mov	r4,sp
1000cc88:	000c2300 	call	1000c230 <__lo0bits>
1000cc8c:	d8c00017 	ldw	r3,0(sp)
1000cc90:	04000044 	movi	r16,1
1000cc94:	9c000415 	stw	r16,16(r19)
1000cc98:	98c00515 	stw	r3,20(r19)
1000cc9c:	10800804 	addi	r2,r2,32
1000cca0:	883fe526 	beq	r17,zero,1000cc38 <__alt_data_end+0xf800cc38>
1000cca4:	8c7ef344 	addi	r17,r17,-1075
1000cca8:	88a3883a 	add	r17,r17,r2
1000ccac:	00c00d44 	movi	r3,53
1000ccb0:	a4400015 	stw	r17,0(r20)
1000ccb4:	1885c83a 	sub	r2,r3,r2
1000ccb8:	90800015 	stw	r2,0(r18)
1000ccbc:	003fe706 	br	1000cc5c <__alt_data_end+0xf800cc5c>
1000ccc0:	01000804 	movi	r4,32
1000ccc4:	2089c83a 	sub	r4,r4,r2
1000ccc8:	1908983a 	sll	r4,r3,r4
1000cccc:	d9400117 	ldw	r5,4(sp)
1000ccd0:	1886d83a 	srl	r3,r3,r2
1000ccd4:	2148b03a 	or	r4,r4,r5
1000ccd8:	99000515 	stw	r4,20(r19)
1000ccdc:	d8c00015 	stw	r3,0(sp)
1000cce0:	003fd006 	br	1000cc24 <__alt_data_end+0xf800cc24>

1000cce4 <__ratio>:
1000cce4:	defff904 	addi	sp,sp,-28
1000cce8:	dc400315 	stw	r17,12(sp)
1000ccec:	2823883a 	mov	r17,r5
1000ccf0:	d9400104 	addi	r5,sp,4
1000ccf4:	dfc00615 	stw	ra,24(sp)
1000ccf8:	dcc00515 	stw	r19,20(sp)
1000ccfc:	dc800415 	stw	r18,16(sp)
1000cd00:	2027883a 	mov	r19,r4
1000cd04:	dc000215 	stw	r16,8(sp)
1000cd08:	000ca8c0 	call	1000ca8c <__b2d>
1000cd0c:	8809883a 	mov	r4,r17
1000cd10:	d80b883a 	mov	r5,sp
1000cd14:	1025883a 	mov	r18,r2
1000cd18:	1821883a 	mov	r16,r3
1000cd1c:	000ca8c0 	call	1000ca8c <__b2d>
1000cd20:	8a400417 	ldw	r9,16(r17)
1000cd24:	9a000417 	ldw	r8,16(r19)
1000cd28:	100d883a 	mov	r6,r2
1000cd2c:	d8800017 	ldw	r2,0(sp)
1000cd30:	4251c83a 	sub	r8,r8,r9
1000cd34:	4012917a 	slli	r9,r8,5
1000cd38:	da000117 	ldw	r8,4(sp)
1000cd3c:	4091c83a 	sub	r8,r8,r2
1000cd40:	4251883a 	add	r8,r8,r9
1000cd44:	02000d0e 	bge	zero,r8,1000cd7c <__ratio+0x98>
1000cd48:	4010953a 	slli	r8,r8,20
1000cd4c:	4421883a 	add	r16,r8,r16
1000cd50:	9009883a 	mov	r4,r18
1000cd54:	800b883a 	mov	r5,r16
1000cd58:	180f883a 	mov	r7,r3
1000cd5c:	00049b00 	call	100049b0 <__divdf3>
1000cd60:	dfc00617 	ldw	ra,24(sp)
1000cd64:	dcc00517 	ldw	r19,20(sp)
1000cd68:	dc800417 	ldw	r18,16(sp)
1000cd6c:	dc400317 	ldw	r17,12(sp)
1000cd70:	dc000217 	ldw	r16,8(sp)
1000cd74:	dec00704 	addi	sp,sp,28
1000cd78:	f800283a 	ret
1000cd7c:	4010953a 	slli	r8,r8,20
1000cd80:	1a07c83a 	sub	r3,r3,r8
1000cd84:	003ff206 	br	1000cd50 <__alt_data_end+0xf800cd50>

1000cd88 <_mprec_log10>:
1000cd88:	defffe04 	addi	sp,sp,-8
1000cd8c:	dc000015 	stw	r16,0(sp)
1000cd90:	dfc00115 	stw	ra,4(sp)
1000cd94:	008005c4 	movi	r2,23
1000cd98:	2021883a 	mov	r16,r4
1000cd9c:	11000d0e 	bge	r2,r4,1000cdd4 <_mprec_log10+0x4c>
1000cda0:	0005883a 	mov	r2,zero
1000cda4:	00cffc34 	movhi	r3,16368
1000cda8:	843fffc4 	addi	r16,r16,-1
1000cdac:	1009883a 	mov	r4,r2
1000cdb0:	180b883a 	mov	r5,r3
1000cdb4:	000d883a 	mov	r6,zero
1000cdb8:	01d00934 	movhi	r7,16420
1000cdbc:	00055740 	call	10005574 <__muldf3>
1000cdc0:	803ff91e 	bne	r16,zero,1000cda8 <__alt_data_end+0xf800cda8>
1000cdc4:	dfc00117 	ldw	ra,4(sp)
1000cdc8:	dc000017 	ldw	r16,0(sp)
1000cdcc:	dec00204 	addi	sp,sp,8
1000cdd0:	f800283a 	ret
1000cdd4:	202090fa 	slli	r16,r4,3
1000cdd8:	00840074 	movhi	r2,4097
1000cddc:	10898a04 	addi	r2,r2,9768
1000cde0:	1421883a 	add	r16,r2,r16
1000cde4:	80800017 	ldw	r2,0(r16)
1000cde8:	80c00117 	ldw	r3,4(r16)
1000cdec:	dfc00117 	ldw	ra,4(sp)
1000cdf0:	dc000017 	ldw	r16,0(sp)
1000cdf4:	dec00204 	addi	sp,sp,8
1000cdf8:	f800283a 	ret

1000cdfc <__copybits>:
1000cdfc:	297fffc4 	addi	r5,r5,-1
1000ce00:	280fd17a 	srai	r7,r5,5
1000ce04:	30c00417 	ldw	r3,16(r6)
1000ce08:	30800504 	addi	r2,r6,20
1000ce0c:	39c00044 	addi	r7,r7,1
1000ce10:	18c7883a 	add	r3,r3,r3
1000ce14:	39cf883a 	add	r7,r7,r7
1000ce18:	18c7883a 	add	r3,r3,r3
1000ce1c:	39cf883a 	add	r7,r7,r7
1000ce20:	10c7883a 	add	r3,r2,r3
1000ce24:	21cf883a 	add	r7,r4,r7
1000ce28:	10c00d2e 	bgeu	r2,r3,1000ce60 <__copybits+0x64>
1000ce2c:	200b883a 	mov	r5,r4
1000ce30:	12000017 	ldw	r8,0(r2)
1000ce34:	29400104 	addi	r5,r5,4
1000ce38:	10800104 	addi	r2,r2,4
1000ce3c:	2a3fff15 	stw	r8,-4(r5)
1000ce40:	10fffb36 	bltu	r2,r3,1000ce30 <__alt_data_end+0xf800ce30>
1000ce44:	1985c83a 	sub	r2,r3,r6
1000ce48:	10bffac4 	addi	r2,r2,-21
1000ce4c:	1004d0ba 	srli	r2,r2,2
1000ce50:	10800044 	addi	r2,r2,1
1000ce54:	1085883a 	add	r2,r2,r2
1000ce58:	1085883a 	add	r2,r2,r2
1000ce5c:	2089883a 	add	r4,r4,r2
1000ce60:	21c0032e 	bgeu	r4,r7,1000ce70 <__copybits+0x74>
1000ce64:	20000015 	stw	zero,0(r4)
1000ce68:	21000104 	addi	r4,r4,4
1000ce6c:	21fffd36 	bltu	r4,r7,1000ce64 <__alt_data_end+0xf800ce64>
1000ce70:	f800283a 	ret

1000ce74 <__any_on>:
1000ce74:	20c00417 	ldw	r3,16(r4)
1000ce78:	2805d17a 	srai	r2,r5,5
1000ce7c:	21000504 	addi	r4,r4,20
1000ce80:	18800d0e 	bge	r3,r2,1000ceb8 <__any_on+0x44>
1000ce84:	18c7883a 	add	r3,r3,r3
1000ce88:	18c7883a 	add	r3,r3,r3
1000ce8c:	20c7883a 	add	r3,r4,r3
1000ce90:	20c0192e 	bgeu	r4,r3,1000cef8 <__any_on+0x84>
1000ce94:	18bfff17 	ldw	r2,-4(r3)
1000ce98:	18ffff04 	addi	r3,r3,-4
1000ce9c:	1000041e 	bne	r2,zero,1000ceb0 <__any_on+0x3c>
1000cea0:	20c0142e 	bgeu	r4,r3,1000cef4 <__any_on+0x80>
1000cea4:	18ffff04 	addi	r3,r3,-4
1000cea8:	19400017 	ldw	r5,0(r3)
1000ceac:	283ffc26 	beq	r5,zero,1000cea0 <__alt_data_end+0xf800cea0>
1000ceb0:	00800044 	movi	r2,1
1000ceb4:	f800283a 	ret
1000ceb8:	10c00a0e 	bge	r2,r3,1000cee4 <__any_on+0x70>
1000cebc:	1085883a 	add	r2,r2,r2
1000cec0:	1085883a 	add	r2,r2,r2
1000cec4:	294007cc 	andi	r5,r5,31
1000cec8:	2087883a 	add	r3,r4,r2
1000cecc:	283ff026 	beq	r5,zero,1000ce90 <__alt_data_end+0xf800ce90>
1000ced0:	19800017 	ldw	r6,0(r3)
1000ced4:	3144d83a 	srl	r2,r6,r5
1000ced8:	114a983a 	sll	r5,r2,r5
1000cedc:	29bff41e 	bne	r5,r6,1000ceb0 <__alt_data_end+0xf800ceb0>
1000cee0:	003feb06 	br	1000ce90 <__alt_data_end+0xf800ce90>
1000cee4:	1085883a 	add	r2,r2,r2
1000cee8:	1085883a 	add	r2,r2,r2
1000ceec:	2087883a 	add	r3,r4,r2
1000cef0:	003fe706 	br	1000ce90 <__alt_data_end+0xf800ce90>
1000cef4:	f800283a 	ret
1000cef8:	0005883a 	mov	r2,zero
1000cefc:	f800283a 	ret

1000cf00 <_sbrk_r>:
1000cf00:	defffd04 	addi	sp,sp,-12
1000cf04:	dc000015 	stw	r16,0(sp)
1000cf08:	04040074 	movhi	r16,4097
1000cf0c:	dc400115 	stw	r17,4(sp)
1000cf10:	84175604 	addi	r16,r16,23896
1000cf14:	2023883a 	mov	r17,r4
1000cf18:	2809883a 	mov	r4,r5
1000cf1c:	dfc00215 	stw	ra,8(sp)
1000cf20:	80000015 	stw	zero,0(r16)
1000cf24:	00104080 	call	10010408 <sbrk>
1000cf28:	00ffffc4 	movi	r3,-1
1000cf2c:	10c00526 	beq	r2,r3,1000cf44 <_sbrk_r+0x44>
1000cf30:	dfc00217 	ldw	ra,8(sp)
1000cf34:	dc400117 	ldw	r17,4(sp)
1000cf38:	dc000017 	ldw	r16,0(sp)
1000cf3c:	dec00304 	addi	sp,sp,12
1000cf40:	f800283a 	ret
1000cf44:	80c00017 	ldw	r3,0(r16)
1000cf48:	183ff926 	beq	r3,zero,1000cf30 <__alt_data_end+0xf800cf30>
1000cf4c:	88c00015 	stw	r3,0(r17)
1000cf50:	003ff706 	br	1000cf30 <__alt_data_end+0xf800cf30>

1000cf54 <__sread>:
1000cf54:	defffe04 	addi	sp,sp,-8
1000cf58:	dc000015 	stw	r16,0(sp)
1000cf5c:	2821883a 	mov	r16,r5
1000cf60:	2940038f 	ldh	r5,14(r5)
1000cf64:	dfc00115 	stw	ra,4(sp)
1000cf68:	000f2a80 	call	1000f2a8 <_read_r>
1000cf6c:	10000716 	blt	r2,zero,1000cf8c <__sread+0x38>
1000cf70:	80c01417 	ldw	r3,80(r16)
1000cf74:	1887883a 	add	r3,r3,r2
1000cf78:	80c01415 	stw	r3,80(r16)
1000cf7c:	dfc00117 	ldw	ra,4(sp)
1000cf80:	dc000017 	ldw	r16,0(sp)
1000cf84:	dec00204 	addi	sp,sp,8
1000cf88:	f800283a 	ret
1000cf8c:	80c0030b 	ldhu	r3,12(r16)
1000cf90:	18fbffcc 	andi	r3,r3,61439
1000cf94:	80c0030d 	sth	r3,12(r16)
1000cf98:	dfc00117 	ldw	ra,4(sp)
1000cf9c:	dc000017 	ldw	r16,0(sp)
1000cfa0:	dec00204 	addi	sp,sp,8
1000cfa4:	f800283a 	ret

1000cfa8 <__seofread>:
1000cfa8:	0005883a 	mov	r2,zero
1000cfac:	f800283a 	ret

1000cfb0 <__swrite>:
1000cfb0:	2880030b 	ldhu	r2,12(r5)
1000cfb4:	defffb04 	addi	sp,sp,-20
1000cfb8:	dcc00315 	stw	r19,12(sp)
1000cfbc:	dc800215 	stw	r18,8(sp)
1000cfc0:	dc400115 	stw	r17,4(sp)
1000cfc4:	dc000015 	stw	r16,0(sp)
1000cfc8:	dfc00415 	stw	ra,16(sp)
1000cfcc:	10c0400c 	andi	r3,r2,256
1000cfd0:	2821883a 	mov	r16,r5
1000cfd4:	2027883a 	mov	r19,r4
1000cfd8:	3025883a 	mov	r18,r6
1000cfdc:	3823883a 	mov	r17,r7
1000cfe0:	18000526 	beq	r3,zero,1000cff8 <__swrite+0x48>
1000cfe4:	2940038f 	ldh	r5,14(r5)
1000cfe8:	000d883a 	mov	r6,zero
1000cfec:	01c00084 	movi	r7,2
1000cff0:	000f0f00 	call	1000f0f0 <_lseek_r>
1000cff4:	8080030b 	ldhu	r2,12(r16)
1000cff8:	8140038f 	ldh	r5,14(r16)
1000cffc:	10bbffcc 	andi	r2,r2,61439
1000d000:	9809883a 	mov	r4,r19
1000d004:	900d883a 	mov	r6,r18
1000d008:	880f883a 	mov	r7,r17
1000d00c:	8080030d 	sth	r2,12(r16)
1000d010:	dfc00417 	ldw	ra,16(sp)
1000d014:	dcc00317 	ldw	r19,12(sp)
1000d018:	dc800217 	ldw	r18,8(sp)
1000d01c:	dc400117 	ldw	r17,4(sp)
1000d020:	dc000017 	ldw	r16,0(sp)
1000d024:	dec00504 	addi	sp,sp,20
1000d028:	000e7281 	jmpi	1000e728 <_write_r>

1000d02c <__sseek>:
1000d02c:	defffe04 	addi	sp,sp,-8
1000d030:	dc000015 	stw	r16,0(sp)
1000d034:	2821883a 	mov	r16,r5
1000d038:	2940038f 	ldh	r5,14(r5)
1000d03c:	dfc00115 	stw	ra,4(sp)
1000d040:	000f0f00 	call	1000f0f0 <_lseek_r>
1000d044:	00ffffc4 	movi	r3,-1
1000d048:	10c00826 	beq	r2,r3,1000d06c <__sseek+0x40>
1000d04c:	80c0030b 	ldhu	r3,12(r16)
1000d050:	80801415 	stw	r2,80(r16)
1000d054:	18c40014 	ori	r3,r3,4096
1000d058:	80c0030d 	sth	r3,12(r16)
1000d05c:	dfc00117 	ldw	ra,4(sp)
1000d060:	dc000017 	ldw	r16,0(sp)
1000d064:	dec00204 	addi	sp,sp,8
1000d068:	f800283a 	ret
1000d06c:	80c0030b 	ldhu	r3,12(r16)
1000d070:	18fbffcc 	andi	r3,r3,61439
1000d074:	80c0030d 	sth	r3,12(r16)
1000d078:	dfc00117 	ldw	ra,4(sp)
1000d07c:	dc000017 	ldw	r16,0(sp)
1000d080:	dec00204 	addi	sp,sp,8
1000d084:	f800283a 	ret

1000d088 <__sclose>:
1000d088:	2940038f 	ldh	r5,14(r5)
1000d08c:	000e7841 	jmpi	1000e784 <_close_r>

1000d090 <strcmp>:
1000d090:	2144b03a 	or	r2,r4,r5
1000d094:	108000cc 	andi	r2,r2,3
1000d098:	1000171e 	bne	r2,zero,1000d0f8 <strcmp+0x68>
1000d09c:	20800017 	ldw	r2,0(r4)
1000d0a0:	28c00017 	ldw	r3,0(r5)
1000d0a4:	10c0141e 	bne	r2,r3,1000d0f8 <strcmp+0x68>
1000d0a8:	027fbff4 	movhi	r9,65279
1000d0ac:	4a7fbfc4 	addi	r9,r9,-257
1000d0b0:	0086303a 	nor	r3,zero,r2
1000d0b4:	02202074 	movhi	r8,32897
1000d0b8:	1245883a 	add	r2,r2,r9
1000d0bc:	42202004 	addi	r8,r8,-32640
1000d0c0:	10c4703a 	and	r2,r2,r3
1000d0c4:	1204703a 	and	r2,r2,r8
1000d0c8:	10000226 	beq	r2,zero,1000d0d4 <strcmp+0x44>
1000d0cc:	00001706 	br	1000d12c <strcmp+0x9c>
1000d0d0:	1000161e 	bne	r2,zero,1000d12c <strcmp+0x9c>
1000d0d4:	21000104 	addi	r4,r4,4
1000d0d8:	20c00017 	ldw	r3,0(r4)
1000d0dc:	29400104 	addi	r5,r5,4
1000d0e0:	29800017 	ldw	r6,0(r5)
1000d0e4:	1a4f883a 	add	r7,r3,r9
1000d0e8:	00c4303a 	nor	r2,zero,r3
1000d0ec:	3884703a 	and	r2,r7,r2
1000d0f0:	1204703a 	and	r2,r2,r8
1000d0f4:	19bff626 	beq	r3,r6,1000d0d0 <__alt_data_end+0xf800d0d0>
1000d0f8:	20800007 	ldb	r2,0(r4)
1000d0fc:	1000051e 	bne	r2,zero,1000d114 <strcmp+0x84>
1000d100:	00000606 	br	1000d11c <strcmp+0x8c>
1000d104:	21000044 	addi	r4,r4,1
1000d108:	20800007 	ldb	r2,0(r4)
1000d10c:	29400044 	addi	r5,r5,1
1000d110:	10000226 	beq	r2,zero,1000d11c <strcmp+0x8c>
1000d114:	28c00007 	ldb	r3,0(r5)
1000d118:	10fffa26 	beq	r2,r3,1000d104 <__alt_data_end+0xf800d104>
1000d11c:	20800003 	ldbu	r2,0(r4)
1000d120:	28c00003 	ldbu	r3,0(r5)
1000d124:	10c5c83a 	sub	r2,r2,r3
1000d128:	f800283a 	ret
1000d12c:	0005883a 	mov	r2,zero
1000d130:	f800283a 	ret

1000d134 <strlen>:
1000d134:	208000cc 	andi	r2,r4,3
1000d138:	10002026 	beq	r2,zero,1000d1bc <strlen+0x88>
1000d13c:	20800007 	ldb	r2,0(r4)
1000d140:	10002026 	beq	r2,zero,1000d1c4 <strlen+0x90>
1000d144:	2005883a 	mov	r2,r4
1000d148:	00000206 	br	1000d154 <strlen+0x20>
1000d14c:	10c00007 	ldb	r3,0(r2)
1000d150:	18001826 	beq	r3,zero,1000d1b4 <strlen+0x80>
1000d154:	10800044 	addi	r2,r2,1
1000d158:	10c000cc 	andi	r3,r2,3
1000d15c:	183ffb1e 	bne	r3,zero,1000d14c <__alt_data_end+0xf800d14c>
1000d160:	10c00017 	ldw	r3,0(r2)
1000d164:	01ffbff4 	movhi	r7,65279
1000d168:	39ffbfc4 	addi	r7,r7,-257
1000d16c:	00ca303a 	nor	r5,zero,r3
1000d170:	01a02074 	movhi	r6,32897
1000d174:	19c7883a 	add	r3,r3,r7
1000d178:	31a02004 	addi	r6,r6,-32640
1000d17c:	1946703a 	and	r3,r3,r5
1000d180:	1986703a 	and	r3,r3,r6
1000d184:	1800091e 	bne	r3,zero,1000d1ac <strlen+0x78>
1000d188:	10800104 	addi	r2,r2,4
1000d18c:	10c00017 	ldw	r3,0(r2)
1000d190:	19cb883a 	add	r5,r3,r7
1000d194:	00c6303a 	nor	r3,zero,r3
1000d198:	28c6703a 	and	r3,r5,r3
1000d19c:	1986703a 	and	r3,r3,r6
1000d1a0:	183ff926 	beq	r3,zero,1000d188 <__alt_data_end+0xf800d188>
1000d1a4:	00000106 	br	1000d1ac <strlen+0x78>
1000d1a8:	10800044 	addi	r2,r2,1
1000d1ac:	10c00007 	ldb	r3,0(r2)
1000d1b0:	183ffd1e 	bne	r3,zero,1000d1a8 <__alt_data_end+0xf800d1a8>
1000d1b4:	1105c83a 	sub	r2,r2,r4
1000d1b8:	f800283a 	ret
1000d1bc:	2005883a 	mov	r2,r4
1000d1c0:	003fe706 	br	1000d160 <__alt_data_end+0xf800d160>
1000d1c4:	0005883a 	mov	r2,zero
1000d1c8:	f800283a 	ret

1000d1cc <__sprint_r.part.0>:
1000d1cc:	28801917 	ldw	r2,100(r5)
1000d1d0:	defff604 	addi	sp,sp,-40
1000d1d4:	dd400515 	stw	r21,20(sp)
1000d1d8:	dcc00315 	stw	r19,12(sp)
1000d1dc:	dfc00915 	stw	ra,36(sp)
1000d1e0:	df000815 	stw	fp,32(sp)
1000d1e4:	ddc00715 	stw	r23,28(sp)
1000d1e8:	dd800615 	stw	r22,24(sp)
1000d1ec:	dd000415 	stw	r20,16(sp)
1000d1f0:	dc800215 	stw	r18,8(sp)
1000d1f4:	dc400115 	stw	r17,4(sp)
1000d1f8:	dc000015 	stw	r16,0(sp)
1000d1fc:	1088000c 	andi	r2,r2,8192
1000d200:	2827883a 	mov	r19,r5
1000d204:	302b883a 	mov	r21,r6
1000d208:	10002d26 	beq	r2,zero,1000d2c0 <__sprint_r.part.0+0xf4>
1000d20c:	30800217 	ldw	r2,8(r6)
1000d210:	35800017 	ldw	r22,0(r6)
1000d214:	10002826 	beq	r2,zero,1000d2b8 <__sprint_r.part.0+0xec>
1000d218:	2029883a 	mov	r20,r4
1000d21c:	b5c00104 	addi	r23,r22,4
1000d220:	04bfffc4 	movi	r18,-1
1000d224:	bc400017 	ldw	r17,0(r23)
1000d228:	b4000017 	ldw	r16,0(r22)
1000d22c:	0039883a 	mov	fp,zero
1000d230:	8822d0ba 	srli	r17,r17,2
1000d234:	04400316 	blt	zero,r17,1000d244 <__sprint_r.part.0+0x78>
1000d238:	00001706 	br	1000d298 <__sprint_r.part.0+0xcc>
1000d23c:	84000104 	addi	r16,r16,4
1000d240:	8f001526 	beq	r17,fp,1000d298 <__sprint_r.part.0+0xcc>
1000d244:	81400017 	ldw	r5,0(r16)
1000d248:	a009883a 	mov	r4,r20
1000d24c:	980d883a 	mov	r6,r19
1000d250:	000e9c40 	call	1000e9c4 <_fputwc_r>
1000d254:	e7000044 	addi	fp,fp,1
1000d258:	14bff81e 	bne	r2,r18,1000d23c <__alt_data_end+0xf800d23c>
1000d25c:	9005883a 	mov	r2,r18
1000d260:	a8000215 	stw	zero,8(r21)
1000d264:	a8000115 	stw	zero,4(r21)
1000d268:	dfc00917 	ldw	ra,36(sp)
1000d26c:	df000817 	ldw	fp,32(sp)
1000d270:	ddc00717 	ldw	r23,28(sp)
1000d274:	dd800617 	ldw	r22,24(sp)
1000d278:	dd400517 	ldw	r21,20(sp)
1000d27c:	dd000417 	ldw	r20,16(sp)
1000d280:	dcc00317 	ldw	r19,12(sp)
1000d284:	dc800217 	ldw	r18,8(sp)
1000d288:	dc400117 	ldw	r17,4(sp)
1000d28c:	dc000017 	ldw	r16,0(sp)
1000d290:	dec00a04 	addi	sp,sp,40
1000d294:	f800283a 	ret
1000d298:	a8c00217 	ldw	r3,8(r21)
1000d29c:	8c63883a 	add	r17,r17,r17
1000d2a0:	8c63883a 	add	r17,r17,r17
1000d2a4:	1c45c83a 	sub	r2,r3,r17
1000d2a8:	a8800215 	stw	r2,8(r21)
1000d2ac:	b5800204 	addi	r22,r22,8
1000d2b0:	bdc00204 	addi	r23,r23,8
1000d2b4:	103fdb1e 	bne	r2,zero,1000d224 <__alt_data_end+0xf800d224>
1000d2b8:	0005883a 	mov	r2,zero
1000d2bc:	003fe806 	br	1000d260 <__alt_data_end+0xf800d260>
1000d2c0:	000ebf80 	call	1000ebf8 <__sfvwrite_r>
1000d2c4:	003fe606 	br	1000d260 <__alt_data_end+0xf800d260>

1000d2c8 <__sprint_r>:
1000d2c8:	30c00217 	ldw	r3,8(r6)
1000d2cc:	18000126 	beq	r3,zero,1000d2d4 <__sprint_r+0xc>
1000d2d0:	000d1cc1 	jmpi	1000d1cc <__sprint_r.part.0>
1000d2d4:	30000115 	stw	zero,4(r6)
1000d2d8:	0005883a 	mov	r2,zero
1000d2dc:	f800283a 	ret

1000d2e0 <___vfiprintf_internal_r>:
1000d2e0:	defeca04 	addi	sp,sp,-1240
1000d2e4:	dcc12f15 	stw	r19,1212(sp)
1000d2e8:	dfc13515 	stw	ra,1236(sp)
1000d2ec:	df013415 	stw	fp,1232(sp)
1000d2f0:	ddc13315 	stw	r23,1228(sp)
1000d2f4:	dd813215 	stw	r22,1224(sp)
1000d2f8:	dd413115 	stw	r21,1220(sp)
1000d2fc:	dd013015 	stw	r20,1216(sp)
1000d300:	dc812e15 	stw	r18,1208(sp)
1000d304:	dc412d15 	stw	r17,1204(sp)
1000d308:	dc012c15 	stw	r16,1200(sp)
1000d30c:	d9012115 	stw	r4,1156(sp)
1000d310:	d9412015 	stw	r5,1152(sp)
1000d314:	d9c12315 	stw	r7,1164(sp)
1000d318:	3027883a 	mov	r19,r6
1000d31c:	20000226 	beq	r4,zero,1000d328 <___vfiprintf_internal_r+0x48>
1000d320:	20800e17 	ldw	r2,56(r4)
1000d324:	1000f726 	beq	r2,zero,1000d704 <___vfiprintf_internal_r+0x424>
1000d328:	d8812017 	ldw	r2,1152(sp)
1000d32c:	10c0030b 	ldhu	r3,12(r2)
1000d330:	1908000c 	andi	r4,r3,8192
1000d334:	1805883a 	mov	r2,r3
1000d338:	2000081e 	bne	r4,zero,1000d35c <___vfiprintf_internal_r+0x7c>
1000d33c:	d9412017 	ldw	r5,1152(sp)
1000d340:	18880014 	ori	r2,r3,8192
1000d344:	00f7ffc4 	movi	r3,-8193
1000d348:	29001917 	ldw	r4,100(r5)
1000d34c:	2880030d 	sth	r2,12(r5)
1000d350:	20c8703a 	and	r4,r4,r3
1000d354:	29001915 	stw	r4,100(r5)
1000d358:	1007883a 	mov	r3,r2
1000d35c:	1100020c 	andi	r4,r2,8
1000d360:	2000a726 	beq	r4,zero,1000d600 <___vfiprintf_internal_r+0x320>
1000d364:	d9412017 	ldw	r5,1152(sp)
1000d368:	29000417 	ldw	r4,16(r5)
1000d36c:	2000a426 	beq	r4,zero,1000d600 <___vfiprintf_internal_r+0x320>
1000d370:	1080068c 	andi	r2,r2,26
1000d374:	01000284 	movi	r4,10
1000d378:	1100ab26 	beq	r2,r4,1000d628 <___vfiprintf_internal_r+0x348>
1000d37c:	d9010a04 	addi	r4,sp,1064
1000d380:	d94109c4 	addi	r5,sp,1063
1000d384:	07040074 	movhi	fp,4097
1000d388:	04440074 	movhi	r17,4097
1000d38c:	2145c83a 	sub	r2,r4,r5
1000d390:	e709c004 	addi	fp,fp,9984
1000d394:	8c49bc04 	addi	r17,r17,9968
1000d398:	d9011e15 	stw	r4,1144(sp)
1000d39c:	d9411f15 	stw	r5,1148(sp)
1000d3a0:	dec11a15 	stw	sp,1128(sp)
1000d3a4:	d8011c15 	stw	zero,1136(sp)
1000d3a8:	d8011b15 	stw	zero,1132(sp)
1000d3ac:	d8012715 	stw	zero,1180(sp)
1000d3b0:	d8012515 	stw	zero,1172(sp)
1000d3b4:	d811883a 	mov	r8,sp
1000d3b8:	d8812815 	stw	r2,1184(sp)
1000d3bc:	982f883a 	mov	r23,r19
1000d3c0:	b8800007 	ldb	r2,0(r23)
1000d3c4:	1003b026 	beq	r2,zero,1000e288 <___vfiprintf_internal_r+0xfa8>
1000d3c8:	01000944 	movi	r4,37
1000d3cc:	1103ae26 	beq	r2,r4,1000e288 <___vfiprintf_internal_r+0xfa8>
1000d3d0:	b805883a 	mov	r2,r23
1000d3d4:	00000106 	br	1000d3dc <___vfiprintf_internal_r+0xfc>
1000d3d8:	19000326 	beq	r3,r4,1000d3e8 <___vfiprintf_internal_r+0x108>
1000d3dc:	10800044 	addi	r2,r2,1
1000d3e0:	10c00007 	ldb	r3,0(r2)
1000d3e4:	183ffc1e 	bne	r3,zero,1000d3d8 <__alt_data_end+0xf800d3d8>
1000d3e8:	15e1c83a 	sub	r16,r2,r23
1000d3ec:	1029883a 	mov	r20,r2
1000d3f0:	80001026 	beq	r16,zero,1000d434 <___vfiprintf_internal_r+0x154>
1000d3f4:	d8c11c17 	ldw	r3,1136(sp)
1000d3f8:	d8811b17 	ldw	r2,1132(sp)
1000d3fc:	45c00015 	stw	r23,0(r8)
1000d400:	80c7883a 	add	r3,r16,r3
1000d404:	10800044 	addi	r2,r2,1
1000d408:	44000115 	stw	r16,4(r8)
1000d40c:	d8c11c15 	stw	r3,1136(sp)
1000d410:	d8811b15 	stw	r2,1132(sp)
1000d414:	010001c4 	movi	r4,7
1000d418:	2080740e 	bge	r4,r2,1000d5ec <___vfiprintf_internal_r+0x30c>
1000d41c:	1803a71e 	bne	r3,zero,1000e2bc <___vfiprintf_internal_r+0xfdc>
1000d420:	d8c12517 	ldw	r3,1172(sp)
1000d424:	d8011b15 	stw	zero,1132(sp)
1000d428:	d811883a 	mov	r8,sp
1000d42c:	1c07883a 	add	r3,r3,r16
1000d430:	d8c12515 	stw	r3,1172(sp)
1000d434:	a0800007 	ldb	r2,0(r20)
1000d438:	1002bf26 	beq	r2,zero,1000df38 <___vfiprintf_internal_r+0xc58>
1000d43c:	a5c00044 	addi	r23,r20,1
1000d440:	a1800047 	ldb	r6,1(r20)
1000d444:	d8011d85 	stb	zero,1142(sp)
1000d448:	d8012205 	stb	zero,1160(sp)
1000d44c:	043fffc4 	movi	r16,-1
1000d450:	d8012415 	stw	zero,1168(sp)
1000d454:	0025883a 	mov	r18,zero
1000d458:	05001604 	movi	r20,88
1000d45c:	05400244 	movi	r21,9
1000d460:	4027883a 	mov	r19,r8
1000d464:	bdc00044 	addi	r23,r23,1
1000d468:	30bff804 	addi	r2,r6,-32
1000d46c:	a0825636 	bltu	r20,r2,1000ddc8 <___vfiprintf_internal_r+0xae8>
1000d470:	100490ba 	slli	r2,r2,2
1000d474:	01040074 	movhi	r4,4097
1000d478:	21352204 	addi	r4,r4,-11128
1000d47c:	1105883a 	add	r2,r2,r4
1000d480:	10800017 	ldw	r2,0(r2)
1000d484:	1000683a 	jmp	r2
1000d488:	1000dd58 	cmpnei	zero,r2,885
1000d48c:	1000ddc8 	cmpgei	zero,r2,887
1000d490:	1000ddc8 	cmpgei	zero,r2,887
1000d494:	1000ddbc 	xorhi	zero,r2,886
1000d498:	1000ddc8 	cmpgei	zero,r2,887
1000d49c:	1000ddc8 	cmpgei	zero,r2,887
1000d4a0:	1000ddc8 	cmpgei	zero,r2,887
1000d4a4:	1000ddc8 	cmpgei	zero,r2,887
1000d4a8:	1000ddc8 	cmpgei	zero,r2,887
1000d4ac:	1000ddc8 	cmpgei	zero,r2,887
1000d4b0:	1000db48 	cmpgei	zero,r2,877
1000d4b4:	1000dd70 	cmpltui	zero,r2,885
1000d4b8:	1000ddc8 	cmpgei	zero,r2,887
1000d4bc:	1000d71c 	xori	zero,r2,860
1000d4c0:	1000db6c 	andhi	zero,r2,877
1000d4c4:	1000ddc8 	cmpgei	zero,r2,887
1000d4c8:	1000d728 	cmpgeui	zero,r2,860
1000d4cc:	1000d734 	orhi	zero,r2,860
1000d4d0:	1000d734 	orhi	zero,r2,860
1000d4d4:	1000d734 	orhi	zero,r2,860
1000d4d8:	1000d734 	orhi	zero,r2,860
1000d4dc:	1000d734 	orhi	zero,r2,860
1000d4e0:	1000d734 	orhi	zero,r2,860
1000d4e4:	1000d734 	orhi	zero,r2,860
1000d4e8:	1000d734 	orhi	zero,r2,860
1000d4ec:	1000d734 	orhi	zero,r2,860
1000d4f0:	1000ddc8 	cmpgei	zero,r2,887
1000d4f4:	1000ddc8 	cmpgei	zero,r2,887
1000d4f8:	1000ddc8 	cmpgei	zero,r2,887
1000d4fc:	1000ddc8 	cmpgei	zero,r2,887
1000d500:	1000ddc8 	cmpgei	zero,r2,887
1000d504:	1000ddc8 	cmpgei	zero,r2,887
1000d508:	1000ddc8 	cmpgei	zero,r2,887
1000d50c:	1000ddc8 	cmpgei	zero,r2,887
1000d510:	1000ddc8 	cmpgei	zero,r2,887
1000d514:	1000ddc8 	cmpgei	zero,r2,887
1000d518:	1000d774 	orhi	zero,r2,861
1000d51c:	1000ddc8 	cmpgei	zero,r2,887
1000d520:	1000ddc8 	cmpgei	zero,r2,887
1000d524:	1000ddc8 	cmpgei	zero,r2,887
1000d528:	1000ddc8 	cmpgei	zero,r2,887
1000d52c:	1000ddc8 	cmpgei	zero,r2,887
1000d530:	1000ddc8 	cmpgei	zero,r2,887
1000d534:	1000ddc8 	cmpgei	zero,r2,887
1000d538:	1000ddc8 	cmpgei	zero,r2,887
1000d53c:	1000ddc8 	cmpgei	zero,r2,887
1000d540:	1000ddc8 	cmpgei	zero,r2,887
1000d544:	1000da64 	muli	zero,r2,873
1000d548:	1000ddc8 	cmpgei	zero,r2,887
1000d54c:	1000ddc8 	cmpgei	zero,r2,887
1000d550:	1000ddc8 	cmpgei	zero,r2,887
1000d554:	1000ddc8 	cmpgei	zero,r2,887
1000d558:	1000ddc8 	cmpgei	zero,r2,887
1000d55c:	1000daa4 	muli	zero,r2,874
1000d560:	1000ddc8 	cmpgei	zero,r2,887
1000d564:	1000ddc8 	cmpgei	zero,r2,887
1000d568:	1000dae8 	cmpgeui	zero,r2,875
1000d56c:	1000ddc8 	cmpgei	zero,r2,887
1000d570:	1000ddc8 	cmpgei	zero,r2,887
1000d574:	1000ddc8 	cmpgei	zero,r2,887
1000d578:	1000ddc8 	cmpgei	zero,r2,887
1000d57c:	1000ddc8 	cmpgei	zero,r2,887
1000d580:	1000ddc8 	cmpgei	zero,r2,887
1000d584:	1000ddc8 	cmpgei	zero,r2,887
1000d588:	1000ddc8 	cmpgei	zero,r2,887
1000d58c:	1000ddc8 	cmpgei	zero,r2,887
1000d590:	1000ddc8 	cmpgei	zero,r2,887
1000d594:	1000da30 	cmpltui	zero,r2,872
1000d598:	1000dd80 	call	11000dd8 <_gp+0xfe4be8>
1000d59c:	1000ddc8 	cmpgei	zero,r2,887
1000d5a0:	1000ddc8 	cmpgei	zero,r2,887
1000d5a4:	1000ddc8 	cmpgei	zero,r2,887
1000d5a8:	1000dbbc 	xorhi	zero,r2,878
1000d5ac:	1000dd80 	call	11000dd8 <_gp+0xfe4be8>
1000d5b0:	1000ddc8 	cmpgei	zero,r2,887
1000d5b4:	1000ddc8 	cmpgei	zero,r2,887
1000d5b8:	1000dad4 	ori	zero,r2,875
1000d5bc:	1000ddc8 	cmpgei	zero,r2,887
1000d5c0:	1000dd20 	cmpeqi	zero,r2,884
1000d5c4:	1000dca8 	cmpgeui	zero,r2,882
1000d5c8:	1000dcdc 	xori	zero,r2,883
1000d5cc:	1000dbc8 	cmpgei	zero,r2,879
1000d5d0:	1000ddc8 	cmpgei	zero,r2,887
1000d5d4:	1000dbd4 	ori	zero,r2,879
1000d5d8:	1000ddc8 	cmpgei	zero,r2,887
1000d5dc:	1000dc30 	cmpltui	zero,r2,880
1000d5e0:	1000ddc8 	cmpgei	zero,r2,887
1000d5e4:	1000ddc8 	cmpgei	zero,r2,887
1000d5e8:	1000dc64 	muli	zero,r2,881
1000d5ec:	42000204 	addi	r8,r8,8
1000d5f0:	d8c12517 	ldw	r3,1172(sp)
1000d5f4:	1c07883a 	add	r3,r3,r16
1000d5f8:	d8c12515 	stw	r3,1172(sp)
1000d5fc:	003f8d06 	br	1000d434 <__alt_data_end+0xf800d434>
1000d600:	d9012117 	ldw	r4,1156(sp)
1000d604:	d9412017 	ldw	r5,1152(sp)
1000d608:	0008b240 	call	10008b24 <__swsetup_r>
1000d60c:	1000301e 	bne	r2,zero,1000d6d0 <___vfiprintf_internal_r+0x3f0>
1000d610:	d8812017 	ldw	r2,1152(sp)
1000d614:	01000284 	movi	r4,10
1000d618:	10c0030b 	ldhu	r3,12(r2)
1000d61c:	1805883a 	mov	r2,r3
1000d620:	1080068c 	andi	r2,r2,26
1000d624:	113f551e 	bne	r2,r4,1000d37c <__alt_data_end+0xf800d37c>
1000d628:	d9012017 	ldw	r4,1152(sp)
1000d62c:	2080038b 	ldhu	r2,14(r4)
1000d630:	113fffcc 	andi	r4,r2,65535
1000d634:	2120001c 	xori	r4,r4,32768
1000d638:	21200004 	addi	r4,r4,-32768
1000d63c:	203f4f16 	blt	r4,zero,1000d37c <__alt_data_end+0xf800d37c>
1000d640:	d9412017 	ldw	r5,1152(sp)
1000d644:	d9012117 	ldw	r4,1156(sp)
1000d648:	d9c12317 	ldw	r7,1164(sp)
1000d64c:	2b001917 	ldw	r12,100(r5)
1000d650:	2ac00717 	ldw	r11,28(r5)
1000d654:	2a800917 	ldw	r10,36(r5)
1000d658:	02010004 	movi	r8,1024
1000d65c:	18ffff4c 	andi	r3,r3,65533
1000d660:	da0b883a 	add	r5,sp,r8
1000d664:	980d883a 	mov	r6,r19
1000d668:	d8c1030d 	sth	r3,1036(sp)
1000d66c:	db011915 	stw	r12,1124(sp)
1000d670:	d881038d 	sth	r2,1038(sp)
1000d674:	dac10715 	stw	r11,1052(sp)
1000d678:	da810915 	stw	r10,1060(sp)
1000d67c:	dec10015 	stw	sp,1024(sp)
1000d680:	dec10415 	stw	sp,1040(sp)
1000d684:	da010215 	stw	r8,1032(sp)
1000d688:	da010515 	stw	r8,1044(sp)
1000d68c:	d8010615 	stw	zero,1048(sp)
1000d690:	000d2e00 	call	1000d2e0 <___vfiprintf_internal_r>
1000d694:	1021883a 	mov	r16,r2
1000d698:	10000416 	blt	r2,zero,1000d6ac <___vfiprintf_internal_r+0x3cc>
1000d69c:	d9012117 	ldw	r4,1156(sp)
1000d6a0:	d9410004 	addi	r5,sp,1024
1000d6a4:	000a5a40 	call	1000a5a4 <_fflush_r>
1000d6a8:	10040f1e 	bne	r2,zero,1000e6e8 <___vfiprintf_internal_r+0x1408>
1000d6ac:	d881030b 	ldhu	r2,1036(sp)
1000d6b0:	1080100c 	andi	r2,r2,64
1000d6b4:	10000426 	beq	r2,zero,1000d6c8 <___vfiprintf_internal_r+0x3e8>
1000d6b8:	d8c12017 	ldw	r3,1152(sp)
1000d6bc:	1880030b 	ldhu	r2,12(r3)
1000d6c0:	10801014 	ori	r2,r2,64
1000d6c4:	1880030d 	sth	r2,12(r3)
1000d6c8:	8005883a 	mov	r2,r16
1000d6cc:	00000106 	br	1000d6d4 <___vfiprintf_internal_r+0x3f4>
1000d6d0:	00bfffc4 	movi	r2,-1
1000d6d4:	dfc13517 	ldw	ra,1236(sp)
1000d6d8:	df013417 	ldw	fp,1232(sp)
1000d6dc:	ddc13317 	ldw	r23,1228(sp)
1000d6e0:	dd813217 	ldw	r22,1224(sp)
1000d6e4:	dd413117 	ldw	r21,1220(sp)
1000d6e8:	dd013017 	ldw	r20,1216(sp)
1000d6ec:	dcc12f17 	ldw	r19,1212(sp)
1000d6f0:	dc812e17 	ldw	r18,1208(sp)
1000d6f4:	dc412d17 	ldw	r17,1204(sp)
1000d6f8:	dc012c17 	ldw	r16,1200(sp)
1000d6fc:	dec13604 	addi	sp,sp,1240
1000d700:	f800283a 	ret
1000d704:	000ab600 	call	1000ab60 <__sinit>
1000d708:	003f0706 	br	1000d328 <__alt_data_end+0xf800d328>
1000d70c:	d8c12417 	ldw	r3,1168(sp)
1000d710:	d8812315 	stw	r2,1164(sp)
1000d714:	00c7c83a 	sub	r3,zero,r3
1000d718:	d8c12415 	stw	r3,1168(sp)
1000d71c:	94800114 	ori	r18,r18,4
1000d720:	b9800007 	ldb	r6,0(r23)
1000d724:	003f4f06 	br	1000d464 <__alt_data_end+0xf800d464>
1000d728:	94802014 	ori	r18,r18,128
1000d72c:	b9800007 	ldb	r6,0(r23)
1000d730:	003f4c06 	br	1000d464 <__alt_data_end+0xf800d464>
1000d734:	dc012615 	stw	r16,1176(sp)
1000d738:	d8012415 	stw	zero,1168(sp)
1000d73c:	35bff404 	addi	r22,r6,-48
1000d740:	0009883a 	mov	r4,zero
1000d744:	b821883a 	mov	r16,r23
1000d748:	01400284 	movi	r5,10
1000d74c:	00040ec0 	call	100040ec <__mulsi3>
1000d750:	81800007 	ldb	r6,0(r16)
1000d754:	1589883a 	add	r4,r2,r22
1000d758:	bdc00044 	addi	r23,r23,1
1000d75c:	35bff404 	addi	r22,r6,-48
1000d760:	b821883a 	mov	r16,r23
1000d764:	adbff82e 	bgeu	r21,r22,1000d748 <__alt_data_end+0xf800d748>
1000d768:	d9012415 	stw	r4,1168(sp)
1000d76c:	dc012617 	ldw	r16,1176(sp)
1000d770:	003f3d06 	br	1000d468 <__alt_data_end+0xf800d468>
1000d774:	d8c12203 	ldbu	r3,1160(sp)
1000d778:	94800414 	ori	r18,r18,16
1000d77c:	9080080c 	andi	r2,r18,32
1000d780:	d8c11d85 	stb	r3,1142(sp)
1000d784:	9811883a 	mov	r8,r19
1000d788:	d8c12317 	ldw	r3,1164(sp)
1000d78c:	10018226 	beq	r2,zero,1000dd98 <___vfiprintf_internal_r+0xab8>
1000d790:	d9012317 	ldw	r4,1164(sp)
1000d794:	18800117 	ldw	r2,4(r3)
1000d798:	1cc00017 	ldw	r19,0(r3)
1000d79c:	21000204 	addi	r4,r4,8
1000d7a0:	d9012315 	stw	r4,1164(sp)
1000d7a4:	102b883a 	mov	r21,r2
1000d7a8:	10030016 	blt	r2,zero,1000e3ac <___vfiprintf_internal_r+0x10cc>
1000d7ac:	dd811d83 	ldbu	r22,1142(sp)
1000d7b0:	8029883a 	mov	r20,r16
1000d7b4:	00800044 	movi	r2,1
1000d7b8:	9d46b03a 	or	r3,r19,r21
1000d7bc:	80000216 	blt	r16,zero,1000d7c8 <___vfiprintf_internal_r+0x4e8>
1000d7c0:	013fdfc4 	movi	r4,-129
1000d7c4:	9124703a 	and	r18,r18,r4
1000d7c8:	1801b41e 	bne	r3,zero,1000de9c <___vfiprintf_internal_r+0xbbc>
1000d7cc:	80028126 	beq	r16,zero,1000e1d4 <___vfiprintf_internal_r+0xef4>
1000d7d0:	10803fcc 	andi	r2,r2,255
1000d7d4:	00c00044 	movi	r3,1
1000d7d8:	10c1d126 	beq	r2,r3,1000df20 <___vfiprintf_internal_r+0xc40>
1000d7dc:	00c00084 	movi	r3,2
1000d7e0:	10c28626 	beq	r2,r3,1000e1fc <___vfiprintf_internal_r+0xf1c>
1000d7e4:	d8c10a04 	addi	r3,sp,1064
1000d7e8:	9808d0fa 	srli	r4,r19,3
1000d7ec:	a80a977a 	slli	r5,r21,29
1000d7f0:	a82ad0fa 	srli	r21,r21,3
1000d7f4:	9cc001cc 	andi	r19,r19,7
1000d7f8:	98800c04 	addi	r2,r19,48
1000d7fc:	18ffffc4 	addi	r3,r3,-1
1000d800:	2926b03a 	or	r19,r5,r4
1000d804:	18800005 	stb	r2,0(r3)
1000d808:	9d48b03a 	or	r4,r19,r21
1000d80c:	203ff61e 	bne	r4,zero,1000d7e8 <__alt_data_end+0xf800d7e8>
1000d810:	9100004c 	andi	r4,r18,1
1000d814:	d8c12215 	stw	r3,1160(sp)
1000d818:	2002b31e 	bne	r4,zero,1000e2e8 <___vfiprintf_internal_r+0x1008>
1000d81c:	d9411e17 	ldw	r5,1144(sp)
1000d820:	28e9c83a 	sub	r20,r5,r3
1000d824:	a02b883a 	mov	r21,r20
1000d828:	a400010e 	bge	r20,r16,1000d830 <___vfiprintf_internal_r+0x550>
1000d82c:	802b883a 	mov	r21,r16
1000d830:	b5803fcc 	andi	r22,r22,255
1000d834:	b580201c 	xori	r22,r22,128
1000d838:	b5bfe004 	addi	r22,r22,-128
1000d83c:	b0000126 	beq	r22,zero,1000d844 <___vfiprintf_internal_r+0x564>
1000d840:	ad400044 	addi	r21,r21,1
1000d844:	9280008c 	andi	r10,r18,2
1000d848:	50000126 	beq	r10,zero,1000d850 <___vfiprintf_internal_r+0x570>
1000d84c:	ad400084 	addi	r21,r21,2
1000d850:	9580210c 	andi	r22,r18,132
1000d854:	b001751e 	bne	r22,zero,1000de2c <___vfiprintf_internal_r+0xb4c>
1000d858:	d9012417 	ldw	r4,1168(sp)
1000d85c:	2567c83a 	sub	r19,r4,r21
1000d860:	04c1720e 	bge	zero,r19,1000de2c <___vfiprintf_internal_r+0xb4c>
1000d864:	01c00404 	movi	r7,16
1000d868:	d8c11c17 	ldw	r3,1136(sp)
1000d86c:	3cc36b0e 	bge	r7,r19,1000e61c <___vfiprintf_internal_r+0x133c>
1000d870:	00840074 	movhi	r2,4097
1000d874:	1089c004 	addi	r2,r2,9984
1000d878:	dc012915 	stw	r16,1188(sp)
1000d87c:	d9011b17 	ldw	r4,1132(sp)
1000d880:	9821883a 	mov	r16,r19
1000d884:	d8812615 	stw	r2,1176(sp)
1000d888:	030001c4 	movi	r12,7
1000d88c:	5027883a 	mov	r19,r10
1000d890:	00000506 	br	1000d8a8 <___vfiprintf_internal_r+0x5c8>
1000d894:	21400084 	addi	r5,r4,2
1000d898:	42000204 	addi	r8,r8,8
1000d89c:	1009883a 	mov	r4,r2
1000d8a0:	843ffc04 	addi	r16,r16,-16
1000d8a4:	3c000d0e 	bge	r7,r16,1000d8dc <___vfiprintf_internal_r+0x5fc>
1000d8a8:	18c00404 	addi	r3,r3,16
1000d8ac:	20800044 	addi	r2,r4,1
1000d8b0:	47000015 	stw	fp,0(r8)
1000d8b4:	41c00115 	stw	r7,4(r8)
1000d8b8:	d8c11c15 	stw	r3,1136(sp)
1000d8bc:	d8811b15 	stw	r2,1132(sp)
1000d8c0:	60bff40e 	bge	r12,r2,1000d894 <__alt_data_end+0xf800d894>
1000d8c4:	18014b1e 	bne	r3,zero,1000ddf4 <___vfiprintf_internal_r+0xb14>
1000d8c8:	843ffc04 	addi	r16,r16,-16
1000d8cc:	0009883a 	mov	r4,zero
1000d8d0:	01400044 	movi	r5,1
1000d8d4:	d811883a 	mov	r8,sp
1000d8d8:	3c3ff316 	blt	r7,r16,1000d8a8 <__alt_data_end+0xf800d8a8>
1000d8dc:	9815883a 	mov	r10,r19
1000d8e0:	8027883a 	mov	r19,r16
1000d8e4:	dc012917 	ldw	r16,1188(sp)
1000d8e8:	d9012617 	ldw	r4,1176(sp)
1000d8ec:	98c7883a 	add	r3,r19,r3
1000d8f0:	44c00115 	stw	r19,4(r8)
1000d8f4:	41000015 	stw	r4,0(r8)
1000d8f8:	d8c11c15 	stw	r3,1136(sp)
1000d8fc:	d9411b15 	stw	r5,1132(sp)
1000d900:	008001c4 	movi	r2,7
1000d904:	11425116 	blt	r2,r5,1000e24c <___vfiprintf_internal_r+0xf6c>
1000d908:	d9011d87 	ldb	r4,1142(sp)
1000d90c:	42000204 	addi	r8,r8,8
1000d910:	28800044 	addi	r2,r5,1
1000d914:	20014a1e 	bne	r4,zero,1000de40 <___vfiprintf_internal_r+0xb60>
1000d918:	50000c26 	beq	r10,zero,1000d94c <___vfiprintf_internal_r+0x66c>
1000d91c:	d9011d04 	addi	r4,sp,1140
1000d920:	18c00084 	addi	r3,r3,2
1000d924:	41000015 	stw	r4,0(r8)
1000d928:	01000084 	movi	r4,2
1000d92c:	41000115 	stw	r4,4(r8)
1000d930:	d8c11c15 	stw	r3,1136(sp)
1000d934:	d8811b15 	stw	r2,1132(sp)
1000d938:	010001c4 	movi	r4,7
1000d93c:	20822016 	blt	r4,r2,1000e1c0 <___vfiprintf_internal_r+0xee0>
1000d940:	100b883a 	mov	r5,r2
1000d944:	42000204 	addi	r8,r8,8
1000d948:	10800044 	addi	r2,r2,1
1000d94c:	01002004 	movi	r4,128
1000d950:	b101de26 	beq	r22,r4,1000e0cc <___vfiprintf_internal_r+0xdec>
1000d954:	8521c83a 	sub	r16,r16,r20
1000d958:	0400230e 	bge	zero,r16,1000d9e8 <___vfiprintf_internal_r+0x708>
1000d95c:	04c00404 	movi	r19,16
1000d960:	9c030d0e 	bge	r19,r16,1000e598 <___vfiprintf_internal_r+0x12b8>
1000d964:	00840074 	movhi	r2,4097
1000d968:	1089bc04 	addi	r2,r2,9968
1000d96c:	d8812615 	stw	r2,1176(sp)
1000d970:	058001c4 	movi	r22,7
1000d974:	00000506 	br	1000d98c <___vfiprintf_internal_r+0x6ac>
1000d978:	28800084 	addi	r2,r5,2
1000d97c:	42000204 	addi	r8,r8,8
1000d980:	200b883a 	mov	r5,r4
1000d984:	843ffc04 	addi	r16,r16,-16
1000d988:	9c000d0e 	bge	r19,r16,1000d9c0 <___vfiprintf_internal_r+0x6e0>
1000d98c:	18c00404 	addi	r3,r3,16
1000d990:	29000044 	addi	r4,r5,1
1000d994:	44400015 	stw	r17,0(r8)
1000d998:	44c00115 	stw	r19,4(r8)
1000d99c:	d8c11c15 	stw	r3,1136(sp)
1000d9a0:	d9011b15 	stw	r4,1132(sp)
1000d9a4:	b13ff40e 	bge	r22,r4,1000d978 <__alt_data_end+0xf800d978>
1000d9a8:	1801321e 	bne	r3,zero,1000de74 <___vfiprintf_internal_r+0xb94>
1000d9ac:	843ffc04 	addi	r16,r16,-16
1000d9b0:	000b883a 	mov	r5,zero
1000d9b4:	00800044 	movi	r2,1
1000d9b8:	d811883a 	mov	r8,sp
1000d9bc:	9c3ff316 	blt	r19,r16,1000d98c <__alt_data_end+0xf800d98c>
1000d9c0:	d9012617 	ldw	r4,1176(sp)
1000d9c4:	1c07883a 	add	r3,r3,r16
1000d9c8:	44000115 	stw	r16,4(r8)
1000d9cc:	41000015 	stw	r4,0(r8)
1000d9d0:	d8c11c15 	stw	r3,1136(sp)
1000d9d4:	d8811b15 	stw	r2,1132(sp)
1000d9d8:	010001c4 	movi	r4,7
1000d9dc:	20816216 	blt	r4,r2,1000df68 <___vfiprintf_internal_r+0xc88>
1000d9e0:	42000204 	addi	r8,r8,8
1000d9e4:	10800044 	addi	r2,r2,1
1000d9e8:	d9012217 	ldw	r4,1160(sp)
1000d9ec:	1d07883a 	add	r3,r3,r20
1000d9f0:	45000115 	stw	r20,4(r8)
1000d9f4:	41000015 	stw	r4,0(r8)
1000d9f8:	d8c11c15 	stw	r3,1136(sp)
1000d9fc:	d8811b15 	stw	r2,1132(sp)
1000da00:	010001c4 	movi	r4,7
1000da04:	2081610e 	bge	r4,r2,1000df8c <___vfiprintf_internal_r+0xcac>
1000da08:	1802211e 	bne	r3,zero,1000e290 <___vfiprintf_internal_r+0xfb0>
1000da0c:	d8011b15 	stw	zero,1132(sp)
1000da10:	9480010c 	andi	r18,r18,4
1000da14:	9002171e 	bne	r18,zero,1000e274 <___vfiprintf_internal_r+0xf94>
1000da18:	d9412417 	ldw	r5,1168(sp)
1000da1c:	a9433716 	blt	r21,r5,1000e6fc <___vfiprintf_internal_r+0x141c>
1000da20:	d8812517 	ldw	r2,1172(sp)
1000da24:	1545883a 	add	r2,r2,r21
1000da28:	d8812515 	stw	r2,1172(sp)
1000da2c:	00019a06 	br	1000e098 <___vfiprintf_internal_r+0xdb8>
1000da30:	d8c12317 	ldw	r3,1164(sp)
1000da34:	05400044 	movi	r21,1
1000da38:	9811883a 	mov	r8,r19
1000da3c:	18800017 	ldw	r2,0(r3)
1000da40:	18c00104 	addi	r3,r3,4
1000da44:	d8c12315 	stw	r3,1164(sp)
1000da48:	d8c10004 	addi	r3,sp,1024
1000da4c:	d8011d85 	stb	zero,1142(sp)
1000da50:	d8810005 	stb	r2,1024(sp)
1000da54:	a829883a 	mov	r20,r21
1000da58:	d8c12215 	stw	r3,1160(sp)
1000da5c:	0021883a 	mov	r16,zero
1000da60:	003f7806 	br	1000d844 <__alt_data_end+0xf800d844>
1000da64:	94800414 	ori	r18,r18,16
1000da68:	9080080c 	andi	r2,r18,32
1000da6c:	9811883a 	mov	r8,r19
1000da70:	10009026 	beq	r2,zero,1000dcb4 <___vfiprintf_internal_r+0x9d4>
1000da74:	d8812317 	ldw	r2,1164(sp)
1000da78:	d8c12317 	ldw	r3,1164(sp)
1000da7c:	14c00017 	ldw	r19,0(r2)
1000da80:	15400117 	ldw	r21,4(r2)
1000da84:	18c00204 	addi	r3,r3,8
1000da88:	d8c12315 	stw	r3,1164(sp)
1000da8c:	0005883a 	mov	r2,zero
1000da90:	9d46b03a 	or	r3,r19,r21
1000da94:	d8011d85 	stb	zero,1142(sp)
1000da98:	8029883a 	mov	r20,r16
1000da9c:	002d883a 	mov	r22,zero
1000daa0:	003f4606 	br	1000d7bc <__alt_data_end+0xf800d7bc>
1000daa4:	94800414 	ori	r18,r18,16
1000daa8:	9080080c 	andi	r2,r18,32
1000daac:	9811883a 	mov	r8,r19
1000dab0:	10006226 	beq	r2,zero,1000dc3c <___vfiprintf_internal_r+0x95c>
1000dab4:	d9012317 	ldw	r4,1164(sp)
1000dab8:	00800044 	movi	r2,1
1000dabc:	24c00017 	ldw	r19,0(r4)
1000dac0:	25400117 	ldw	r21,4(r4)
1000dac4:	21000204 	addi	r4,r4,8
1000dac8:	d9012315 	stw	r4,1164(sp)
1000dacc:	9d46b03a 	or	r3,r19,r21
1000dad0:	003ff006 	br	1000da94 <__alt_data_end+0xf800da94>
1000dad4:	b9800007 	ldb	r6,0(r23)
1000dad8:	00801b04 	movi	r2,108
1000dadc:	3082b226 	beq	r6,r2,1000e5a8 <___vfiprintf_internal_r+0x12c8>
1000dae0:	94800414 	ori	r18,r18,16
1000dae4:	003e5f06 	br	1000d464 <__alt_data_end+0xf800d464>
1000dae8:	d8c12203 	ldbu	r3,1160(sp)
1000daec:	01040074 	movhi	r4,4097
1000daf0:	21095704 	addi	r4,r4,9564
1000daf4:	d8c11d85 	stb	r3,1142(sp)
1000daf8:	d9012715 	stw	r4,1180(sp)
1000dafc:	90c0080c 	andi	r3,r18,32
1000db00:	9811883a 	mov	r8,r19
1000db04:	d8812317 	ldw	r2,1164(sp)
1000db08:	18005f26 	beq	r3,zero,1000dc88 <___vfiprintf_internal_r+0x9a8>
1000db0c:	d9012317 	ldw	r4,1164(sp)
1000db10:	14c00017 	ldw	r19,0(r2)
1000db14:	15400117 	ldw	r21,4(r2)
1000db18:	21000204 	addi	r4,r4,8
1000db1c:	d9012315 	stw	r4,1164(sp)
1000db20:	9080004c 	andi	r2,r18,1
1000db24:	1001e226 	beq	r2,zero,1000e2b0 <___vfiprintf_internal_r+0xfd0>
1000db28:	9d46b03a 	or	r3,r19,r21
1000db2c:	18024e26 	beq	r3,zero,1000e468 <___vfiprintf_internal_r+0x1188>
1000db30:	00800c04 	movi	r2,48
1000db34:	d8811d05 	stb	r2,1140(sp)
1000db38:	d9811d45 	stb	r6,1141(sp)
1000db3c:	94800094 	ori	r18,r18,2
1000db40:	00800084 	movi	r2,2
1000db44:	003fd306 	br	1000da94 <__alt_data_end+0xf800da94>
1000db48:	d9012317 	ldw	r4,1164(sp)
1000db4c:	d9412317 	ldw	r5,1164(sp)
1000db50:	21000017 	ldw	r4,0(r4)
1000db54:	28800104 	addi	r2,r5,4
1000db58:	d9012415 	stw	r4,1168(sp)
1000db5c:	203eeb16 	blt	r4,zero,1000d70c <__alt_data_end+0xf800d70c>
1000db60:	d8812315 	stw	r2,1164(sp)
1000db64:	b9800007 	ldb	r6,0(r23)
1000db68:	003e3e06 	br	1000d464 <__alt_data_end+0xf800d464>
1000db6c:	b9800007 	ldb	r6,0(r23)
1000db70:	01000a84 	movi	r4,42
1000db74:	b8800044 	addi	r2,r23,1
1000db78:	3102d226 	beq	r6,r4,1000e6c4 <___vfiprintf_internal_r+0x13e4>
1000db7c:	35bff404 	addi	r22,r6,-48
1000db80:	102f883a 	mov	r23,r2
1000db84:	0021883a 	mov	r16,zero
1000db88:	adbe3736 	bltu	r21,r22,1000d468 <__alt_data_end+0xf800d468>
1000db8c:	0009883a 	mov	r4,zero
1000db90:	01400284 	movi	r5,10
1000db94:	00040ec0 	call	100040ec <__mulsi3>
1000db98:	b9800007 	ldb	r6,0(r23)
1000db9c:	b089883a 	add	r4,r22,r2
1000dba0:	bdc00044 	addi	r23,r23,1
1000dba4:	35bff404 	addi	r22,r6,-48
1000dba8:	adbff92e 	bgeu	r21,r22,1000db90 <__alt_data_end+0xf800db90>
1000dbac:	2021883a 	mov	r16,r4
1000dbb0:	203e2d0e 	bge	r4,zero,1000d468 <__alt_data_end+0xf800d468>
1000dbb4:	043fffc4 	movi	r16,-1
1000dbb8:	003e2b06 	br	1000d468 <__alt_data_end+0xf800d468>
1000dbbc:	94801014 	ori	r18,r18,64
1000dbc0:	b9800007 	ldb	r6,0(r23)
1000dbc4:	003e2706 	br	1000d464 <__alt_data_end+0xf800d464>
1000dbc8:	94800814 	ori	r18,r18,32
1000dbcc:	b9800007 	ldb	r6,0(r23)
1000dbd0:	003e2406 	br	1000d464 <__alt_data_end+0xf800d464>
1000dbd4:	d9412317 	ldw	r5,1164(sp)
1000dbd8:	d8812317 	ldw	r2,1164(sp)
1000dbdc:	d8011d85 	stb	zero,1142(sp)
1000dbe0:	29400017 	ldw	r5,0(r5)
1000dbe4:	9811883a 	mov	r8,r19
1000dbe8:	14c00104 	addi	r19,r2,4
1000dbec:	d9412215 	stw	r5,1160(sp)
1000dbf0:	28029026 	beq	r5,zero,1000e634 <___vfiprintf_internal_r+0x1354>
1000dbf4:	d9012217 	ldw	r4,1160(sp)
1000dbf8:	80027616 	blt	r16,zero,1000e5d4 <___vfiprintf_internal_r+0x12f4>
1000dbfc:	000b883a 	mov	r5,zero
1000dc00:	800d883a 	mov	r6,r16
1000dc04:	da012a15 	stw	r8,1192(sp)
1000dc08:	000bb740 	call	1000bb74 <memchr>
1000dc0c:	da012a17 	ldw	r8,1192(sp)
1000dc10:	1002a026 	beq	r2,zero,1000e694 <___vfiprintf_internal_r+0x13b4>
1000dc14:	d8c12217 	ldw	r3,1160(sp)
1000dc18:	10e9c83a 	sub	r20,r2,r3
1000dc1c:	85023816 	blt	r16,r20,1000e500 <___vfiprintf_internal_r+0x1220>
1000dc20:	dd811d83 	ldbu	r22,1142(sp)
1000dc24:	dcc12315 	stw	r19,1164(sp)
1000dc28:	0021883a 	mov	r16,zero
1000dc2c:	003efd06 	br	1000d824 <__alt_data_end+0xf800d824>
1000dc30:	9080080c 	andi	r2,r18,32
1000dc34:	9811883a 	mov	r8,r19
1000dc38:	103f9e1e 	bne	r2,zero,1000dab4 <__alt_data_end+0xf800dab4>
1000dc3c:	9080040c 	andi	r2,r18,16
1000dc40:	10021726 	beq	r2,zero,1000e4a0 <___vfiprintf_internal_r+0x11c0>
1000dc44:	d9412317 	ldw	r5,1164(sp)
1000dc48:	002b883a 	mov	r21,zero
1000dc4c:	00800044 	movi	r2,1
1000dc50:	2cc00017 	ldw	r19,0(r5)
1000dc54:	29400104 	addi	r5,r5,4
1000dc58:	d9412315 	stw	r5,1164(sp)
1000dc5c:	9807883a 	mov	r3,r19
1000dc60:	003f8c06 	br	1000da94 <__alt_data_end+0xf800da94>
1000dc64:	d8c12203 	ldbu	r3,1160(sp)
1000dc68:	01040074 	movhi	r4,4097
1000dc6c:	21095c04 	addi	r4,r4,9584
1000dc70:	d8c11d85 	stb	r3,1142(sp)
1000dc74:	d9012715 	stw	r4,1180(sp)
1000dc78:	90c0080c 	andi	r3,r18,32
1000dc7c:	9811883a 	mov	r8,r19
1000dc80:	d8812317 	ldw	r2,1164(sp)
1000dc84:	183fa11e 	bne	r3,zero,1000db0c <__alt_data_end+0xf800db0c>
1000dc88:	90c0040c 	andi	r3,r18,16
1000dc8c:	1801e526 	beq	r3,zero,1000e424 <___vfiprintf_internal_r+0x1144>
1000dc90:	d9412317 	ldw	r5,1164(sp)
1000dc94:	14c00017 	ldw	r19,0(r2)
1000dc98:	002b883a 	mov	r21,zero
1000dc9c:	29400104 	addi	r5,r5,4
1000dca0:	d9412315 	stw	r5,1164(sp)
1000dca4:	003f9e06 	br	1000db20 <__alt_data_end+0xf800db20>
1000dca8:	9080080c 	andi	r2,r18,32
1000dcac:	9811883a 	mov	r8,r19
1000dcb0:	103f701e 	bne	r2,zero,1000da74 <__alt_data_end+0xf800da74>
1000dcb4:	9080040c 	andi	r2,r18,16
1000dcb8:	1001ef26 	beq	r2,zero,1000e478 <___vfiprintf_internal_r+0x1198>
1000dcbc:	d9012317 	ldw	r4,1164(sp)
1000dcc0:	002b883a 	mov	r21,zero
1000dcc4:	0005883a 	mov	r2,zero
1000dcc8:	24c00017 	ldw	r19,0(r4)
1000dccc:	21000104 	addi	r4,r4,4
1000dcd0:	d9012315 	stw	r4,1164(sp)
1000dcd4:	9807883a 	mov	r3,r19
1000dcd8:	003f6e06 	br	1000da94 <__alt_data_end+0xf800da94>
1000dcdc:	d8c12317 	ldw	r3,1164(sp)
1000dce0:	9811883a 	mov	r8,r19
1000dce4:	00800c04 	movi	r2,48
1000dce8:	1cc00017 	ldw	r19,0(r3)
1000dcec:	01040074 	movhi	r4,4097
1000dcf0:	18c00104 	addi	r3,r3,4
1000dcf4:	d8811d05 	stb	r2,1140(sp)
1000dcf8:	21095c04 	addi	r4,r4,9584
1000dcfc:	00801e04 	movi	r2,120
1000dd00:	d8811d45 	stb	r2,1141(sp)
1000dd04:	d8c12315 	stw	r3,1164(sp)
1000dd08:	002b883a 	mov	r21,zero
1000dd0c:	94800094 	ori	r18,r18,2
1000dd10:	d9012715 	stw	r4,1180(sp)
1000dd14:	00800084 	movi	r2,2
1000dd18:	9807883a 	mov	r3,r19
1000dd1c:	003f5d06 	br	1000da94 <__alt_data_end+0xf800da94>
1000dd20:	d8c12203 	ldbu	r3,1160(sp)
1000dd24:	9080080c 	andi	r2,r18,32
1000dd28:	9811883a 	mov	r8,r19
1000dd2c:	d8c11d85 	stb	r3,1142(sp)
1000dd30:	1001b126 	beq	r2,zero,1000e3f8 <___vfiprintf_internal_r+0x1118>
1000dd34:	d9012317 	ldw	r4,1164(sp)
1000dd38:	d9412517 	ldw	r5,1172(sp)
1000dd3c:	20800017 	ldw	r2,0(r4)
1000dd40:	2807d7fa 	srai	r3,r5,31
1000dd44:	21000104 	addi	r4,r4,4
1000dd48:	d9012315 	stw	r4,1164(sp)
1000dd4c:	11400015 	stw	r5,0(r2)
1000dd50:	10c00115 	stw	r3,4(r2)
1000dd54:	003d9a06 	br	1000d3c0 <__alt_data_end+0xf800d3c0>
1000dd58:	d8812207 	ldb	r2,1160(sp)
1000dd5c:	1001c41e 	bne	r2,zero,1000e470 <___vfiprintf_internal_r+0x1190>
1000dd60:	00c00804 	movi	r3,32
1000dd64:	d8c12205 	stb	r3,1160(sp)
1000dd68:	b9800007 	ldb	r6,0(r23)
1000dd6c:	003dbd06 	br	1000d464 <__alt_data_end+0xf800d464>
1000dd70:	00c00ac4 	movi	r3,43
1000dd74:	d8c12205 	stb	r3,1160(sp)
1000dd78:	b9800007 	ldb	r6,0(r23)
1000dd7c:	003db906 	br	1000d464 <__alt_data_end+0xf800d464>
1000dd80:	d8c12203 	ldbu	r3,1160(sp)
1000dd84:	9080080c 	andi	r2,r18,32
1000dd88:	9811883a 	mov	r8,r19
1000dd8c:	d8c11d85 	stb	r3,1142(sp)
1000dd90:	d8c12317 	ldw	r3,1164(sp)
1000dd94:	103e7e1e 	bne	r2,zero,1000d790 <__alt_data_end+0xf800d790>
1000dd98:	9080040c 	andi	r2,r18,16
1000dd9c:	1001a926 	beq	r2,zero,1000e444 <___vfiprintf_internal_r+0x1164>
1000dda0:	1cc00017 	ldw	r19,0(r3)
1000dda4:	d9412317 	ldw	r5,1164(sp)
1000dda8:	982bd7fa 	srai	r21,r19,31
1000ddac:	29400104 	addi	r5,r5,4
1000ddb0:	d9412315 	stw	r5,1164(sp)
1000ddb4:	a805883a 	mov	r2,r21
1000ddb8:	003e7b06 	br	1000d7a8 <__alt_data_end+0xf800d7a8>
1000ddbc:	94800054 	ori	r18,r18,1
1000ddc0:	b9800007 	ldb	r6,0(r23)
1000ddc4:	003da706 	br	1000d464 <__alt_data_end+0xf800d464>
1000ddc8:	d8c12203 	ldbu	r3,1160(sp)
1000ddcc:	9811883a 	mov	r8,r19
1000ddd0:	d8c11d85 	stb	r3,1142(sp)
1000ddd4:	30005826 	beq	r6,zero,1000df38 <___vfiprintf_internal_r+0xc58>
1000ddd8:	05400044 	movi	r21,1
1000dddc:	d8c10004 	addi	r3,sp,1024
1000dde0:	d9810005 	stb	r6,1024(sp)
1000dde4:	d8011d85 	stb	zero,1142(sp)
1000dde8:	a829883a 	mov	r20,r21
1000ddec:	d8c12215 	stw	r3,1160(sp)
1000ddf0:	003f1a06 	br	1000da5c <__alt_data_end+0xf800da5c>
1000ddf4:	d9012117 	ldw	r4,1156(sp)
1000ddf8:	d9412017 	ldw	r5,1152(sp)
1000ddfc:	d9811a04 	addi	r6,sp,1128
1000de00:	d9c12a15 	stw	r7,1192(sp)
1000de04:	db012b15 	stw	r12,1196(sp)
1000de08:	000d1cc0 	call	1000d1cc <__sprint_r.part.0>
1000de0c:	d9c12a17 	ldw	r7,1192(sp)
1000de10:	db012b17 	ldw	r12,1196(sp)
1000de14:	10004e1e 	bne	r2,zero,1000df50 <___vfiprintf_internal_r+0xc70>
1000de18:	d9011b17 	ldw	r4,1132(sp)
1000de1c:	d8c11c17 	ldw	r3,1136(sp)
1000de20:	d811883a 	mov	r8,sp
1000de24:	21400044 	addi	r5,r4,1
1000de28:	003e9d06 	br	1000d8a0 <__alt_data_end+0xf800d8a0>
1000de2c:	d9411b17 	ldw	r5,1132(sp)
1000de30:	d8c11c17 	ldw	r3,1136(sp)
1000de34:	28800044 	addi	r2,r5,1
1000de38:	d9011d87 	ldb	r4,1142(sp)
1000de3c:	203eb626 	beq	r4,zero,1000d918 <__alt_data_end+0xf800d918>
1000de40:	01000044 	movi	r4,1
1000de44:	d9411d84 	addi	r5,sp,1142
1000de48:	1907883a 	add	r3,r3,r4
1000de4c:	41400015 	stw	r5,0(r8)
1000de50:	41000115 	stw	r4,4(r8)
1000de54:	d8c11c15 	stw	r3,1136(sp)
1000de58:	d8811b15 	stw	r2,1132(sp)
1000de5c:	014001c4 	movi	r5,7
1000de60:	2880ce16 	blt	r5,r2,1000e19c <___vfiprintf_internal_r+0xebc>
1000de64:	100b883a 	mov	r5,r2
1000de68:	42000204 	addi	r8,r8,8
1000de6c:	10800044 	addi	r2,r2,1
1000de70:	003ea906 	br	1000d918 <__alt_data_end+0xf800d918>
1000de74:	d9012117 	ldw	r4,1156(sp)
1000de78:	d9412017 	ldw	r5,1152(sp)
1000de7c:	d9811a04 	addi	r6,sp,1128
1000de80:	000d1cc0 	call	1000d1cc <__sprint_r.part.0>
1000de84:	1000321e 	bne	r2,zero,1000df50 <___vfiprintf_internal_r+0xc70>
1000de88:	d9411b17 	ldw	r5,1132(sp)
1000de8c:	d8c11c17 	ldw	r3,1136(sp)
1000de90:	d811883a 	mov	r8,sp
1000de94:	28800044 	addi	r2,r5,1
1000de98:	003eba06 	br	1000d984 <__alt_data_end+0xf800d984>
1000de9c:	10803fcc 	andi	r2,r2,255
1000dea0:	00c00044 	movi	r3,1
1000dea4:	10fe4d1e 	bne	r2,r3,1000d7dc <__alt_data_end+0xf800d7dc>
1000dea8:	a800021e 	bne	r21,zero,1000deb4 <___vfiprintf_internal_r+0xbd4>
1000deac:	00800244 	movi	r2,9
1000deb0:	14c01b2e 	bgeu	r2,r19,1000df20 <___vfiprintf_internal_r+0xc40>
1000deb4:	dc012215 	stw	r16,1160(sp)
1000deb8:	dd010a04 	addi	r20,sp,1064
1000debc:	a821883a 	mov	r16,r21
1000dec0:	402b883a 	mov	r21,r8
1000dec4:	9809883a 	mov	r4,r19
1000dec8:	800b883a 	mov	r5,r16
1000decc:	01800284 	movi	r6,10
1000ded0:	000f883a 	mov	r7,zero
1000ded4:	00039a40 	call	100039a4 <__umoddi3>
1000ded8:	10800c04 	addi	r2,r2,48
1000dedc:	a53fffc4 	addi	r20,r20,-1
1000dee0:	9809883a 	mov	r4,r19
1000dee4:	800b883a 	mov	r5,r16
1000dee8:	01800284 	movi	r6,10
1000deec:	000f883a 	mov	r7,zero
1000def0:	a0800005 	stb	r2,0(r20)
1000def4:	00033640 	call	10003364 <__udivdi3>
1000def8:	1027883a 	mov	r19,r2
1000defc:	10c4b03a 	or	r2,r2,r3
1000df00:	1821883a 	mov	r16,r3
1000df04:	103fef1e 	bne	r2,zero,1000dec4 <__alt_data_end+0xf800dec4>
1000df08:	d9011e17 	ldw	r4,1144(sp)
1000df0c:	dc012217 	ldw	r16,1160(sp)
1000df10:	a811883a 	mov	r8,r21
1000df14:	dd012215 	stw	r20,1160(sp)
1000df18:	2529c83a 	sub	r20,r4,r20
1000df1c:	003e4106 	br	1000d824 <__alt_data_end+0xf800d824>
1000df20:	9cc00c04 	addi	r19,r19,48
1000df24:	d8c109c4 	addi	r3,sp,1063
1000df28:	dcc109c5 	stb	r19,1063(sp)
1000df2c:	dd012817 	ldw	r20,1184(sp)
1000df30:	d8c12215 	stw	r3,1160(sp)
1000df34:	003e3b06 	br	1000d824 <__alt_data_end+0xf800d824>
1000df38:	d8811c17 	ldw	r2,1136(sp)
1000df3c:	10000426 	beq	r2,zero,1000df50 <___vfiprintf_internal_r+0xc70>
1000df40:	d9012117 	ldw	r4,1156(sp)
1000df44:	d9412017 	ldw	r5,1152(sp)
1000df48:	d9811a04 	addi	r6,sp,1128
1000df4c:	000d1cc0 	call	1000d1cc <__sprint_r.part.0>
1000df50:	d9412017 	ldw	r5,1152(sp)
1000df54:	2880030b 	ldhu	r2,12(r5)
1000df58:	1080100c 	andi	r2,r2,64
1000df5c:	103ddc1e 	bne	r2,zero,1000d6d0 <__alt_data_end+0xf800d6d0>
1000df60:	d8812517 	ldw	r2,1172(sp)
1000df64:	003ddb06 	br	1000d6d4 <__alt_data_end+0xf800d6d4>
1000df68:	1801061e 	bne	r3,zero,1000e384 <___vfiprintf_internal_r+0x10a4>
1000df6c:	d8c12217 	ldw	r3,1160(sp)
1000df70:	00800044 	movi	r2,1
1000df74:	dd000115 	stw	r20,4(sp)
1000df78:	d8c00015 	stw	r3,0(sp)
1000df7c:	dd011c15 	stw	r20,1136(sp)
1000df80:	d8811b15 	stw	r2,1132(sp)
1000df84:	a007883a 	mov	r3,r20
1000df88:	d811883a 	mov	r8,sp
1000df8c:	42000204 	addi	r8,r8,8
1000df90:	9480010c 	andi	r18,r18,4
1000df94:	90003426 	beq	r18,zero,1000e068 <___vfiprintf_internal_r+0xd88>
1000df98:	d9412417 	ldw	r5,1168(sp)
1000df9c:	2d65c83a 	sub	r18,r5,r21
1000dfa0:	0480310e 	bge	zero,r18,1000e068 <___vfiprintf_internal_r+0xd88>
1000dfa4:	04000404 	movi	r16,16
1000dfa8:	8481ad0e 	bge	r16,r18,1000e660 <___vfiprintf_internal_r+0x1380>
1000dfac:	01440074 	movhi	r5,4097
1000dfb0:	2949c004 	addi	r5,r5,9984
1000dfb4:	d9011b17 	ldw	r4,1132(sp)
1000dfb8:	d9412615 	stw	r5,1176(sp)
1000dfbc:	04c001c4 	movi	r19,7
1000dfc0:	dd012117 	ldw	r20,1156(sp)
1000dfc4:	dd812017 	ldw	r22,1152(sp)
1000dfc8:	00000506 	br	1000dfe0 <___vfiprintf_internal_r+0xd00>
1000dfcc:	21400084 	addi	r5,r4,2
1000dfd0:	42000204 	addi	r8,r8,8
1000dfd4:	1009883a 	mov	r4,r2
1000dfd8:	94bffc04 	addi	r18,r18,-16
1000dfdc:	84800d0e 	bge	r16,r18,1000e014 <___vfiprintf_internal_r+0xd34>
1000dfe0:	18c00404 	addi	r3,r3,16
1000dfe4:	20800044 	addi	r2,r4,1
1000dfe8:	47000015 	stw	fp,0(r8)
1000dfec:	44000115 	stw	r16,4(r8)
1000dff0:	d8c11c15 	stw	r3,1136(sp)
1000dff4:	d8811b15 	stw	r2,1132(sp)
1000dff8:	98bff40e 	bge	r19,r2,1000dfcc <__alt_data_end+0xf800dfcc>
1000dffc:	1800291e 	bne	r3,zero,1000e0a4 <___vfiprintf_internal_r+0xdc4>
1000e000:	94bffc04 	addi	r18,r18,-16
1000e004:	0009883a 	mov	r4,zero
1000e008:	01400044 	movi	r5,1
1000e00c:	d811883a 	mov	r8,sp
1000e010:	84bff316 	blt	r16,r18,1000dfe0 <__alt_data_end+0xf800dfe0>
1000e014:	d8812617 	ldw	r2,1176(sp)
1000e018:	1c87883a 	add	r3,r3,r18
1000e01c:	44800115 	stw	r18,4(r8)
1000e020:	40800015 	stw	r2,0(r8)
1000e024:	d8c11c15 	stw	r3,1136(sp)
1000e028:	d9411b15 	stw	r5,1132(sp)
1000e02c:	008001c4 	movi	r2,7
1000e030:	11400d0e 	bge	r2,r5,1000e068 <___vfiprintf_internal_r+0xd88>
1000e034:	1800061e 	bne	r3,zero,1000e050 <___vfiprintf_internal_r+0xd70>
1000e038:	d8c12417 	ldw	r3,1168(sp)
1000e03c:	a8c12e16 	blt	r21,r3,1000e4f8 <___vfiprintf_internal_r+0x1218>
1000e040:	d9012517 	ldw	r4,1172(sp)
1000e044:	2549883a 	add	r4,r4,r21
1000e048:	d9012515 	stw	r4,1172(sp)
1000e04c:	00001206 	br	1000e098 <___vfiprintf_internal_r+0xdb8>
1000e050:	d9012117 	ldw	r4,1156(sp)
1000e054:	d9412017 	ldw	r5,1152(sp)
1000e058:	d9811a04 	addi	r6,sp,1128
1000e05c:	000d1cc0 	call	1000d1cc <__sprint_r.part.0>
1000e060:	103fbb1e 	bne	r2,zero,1000df50 <__alt_data_end+0xf800df50>
1000e064:	d8c11c17 	ldw	r3,1136(sp)
1000e068:	d8812417 	ldw	r2,1168(sp)
1000e06c:	a880010e 	bge	r21,r2,1000e074 <___vfiprintf_internal_r+0xd94>
1000e070:	102b883a 	mov	r21,r2
1000e074:	d9012517 	ldw	r4,1172(sp)
1000e078:	2549883a 	add	r4,r4,r21
1000e07c:	d9012515 	stw	r4,1172(sp)
1000e080:	18000526 	beq	r3,zero,1000e098 <___vfiprintf_internal_r+0xdb8>
1000e084:	d9012117 	ldw	r4,1156(sp)
1000e088:	d9412017 	ldw	r5,1152(sp)
1000e08c:	d9811a04 	addi	r6,sp,1128
1000e090:	000d1cc0 	call	1000d1cc <__sprint_r.part.0>
1000e094:	103fae1e 	bne	r2,zero,1000df50 <__alt_data_end+0xf800df50>
1000e098:	d8011b15 	stw	zero,1132(sp)
1000e09c:	d811883a 	mov	r8,sp
1000e0a0:	003cc706 	br	1000d3c0 <__alt_data_end+0xf800d3c0>
1000e0a4:	a009883a 	mov	r4,r20
1000e0a8:	b00b883a 	mov	r5,r22
1000e0ac:	d9811a04 	addi	r6,sp,1128
1000e0b0:	000d1cc0 	call	1000d1cc <__sprint_r.part.0>
1000e0b4:	103fa61e 	bne	r2,zero,1000df50 <__alt_data_end+0xf800df50>
1000e0b8:	d9011b17 	ldw	r4,1132(sp)
1000e0bc:	d8c11c17 	ldw	r3,1136(sp)
1000e0c0:	d811883a 	mov	r8,sp
1000e0c4:	21400044 	addi	r5,r4,1
1000e0c8:	003fc306 	br	1000dfd8 <__alt_data_end+0xf800dfd8>
1000e0cc:	d9012417 	ldw	r4,1168(sp)
1000e0d0:	256dc83a 	sub	r22,r4,r21
1000e0d4:	05be1f0e 	bge	zero,r22,1000d954 <__alt_data_end+0xf800d954>
1000e0d8:	04c00404 	movi	r19,16
1000e0dc:	9d81720e 	bge	r19,r22,1000e6a8 <___vfiprintf_internal_r+0x13c8>
1000e0e0:	00840074 	movhi	r2,4097
1000e0e4:	1089bc04 	addi	r2,r2,9968
1000e0e8:	d8812615 	stw	r2,1176(sp)
1000e0ec:	028001c4 	movi	r10,7
1000e0f0:	00000506 	br	1000e108 <___vfiprintf_internal_r+0xe28>
1000e0f4:	29000084 	addi	r4,r5,2
1000e0f8:	42000204 	addi	r8,r8,8
1000e0fc:	100b883a 	mov	r5,r2
1000e100:	b5bffc04 	addi	r22,r22,-16
1000e104:	9d800d0e 	bge	r19,r22,1000e13c <___vfiprintf_internal_r+0xe5c>
1000e108:	18c00404 	addi	r3,r3,16
1000e10c:	28800044 	addi	r2,r5,1
1000e110:	44400015 	stw	r17,0(r8)
1000e114:	44c00115 	stw	r19,4(r8)
1000e118:	d8c11c15 	stw	r3,1136(sp)
1000e11c:	d8811b15 	stw	r2,1132(sp)
1000e120:	50bff40e 	bge	r10,r2,1000e0f4 <__alt_data_end+0xf800e0f4>
1000e124:	1800111e 	bne	r3,zero,1000e16c <___vfiprintf_internal_r+0xe8c>
1000e128:	b5bffc04 	addi	r22,r22,-16
1000e12c:	000b883a 	mov	r5,zero
1000e130:	01000044 	movi	r4,1
1000e134:	d811883a 	mov	r8,sp
1000e138:	9dbff316 	blt	r19,r22,1000e108 <__alt_data_end+0xf800e108>
1000e13c:	d9412617 	ldw	r5,1176(sp)
1000e140:	1d87883a 	add	r3,r3,r22
1000e144:	45800115 	stw	r22,4(r8)
1000e148:	41400015 	stw	r5,0(r8)
1000e14c:	d8c11c15 	stw	r3,1136(sp)
1000e150:	d9011b15 	stw	r4,1132(sp)
1000e154:	008001c4 	movi	r2,7
1000e158:	11008516 	blt	r2,r4,1000e370 <___vfiprintf_internal_r+0x1090>
1000e15c:	42000204 	addi	r8,r8,8
1000e160:	20800044 	addi	r2,r4,1
1000e164:	200b883a 	mov	r5,r4
1000e168:	003dfa06 	br	1000d954 <__alt_data_end+0xf800d954>
1000e16c:	d9012117 	ldw	r4,1156(sp)
1000e170:	d9412017 	ldw	r5,1152(sp)
1000e174:	d9811a04 	addi	r6,sp,1128
1000e178:	da812a15 	stw	r10,1192(sp)
1000e17c:	000d1cc0 	call	1000d1cc <__sprint_r.part.0>
1000e180:	da812a17 	ldw	r10,1192(sp)
1000e184:	103f721e 	bne	r2,zero,1000df50 <__alt_data_end+0xf800df50>
1000e188:	d9411b17 	ldw	r5,1132(sp)
1000e18c:	d8c11c17 	ldw	r3,1136(sp)
1000e190:	d811883a 	mov	r8,sp
1000e194:	29000044 	addi	r4,r5,1
1000e198:	003fd906 	br	1000e100 <__alt_data_end+0xf800e100>
1000e19c:	1800681e 	bne	r3,zero,1000e340 <___vfiprintf_internal_r+0x1060>
1000e1a0:	50004d26 	beq	r10,zero,1000e2d8 <___vfiprintf_internal_r+0xff8>
1000e1a4:	d8811d04 	addi	r2,sp,1140
1000e1a8:	00c00084 	movi	r3,2
1000e1ac:	d8800015 	stw	r2,0(sp)
1000e1b0:	d8c00115 	stw	r3,4(sp)
1000e1b4:	2005883a 	mov	r2,r4
1000e1b8:	d811883a 	mov	r8,sp
1000e1bc:	003de006 	br	1000d940 <__alt_data_end+0xf800d940>
1000e1c0:	1800551e 	bne	r3,zero,1000e318 <___vfiprintf_internal_r+0x1038>
1000e1c4:	000b883a 	mov	r5,zero
1000e1c8:	00800044 	movi	r2,1
1000e1cc:	d811883a 	mov	r8,sp
1000e1d0:	003dde06 	br	1000d94c <__alt_data_end+0xf800d94c>
1000e1d4:	10803fcc 	andi	r2,r2,255
1000e1d8:	1000191e 	bne	r2,zero,1000e240 <___vfiprintf_internal_r+0xf60>
1000e1dc:	9080004c 	andi	r2,r18,1
1000e1e0:	10001726 	beq	r2,zero,1000e240 <___vfiprintf_internal_r+0xf60>
1000e1e4:	00800c04 	movi	r2,48
1000e1e8:	d8c109c4 	addi	r3,sp,1063
1000e1ec:	d88109c5 	stb	r2,1063(sp)
1000e1f0:	dd012817 	ldw	r20,1184(sp)
1000e1f4:	d8c12215 	stw	r3,1160(sp)
1000e1f8:	003d8a06 	br	1000d824 <__alt_data_end+0xf800d824>
1000e1fc:	d9012717 	ldw	r4,1180(sp)
1000e200:	dd010a04 	addi	r20,sp,1064
1000e204:	988003cc 	andi	r2,r19,15
1000e208:	a806973a 	slli	r3,r21,28
1000e20c:	2085883a 	add	r2,r4,r2
1000e210:	9826d13a 	srli	r19,r19,4
1000e214:	10800003 	ldbu	r2,0(r2)
1000e218:	a82ad13a 	srli	r21,r21,4
1000e21c:	a53fffc4 	addi	r20,r20,-1
1000e220:	1ce6b03a 	or	r19,r3,r19
1000e224:	a0800005 	stb	r2,0(r20)
1000e228:	9d44b03a 	or	r2,r19,r21
1000e22c:	103ff51e 	bne	r2,zero,1000e204 <__alt_data_end+0xf800e204>
1000e230:	d9411e17 	ldw	r5,1144(sp)
1000e234:	dd012215 	stw	r20,1160(sp)
1000e238:	2d29c83a 	sub	r20,r5,r20
1000e23c:	003d7906 	br	1000d824 <__alt_data_end+0xf800d824>
1000e240:	d8c10a04 	addi	r3,sp,1064
1000e244:	d8c12215 	stw	r3,1160(sp)
1000e248:	003d7606 	br	1000d824 <__alt_data_end+0xf800d824>
1000e24c:	18009e1e 	bne	r3,zero,1000e4c8 <___vfiprintf_internal_r+0x11e8>
1000e250:	d8811d87 	ldb	r2,1142(sp)
1000e254:	10005f26 	beq	r2,zero,1000e3d4 <___vfiprintf_internal_r+0x10f4>
1000e258:	00c00044 	movi	r3,1
1000e25c:	d9011d84 	addi	r4,sp,1142
1000e260:	1805883a 	mov	r2,r3
1000e264:	d9000015 	stw	r4,0(sp)
1000e268:	d8c00115 	stw	r3,4(sp)
1000e26c:	d811883a 	mov	r8,sp
1000e270:	003efc06 	br	1000de64 <__alt_data_end+0xf800de64>
1000e274:	d9412417 	ldw	r5,1168(sp)
1000e278:	d811883a 	mov	r8,sp
1000e27c:	2d65c83a 	sub	r18,r5,r21
1000e280:	04bf4816 	blt	zero,r18,1000dfa4 <__alt_data_end+0xf800dfa4>
1000e284:	003f6c06 	br	1000e038 <__alt_data_end+0xf800e038>
1000e288:	b829883a 	mov	r20,r23
1000e28c:	003c6906 	br	1000d434 <__alt_data_end+0xf800d434>
1000e290:	d9012117 	ldw	r4,1156(sp)
1000e294:	d9412017 	ldw	r5,1152(sp)
1000e298:	d9811a04 	addi	r6,sp,1128
1000e29c:	000d1cc0 	call	1000d1cc <__sprint_r.part.0>
1000e2a0:	103f2b1e 	bne	r2,zero,1000df50 <__alt_data_end+0xf800df50>
1000e2a4:	d8c11c17 	ldw	r3,1136(sp)
1000e2a8:	d811883a 	mov	r8,sp
1000e2ac:	003f3806 	br	1000df90 <__alt_data_end+0xf800df90>
1000e2b0:	00800084 	movi	r2,2
1000e2b4:	9d46b03a 	or	r3,r19,r21
1000e2b8:	003df606 	br	1000da94 <__alt_data_end+0xf800da94>
1000e2bc:	d9012117 	ldw	r4,1156(sp)
1000e2c0:	d9412017 	ldw	r5,1152(sp)
1000e2c4:	d9811a04 	addi	r6,sp,1128
1000e2c8:	000d1cc0 	call	1000d1cc <__sprint_r.part.0>
1000e2cc:	103f201e 	bne	r2,zero,1000df50 <__alt_data_end+0xf800df50>
1000e2d0:	d811883a 	mov	r8,sp
1000e2d4:	003cc606 	br	1000d5f0 <__alt_data_end+0xf800d5f0>
1000e2d8:	000b883a 	mov	r5,zero
1000e2dc:	2005883a 	mov	r2,r4
1000e2e0:	d811883a 	mov	r8,sp
1000e2e4:	003d9906 	br	1000d94c <__alt_data_end+0xf800d94c>
1000e2e8:	10803fcc 	andi	r2,r2,255
1000e2ec:	1080201c 	xori	r2,r2,128
1000e2f0:	10bfe004 	addi	r2,r2,-128
1000e2f4:	01000c04 	movi	r4,48
1000e2f8:	1100b226 	beq	r2,r4,1000e5c4 <___vfiprintf_internal_r+0x12e4>
1000e2fc:	d9412217 	ldw	r5,1160(sp)
1000e300:	d8811e17 	ldw	r2,1144(sp)
1000e304:	193fffc5 	stb	r4,-1(r3)
1000e308:	297fffc4 	addi	r5,r5,-1
1000e30c:	d9412215 	stw	r5,1160(sp)
1000e310:	1169c83a 	sub	r20,r2,r5
1000e314:	003d4306 	br	1000d824 <__alt_data_end+0xf800d824>
1000e318:	d9012117 	ldw	r4,1156(sp)
1000e31c:	d9412017 	ldw	r5,1152(sp)
1000e320:	d9811a04 	addi	r6,sp,1128
1000e324:	000d1cc0 	call	1000d1cc <__sprint_r.part.0>
1000e328:	103f091e 	bne	r2,zero,1000df50 <__alt_data_end+0xf800df50>
1000e32c:	d9411b17 	ldw	r5,1132(sp)
1000e330:	d8c11c17 	ldw	r3,1136(sp)
1000e334:	d811883a 	mov	r8,sp
1000e338:	28800044 	addi	r2,r5,1
1000e33c:	003d8306 	br	1000d94c <__alt_data_end+0xf800d94c>
1000e340:	d9012117 	ldw	r4,1156(sp)
1000e344:	d9412017 	ldw	r5,1152(sp)
1000e348:	d9811a04 	addi	r6,sp,1128
1000e34c:	da812a15 	stw	r10,1192(sp)
1000e350:	000d1cc0 	call	1000d1cc <__sprint_r.part.0>
1000e354:	da812a17 	ldw	r10,1192(sp)
1000e358:	103efd1e 	bne	r2,zero,1000df50 <__alt_data_end+0xf800df50>
1000e35c:	d9411b17 	ldw	r5,1132(sp)
1000e360:	d8c11c17 	ldw	r3,1136(sp)
1000e364:	d811883a 	mov	r8,sp
1000e368:	28800044 	addi	r2,r5,1
1000e36c:	003d6a06 	br	1000d918 <__alt_data_end+0xf800d918>
1000e370:	1800a01e 	bne	r3,zero,1000e5f4 <___vfiprintf_internal_r+0x1314>
1000e374:	000b883a 	mov	r5,zero
1000e378:	00800044 	movi	r2,1
1000e37c:	d811883a 	mov	r8,sp
1000e380:	003d7406 	br	1000d954 <__alt_data_end+0xf800d954>
1000e384:	d9012117 	ldw	r4,1156(sp)
1000e388:	d9412017 	ldw	r5,1152(sp)
1000e38c:	d9811a04 	addi	r6,sp,1128
1000e390:	000d1cc0 	call	1000d1cc <__sprint_r.part.0>
1000e394:	103eee1e 	bne	r2,zero,1000df50 <__alt_data_end+0xf800df50>
1000e398:	d8811b17 	ldw	r2,1132(sp)
1000e39c:	d8c11c17 	ldw	r3,1136(sp)
1000e3a0:	d811883a 	mov	r8,sp
1000e3a4:	10800044 	addi	r2,r2,1
1000e3a8:	003d8f06 	br	1000d9e8 <__alt_data_end+0xf800d9e8>
1000e3ac:	04e7c83a 	sub	r19,zero,r19
1000e3b0:	9804c03a 	cmpne	r2,r19,zero
1000e3b4:	056bc83a 	sub	r21,zero,r21
1000e3b8:	a8abc83a 	sub	r21,r21,r2
1000e3bc:	05800b44 	movi	r22,45
1000e3c0:	dd811d85 	stb	r22,1142(sp)
1000e3c4:	8029883a 	mov	r20,r16
1000e3c8:	00800044 	movi	r2,1
1000e3cc:	9d46b03a 	or	r3,r19,r21
1000e3d0:	003cfa06 	br	1000d7bc <__alt_data_end+0xf800d7bc>
1000e3d4:	000b883a 	mov	r5,zero
1000e3d8:	00800044 	movi	r2,1
1000e3dc:	d811883a 	mov	r8,sp
1000e3e0:	503d5a26 	beq	r10,zero,1000d94c <__alt_data_end+0xf800d94c>
1000e3e4:	00c00084 	movi	r3,2
1000e3e8:	d9011d04 	addi	r4,sp,1140
1000e3ec:	d9000015 	stw	r4,0(sp)
1000e3f0:	d8c00115 	stw	r3,4(sp)
1000e3f4:	003d5206 	br	1000d940 <__alt_data_end+0xf800d940>
1000e3f8:	9080040c 	andi	r2,r18,16
1000e3fc:	1000421e 	bne	r2,zero,1000e508 <___vfiprintf_internal_r+0x1228>
1000e400:	9480100c 	andi	r18,r18,64
1000e404:	90009c26 	beq	r18,zero,1000e678 <___vfiprintf_internal_r+0x1398>
1000e408:	d9412317 	ldw	r5,1164(sp)
1000e40c:	d8c12517 	ldw	r3,1172(sp)
1000e410:	28800017 	ldw	r2,0(r5)
1000e414:	29400104 	addi	r5,r5,4
1000e418:	d9412315 	stw	r5,1164(sp)
1000e41c:	10c0000d 	sth	r3,0(r2)
1000e420:	003be706 	br	1000d3c0 <__alt_data_end+0xf800d3c0>
1000e424:	90c0100c 	andi	r3,r18,64
1000e428:	18003e26 	beq	r3,zero,1000e524 <___vfiprintf_internal_r+0x1244>
1000e42c:	d8c12317 	ldw	r3,1164(sp)
1000e430:	14c0000b 	ldhu	r19,0(r2)
1000e434:	002b883a 	mov	r21,zero
1000e438:	18c00104 	addi	r3,r3,4
1000e43c:	d8c12315 	stw	r3,1164(sp)
1000e440:	003db706 	br	1000db20 <__alt_data_end+0xf800db20>
1000e444:	9080100c 	andi	r2,r18,64
1000e448:	10004c26 	beq	r2,zero,1000e57c <___vfiprintf_internal_r+0x129c>
1000e44c:	1cc0000f 	ldh	r19,0(r3)
1000e450:	d8812317 	ldw	r2,1164(sp)
1000e454:	982bd7fa 	srai	r21,r19,31
1000e458:	10800104 	addi	r2,r2,4
1000e45c:	d8812315 	stw	r2,1164(sp)
1000e460:	a805883a 	mov	r2,r21
1000e464:	003cd006 	br	1000d7a8 <__alt_data_end+0xf800d7a8>
1000e468:	00800084 	movi	r2,2
1000e46c:	003d8906 	br	1000da94 <__alt_data_end+0xf800da94>
1000e470:	b9800007 	ldb	r6,0(r23)
1000e474:	003bfb06 	br	1000d464 <__alt_data_end+0xf800d464>
1000e478:	9080100c 	andi	r2,r18,64
1000e47c:	10003726 	beq	r2,zero,1000e55c <___vfiprintf_internal_r+0x127c>
1000e480:	d9412317 	ldw	r5,1164(sp)
1000e484:	002b883a 	mov	r21,zero
1000e488:	0005883a 	mov	r2,zero
1000e48c:	2cc0000b 	ldhu	r19,0(r5)
1000e490:	29400104 	addi	r5,r5,4
1000e494:	d9412315 	stw	r5,1164(sp)
1000e498:	9807883a 	mov	r3,r19
1000e49c:	003d7d06 	br	1000da94 <__alt_data_end+0xf800da94>
1000e4a0:	9080100c 	andi	r2,r18,64
1000e4a4:	10002526 	beq	r2,zero,1000e53c <___vfiprintf_internal_r+0x125c>
1000e4a8:	d8812317 	ldw	r2,1164(sp)
1000e4ac:	002b883a 	mov	r21,zero
1000e4b0:	14c0000b 	ldhu	r19,0(r2)
1000e4b4:	10800104 	addi	r2,r2,4
1000e4b8:	d8812315 	stw	r2,1164(sp)
1000e4bc:	9807883a 	mov	r3,r19
1000e4c0:	00800044 	movi	r2,1
1000e4c4:	003d7306 	br	1000da94 <__alt_data_end+0xf800da94>
1000e4c8:	d9012117 	ldw	r4,1156(sp)
1000e4cc:	d9412017 	ldw	r5,1152(sp)
1000e4d0:	d9811a04 	addi	r6,sp,1128
1000e4d4:	da812a15 	stw	r10,1192(sp)
1000e4d8:	000d1cc0 	call	1000d1cc <__sprint_r.part.0>
1000e4dc:	da812a17 	ldw	r10,1192(sp)
1000e4e0:	103e9b1e 	bne	r2,zero,1000df50 <__alt_data_end+0xf800df50>
1000e4e4:	d9411b17 	ldw	r5,1132(sp)
1000e4e8:	d8c11c17 	ldw	r3,1136(sp)
1000e4ec:	d811883a 	mov	r8,sp
1000e4f0:	28800044 	addi	r2,r5,1
1000e4f4:	003e5006 	br	1000de38 <__alt_data_end+0xf800de38>
1000e4f8:	182b883a 	mov	r21,r3
1000e4fc:	003ed006 	br	1000e040 <__alt_data_end+0xf800e040>
1000e500:	8029883a 	mov	r20,r16
1000e504:	003dc606 	br	1000dc20 <__alt_data_end+0xf800dc20>
1000e508:	d8c12317 	ldw	r3,1164(sp)
1000e50c:	d9012517 	ldw	r4,1172(sp)
1000e510:	18800017 	ldw	r2,0(r3)
1000e514:	18c00104 	addi	r3,r3,4
1000e518:	d8c12315 	stw	r3,1164(sp)
1000e51c:	11000015 	stw	r4,0(r2)
1000e520:	003ba706 	br	1000d3c0 <__alt_data_end+0xf800d3c0>
1000e524:	d9012317 	ldw	r4,1164(sp)
1000e528:	14c00017 	ldw	r19,0(r2)
1000e52c:	002b883a 	mov	r21,zero
1000e530:	21000104 	addi	r4,r4,4
1000e534:	d9012315 	stw	r4,1164(sp)
1000e538:	003d7906 	br	1000db20 <__alt_data_end+0xf800db20>
1000e53c:	d8c12317 	ldw	r3,1164(sp)
1000e540:	002b883a 	mov	r21,zero
1000e544:	00800044 	movi	r2,1
1000e548:	1cc00017 	ldw	r19,0(r3)
1000e54c:	18c00104 	addi	r3,r3,4
1000e550:	d8c12315 	stw	r3,1164(sp)
1000e554:	9807883a 	mov	r3,r19
1000e558:	003d4e06 	br	1000da94 <__alt_data_end+0xf800da94>
1000e55c:	d8812317 	ldw	r2,1164(sp)
1000e560:	002b883a 	mov	r21,zero
1000e564:	14c00017 	ldw	r19,0(r2)
1000e568:	10800104 	addi	r2,r2,4
1000e56c:	d8812315 	stw	r2,1164(sp)
1000e570:	9807883a 	mov	r3,r19
1000e574:	0005883a 	mov	r2,zero
1000e578:	003d4606 	br	1000da94 <__alt_data_end+0xf800da94>
1000e57c:	1cc00017 	ldw	r19,0(r3)
1000e580:	d8c12317 	ldw	r3,1164(sp)
1000e584:	982bd7fa 	srai	r21,r19,31
1000e588:	18c00104 	addi	r3,r3,4
1000e58c:	d8c12315 	stw	r3,1164(sp)
1000e590:	a805883a 	mov	r2,r21
1000e594:	003c8406 	br	1000d7a8 <__alt_data_end+0xf800d7a8>
1000e598:	01040074 	movhi	r4,4097
1000e59c:	2109bc04 	addi	r4,r4,9968
1000e5a0:	d9012615 	stw	r4,1176(sp)
1000e5a4:	003d0606 	br	1000d9c0 <__alt_data_end+0xf800d9c0>
1000e5a8:	b9800043 	ldbu	r6,1(r23)
1000e5ac:	94800814 	ori	r18,r18,32
1000e5b0:	bdc00044 	addi	r23,r23,1
1000e5b4:	31803fcc 	andi	r6,r6,255
1000e5b8:	3180201c 	xori	r6,r6,128
1000e5bc:	31bfe004 	addi	r6,r6,-128
1000e5c0:	003ba806 	br	1000d464 <__alt_data_end+0xf800d464>
1000e5c4:	d8811e17 	ldw	r2,1144(sp)
1000e5c8:	d8c12217 	ldw	r3,1160(sp)
1000e5cc:	10e9c83a 	sub	r20,r2,r3
1000e5d0:	003c9406 	br	1000d824 <__alt_data_end+0xf800d824>
1000e5d4:	da012a15 	stw	r8,1192(sp)
1000e5d8:	000d1340 	call	1000d134 <strlen>
1000e5dc:	1029883a 	mov	r20,r2
1000e5e0:	dd811d83 	ldbu	r22,1142(sp)
1000e5e4:	dcc12315 	stw	r19,1164(sp)
1000e5e8:	0021883a 	mov	r16,zero
1000e5ec:	da012a17 	ldw	r8,1192(sp)
1000e5f0:	003c8c06 	br	1000d824 <__alt_data_end+0xf800d824>
1000e5f4:	d9012117 	ldw	r4,1156(sp)
1000e5f8:	d9412017 	ldw	r5,1152(sp)
1000e5fc:	d9811a04 	addi	r6,sp,1128
1000e600:	000d1cc0 	call	1000d1cc <__sprint_r.part.0>
1000e604:	103e521e 	bne	r2,zero,1000df50 <__alt_data_end+0xf800df50>
1000e608:	d9411b17 	ldw	r5,1132(sp)
1000e60c:	d8c11c17 	ldw	r3,1136(sp)
1000e610:	d811883a 	mov	r8,sp
1000e614:	28800044 	addi	r2,r5,1
1000e618:	003cce06 	br	1000d954 <__alt_data_end+0xf800d954>
1000e61c:	01440074 	movhi	r5,4097
1000e620:	2949c004 	addi	r5,r5,9984
1000e624:	d9412615 	stw	r5,1176(sp)
1000e628:	d9411b17 	ldw	r5,1132(sp)
1000e62c:	29400044 	addi	r5,r5,1
1000e630:	003cad06 	br	1000d8e8 <__alt_data_end+0xf800d8e8>
1000e634:	00800184 	movi	r2,6
1000e638:	1400012e 	bgeu	r2,r16,1000e640 <___vfiprintf_internal_r+0x1360>
1000e63c:	1021883a 	mov	r16,r2
1000e640:	8029883a 	mov	r20,r16
1000e644:	802b883a 	mov	r21,r16
1000e648:	80001c16 	blt	r16,zero,1000e6bc <___vfiprintf_internal_r+0x13dc>
1000e64c:	00c40074 	movhi	r3,4097
1000e650:	18c96104 	addi	r3,r3,9604
1000e654:	dcc12315 	stw	r19,1164(sp)
1000e658:	d8c12215 	stw	r3,1160(sp)
1000e65c:	003cff06 	br	1000da5c <__alt_data_end+0xf800da5c>
1000e660:	d9411b17 	ldw	r5,1132(sp)
1000e664:	00840074 	movhi	r2,4097
1000e668:	1089c004 	addi	r2,r2,9984
1000e66c:	d8812615 	stw	r2,1176(sp)
1000e670:	29400044 	addi	r5,r5,1
1000e674:	003e6706 	br	1000e014 <__alt_data_end+0xf800e014>
1000e678:	d9012317 	ldw	r4,1164(sp)
1000e67c:	d9412517 	ldw	r5,1172(sp)
1000e680:	20800017 	ldw	r2,0(r4)
1000e684:	21000104 	addi	r4,r4,4
1000e688:	d9012315 	stw	r4,1164(sp)
1000e68c:	11400015 	stw	r5,0(r2)
1000e690:	003b4b06 	br	1000d3c0 <__alt_data_end+0xf800d3c0>
1000e694:	8029883a 	mov	r20,r16
1000e698:	dd811d83 	ldbu	r22,1142(sp)
1000e69c:	dcc12315 	stw	r19,1164(sp)
1000e6a0:	0021883a 	mov	r16,zero
1000e6a4:	003c5f06 	br	1000d824 <__alt_data_end+0xf800d824>
1000e6a8:	01040074 	movhi	r4,4097
1000e6ac:	2109bc04 	addi	r4,r4,9968
1000e6b0:	d9012615 	stw	r4,1176(sp)
1000e6b4:	1009883a 	mov	r4,r2
1000e6b8:	003ea006 	br	1000e13c <__alt_data_end+0xf800e13c>
1000e6bc:	002b883a 	mov	r21,zero
1000e6c0:	003fe206 	br	1000e64c <__alt_data_end+0xf800e64c>
1000e6c4:	d9412317 	ldw	r5,1164(sp)
1000e6c8:	b807883a 	mov	r3,r23
1000e6cc:	102f883a 	mov	r23,r2
1000e6d0:	2c000017 	ldw	r16,0(r5)
1000e6d4:	29000104 	addi	r4,r5,4
1000e6d8:	d9012315 	stw	r4,1164(sp)
1000e6dc:	80000416 	blt	r16,zero,1000e6f0 <___vfiprintf_internal_r+0x1410>
1000e6e0:	19800047 	ldb	r6,1(r3)
1000e6e4:	003b5f06 	br	1000d464 <__alt_data_end+0xf800d464>
1000e6e8:	043fffc4 	movi	r16,-1
1000e6ec:	003bef06 	br	1000d6ac <__alt_data_end+0xf800d6ac>
1000e6f0:	043fffc4 	movi	r16,-1
1000e6f4:	19800047 	ldb	r6,1(r3)
1000e6f8:	003b5a06 	br	1000d464 <__alt_data_end+0xf800d464>
1000e6fc:	282b883a 	mov	r21,r5
1000e700:	003cc706 	br	1000da20 <__alt_data_end+0xf800da20>

1000e704 <__vfiprintf_internal>:
1000e704:	2007883a 	mov	r3,r4
1000e708:	01040074 	movhi	r4,4097
1000e70c:	21107e04 	addi	r4,r4,16888
1000e710:	21000017 	ldw	r4,0(r4)
1000e714:	2805883a 	mov	r2,r5
1000e718:	300f883a 	mov	r7,r6
1000e71c:	180b883a 	mov	r5,r3
1000e720:	100d883a 	mov	r6,r2
1000e724:	000d2e01 	jmpi	1000d2e0 <___vfiprintf_internal_r>

1000e728 <_write_r>:
1000e728:	defffd04 	addi	sp,sp,-12
1000e72c:	dc000015 	stw	r16,0(sp)
1000e730:	04040074 	movhi	r16,4097
1000e734:	dc400115 	stw	r17,4(sp)
1000e738:	84175604 	addi	r16,r16,23896
1000e73c:	2023883a 	mov	r17,r4
1000e740:	2809883a 	mov	r4,r5
1000e744:	300b883a 	mov	r5,r6
1000e748:	380d883a 	mov	r6,r7
1000e74c:	dfc00215 	stw	ra,8(sp)
1000e750:	80000015 	stw	zero,0(r16)
1000e754:	00105080 	call	10010508 <write>
1000e758:	00ffffc4 	movi	r3,-1
1000e75c:	10c00526 	beq	r2,r3,1000e774 <_write_r+0x4c>
1000e760:	dfc00217 	ldw	ra,8(sp)
1000e764:	dc400117 	ldw	r17,4(sp)
1000e768:	dc000017 	ldw	r16,0(sp)
1000e76c:	dec00304 	addi	sp,sp,12
1000e770:	f800283a 	ret
1000e774:	80c00017 	ldw	r3,0(r16)
1000e778:	183ff926 	beq	r3,zero,1000e760 <__alt_data_end+0xf800e760>
1000e77c:	88c00015 	stw	r3,0(r17)
1000e780:	003ff706 	br	1000e760 <__alt_data_end+0xf800e760>

1000e784 <_close_r>:
1000e784:	defffd04 	addi	sp,sp,-12
1000e788:	dc000015 	stw	r16,0(sp)
1000e78c:	04040074 	movhi	r16,4097
1000e790:	dc400115 	stw	r17,4(sp)
1000e794:	84175604 	addi	r16,r16,23896
1000e798:	2023883a 	mov	r17,r4
1000e79c:	2809883a 	mov	r4,r5
1000e7a0:	dfc00215 	stw	ra,8(sp)
1000e7a4:	80000015 	stw	zero,0(r16)
1000e7a8:	000fc640 	call	1000fc64 <close>
1000e7ac:	00ffffc4 	movi	r3,-1
1000e7b0:	10c00526 	beq	r2,r3,1000e7c8 <_close_r+0x44>
1000e7b4:	dfc00217 	ldw	ra,8(sp)
1000e7b8:	dc400117 	ldw	r17,4(sp)
1000e7bc:	dc000017 	ldw	r16,0(sp)
1000e7c0:	dec00304 	addi	sp,sp,12
1000e7c4:	f800283a 	ret
1000e7c8:	80c00017 	ldw	r3,0(r16)
1000e7cc:	183ff926 	beq	r3,zero,1000e7b4 <__alt_data_end+0xf800e7b4>
1000e7d0:	88c00015 	stw	r3,0(r17)
1000e7d4:	003ff706 	br	1000e7b4 <__alt_data_end+0xf800e7b4>

1000e7d8 <_calloc_r>:
1000e7d8:	defffe04 	addi	sp,sp,-8
1000e7dc:	dc000015 	stw	r16,0(sp)
1000e7e0:	2021883a 	mov	r16,r4
1000e7e4:	2809883a 	mov	r4,r5
1000e7e8:	300b883a 	mov	r5,r6
1000e7ec:	dfc00115 	stw	ra,4(sp)
1000e7f0:	00040ec0 	call	100040ec <__mulsi3>
1000e7f4:	8009883a 	mov	r4,r16
1000e7f8:	100b883a 	mov	r5,r2
1000e7fc:	000b3cc0 	call	1000b3cc <_malloc_r>
1000e800:	1021883a 	mov	r16,r2
1000e804:	10002826 	beq	r2,zero,1000e8a8 <_calloc_r+0xd0>
1000e808:	11bfff17 	ldw	r6,-4(r2)
1000e80c:	00bfff04 	movi	r2,-4
1000e810:	00c00904 	movi	r3,36
1000e814:	308c703a 	and	r6,r6,r2
1000e818:	308d883a 	add	r6,r6,r2
1000e81c:	19801436 	bltu	r3,r6,1000e870 <_calloc_r+0x98>
1000e820:	008004c4 	movi	r2,19
1000e824:	11800936 	bltu	r2,r6,1000e84c <_calloc_r+0x74>
1000e828:	8005883a 	mov	r2,r16
1000e82c:	10000015 	stw	zero,0(r2)
1000e830:	10000115 	stw	zero,4(r2)
1000e834:	10000215 	stw	zero,8(r2)
1000e838:	8005883a 	mov	r2,r16
1000e83c:	dfc00117 	ldw	ra,4(sp)
1000e840:	dc000017 	ldw	r16,0(sp)
1000e844:	dec00204 	addi	sp,sp,8
1000e848:	f800283a 	ret
1000e84c:	80000015 	stw	zero,0(r16)
1000e850:	80000115 	stw	zero,4(r16)
1000e854:	008006c4 	movi	r2,27
1000e858:	11800d2e 	bgeu	r2,r6,1000e890 <_calloc_r+0xb8>
1000e85c:	80000215 	stw	zero,8(r16)
1000e860:	80000315 	stw	zero,12(r16)
1000e864:	30c00c26 	beq	r6,r3,1000e898 <_calloc_r+0xc0>
1000e868:	80800404 	addi	r2,r16,16
1000e86c:	003fef06 	br	1000e82c <__alt_data_end+0xf800e82c>
1000e870:	8009883a 	mov	r4,r16
1000e874:	000b883a 	mov	r5,zero
1000e878:	000bd940 	call	1000bd94 <memset>
1000e87c:	8005883a 	mov	r2,r16
1000e880:	dfc00117 	ldw	ra,4(sp)
1000e884:	dc000017 	ldw	r16,0(sp)
1000e888:	dec00204 	addi	sp,sp,8
1000e88c:	f800283a 	ret
1000e890:	80800204 	addi	r2,r16,8
1000e894:	003fe506 	br	1000e82c <__alt_data_end+0xf800e82c>
1000e898:	80000415 	stw	zero,16(r16)
1000e89c:	80800604 	addi	r2,r16,24
1000e8a0:	80000515 	stw	zero,20(r16)
1000e8a4:	003fe106 	br	1000e82c <__alt_data_end+0xf800e82c>
1000e8a8:	0005883a 	mov	r2,zero
1000e8ac:	003fe306 	br	1000e83c <__alt_data_end+0xf800e83c>

1000e8b0 <_fclose_r>:
1000e8b0:	28003226 	beq	r5,zero,1000e97c <_fclose_r+0xcc>
1000e8b4:	defffc04 	addi	sp,sp,-16
1000e8b8:	dc400115 	stw	r17,4(sp)
1000e8bc:	2023883a 	mov	r17,r4
1000e8c0:	dc000015 	stw	r16,0(sp)
1000e8c4:	dfc00315 	stw	ra,12(sp)
1000e8c8:	dc800215 	stw	r18,8(sp)
1000e8cc:	2821883a 	mov	r16,r5
1000e8d0:	000ab700 	call	1000ab70 <__sfp_lock_acquire>
1000e8d4:	88000226 	beq	r17,zero,1000e8e0 <_fclose_r+0x30>
1000e8d8:	88800e17 	ldw	r2,56(r17)
1000e8dc:	10002926 	beq	r2,zero,1000e984 <_fclose_r+0xd4>
1000e8e0:	8080030f 	ldh	r2,12(r16)
1000e8e4:	10002226 	beq	r2,zero,1000e970 <_fclose_r+0xc0>
1000e8e8:	8809883a 	mov	r4,r17
1000e8ec:	800b883a 	mov	r5,r16
1000e8f0:	000a5a40 	call	1000a5a4 <_fflush_r>
1000e8f4:	1025883a 	mov	r18,r2
1000e8f8:	80800b17 	ldw	r2,44(r16)
1000e8fc:	10000426 	beq	r2,zero,1000e910 <_fclose_r+0x60>
1000e900:	81400717 	ldw	r5,28(r16)
1000e904:	8809883a 	mov	r4,r17
1000e908:	103ee83a 	callr	r2
1000e90c:	10002616 	blt	r2,zero,1000e9a8 <_fclose_r+0xf8>
1000e910:	8080030b 	ldhu	r2,12(r16)
1000e914:	1080200c 	andi	r2,r2,128
1000e918:	10001f1e 	bne	r2,zero,1000e998 <_fclose_r+0xe8>
1000e91c:	81400c17 	ldw	r5,48(r16)
1000e920:	28000526 	beq	r5,zero,1000e938 <_fclose_r+0x88>
1000e924:	80801004 	addi	r2,r16,64
1000e928:	28800226 	beq	r5,r2,1000e934 <_fclose_r+0x84>
1000e92c:	8809883a 	mov	r4,r17
1000e930:	000acd40 	call	1000acd4 <_free_r>
1000e934:	80000c15 	stw	zero,48(r16)
1000e938:	81401117 	ldw	r5,68(r16)
1000e93c:	28000326 	beq	r5,zero,1000e94c <_fclose_r+0x9c>
1000e940:	8809883a 	mov	r4,r17
1000e944:	000acd40 	call	1000acd4 <_free_r>
1000e948:	80001115 	stw	zero,68(r16)
1000e94c:	8000030d 	sth	zero,12(r16)
1000e950:	000ab740 	call	1000ab74 <__sfp_lock_release>
1000e954:	9005883a 	mov	r2,r18
1000e958:	dfc00317 	ldw	ra,12(sp)
1000e95c:	dc800217 	ldw	r18,8(sp)
1000e960:	dc400117 	ldw	r17,4(sp)
1000e964:	dc000017 	ldw	r16,0(sp)
1000e968:	dec00404 	addi	sp,sp,16
1000e96c:	f800283a 	ret
1000e970:	000ab740 	call	1000ab74 <__sfp_lock_release>
1000e974:	0005883a 	mov	r2,zero
1000e978:	003ff706 	br	1000e958 <__alt_data_end+0xf800e958>
1000e97c:	0005883a 	mov	r2,zero
1000e980:	f800283a 	ret
1000e984:	8809883a 	mov	r4,r17
1000e988:	000ab600 	call	1000ab60 <__sinit>
1000e98c:	8080030f 	ldh	r2,12(r16)
1000e990:	103fd51e 	bne	r2,zero,1000e8e8 <__alt_data_end+0xf800e8e8>
1000e994:	003ff606 	br	1000e970 <__alt_data_end+0xf800e970>
1000e998:	81400417 	ldw	r5,16(r16)
1000e99c:	8809883a 	mov	r4,r17
1000e9a0:	000acd40 	call	1000acd4 <_free_r>
1000e9a4:	003fdd06 	br	1000e91c <__alt_data_end+0xf800e91c>
1000e9a8:	04bfffc4 	movi	r18,-1
1000e9ac:	003fd806 	br	1000e910 <__alt_data_end+0xf800e910>

1000e9b0 <fclose>:
1000e9b0:	00840074 	movhi	r2,4097
1000e9b4:	10907e04 	addi	r2,r2,16888
1000e9b8:	200b883a 	mov	r5,r4
1000e9bc:	11000017 	ldw	r4,0(r2)
1000e9c0:	000e8b01 	jmpi	1000e8b0 <_fclose_r>

1000e9c4 <_fputwc_r>:
1000e9c4:	3080030b 	ldhu	r2,12(r6)
1000e9c8:	defff804 	addi	sp,sp,-32
1000e9cc:	dcc00415 	stw	r19,16(sp)
1000e9d0:	dc800315 	stw	r18,12(sp)
1000e9d4:	dc000115 	stw	r16,4(sp)
1000e9d8:	dfc00715 	stw	ra,28(sp)
1000e9dc:	dd400615 	stw	r21,24(sp)
1000e9e0:	dd000515 	stw	r20,20(sp)
1000e9e4:	dc400215 	stw	r17,8(sp)
1000e9e8:	10c8000c 	andi	r3,r2,8192
1000e9ec:	3021883a 	mov	r16,r6
1000e9f0:	2027883a 	mov	r19,r4
1000e9f4:	2825883a 	mov	r18,r5
1000e9f8:	1800051e 	bne	r3,zero,1000ea10 <_fputwc_r+0x4c>
1000e9fc:	30c01917 	ldw	r3,100(r6)
1000ea00:	10880014 	ori	r2,r2,8192
1000ea04:	3080030d 	sth	r2,12(r6)
1000ea08:	18880014 	ori	r2,r3,8192
1000ea0c:	30801915 	stw	r2,100(r6)
1000ea10:	000b1bc0 	call	1000b1bc <__locale_mb_cur_max>
1000ea14:	00c00044 	movi	r3,1
1000ea18:	10c03e26 	beq	r2,r3,1000eb14 <_fputwc_r+0x150>
1000ea1c:	9809883a 	mov	r4,r19
1000ea20:	d80b883a 	mov	r5,sp
1000ea24:	900d883a 	mov	r6,r18
1000ea28:	81c01704 	addi	r7,r16,92
1000ea2c:	000fa140 	call	1000fa14 <_wcrtomb_r>
1000ea30:	1029883a 	mov	r20,r2
1000ea34:	00bfffc4 	movi	r2,-1
1000ea38:	a0802026 	beq	r20,r2,1000eabc <_fputwc_r+0xf8>
1000ea3c:	d9400003 	ldbu	r5,0(sp)
1000ea40:	a0001c26 	beq	r20,zero,1000eab4 <_fputwc_r+0xf0>
1000ea44:	0023883a 	mov	r17,zero
1000ea48:	05400284 	movi	r21,10
1000ea4c:	00000906 	br	1000ea74 <_fputwc_r+0xb0>
1000ea50:	80800017 	ldw	r2,0(r16)
1000ea54:	11400005 	stb	r5,0(r2)
1000ea58:	80c00017 	ldw	r3,0(r16)
1000ea5c:	18c00044 	addi	r3,r3,1
1000ea60:	80c00015 	stw	r3,0(r16)
1000ea64:	8c400044 	addi	r17,r17,1
1000ea68:	dc45883a 	add	r2,sp,r17
1000ea6c:	8d00112e 	bgeu	r17,r20,1000eab4 <_fputwc_r+0xf0>
1000ea70:	11400003 	ldbu	r5,0(r2)
1000ea74:	80c00217 	ldw	r3,8(r16)
1000ea78:	18ffffc4 	addi	r3,r3,-1
1000ea7c:	80c00215 	stw	r3,8(r16)
1000ea80:	183ff30e 	bge	r3,zero,1000ea50 <__alt_data_end+0xf800ea50>
1000ea84:	80800617 	ldw	r2,24(r16)
1000ea88:	18801916 	blt	r3,r2,1000eaf0 <_fputwc_r+0x12c>
1000ea8c:	80800017 	ldw	r2,0(r16)
1000ea90:	11400005 	stb	r5,0(r2)
1000ea94:	80800017 	ldw	r2,0(r16)
1000ea98:	10c00003 	ldbu	r3,0(r2)
1000ea9c:	10800044 	addi	r2,r2,1
1000eaa0:	1d402326 	beq	r3,r21,1000eb30 <_fputwc_r+0x16c>
1000eaa4:	80800015 	stw	r2,0(r16)
1000eaa8:	8c400044 	addi	r17,r17,1
1000eaac:	dc45883a 	add	r2,sp,r17
1000eab0:	8d3fef36 	bltu	r17,r20,1000ea70 <__alt_data_end+0xf800ea70>
1000eab4:	9005883a 	mov	r2,r18
1000eab8:	00000406 	br	1000eacc <_fputwc_r+0x108>
1000eabc:	80c0030b 	ldhu	r3,12(r16)
1000eac0:	a005883a 	mov	r2,r20
1000eac4:	18c01014 	ori	r3,r3,64
1000eac8:	80c0030d 	sth	r3,12(r16)
1000eacc:	dfc00717 	ldw	ra,28(sp)
1000ead0:	dd400617 	ldw	r21,24(sp)
1000ead4:	dd000517 	ldw	r20,20(sp)
1000ead8:	dcc00417 	ldw	r19,16(sp)
1000eadc:	dc800317 	ldw	r18,12(sp)
1000eae0:	dc400217 	ldw	r17,8(sp)
1000eae4:	dc000117 	ldw	r16,4(sp)
1000eae8:	dec00804 	addi	sp,sp,32
1000eaec:	f800283a 	ret
1000eaf0:	9809883a 	mov	r4,r19
1000eaf4:	29403fcc 	andi	r5,r5,255
1000eaf8:	800d883a 	mov	r6,r16
1000eafc:	000f8a40 	call	1000f8a4 <__swbuf_r>
1000eb00:	10bfffe0 	cmpeqi	r2,r2,-1
1000eb04:	10803fcc 	andi	r2,r2,255
1000eb08:	103fd626 	beq	r2,zero,1000ea64 <__alt_data_end+0xf800ea64>
1000eb0c:	00bfffc4 	movi	r2,-1
1000eb10:	003fee06 	br	1000eacc <__alt_data_end+0xf800eacc>
1000eb14:	90ffffc4 	addi	r3,r18,-1
1000eb18:	01003f84 	movi	r4,254
1000eb1c:	20ffbf36 	bltu	r4,r3,1000ea1c <__alt_data_end+0xf800ea1c>
1000eb20:	900b883a 	mov	r5,r18
1000eb24:	dc800005 	stb	r18,0(sp)
1000eb28:	1029883a 	mov	r20,r2
1000eb2c:	003fc506 	br	1000ea44 <__alt_data_end+0xf800ea44>
1000eb30:	9809883a 	mov	r4,r19
1000eb34:	a80b883a 	mov	r5,r21
1000eb38:	800d883a 	mov	r6,r16
1000eb3c:	000f8a40 	call	1000f8a4 <__swbuf_r>
1000eb40:	10bfffe0 	cmpeqi	r2,r2,-1
1000eb44:	003fef06 	br	1000eb04 <__alt_data_end+0xf800eb04>

1000eb48 <fputwc>:
1000eb48:	defffc04 	addi	sp,sp,-16
1000eb4c:	dc000115 	stw	r16,4(sp)
1000eb50:	04040074 	movhi	r16,4097
1000eb54:	84107e04 	addi	r16,r16,16888
1000eb58:	dc400215 	stw	r17,8(sp)
1000eb5c:	2023883a 	mov	r17,r4
1000eb60:	81000017 	ldw	r4,0(r16)
1000eb64:	dfc00315 	stw	ra,12(sp)
1000eb68:	280d883a 	mov	r6,r5
1000eb6c:	20000626 	beq	r4,zero,1000eb88 <fputwc+0x40>
1000eb70:	20800e17 	ldw	r2,56(r4)
1000eb74:	1000041e 	bne	r2,zero,1000eb88 <fputwc+0x40>
1000eb78:	d9400015 	stw	r5,0(sp)
1000eb7c:	000ab600 	call	1000ab60 <__sinit>
1000eb80:	81000017 	ldw	r4,0(r16)
1000eb84:	d9800017 	ldw	r6,0(sp)
1000eb88:	880b883a 	mov	r5,r17
1000eb8c:	dfc00317 	ldw	ra,12(sp)
1000eb90:	dc400217 	ldw	r17,8(sp)
1000eb94:	dc000117 	ldw	r16,4(sp)
1000eb98:	dec00404 	addi	sp,sp,16
1000eb9c:	000e9c41 	jmpi	1000e9c4 <_fputwc_r>

1000eba0 <_fstat_r>:
1000eba0:	defffd04 	addi	sp,sp,-12
1000eba4:	dc000015 	stw	r16,0(sp)
1000eba8:	04040074 	movhi	r16,4097
1000ebac:	dc400115 	stw	r17,4(sp)
1000ebb0:	84175604 	addi	r16,r16,23896
1000ebb4:	2023883a 	mov	r17,r4
1000ebb8:	2809883a 	mov	r4,r5
1000ebbc:	300b883a 	mov	r5,r6
1000ebc0:	dfc00215 	stw	ra,8(sp)
1000ebc4:	80000015 	stw	zero,0(r16)
1000ebc8:	000fdb80 	call	1000fdb8 <fstat>
1000ebcc:	00ffffc4 	movi	r3,-1
1000ebd0:	10c00526 	beq	r2,r3,1000ebe8 <_fstat_r+0x48>
1000ebd4:	dfc00217 	ldw	ra,8(sp)
1000ebd8:	dc400117 	ldw	r17,4(sp)
1000ebdc:	dc000017 	ldw	r16,0(sp)
1000ebe0:	dec00304 	addi	sp,sp,12
1000ebe4:	f800283a 	ret
1000ebe8:	80c00017 	ldw	r3,0(r16)
1000ebec:	183ff926 	beq	r3,zero,1000ebd4 <__alt_data_end+0xf800ebd4>
1000ebf0:	88c00015 	stw	r3,0(r17)
1000ebf4:	003ff706 	br	1000ebd4 <__alt_data_end+0xf800ebd4>

1000ebf8 <__sfvwrite_r>:
1000ebf8:	30800217 	ldw	r2,8(r6)
1000ebfc:	10004526 	beq	r2,zero,1000ed14 <__sfvwrite_r+0x11c>
1000ec00:	28c0030b 	ldhu	r3,12(r5)
1000ec04:	defff404 	addi	sp,sp,-48
1000ec08:	dd400715 	stw	r21,28(sp)
1000ec0c:	dcc00515 	stw	r19,20(sp)
1000ec10:	dc000215 	stw	r16,8(sp)
1000ec14:	dfc00b15 	stw	ra,44(sp)
1000ec18:	df000a15 	stw	fp,40(sp)
1000ec1c:	ddc00915 	stw	r23,36(sp)
1000ec20:	dd800815 	stw	r22,32(sp)
1000ec24:	dd000615 	stw	r20,24(sp)
1000ec28:	dc800415 	stw	r18,16(sp)
1000ec2c:	dc400315 	stw	r17,12(sp)
1000ec30:	1880020c 	andi	r2,r3,8
1000ec34:	2821883a 	mov	r16,r5
1000ec38:	202b883a 	mov	r21,r4
1000ec3c:	3027883a 	mov	r19,r6
1000ec40:	10002526 	beq	r2,zero,1000ecd8 <__sfvwrite_r+0xe0>
1000ec44:	28800417 	ldw	r2,16(r5)
1000ec48:	10002326 	beq	r2,zero,1000ecd8 <__sfvwrite_r+0xe0>
1000ec4c:	1880008c 	andi	r2,r3,2
1000ec50:	9c400017 	ldw	r17,0(r19)
1000ec54:	10003126 	beq	r2,zero,1000ed1c <__sfvwrite_r+0x124>
1000ec58:	0029883a 	mov	r20,zero
1000ec5c:	0025883a 	mov	r18,zero
1000ec60:	05810004 	movi	r22,1024
1000ec64:	a00d883a 	mov	r6,r20
1000ec68:	a809883a 	mov	r4,r21
1000ec6c:	90002526 	beq	r18,zero,1000ed04 <__sfvwrite_r+0x10c>
1000ec70:	900f883a 	mov	r7,r18
1000ec74:	81400717 	ldw	r5,28(r16)
1000ec78:	b480012e 	bgeu	r22,r18,1000ec80 <__sfvwrite_r+0x88>
1000ec7c:	01c10004 	movi	r7,1024
1000ec80:	80800917 	ldw	r2,36(r16)
1000ec84:	103ee83a 	callr	r2
1000ec88:	0080510e 	bge	zero,r2,1000edd0 <__sfvwrite_r+0x1d8>
1000ec8c:	98c00217 	ldw	r3,8(r19)
1000ec90:	a0a9883a 	add	r20,r20,r2
1000ec94:	90a5c83a 	sub	r18,r18,r2
1000ec98:	1885c83a 	sub	r2,r3,r2
1000ec9c:	98800215 	stw	r2,8(r19)
1000eca0:	103ff01e 	bne	r2,zero,1000ec64 <__alt_data_end+0xf800ec64>
1000eca4:	0005883a 	mov	r2,zero
1000eca8:	dfc00b17 	ldw	ra,44(sp)
1000ecac:	df000a17 	ldw	fp,40(sp)
1000ecb0:	ddc00917 	ldw	r23,36(sp)
1000ecb4:	dd800817 	ldw	r22,32(sp)
1000ecb8:	dd400717 	ldw	r21,28(sp)
1000ecbc:	dd000617 	ldw	r20,24(sp)
1000ecc0:	dcc00517 	ldw	r19,20(sp)
1000ecc4:	dc800417 	ldw	r18,16(sp)
1000ecc8:	dc400317 	ldw	r17,12(sp)
1000eccc:	dc000217 	ldw	r16,8(sp)
1000ecd0:	dec00c04 	addi	sp,sp,48
1000ecd4:	f800283a 	ret
1000ecd8:	a809883a 	mov	r4,r21
1000ecdc:	800b883a 	mov	r5,r16
1000ece0:	0008b240 	call	10008b24 <__swsetup_r>
1000ece4:	80c0030b 	ldhu	r3,12(r16)
1000ece8:	103fd826 	beq	r2,zero,1000ec4c <__alt_data_end+0xf800ec4c>
1000ecec:	18c01014 	ori	r3,r3,64
1000ecf0:	80c0030d 	sth	r3,12(r16)
1000ecf4:	00c00244 	movi	r3,9
1000ecf8:	00bfffc4 	movi	r2,-1
1000ecfc:	a8c00015 	stw	r3,0(r21)
1000ed00:	003fe906 	br	1000eca8 <__alt_data_end+0xf800eca8>
1000ed04:	8d000017 	ldw	r20,0(r17)
1000ed08:	8c800117 	ldw	r18,4(r17)
1000ed0c:	8c400204 	addi	r17,r17,8
1000ed10:	003fd406 	br	1000ec64 <__alt_data_end+0xf800ec64>
1000ed14:	0005883a 	mov	r2,zero
1000ed18:	f800283a 	ret
1000ed1c:	1880004c 	andi	r2,r3,1
1000ed20:	1000301e 	bne	r2,zero,1000ede4 <__sfvwrite_r+0x1ec>
1000ed24:	002f883a 	mov	r23,zero
1000ed28:	0025883a 	mov	r18,zero
1000ed2c:	90001c26 	beq	r18,zero,1000eda0 <__sfvwrite_r+0x1a8>
1000ed30:	1880800c 	andi	r2,r3,512
1000ed34:	85000217 	ldw	r20,8(r16)
1000ed38:	10006c26 	beq	r2,zero,1000eeec <__sfvwrite_r+0x2f4>
1000ed3c:	a02d883a 	mov	r22,r20
1000ed40:	95008536 	bltu	r18,r20,1000ef58 <__sfvwrite_r+0x360>
1000ed44:	1881200c 	andi	r2,r3,1152
1000ed48:	10009d1e 	bne	r2,zero,1000efc0 <__sfvwrite_r+0x3c8>
1000ed4c:	81000017 	ldw	r4,0(r16)
1000ed50:	a039883a 	mov	fp,r20
1000ed54:	9029883a 	mov	r20,r18
1000ed58:	b80b883a 	mov	r5,r23
1000ed5c:	b00d883a 	mov	r6,r22
1000ed60:	000f14c0 	call	1000f14c <memmove>
1000ed64:	80c00217 	ldw	r3,8(r16)
1000ed68:	81000017 	ldw	r4,0(r16)
1000ed6c:	9005883a 	mov	r2,r18
1000ed70:	1f39c83a 	sub	fp,r3,fp
1000ed74:	258f883a 	add	r7,r4,r22
1000ed78:	87000215 	stw	fp,8(r16)
1000ed7c:	81c00015 	stw	r7,0(r16)
1000ed80:	98c00217 	ldw	r3,8(r19)
1000ed84:	b8af883a 	add	r23,r23,r2
1000ed88:	90a5c83a 	sub	r18,r18,r2
1000ed8c:	1d05c83a 	sub	r2,r3,r20
1000ed90:	98800215 	stw	r2,8(r19)
1000ed94:	103fc326 	beq	r2,zero,1000eca4 <__alt_data_end+0xf800eca4>
1000ed98:	80c0030b 	ldhu	r3,12(r16)
1000ed9c:	903fe41e 	bne	r18,zero,1000ed30 <__alt_data_end+0xf800ed30>
1000eda0:	8dc00017 	ldw	r23,0(r17)
1000eda4:	8c800117 	ldw	r18,4(r17)
1000eda8:	8c400204 	addi	r17,r17,8
1000edac:	003fdf06 	br	1000ed2c <__alt_data_end+0xf800ed2c>
1000edb0:	000f3040 	call	1000f304 <_realloc_r>
1000edb4:	102d883a 	mov	r22,r2
1000edb8:	1000a01e 	bne	r2,zero,1000f03c <__sfvwrite_r+0x444>
1000edbc:	81400417 	ldw	r5,16(r16)
1000edc0:	a809883a 	mov	r4,r21
1000edc4:	000acd40 	call	1000acd4 <_free_r>
1000edc8:	00800304 	movi	r2,12
1000edcc:	a8800015 	stw	r2,0(r21)
1000edd0:	80c0030b 	ldhu	r3,12(r16)
1000edd4:	00bfffc4 	movi	r2,-1
1000edd8:	18c01014 	ori	r3,r3,64
1000eddc:	80c0030d 	sth	r3,12(r16)
1000ede0:	003fb106 	br	1000eca8 <__alt_data_end+0xf800eca8>
1000ede4:	0029883a 	mov	r20,zero
1000ede8:	0011883a 	mov	r8,zero
1000edec:	0039883a 	mov	fp,zero
1000edf0:	0025883a 	mov	r18,zero
1000edf4:	90001f26 	beq	r18,zero,1000ee74 <__sfvwrite_r+0x27c>
1000edf8:	40006826 	beq	r8,zero,1000ef9c <__sfvwrite_r+0x3a4>
1000edfc:	a02f883a 	mov	r23,r20
1000ee00:	9500012e 	bgeu	r18,r20,1000ee08 <__sfvwrite_r+0x210>
1000ee04:	902f883a 	mov	r23,r18
1000ee08:	81000017 	ldw	r4,0(r16)
1000ee0c:	80800417 	ldw	r2,16(r16)
1000ee10:	b82d883a 	mov	r22,r23
1000ee14:	81800217 	ldw	r6,8(r16)
1000ee18:	81c00517 	ldw	r7,20(r16)
1000ee1c:	1100022e 	bgeu	r2,r4,1000ee28 <__sfvwrite_r+0x230>
1000ee20:	31c7883a 	add	r3,r6,r7
1000ee24:	1dc01816 	blt	r3,r23,1000ee88 <__sfvwrite_r+0x290>
1000ee28:	b9c03f16 	blt	r23,r7,1000ef28 <__sfvwrite_r+0x330>
1000ee2c:	80800917 	ldw	r2,36(r16)
1000ee30:	81400717 	ldw	r5,28(r16)
1000ee34:	a809883a 	mov	r4,r21
1000ee38:	da000115 	stw	r8,4(sp)
1000ee3c:	e00d883a 	mov	r6,fp
1000ee40:	103ee83a 	callr	r2
1000ee44:	102d883a 	mov	r22,r2
1000ee48:	da000117 	ldw	r8,4(sp)
1000ee4c:	00bfe00e 	bge	zero,r2,1000edd0 <__alt_data_end+0xf800edd0>
1000ee50:	a5a9c83a 	sub	r20,r20,r22
1000ee54:	a0001f26 	beq	r20,zero,1000eed4 <__sfvwrite_r+0x2dc>
1000ee58:	98800217 	ldw	r2,8(r19)
1000ee5c:	e5b9883a 	add	fp,fp,r22
1000ee60:	95a5c83a 	sub	r18,r18,r22
1000ee64:	15adc83a 	sub	r22,r2,r22
1000ee68:	9d800215 	stw	r22,8(r19)
1000ee6c:	b03f8d26 	beq	r22,zero,1000eca4 <__alt_data_end+0xf800eca4>
1000ee70:	903fe11e 	bne	r18,zero,1000edf8 <__alt_data_end+0xf800edf8>
1000ee74:	8f000017 	ldw	fp,0(r17)
1000ee78:	8c800117 	ldw	r18,4(r17)
1000ee7c:	0011883a 	mov	r8,zero
1000ee80:	8c400204 	addi	r17,r17,8
1000ee84:	003fdb06 	br	1000edf4 <__alt_data_end+0xf800edf4>
1000ee88:	180d883a 	mov	r6,r3
1000ee8c:	e00b883a 	mov	r5,fp
1000ee90:	da000115 	stw	r8,4(sp)
1000ee94:	d8c00015 	stw	r3,0(sp)
1000ee98:	000f14c0 	call	1000f14c <memmove>
1000ee9c:	d8c00017 	ldw	r3,0(sp)
1000eea0:	80800017 	ldw	r2,0(r16)
1000eea4:	a809883a 	mov	r4,r21
1000eea8:	800b883a 	mov	r5,r16
1000eeac:	10c5883a 	add	r2,r2,r3
1000eeb0:	80800015 	stw	r2,0(r16)
1000eeb4:	d8c00015 	stw	r3,0(sp)
1000eeb8:	000a5a40 	call	1000a5a4 <_fflush_r>
1000eebc:	d8c00017 	ldw	r3,0(sp)
1000eec0:	da000117 	ldw	r8,4(sp)
1000eec4:	103fc21e 	bne	r2,zero,1000edd0 <__alt_data_end+0xf800edd0>
1000eec8:	182d883a 	mov	r22,r3
1000eecc:	a5a9c83a 	sub	r20,r20,r22
1000eed0:	a03fe11e 	bne	r20,zero,1000ee58 <__alt_data_end+0xf800ee58>
1000eed4:	a809883a 	mov	r4,r21
1000eed8:	800b883a 	mov	r5,r16
1000eedc:	000a5a40 	call	1000a5a4 <_fflush_r>
1000eee0:	103fbb1e 	bne	r2,zero,1000edd0 <__alt_data_end+0xf800edd0>
1000eee4:	0011883a 	mov	r8,zero
1000eee8:	003fdb06 	br	1000ee58 <__alt_data_end+0xf800ee58>
1000eeec:	81000017 	ldw	r4,0(r16)
1000eef0:	80800417 	ldw	r2,16(r16)
1000eef4:	1100012e 	bgeu	r2,r4,1000eefc <__sfvwrite_r+0x304>
1000eef8:	a4805a36 	bltu	r20,r18,1000f064 <__sfvwrite_r+0x46c>
1000eefc:	81c00517 	ldw	r7,20(r16)
1000ef00:	91c01a36 	bltu	r18,r7,1000ef6c <__sfvwrite_r+0x374>
1000ef04:	80800917 	ldw	r2,36(r16)
1000ef08:	81400717 	ldw	r5,28(r16)
1000ef0c:	a809883a 	mov	r4,r21
1000ef10:	b80d883a 	mov	r6,r23
1000ef14:	103ee83a 	callr	r2
1000ef18:	1029883a 	mov	r20,r2
1000ef1c:	00bfac0e 	bge	zero,r2,1000edd0 <__alt_data_end+0xf800edd0>
1000ef20:	a005883a 	mov	r2,r20
1000ef24:	003f9606 	br	1000ed80 <__alt_data_end+0xf800ed80>
1000ef28:	b80d883a 	mov	r6,r23
1000ef2c:	e00b883a 	mov	r5,fp
1000ef30:	da000115 	stw	r8,4(sp)
1000ef34:	000f14c0 	call	1000f14c <memmove>
1000ef38:	80800217 	ldw	r2,8(r16)
1000ef3c:	80c00017 	ldw	r3,0(r16)
1000ef40:	da000117 	ldw	r8,4(sp)
1000ef44:	15c5c83a 	sub	r2,r2,r23
1000ef48:	1def883a 	add	r23,r3,r23
1000ef4c:	80800215 	stw	r2,8(r16)
1000ef50:	85c00015 	stw	r23,0(r16)
1000ef54:	003fbe06 	br	1000ee50 <__alt_data_end+0xf800ee50>
1000ef58:	81000017 	ldw	r4,0(r16)
1000ef5c:	9039883a 	mov	fp,r18
1000ef60:	9029883a 	mov	r20,r18
1000ef64:	902d883a 	mov	r22,r18
1000ef68:	003f7b06 	br	1000ed58 <__alt_data_end+0xf800ed58>
1000ef6c:	b80b883a 	mov	r5,r23
1000ef70:	900d883a 	mov	r6,r18
1000ef74:	000f14c0 	call	1000f14c <memmove>
1000ef78:	80c00217 	ldw	r3,8(r16)
1000ef7c:	80800017 	ldw	r2,0(r16)
1000ef80:	9029883a 	mov	r20,r18
1000ef84:	1c87c83a 	sub	r3,r3,r18
1000ef88:	1485883a 	add	r2,r2,r18
1000ef8c:	80800015 	stw	r2,0(r16)
1000ef90:	80c00215 	stw	r3,8(r16)
1000ef94:	9005883a 	mov	r2,r18
1000ef98:	003f7906 	br	1000ed80 <__alt_data_end+0xf800ed80>
1000ef9c:	e009883a 	mov	r4,fp
1000efa0:	01400284 	movi	r5,10
1000efa4:	900d883a 	mov	r6,r18
1000efa8:	000bb740 	call	1000bb74 <memchr>
1000efac:	10003826 	beq	r2,zero,1000f090 <__sfvwrite_r+0x498>
1000efb0:	10800044 	addi	r2,r2,1
1000efb4:	1729c83a 	sub	r20,r2,fp
1000efb8:	02000044 	movi	r8,1
1000efbc:	003f8f06 	br	1000edfc <__alt_data_end+0xf800edfc>
1000efc0:	80800517 	ldw	r2,20(r16)
1000efc4:	81400417 	ldw	r5,16(r16)
1000efc8:	87000017 	ldw	fp,0(r16)
1000efcc:	10a9883a 	add	r20,r2,r2
1000efd0:	a085883a 	add	r2,r20,r2
1000efd4:	1028d7fa 	srli	r20,r2,31
1000efd8:	e179c83a 	sub	fp,fp,r5
1000efdc:	e1000044 	addi	r4,fp,1
1000efe0:	a085883a 	add	r2,r20,r2
1000efe4:	1029d07a 	srai	r20,r2,1
1000efe8:	2485883a 	add	r2,r4,r18
1000efec:	a00d883a 	mov	r6,r20
1000eff0:	a080022e 	bgeu	r20,r2,1000effc <__sfvwrite_r+0x404>
1000eff4:	1029883a 	mov	r20,r2
1000eff8:	100d883a 	mov	r6,r2
1000effc:	18c1000c 	andi	r3,r3,1024
1000f000:	a809883a 	mov	r4,r21
1000f004:	183f6a26 	beq	r3,zero,1000edb0 <__alt_data_end+0xf800edb0>
1000f008:	300b883a 	mov	r5,r6
1000f00c:	000b3cc0 	call	1000b3cc <_malloc_r>
1000f010:	102d883a 	mov	r22,r2
1000f014:	103f6c26 	beq	r2,zero,1000edc8 <__alt_data_end+0xf800edc8>
1000f018:	81400417 	ldw	r5,16(r16)
1000f01c:	1009883a 	mov	r4,r2
1000f020:	e00d883a 	mov	r6,fp
1000f024:	000bc5c0 	call	1000bc5c <memcpy>
1000f028:	8080030b 	ldhu	r2,12(r16)
1000f02c:	00fedfc4 	movi	r3,-1153
1000f030:	10c4703a 	and	r2,r2,r3
1000f034:	10802014 	ori	r2,r2,128
1000f038:	8080030d 	sth	r2,12(r16)
1000f03c:	b709883a 	add	r4,r22,fp
1000f040:	a707c83a 	sub	r3,r20,fp
1000f044:	85800415 	stw	r22,16(r16)
1000f048:	85000515 	stw	r20,20(r16)
1000f04c:	81000015 	stw	r4,0(r16)
1000f050:	9039883a 	mov	fp,r18
1000f054:	80c00215 	stw	r3,8(r16)
1000f058:	9029883a 	mov	r20,r18
1000f05c:	902d883a 	mov	r22,r18
1000f060:	003f3d06 	br	1000ed58 <__alt_data_end+0xf800ed58>
1000f064:	b80b883a 	mov	r5,r23
1000f068:	a00d883a 	mov	r6,r20
1000f06c:	000f14c0 	call	1000f14c <memmove>
1000f070:	80800017 	ldw	r2,0(r16)
1000f074:	a809883a 	mov	r4,r21
1000f078:	800b883a 	mov	r5,r16
1000f07c:	1505883a 	add	r2,r2,r20
1000f080:	80800015 	stw	r2,0(r16)
1000f084:	000a5a40 	call	1000a5a4 <_fflush_r>
1000f088:	103fa526 	beq	r2,zero,1000ef20 <__alt_data_end+0xf800ef20>
1000f08c:	003f5006 	br	1000edd0 <__alt_data_end+0xf800edd0>
1000f090:	95000044 	addi	r20,r18,1
1000f094:	02000044 	movi	r8,1
1000f098:	003f5806 	br	1000edfc <__alt_data_end+0xf800edfc>

1000f09c <_isatty_r>:
1000f09c:	defffd04 	addi	sp,sp,-12
1000f0a0:	dc000015 	stw	r16,0(sp)
1000f0a4:	04040074 	movhi	r16,4097
1000f0a8:	dc400115 	stw	r17,4(sp)
1000f0ac:	84175604 	addi	r16,r16,23896
1000f0b0:	2023883a 	mov	r17,r4
1000f0b4:	2809883a 	mov	r4,r5
1000f0b8:	dfc00215 	stw	ra,8(sp)
1000f0bc:	80000015 	stw	zero,0(r16)
1000f0c0:	000fec00 	call	1000fec0 <isatty>
1000f0c4:	00ffffc4 	movi	r3,-1
1000f0c8:	10c00526 	beq	r2,r3,1000f0e0 <_isatty_r+0x44>
1000f0cc:	dfc00217 	ldw	ra,8(sp)
1000f0d0:	dc400117 	ldw	r17,4(sp)
1000f0d4:	dc000017 	ldw	r16,0(sp)
1000f0d8:	dec00304 	addi	sp,sp,12
1000f0dc:	f800283a 	ret
1000f0e0:	80c00017 	ldw	r3,0(r16)
1000f0e4:	183ff926 	beq	r3,zero,1000f0cc <__alt_data_end+0xf800f0cc>
1000f0e8:	88c00015 	stw	r3,0(r17)
1000f0ec:	003ff706 	br	1000f0cc <__alt_data_end+0xf800f0cc>

1000f0f0 <_lseek_r>:
1000f0f0:	defffd04 	addi	sp,sp,-12
1000f0f4:	dc000015 	stw	r16,0(sp)
1000f0f8:	04040074 	movhi	r16,4097
1000f0fc:	dc400115 	stw	r17,4(sp)
1000f100:	84175604 	addi	r16,r16,23896
1000f104:	2023883a 	mov	r17,r4
1000f108:	2809883a 	mov	r4,r5
1000f10c:	300b883a 	mov	r5,r6
1000f110:	380d883a 	mov	r6,r7
1000f114:	dfc00215 	stw	ra,8(sp)
1000f118:	80000015 	stw	zero,0(r16)
1000f11c:	00100a00 	call	100100a0 <lseek>
1000f120:	00ffffc4 	movi	r3,-1
1000f124:	10c00526 	beq	r2,r3,1000f13c <_lseek_r+0x4c>
1000f128:	dfc00217 	ldw	ra,8(sp)
1000f12c:	dc400117 	ldw	r17,4(sp)
1000f130:	dc000017 	ldw	r16,0(sp)
1000f134:	dec00304 	addi	sp,sp,12
1000f138:	f800283a 	ret
1000f13c:	80c00017 	ldw	r3,0(r16)
1000f140:	183ff926 	beq	r3,zero,1000f128 <__alt_data_end+0xf800f128>
1000f144:	88c00015 	stw	r3,0(r17)
1000f148:	003ff706 	br	1000f128 <__alt_data_end+0xf800f128>

1000f14c <memmove>:
1000f14c:	2005883a 	mov	r2,r4
1000f150:	29000b2e 	bgeu	r5,r4,1000f180 <memmove+0x34>
1000f154:	298f883a 	add	r7,r5,r6
1000f158:	21c0092e 	bgeu	r4,r7,1000f180 <memmove+0x34>
1000f15c:	2187883a 	add	r3,r4,r6
1000f160:	198bc83a 	sub	r5,r3,r6
1000f164:	30004b26 	beq	r6,zero,1000f294 <memmove+0x148>
1000f168:	39ffffc4 	addi	r7,r7,-1
1000f16c:	39000003 	ldbu	r4,0(r7)
1000f170:	18ffffc4 	addi	r3,r3,-1
1000f174:	19000005 	stb	r4,0(r3)
1000f178:	197ffb1e 	bne	r3,r5,1000f168 <__alt_data_end+0xf800f168>
1000f17c:	f800283a 	ret
1000f180:	00c003c4 	movi	r3,15
1000f184:	1980412e 	bgeu	r3,r6,1000f28c <memmove+0x140>
1000f188:	1146b03a 	or	r3,r2,r5
1000f18c:	18c000cc 	andi	r3,r3,3
1000f190:	1800411e 	bne	r3,zero,1000f298 <memmove+0x14c>
1000f194:	33fffc04 	addi	r15,r6,-16
1000f198:	781ed13a 	srli	r15,r15,4
1000f19c:	28c00104 	addi	r3,r5,4
1000f1a0:	13400104 	addi	r13,r2,4
1000f1a4:	781c913a 	slli	r14,r15,4
1000f1a8:	2b000204 	addi	r12,r5,8
1000f1ac:	12c00204 	addi	r11,r2,8
1000f1b0:	73800504 	addi	r14,r14,20
1000f1b4:	2a800304 	addi	r10,r5,12
1000f1b8:	12400304 	addi	r9,r2,12
1000f1bc:	2b9d883a 	add	r14,r5,r14
1000f1c0:	2811883a 	mov	r8,r5
1000f1c4:	100f883a 	mov	r7,r2
1000f1c8:	41000017 	ldw	r4,0(r8)
1000f1cc:	39c00404 	addi	r7,r7,16
1000f1d0:	18c00404 	addi	r3,r3,16
1000f1d4:	393ffc15 	stw	r4,-16(r7)
1000f1d8:	193ffc17 	ldw	r4,-16(r3)
1000f1dc:	6b400404 	addi	r13,r13,16
1000f1e0:	5ac00404 	addi	r11,r11,16
1000f1e4:	693ffc15 	stw	r4,-16(r13)
1000f1e8:	61000017 	ldw	r4,0(r12)
1000f1ec:	4a400404 	addi	r9,r9,16
1000f1f0:	42000404 	addi	r8,r8,16
1000f1f4:	593ffc15 	stw	r4,-16(r11)
1000f1f8:	51000017 	ldw	r4,0(r10)
1000f1fc:	63000404 	addi	r12,r12,16
1000f200:	52800404 	addi	r10,r10,16
1000f204:	493ffc15 	stw	r4,-16(r9)
1000f208:	1bbfef1e 	bne	r3,r14,1000f1c8 <__alt_data_end+0xf800f1c8>
1000f20c:	79000044 	addi	r4,r15,1
1000f210:	2008913a 	slli	r4,r4,4
1000f214:	328003cc 	andi	r10,r6,15
1000f218:	02c000c4 	movi	r11,3
1000f21c:	1107883a 	add	r3,r2,r4
1000f220:	290b883a 	add	r5,r5,r4
1000f224:	5a801e2e 	bgeu	r11,r10,1000f2a0 <memmove+0x154>
1000f228:	1813883a 	mov	r9,r3
1000f22c:	2811883a 	mov	r8,r5
1000f230:	500f883a 	mov	r7,r10
1000f234:	41000017 	ldw	r4,0(r8)
1000f238:	4a400104 	addi	r9,r9,4
1000f23c:	39ffff04 	addi	r7,r7,-4
1000f240:	493fff15 	stw	r4,-4(r9)
1000f244:	42000104 	addi	r8,r8,4
1000f248:	59fffa36 	bltu	r11,r7,1000f234 <__alt_data_end+0xf800f234>
1000f24c:	513fff04 	addi	r4,r10,-4
1000f250:	2008d0ba 	srli	r4,r4,2
1000f254:	318000cc 	andi	r6,r6,3
1000f258:	21000044 	addi	r4,r4,1
1000f25c:	2109883a 	add	r4,r4,r4
1000f260:	2109883a 	add	r4,r4,r4
1000f264:	1907883a 	add	r3,r3,r4
1000f268:	290b883a 	add	r5,r5,r4
1000f26c:	30000926 	beq	r6,zero,1000f294 <memmove+0x148>
1000f270:	198d883a 	add	r6,r3,r6
1000f274:	29c00003 	ldbu	r7,0(r5)
1000f278:	18c00044 	addi	r3,r3,1
1000f27c:	29400044 	addi	r5,r5,1
1000f280:	19ffffc5 	stb	r7,-1(r3)
1000f284:	19bffb1e 	bne	r3,r6,1000f274 <__alt_data_end+0xf800f274>
1000f288:	f800283a 	ret
1000f28c:	1007883a 	mov	r3,r2
1000f290:	003ff606 	br	1000f26c <__alt_data_end+0xf800f26c>
1000f294:	f800283a 	ret
1000f298:	1007883a 	mov	r3,r2
1000f29c:	003ff406 	br	1000f270 <__alt_data_end+0xf800f270>
1000f2a0:	500d883a 	mov	r6,r10
1000f2a4:	003ff106 	br	1000f26c <__alt_data_end+0xf800f26c>

1000f2a8 <_read_r>:
1000f2a8:	defffd04 	addi	sp,sp,-12
1000f2ac:	dc000015 	stw	r16,0(sp)
1000f2b0:	04040074 	movhi	r16,4097
1000f2b4:	dc400115 	stw	r17,4(sp)
1000f2b8:	84175604 	addi	r16,r16,23896
1000f2bc:	2023883a 	mov	r17,r4
1000f2c0:	2809883a 	mov	r4,r5
1000f2c4:	300b883a 	mov	r5,r6
1000f2c8:	380d883a 	mov	r6,r7
1000f2cc:	dfc00215 	stw	ra,8(sp)
1000f2d0:	80000015 	stw	zero,0(r16)
1000f2d4:	00102840 	call	10010284 <read>
1000f2d8:	00ffffc4 	movi	r3,-1
1000f2dc:	10c00526 	beq	r2,r3,1000f2f4 <_read_r+0x4c>
1000f2e0:	dfc00217 	ldw	ra,8(sp)
1000f2e4:	dc400117 	ldw	r17,4(sp)
1000f2e8:	dc000017 	ldw	r16,0(sp)
1000f2ec:	dec00304 	addi	sp,sp,12
1000f2f0:	f800283a 	ret
1000f2f4:	80c00017 	ldw	r3,0(r16)
1000f2f8:	183ff926 	beq	r3,zero,1000f2e0 <__alt_data_end+0xf800f2e0>
1000f2fc:	88c00015 	stw	r3,0(r17)
1000f300:	003ff706 	br	1000f2e0 <__alt_data_end+0xf800f2e0>

1000f304 <_realloc_r>:
1000f304:	defff604 	addi	sp,sp,-40
1000f308:	dcc00315 	stw	r19,12(sp)
1000f30c:	dc400115 	stw	r17,4(sp)
1000f310:	dfc00915 	stw	ra,36(sp)
1000f314:	df000815 	stw	fp,32(sp)
1000f318:	ddc00715 	stw	r23,28(sp)
1000f31c:	dd800615 	stw	r22,24(sp)
1000f320:	dd400515 	stw	r21,20(sp)
1000f324:	dd000415 	stw	r20,16(sp)
1000f328:	dc800215 	stw	r18,8(sp)
1000f32c:	dc000015 	stw	r16,0(sp)
1000f330:	2827883a 	mov	r19,r5
1000f334:	3023883a 	mov	r17,r6
1000f338:	2800bf26 	beq	r5,zero,1000f638 <_realloc_r+0x334>
1000f33c:	2025883a 	mov	r18,r4
1000f340:	00101f40 	call	100101f4 <__malloc_lock>
1000f344:	98ffff17 	ldw	r3,-4(r19)
1000f348:	01bfff04 	movi	r6,-4
1000f34c:	890002c4 	addi	r4,r17,11
1000f350:	01c00584 	movi	r7,22
1000f354:	9d7ffe04 	addi	r21,r19,-8
1000f358:	19a0703a 	and	r16,r3,r6
1000f35c:	39003f2e 	bgeu	r7,r4,1000f45c <_realloc_r+0x158>
1000f360:	053ffe04 	movi	r20,-8
1000f364:	2528703a 	and	r20,r4,r20
1000f368:	a00f883a 	mov	r7,r20
1000f36c:	a0008216 	blt	r20,zero,1000f578 <_realloc_r+0x274>
1000f370:	a4408136 	bltu	r20,r17,1000f578 <_realloc_r+0x274>
1000f374:	81c03c0e 	bge	r16,r7,1000f468 <_realloc_r+0x164>
1000f378:	07040074 	movhi	fp,4097
1000f37c:	e70af804 	addi	fp,fp,11232
1000f380:	e1000217 	ldw	r4,8(fp)
1000f384:	ac05883a 	add	r2,r21,r16
1000f388:	2080bf26 	beq	r4,r2,1000f688 <_realloc_r+0x384>
1000f38c:	11000117 	ldw	r4,4(r2)
1000f390:	023fff84 	movi	r8,-2
1000f394:	2210703a 	and	r8,r4,r8
1000f398:	1211883a 	add	r8,r2,r8
1000f39c:	41400117 	ldw	r5,4(r8)
1000f3a0:	2940004c 	andi	r5,r5,1
1000f3a4:	28004a1e 	bne	r5,zero,1000f4d0 <_realloc_r+0x1cc>
1000f3a8:	017fff04 	movi	r5,-4
1000f3ac:	2148703a 	and	r4,r4,r5
1000f3b0:	2409883a 	add	r4,r4,r16
1000f3b4:	21c0ad0e 	bge	r4,r7,1000f66c <_realloc_r+0x368>
1000f3b8:	18c0004c 	andi	r3,r3,1
1000f3bc:	18007f1e 	bne	r3,zero,1000f5bc <_realloc_r+0x2b8>
1000f3c0:	9dfffe17 	ldw	r23,-8(r19)
1000f3c4:	adefc83a 	sub	r23,r21,r23
1000f3c8:	bd800117 	ldw	r22,4(r23)
1000f3cc:	b14a703a 	and	r5,r22,r5
1000f3d0:	216d883a 	add	r22,r4,r5
1000f3d4:	b1c04516 	blt	r22,r7,1000f4ec <_realloc_r+0x1e8>
1000f3d8:	10c00317 	ldw	r3,12(r2)
1000f3dc:	10800217 	ldw	r2,8(r2)
1000f3e0:	81bfff04 	addi	r6,r16,-4
1000f3e4:	bc400204 	addi	r17,r23,8
1000f3e8:	10c00315 	stw	r3,12(r2)
1000f3ec:	18800215 	stw	r2,8(r3)
1000f3f0:	b9400217 	ldw	r5,8(r23)
1000f3f4:	b8c00317 	ldw	r3,12(r23)
1000f3f8:	00800904 	movi	r2,36
1000f3fc:	28c00315 	stw	r3,12(r5)
1000f400:	19400215 	stw	r5,8(r3)
1000f404:	1180ef36 	bltu	r2,r6,1000f7c4 <_realloc_r+0x4c0>
1000f408:	008004c4 	movi	r2,19
1000f40c:	1180da2e 	bgeu	r2,r6,1000f778 <_realloc_r+0x474>
1000f410:	98800017 	ldw	r2,0(r19)
1000f414:	b8800215 	stw	r2,8(r23)
1000f418:	98800117 	ldw	r2,4(r19)
1000f41c:	b8800315 	stw	r2,12(r23)
1000f420:	008006c4 	movi	r2,27
1000f424:	1180fc2e 	bgeu	r2,r6,1000f818 <_realloc_r+0x514>
1000f428:	98800217 	ldw	r2,8(r19)
1000f42c:	b8800415 	stw	r2,16(r23)
1000f430:	98800317 	ldw	r2,12(r19)
1000f434:	b8800515 	stw	r2,20(r23)
1000f438:	00800904 	movi	r2,36
1000f43c:	3080421e 	bne	r6,r2,1000f548 <_realloc_r+0x244>
1000f440:	98800417 	ldw	r2,16(r19)
1000f444:	9cc00604 	addi	r19,r19,24
1000f448:	b8c00804 	addi	r3,r23,32
1000f44c:	b8800615 	stw	r2,24(r23)
1000f450:	98bfff17 	ldw	r2,-4(r19)
1000f454:	b8800715 	stw	r2,28(r23)
1000f458:	00003d06 	br	1000f550 <_realloc_r+0x24c>
1000f45c:	01c00404 	movi	r7,16
1000f460:	3829883a 	mov	r20,r7
1000f464:	003fc206 	br	1000f370 <__alt_data_end+0xf800f370>
1000f468:	9823883a 	mov	r17,r19
1000f46c:	850fc83a 	sub	r7,r16,r20
1000f470:	008003c4 	movi	r2,15
1000f474:	18c0004c 	andi	r3,r3,1
1000f478:	11c04336 	bltu	r2,r7,1000f588 <_realloc_r+0x284>
1000f47c:	1c06b03a 	or	r3,r3,r16
1000f480:	a8c00115 	stw	r3,4(r21)
1000f484:	ac21883a 	add	r16,r21,r16
1000f488:	80c00117 	ldw	r3,4(r16)
1000f48c:	18c00054 	ori	r3,r3,1
1000f490:	80c00115 	stw	r3,4(r16)
1000f494:	9009883a 	mov	r4,r18
1000f498:	00102140 	call	10010214 <__malloc_unlock>
1000f49c:	8805883a 	mov	r2,r17
1000f4a0:	dfc00917 	ldw	ra,36(sp)
1000f4a4:	df000817 	ldw	fp,32(sp)
1000f4a8:	ddc00717 	ldw	r23,28(sp)
1000f4ac:	dd800617 	ldw	r22,24(sp)
1000f4b0:	dd400517 	ldw	r21,20(sp)
1000f4b4:	dd000417 	ldw	r20,16(sp)
1000f4b8:	dcc00317 	ldw	r19,12(sp)
1000f4bc:	dc800217 	ldw	r18,8(sp)
1000f4c0:	dc400117 	ldw	r17,4(sp)
1000f4c4:	dc000017 	ldw	r16,0(sp)
1000f4c8:	dec00a04 	addi	sp,sp,40
1000f4cc:	f800283a 	ret
1000f4d0:	18c0004c 	andi	r3,r3,1
1000f4d4:	1800391e 	bne	r3,zero,1000f5bc <_realloc_r+0x2b8>
1000f4d8:	9dfffe17 	ldw	r23,-8(r19)
1000f4dc:	00bfff04 	movi	r2,-4
1000f4e0:	adefc83a 	sub	r23,r21,r23
1000f4e4:	b9400117 	ldw	r5,4(r23)
1000f4e8:	288a703a 	and	r5,r5,r2
1000f4ec:	2c2d883a 	add	r22,r5,r16
1000f4f0:	b1c03216 	blt	r22,r7,1000f5bc <_realloc_r+0x2b8>
1000f4f4:	b8800317 	ldw	r2,12(r23)
1000f4f8:	b8c00217 	ldw	r3,8(r23)
1000f4fc:	81bfff04 	addi	r6,r16,-4
1000f500:	01000904 	movi	r4,36
1000f504:	18800315 	stw	r2,12(r3)
1000f508:	10c00215 	stw	r3,8(r2)
1000f50c:	bc400204 	addi	r17,r23,8
1000f510:	2180ac36 	bltu	r4,r6,1000f7c4 <_realloc_r+0x4c0>
1000f514:	008004c4 	movi	r2,19
1000f518:	1180972e 	bgeu	r2,r6,1000f778 <_realloc_r+0x474>
1000f51c:	98800017 	ldw	r2,0(r19)
1000f520:	b8800215 	stw	r2,8(r23)
1000f524:	98800117 	ldw	r2,4(r19)
1000f528:	b8800315 	stw	r2,12(r23)
1000f52c:	008006c4 	movi	r2,27
1000f530:	1180b92e 	bgeu	r2,r6,1000f818 <_realloc_r+0x514>
1000f534:	98800217 	ldw	r2,8(r19)
1000f538:	b8800415 	stw	r2,16(r23)
1000f53c:	98800317 	ldw	r2,12(r19)
1000f540:	b8800515 	stw	r2,20(r23)
1000f544:	313fbe26 	beq	r6,r4,1000f440 <__alt_data_end+0xf800f440>
1000f548:	b8c00604 	addi	r3,r23,24
1000f54c:	9cc00404 	addi	r19,r19,16
1000f550:	98800017 	ldw	r2,0(r19)
1000f554:	b021883a 	mov	r16,r22
1000f558:	b82b883a 	mov	r21,r23
1000f55c:	18800015 	stw	r2,0(r3)
1000f560:	98800117 	ldw	r2,4(r19)
1000f564:	18800115 	stw	r2,4(r3)
1000f568:	98800217 	ldw	r2,8(r19)
1000f56c:	18800215 	stw	r2,8(r3)
1000f570:	b8c00117 	ldw	r3,4(r23)
1000f574:	003fbd06 	br	1000f46c <__alt_data_end+0xf800f46c>
1000f578:	00800304 	movi	r2,12
1000f57c:	90800015 	stw	r2,0(r18)
1000f580:	0005883a 	mov	r2,zero
1000f584:	003fc606 	br	1000f4a0 <__alt_data_end+0xf800f4a0>
1000f588:	1d06b03a 	or	r3,r3,r20
1000f58c:	ad0b883a 	add	r5,r21,r20
1000f590:	a8c00115 	stw	r3,4(r21)
1000f594:	38800054 	ori	r2,r7,1
1000f598:	28800115 	stw	r2,4(r5)
1000f59c:	29cf883a 	add	r7,r5,r7
1000f5a0:	38800117 	ldw	r2,4(r7)
1000f5a4:	9009883a 	mov	r4,r18
1000f5a8:	29400204 	addi	r5,r5,8
1000f5ac:	10800054 	ori	r2,r2,1
1000f5b0:	38800115 	stw	r2,4(r7)
1000f5b4:	000acd40 	call	1000acd4 <_free_r>
1000f5b8:	003fb606 	br	1000f494 <__alt_data_end+0xf800f494>
1000f5bc:	880b883a 	mov	r5,r17
1000f5c0:	9009883a 	mov	r4,r18
1000f5c4:	000b3cc0 	call	1000b3cc <_malloc_r>
1000f5c8:	1023883a 	mov	r17,r2
1000f5cc:	1000aa26 	beq	r2,zero,1000f878 <_realloc_r+0x574>
1000f5d0:	98ffff17 	ldw	r3,-4(r19)
1000f5d4:	113ffe04 	addi	r4,r2,-8
1000f5d8:	00bfff84 	movi	r2,-2
1000f5dc:	1884703a 	and	r2,r3,r2
1000f5e0:	a885883a 	add	r2,r21,r2
1000f5e4:	20808626 	beq	r4,r2,1000f800 <_realloc_r+0x4fc>
1000f5e8:	81bfff04 	addi	r6,r16,-4
1000f5ec:	00800904 	movi	r2,36
1000f5f0:	11807036 	bltu	r2,r6,1000f7b4 <_realloc_r+0x4b0>
1000f5f4:	00c004c4 	movi	r3,19
1000f5f8:	19805636 	bltu	r3,r6,1000f754 <_realloc_r+0x450>
1000f5fc:	8805883a 	mov	r2,r17
1000f600:	9807883a 	mov	r3,r19
1000f604:	19000017 	ldw	r4,0(r3)
1000f608:	11000015 	stw	r4,0(r2)
1000f60c:	19000117 	ldw	r4,4(r3)
1000f610:	11000115 	stw	r4,4(r2)
1000f614:	18c00217 	ldw	r3,8(r3)
1000f618:	10c00215 	stw	r3,8(r2)
1000f61c:	980b883a 	mov	r5,r19
1000f620:	9009883a 	mov	r4,r18
1000f624:	000acd40 	call	1000acd4 <_free_r>
1000f628:	9009883a 	mov	r4,r18
1000f62c:	00102140 	call	10010214 <__malloc_unlock>
1000f630:	8805883a 	mov	r2,r17
1000f634:	003f9a06 	br	1000f4a0 <__alt_data_end+0xf800f4a0>
1000f638:	300b883a 	mov	r5,r6
1000f63c:	dfc00917 	ldw	ra,36(sp)
1000f640:	df000817 	ldw	fp,32(sp)
1000f644:	ddc00717 	ldw	r23,28(sp)
1000f648:	dd800617 	ldw	r22,24(sp)
1000f64c:	dd400517 	ldw	r21,20(sp)
1000f650:	dd000417 	ldw	r20,16(sp)
1000f654:	dcc00317 	ldw	r19,12(sp)
1000f658:	dc800217 	ldw	r18,8(sp)
1000f65c:	dc400117 	ldw	r17,4(sp)
1000f660:	dc000017 	ldw	r16,0(sp)
1000f664:	dec00a04 	addi	sp,sp,40
1000f668:	000b3cc1 	jmpi	1000b3cc <_malloc_r>
1000f66c:	11400317 	ldw	r5,12(r2)
1000f670:	10800217 	ldw	r2,8(r2)
1000f674:	9823883a 	mov	r17,r19
1000f678:	2021883a 	mov	r16,r4
1000f67c:	11400315 	stw	r5,12(r2)
1000f680:	28800215 	stw	r2,8(r5)
1000f684:	003f7906 	br	1000f46c <__alt_data_end+0xf800f46c>
1000f688:	21000117 	ldw	r4,4(r4)
1000f68c:	00bfff04 	movi	r2,-4
1000f690:	a1800404 	addi	r6,r20,16
1000f694:	2088703a 	and	r4,r4,r2
1000f698:	2409883a 	add	r4,r4,r16
1000f69c:	2180380e 	bge	r4,r6,1000f780 <_realloc_r+0x47c>
1000f6a0:	18c0004c 	andi	r3,r3,1
1000f6a4:	183fc51e 	bne	r3,zero,1000f5bc <__alt_data_end+0xf800f5bc>
1000f6a8:	9dfffe17 	ldw	r23,-8(r19)
1000f6ac:	adefc83a 	sub	r23,r21,r23
1000f6b0:	b9400117 	ldw	r5,4(r23)
1000f6b4:	288a703a 	and	r5,r5,r2
1000f6b8:	216d883a 	add	r22,r4,r5
1000f6bc:	b1bf8b16 	blt	r22,r6,1000f4ec <__alt_data_end+0xf800f4ec>
1000f6c0:	b8800317 	ldw	r2,12(r23)
1000f6c4:	b8c00217 	ldw	r3,8(r23)
1000f6c8:	81bfff04 	addi	r6,r16,-4
1000f6cc:	01000904 	movi	r4,36
1000f6d0:	18800315 	stw	r2,12(r3)
1000f6d4:	10c00215 	stw	r3,8(r2)
1000f6d8:	bc400204 	addi	r17,r23,8
1000f6dc:	21805a36 	bltu	r4,r6,1000f848 <_realloc_r+0x544>
1000f6e0:	008004c4 	movi	r2,19
1000f6e4:	1180562e 	bgeu	r2,r6,1000f840 <_realloc_r+0x53c>
1000f6e8:	98800017 	ldw	r2,0(r19)
1000f6ec:	b8800215 	stw	r2,8(r23)
1000f6f0:	98800117 	ldw	r2,4(r19)
1000f6f4:	b8800315 	stw	r2,12(r23)
1000f6f8:	008006c4 	movi	r2,27
1000f6fc:	11805636 	bltu	r2,r6,1000f858 <_realloc_r+0x554>
1000f700:	b8800404 	addi	r2,r23,16
1000f704:	9cc00204 	addi	r19,r19,8
1000f708:	98c00017 	ldw	r3,0(r19)
1000f70c:	10c00015 	stw	r3,0(r2)
1000f710:	98c00117 	ldw	r3,4(r19)
1000f714:	10c00115 	stw	r3,4(r2)
1000f718:	98c00217 	ldw	r3,8(r19)
1000f71c:	10c00215 	stw	r3,8(r2)
1000f720:	bd07883a 	add	r3,r23,r20
1000f724:	b505c83a 	sub	r2,r22,r20
1000f728:	e0c00215 	stw	r3,8(fp)
1000f72c:	10800054 	ori	r2,r2,1
1000f730:	18800115 	stw	r2,4(r3)
1000f734:	b8800117 	ldw	r2,4(r23)
1000f738:	9009883a 	mov	r4,r18
1000f73c:	1080004c 	andi	r2,r2,1
1000f740:	a0a8b03a 	or	r20,r20,r2
1000f744:	bd000115 	stw	r20,4(r23)
1000f748:	00102140 	call	10010214 <__malloc_unlock>
1000f74c:	8805883a 	mov	r2,r17
1000f750:	003f5306 	br	1000f4a0 <__alt_data_end+0xf800f4a0>
1000f754:	98c00017 	ldw	r3,0(r19)
1000f758:	88c00015 	stw	r3,0(r17)
1000f75c:	98c00117 	ldw	r3,4(r19)
1000f760:	88c00115 	stw	r3,4(r17)
1000f764:	00c006c4 	movi	r3,27
1000f768:	19801d36 	bltu	r3,r6,1000f7e0 <_realloc_r+0x4dc>
1000f76c:	88800204 	addi	r2,r17,8
1000f770:	98c00204 	addi	r3,r19,8
1000f774:	003fa306 	br	1000f604 <__alt_data_end+0xf800f604>
1000f778:	8807883a 	mov	r3,r17
1000f77c:	003f7406 	br	1000f550 <__alt_data_end+0xf800f550>
1000f780:	ad2b883a 	add	r21,r21,r20
1000f784:	2505c83a 	sub	r2,r4,r20
1000f788:	e5400215 	stw	r21,8(fp)
1000f78c:	10800054 	ori	r2,r2,1
1000f790:	a8800115 	stw	r2,4(r21)
1000f794:	98bfff17 	ldw	r2,-4(r19)
1000f798:	9009883a 	mov	r4,r18
1000f79c:	1080004c 	andi	r2,r2,1
1000f7a0:	a0a8b03a 	or	r20,r20,r2
1000f7a4:	9d3fff15 	stw	r20,-4(r19)
1000f7a8:	00102140 	call	10010214 <__malloc_unlock>
1000f7ac:	9805883a 	mov	r2,r19
1000f7b0:	003f3b06 	br	1000f4a0 <__alt_data_end+0xf800f4a0>
1000f7b4:	8809883a 	mov	r4,r17
1000f7b8:	980b883a 	mov	r5,r19
1000f7bc:	000f14c0 	call	1000f14c <memmove>
1000f7c0:	003f9606 	br	1000f61c <__alt_data_end+0xf800f61c>
1000f7c4:	8809883a 	mov	r4,r17
1000f7c8:	980b883a 	mov	r5,r19
1000f7cc:	000f14c0 	call	1000f14c <memmove>
1000f7d0:	b8c00117 	ldw	r3,4(r23)
1000f7d4:	b021883a 	mov	r16,r22
1000f7d8:	b82b883a 	mov	r21,r23
1000f7dc:	003f2306 	br	1000f46c <__alt_data_end+0xf800f46c>
1000f7e0:	98c00217 	ldw	r3,8(r19)
1000f7e4:	88c00215 	stw	r3,8(r17)
1000f7e8:	98c00317 	ldw	r3,12(r19)
1000f7ec:	88c00315 	stw	r3,12(r17)
1000f7f0:	30800c26 	beq	r6,r2,1000f824 <_realloc_r+0x520>
1000f7f4:	88800404 	addi	r2,r17,16
1000f7f8:	98c00404 	addi	r3,r19,16
1000f7fc:	003f8106 	br	1000f604 <__alt_data_end+0xf800f604>
1000f800:	893fff17 	ldw	r4,-4(r17)
1000f804:	00bfff04 	movi	r2,-4
1000f808:	9823883a 	mov	r17,r19
1000f80c:	2084703a 	and	r2,r4,r2
1000f810:	80a1883a 	add	r16,r16,r2
1000f814:	003f1506 	br	1000f46c <__alt_data_end+0xf800f46c>
1000f818:	b8c00404 	addi	r3,r23,16
1000f81c:	9cc00204 	addi	r19,r19,8
1000f820:	003f4b06 	br	1000f550 <__alt_data_end+0xf800f550>
1000f824:	99000417 	ldw	r4,16(r19)
1000f828:	88800604 	addi	r2,r17,24
1000f82c:	98c00604 	addi	r3,r19,24
1000f830:	89000415 	stw	r4,16(r17)
1000f834:	99000517 	ldw	r4,20(r19)
1000f838:	89000515 	stw	r4,20(r17)
1000f83c:	003f7106 	br	1000f604 <__alt_data_end+0xf800f604>
1000f840:	8805883a 	mov	r2,r17
1000f844:	003fb006 	br	1000f708 <__alt_data_end+0xf800f708>
1000f848:	8809883a 	mov	r4,r17
1000f84c:	980b883a 	mov	r5,r19
1000f850:	000f14c0 	call	1000f14c <memmove>
1000f854:	003fb206 	br	1000f720 <__alt_data_end+0xf800f720>
1000f858:	98800217 	ldw	r2,8(r19)
1000f85c:	b8800415 	stw	r2,16(r23)
1000f860:	98800317 	ldw	r2,12(r19)
1000f864:	b8800515 	stw	r2,20(r23)
1000f868:	31000726 	beq	r6,r4,1000f888 <_realloc_r+0x584>
1000f86c:	b8800604 	addi	r2,r23,24
1000f870:	9cc00404 	addi	r19,r19,16
1000f874:	003fa406 	br	1000f708 <__alt_data_end+0xf800f708>
1000f878:	9009883a 	mov	r4,r18
1000f87c:	00102140 	call	10010214 <__malloc_unlock>
1000f880:	0005883a 	mov	r2,zero
1000f884:	003f0606 	br	1000f4a0 <__alt_data_end+0xf800f4a0>
1000f888:	98c00417 	ldw	r3,16(r19)
1000f88c:	9cc00604 	addi	r19,r19,24
1000f890:	b8800804 	addi	r2,r23,32
1000f894:	b8c00615 	stw	r3,24(r23)
1000f898:	98ffff17 	ldw	r3,-4(r19)
1000f89c:	b8c00715 	stw	r3,28(r23)
1000f8a0:	003f9906 	br	1000f708 <__alt_data_end+0xf800f708>

1000f8a4 <__swbuf_r>:
1000f8a4:	defffc04 	addi	sp,sp,-16
1000f8a8:	dc800215 	stw	r18,8(sp)
1000f8ac:	dc400115 	stw	r17,4(sp)
1000f8b0:	dc000015 	stw	r16,0(sp)
1000f8b4:	dfc00315 	stw	ra,12(sp)
1000f8b8:	2025883a 	mov	r18,r4
1000f8bc:	2823883a 	mov	r17,r5
1000f8c0:	3021883a 	mov	r16,r6
1000f8c4:	20000226 	beq	r4,zero,1000f8d0 <__swbuf_r+0x2c>
1000f8c8:	20800e17 	ldw	r2,56(r4)
1000f8cc:	10004126 	beq	r2,zero,1000f9d4 <__swbuf_r+0x130>
1000f8d0:	80c00617 	ldw	r3,24(r16)
1000f8d4:	8180030b 	ldhu	r6,12(r16)
1000f8d8:	80c00215 	stw	r3,8(r16)
1000f8dc:	30c0020c 	andi	r3,r6,8
1000f8e0:	18003526 	beq	r3,zero,1000f9b8 <__swbuf_r+0x114>
1000f8e4:	80c00417 	ldw	r3,16(r16)
1000f8e8:	18003326 	beq	r3,zero,1000f9b8 <__swbuf_r+0x114>
1000f8ec:	3088000c 	andi	r2,r6,8192
1000f8f0:	8c403fcc 	andi	r17,r17,255
1000f8f4:	10001726 	beq	r2,zero,1000f954 <__swbuf_r+0xb0>
1000f8f8:	80800017 	ldw	r2,0(r16)
1000f8fc:	81000517 	ldw	r4,20(r16)
1000f900:	10c7c83a 	sub	r3,r2,r3
1000f904:	19001d0e 	bge	r3,r4,1000f97c <__swbuf_r+0xd8>
1000f908:	18c00044 	addi	r3,r3,1
1000f90c:	81400217 	ldw	r5,8(r16)
1000f910:	11000044 	addi	r4,r2,1
1000f914:	81000015 	stw	r4,0(r16)
1000f918:	297fffc4 	addi	r5,r5,-1
1000f91c:	81400215 	stw	r5,8(r16)
1000f920:	14400005 	stb	r17,0(r2)
1000f924:	80800517 	ldw	r2,20(r16)
1000f928:	10c01d26 	beq	r2,r3,1000f9a0 <__swbuf_r+0xfc>
1000f92c:	8080030b 	ldhu	r2,12(r16)
1000f930:	1080004c 	andi	r2,r2,1
1000f934:	1000181e 	bne	r2,zero,1000f998 <__swbuf_r+0xf4>
1000f938:	8805883a 	mov	r2,r17
1000f93c:	dfc00317 	ldw	ra,12(sp)
1000f940:	dc800217 	ldw	r18,8(sp)
1000f944:	dc400117 	ldw	r17,4(sp)
1000f948:	dc000017 	ldw	r16,0(sp)
1000f94c:	dec00404 	addi	sp,sp,16
1000f950:	f800283a 	ret
1000f954:	81001917 	ldw	r4,100(r16)
1000f958:	00b7ffc4 	movi	r2,-8193
1000f95c:	31880014 	ori	r6,r6,8192
1000f960:	2084703a 	and	r2,r4,r2
1000f964:	80801915 	stw	r2,100(r16)
1000f968:	80800017 	ldw	r2,0(r16)
1000f96c:	81000517 	ldw	r4,20(r16)
1000f970:	8180030d 	sth	r6,12(r16)
1000f974:	10c7c83a 	sub	r3,r2,r3
1000f978:	193fe316 	blt	r3,r4,1000f908 <__alt_data_end+0xf800f908>
1000f97c:	9009883a 	mov	r4,r18
1000f980:	800b883a 	mov	r5,r16
1000f984:	000a5a40 	call	1000a5a4 <_fflush_r>
1000f988:	1000091e 	bne	r2,zero,1000f9b0 <__swbuf_r+0x10c>
1000f98c:	80800017 	ldw	r2,0(r16)
1000f990:	00c00044 	movi	r3,1
1000f994:	003fdd06 	br	1000f90c <__alt_data_end+0xf800f90c>
1000f998:	00800284 	movi	r2,10
1000f99c:	88bfe61e 	bne	r17,r2,1000f938 <__alt_data_end+0xf800f938>
1000f9a0:	9009883a 	mov	r4,r18
1000f9a4:	800b883a 	mov	r5,r16
1000f9a8:	000a5a40 	call	1000a5a4 <_fflush_r>
1000f9ac:	103fe226 	beq	r2,zero,1000f938 <__alt_data_end+0xf800f938>
1000f9b0:	00bfffc4 	movi	r2,-1
1000f9b4:	003fe106 	br	1000f93c <__alt_data_end+0xf800f93c>
1000f9b8:	9009883a 	mov	r4,r18
1000f9bc:	800b883a 	mov	r5,r16
1000f9c0:	0008b240 	call	10008b24 <__swsetup_r>
1000f9c4:	1000051e 	bne	r2,zero,1000f9dc <__swbuf_r+0x138>
1000f9c8:	8180030b 	ldhu	r6,12(r16)
1000f9cc:	80c00417 	ldw	r3,16(r16)
1000f9d0:	003fc606 	br	1000f8ec <__alt_data_end+0xf800f8ec>
1000f9d4:	000ab600 	call	1000ab60 <__sinit>
1000f9d8:	003fbd06 	br	1000f8d0 <__alt_data_end+0xf800f8d0>
1000f9dc:	80c0030b 	ldhu	r3,12(r16)
1000f9e0:	00bfffc4 	movi	r2,-1
1000f9e4:	18c01014 	ori	r3,r3,64
1000f9e8:	80c0030d 	sth	r3,12(r16)
1000f9ec:	00c00244 	movi	r3,9
1000f9f0:	90c00015 	stw	r3,0(r18)
1000f9f4:	003fd106 	br	1000f93c <__alt_data_end+0xf800f93c>

1000f9f8 <__swbuf>:
1000f9f8:	00c40074 	movhi	r3,4097
1000f9fc:	18d07e04 	addi	r3,r3,16888
1000fa00:	2005883a 	mov	r2,r4
1000fa04:	19000017 	ldw	r4,0(r3)
1000fa08:	280d883a 	mov	r6,r5
1000fa0c:	100b883a 	mov	r5,r2
1000fa10:	000f8a41 	jmpi	1000f8a4 <__swbuf_r>

1000fa14 <_wcrtomb_r>:
1000fa14:	defff604 	addi	sp,sp,-40
1000fa18:	00840074 	movhi	r2,4097
1000fa1c:	dc800815 	stw	r18,32(sp)
1000fa20:	dc400715 	stw	r17,28(sp)
1000fa24:	dc000615 	stw	r16,24(sp)
1000fa28:	10908204 	addi	r2,r2,16904
1000fa2c:	dfc00915 	stw	ra,36(sp)
1000fa30:	2021883a 	mov	r16,r4
1000fa34:	3823883a 	mov	r17,r7
1000fa38:	14800017 	ldw	r18,0(r2)
1000fa3c:	28001426 	beq	r5,zero,1000fa90 <_wcrtomb_r+0x7c>
1000fa40:	d9400415 	stw	r5,16(sp)
1000fa44:	d9800515 	stw	r6,20(sp)
1000fa48:	000b1b00 	call	1000b1b0 <__locale_charset>
1000fa4c:	d9400417 	ldw	r5,16(sp)
1000fa50:	d9800517 	ldw	r6,20(sp)
1000fa54:	8009883a 	mov	r4,r16
1000fa58:	dc400015 	stw	r17,0(sp)
1000fa5c:	100f883a 	mov	r7,r2
1000fa60:	903ee83a 	callr	r18
1000fa64:	00ffffc4 	movi	r3,-1
1000fa68:	10c0031e 	bne	r2,r3,1000fa78 <_wcrtomb_r+0x64>
1000fa6c:	88000015 	stw	zero,0(r17)
1000fa70:	00c02284 	movi	r3,138
1000fa74:	80c00015 	stw	r3,0(r16)
1000fa78:	dfc00917 	ldw	ra,36(sp)
1000fa7c:	dc800817 	ldw	r18,32(sp)
1000fa80:	dc400717 	ldw	r17,28(sp)
1000fa84:	dc000617 	ldw	r16,24(sp)
1000fa88:	dec00a04 	addi	sp,sp,40
1000fa8c:	f800283a 	ret
1000fa90:	000b1b00 	call	1000b1b0 <__locale_charset>
1000fa94:	8009883a 	mov	r4,r16
1000fa98:	dc400015 	stw	r17,0(sp)
1000fa9c:	d9400104 	addi	r5,sp,4
1000faa0:	000d883a 	mov	r6,zero
1000faa4:	100f883a 	mov	r7,r2
1000faa8:	903ee83a 	callr	r18
1000faac:	003fed06 	br	1000fa64 <__alt_data_end+0xf800fa64>

1000fab0 <wcrtomb>:
1000fab0:	defff504 	addi	sp,sp,-44
1000fab4:	dc400515 	stw	r17,20(sp)
1000fab8:	dc000415 	stw	r16,16(sp)
1000fabc:	dfc00a15 	stw	ra,40(sp)
1000fac0:	dd400915 	stw	r21,36(sp)
1000fac4:	dd000815 	stw	r20,32(sp)
1000fac8:	dcc00715 	stw	r19,28(sp)
1000facc:	dc800615 	stw	r18,24(sp)
1000fad0:	2021883a 	mov	r16,r4
1000fad4:	3023883a 	mov	r17,r6
1000fad8:	20001d26 	beq	r4,zero,1000fb50 <wcrtomb+0xa0>
1000fadc:	04840074 	movhi	r18,4097
1000fae0:	94907e04 	addi	r18,r18,16888
1000fae4:	00840074 	movhi	r2,4097
1000fae8:	95400017 	ldw	r21,0(r18)
1000faec:	10908204 	addi	r2,r2,16904
1000faf0:	15000017 	ldw	r20,0(r2)
1000faf4:	2827883a 	mov	r19,r5
1000faf8:	000b1b00 	call	1000b1b0 <__locale_charset>
1000fafc:	a809883a 	mov	r4,r21
1000fb00:	dc400015 	stw	r17,0(sp)
1000fb04:	800b883a 	mov	r5,r16
1000fb08:	980d883a 	mov	r6,r19
1000fb0c:	100f883a 	mov	r7,r2
1000fb10:	a03ee83a 	callr	r20
1000fb14:	00ffffc4 	movi	r3,-1
1000fb18:	10c0041e 	bne	r2,r3,1000fb2c <wcrtomb+0x7c>
1000fb1c:	90c00017 	ldw	r3,0(r18)
1000fb20:	01002284 	movi	r4,138
1000fb24:	88000015 	stw	zero,0(r17)
1000fb28:	19000015 	stw	r4,0(r3)
1000fb2c:	dfc00a17 	ldw	ra,40(sp)
1000fb30:	dd400917 	ldw	r21,36(sp)
1000fb34:	dd000817 	ldw	r20,32(sp)
1000fb38:	dcc00717 	ldw	r19,28(sp)
1000fb3c:	dc800617 	ldw	r18,24(sp)
1000fb40:	dc400517 	ldw	r17,20(sp)
1000fb44:	dc000417 	ldw	r16,16(sp)
1000fb48:	dec00b04 	addi	sp,sp,44
1000fb4c:	f800283a 	ret
1000fb50:	04840074 	movhi	r18,4097
1000fb54:	94907e04 	addi	r18,r18,16888
1000fb58:	00840074 	movhi	r2,4097
1000fb5c:	94c00017 	ldw	r19,0(r18)
1000fb60:	10908204 	addi	r2,r2,16904
1000fb64:	14000017 	ldw	r16,0(r2)
1000fb68:	000b1b00 	call	1000b1b0 <__locale_charset>
1000fb6c:	9809883a 	mov	r4,r19
1000fb70:	dc400015 	stw	r17,0(sp)
1000fb74:	d9400104 	addi	r5,sp,4
1000fb78:	000d883a 	mov	r6,zero
1000fb7c:	100f883a 	mov	r7,r2
1000fb80:	803ee83a 	callr	r16
1000fb84:	003fe306 	br	1000fb14 <__alt_data_end+0xf800fb14>

1000fb88 <__ascii_wctomb>:
1000fb88:	28000526 	beq	r5,zero,1000fba0 <__ascii_wctomb+0x18>
1000fb8c:	00803fc4 	movi	r2,255
1000fb90:	11800536 	bltu	r2,r6,1000fba8 <__ascii_wctomb+0x20>
1000fb94:	29800005 	stb	r6,0(r5)
1000fb98:	00800044 	movi	r2,1
1000fb9c:	f800283a 	ret
1000fba0:	0005883a 	mov	r2,zero
1000fba4:	f800283a 	ret
1000fba8:	00802284 	movi	r2,138
1000fbac:	20800015 	stw	r2,0(r4)
1000fbb0:	00bfffc4 	movi	r2,-1
1000fbb4:	f800283a 	ret

1000fbb8 <_wctomb_r>:
1000fbb8:	00840074 	movhi	r2,4097
1000fbbc:	defff904 	addi	sp,sp,-28
1000fbc0:	10908204 	addi	r2,r2,16904
1000fbc4:	dfc00615 	stw	ra,24(sp)
1000fbc8:	dc400515 	stw	r17,20(sp)
1000fbcc:	dc000415 	stw	r16,16(sp)
1000fbd0:	3823883a 	mov	r17,r7
1000fbd4:	14000017 	ldw	r16,0(r2)
1000fbd8:	d9000115 	stw	r4,4(sp)
1000fbdc:	d9400215 	stw	r5,8(sp)
1000fbe0:	d9800315 	stw	r6,12(sp)
1000fbe4:	000b1b00 	call	1000b1b0 <__locale_charset>
1000fbe8:	d9000117 	ldw	r4,4(sp)
1000fbec:	d9400217 	ldw	r5,8(sp)
1000fbf0:	d9800317 	ldw	r6,12(sp)
1000fbf4:	dc400015 	stw	r17,0(sp)
1000fbf8:	100f883a 	mov	r7,r2
1000fbfc:	803ee83a 	callr	r16
1000fc00:	dfc00617 	ldw	ra,24(sp)
1000fc04:	dc400517 	ldw	r17,20(sp)
1000fc08:	dc000417 	ldw	r16,16(sp)
1000fc0c:	dec00704 	addi	sp,sp,28
1000fc10:	f800283a 	ret

1000fc14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fc14:	defffe04 	addi	sp,sp,-8
1000fc18:	dfc00115 	stw	ra,4(sp)
1000fc1c:	df000015 	stw	fp,0(sp)
1000fc20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fc24:	00840074 	movhi	r2,4097
1000fc28:	10908804 	addi	r2,r2,16928
1000fc2c:	10800017 	ldw	r2,0(r2)
1000fc30:	10000526 	beq	r2,zero,1000fc48 <alt_get_errno+0x34>
1000fc34:	00840074 	movhi	r2,4097
1000fc38:	10908804 	addi	r2,r2,16928
1000fc3c:	10800017 	ldw	r2,0(r2)
1000fc40:	103ee83a 	callr	r2
1000fc44:	00000206 	br	1000fc50 <alt_get_errno+0x3c>
1000fc48:	00840074 	movhi	r2,4097
1000fc4c:	10975604 	addi	r2,r2,23896
}
1000fc50:	e037883a 	mov	sp,fp
1000fc54:	dfc00117 	ldw	ra,4(sp)
1000fc58:	df000017 	ldw	fp,0(sp)
1000fc5c:	dec00204 	addi	sp,sp,8
1000fc60:	f800283a 	ret

1000fc64 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000fc64:	defffb04 	addi	sp,sp,-20
1000fc68:	dfc00415 	stw	ra,16(sp)
1000fc6c:	df000315 	stw	fp,12(sp)
1000fc70:	df000304 	addi	fp,sp,12
1000fc74:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000fc78:	e0bfff17 	ldw	r2,-4(fp)
1000fc7c:	10000816 	blt	r2,zero,1000fca0 <close+0x3c>
1000fc80:	e13fff17 	ldw	r4,-4(fp)
1000fc84:	01400304 	movi	r5,12
1000fc88:	00040ec0 	call	100040ec <__mulsi3>
1000fc8c:	1007883a 	mov	r3,r2
1000fc90:	00840074 	movhi	r2,4097
1000fc94:	108c0404 	addi	r2,r2,12304
1000fc98:	1885883a 	add	r2,r3,r2
1000fc9c:	00000106 	br	1000fca4 <close+0x40>
1000fca0:	0005883a 	mov	r2,zero
1000fca4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000fca8:	e0bffd17 	ldw	r2,-12(fp)
1000fcac:	10001926 	beq	r2,zero,1000fd14 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000fcb0:	e0bffd17 	ldw	r2,-12(fp)
1000fcb4:	10800017 	ldw	r2,0(r2)
1000fcb8:	10800417 	ldw	r2,16(r2)
1000fcbc:	10000626 	beq	r2,zero,1000fcd8 <close+0x74>
1000fcc0:	e0bffd17 	ldw	r2,-12(fp)
1000fcc4:	10800017 	ldw	r2,0(r2)
1000fcc8:	10800417 	ldw	r2,16(r2)
1000fccc:	e13ffd17 	ldw	r4,-12(fp)
1000fcd0:	103ee83a 	callr	r2
1000fcd4:	00000106 	br	1000fcdc <close+0x78>
1000fcd8:	0005883a 	mov	r2,zero
1000fcdc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000fce0:	e13fff17 	ldw	r4,-4(fp)
1000fce4:	00103880 	call	10010388 <alt_release_fd>
    if (rval < 0)
1000fce8:	e0bffe17 	ldw	r2,-8(fp)
1000fcec:	1000070e 	bge	r2,zero,1000fd0c <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000fcf0:	000fc140 	call	1000fc14 <alt_get_errno>
1000fcf4:	1007883a 	mov	r3,r2
1000fcf8:	e0bffe17 	ldw	r2,-8(fp)
1000fcfc:	0085c83a 	sub	r2,zero,r2
1000fd00:	18800015 	stw	r2,0(r3)
      return -1;
1000fd04:	00bfffc4 	movi	r2,-1
1000fd08:	00000706 	br	1000fd28 <close+0xc4>
    }
    return 0;
1000fd0c:	0005883a 	mov	r2,zero
1000fd10:	00000506 	br	1000fd28 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000fd14:	000fc140 	call	1000fc14 <alt_get_errno>
1000fd18:	1007883a 	mov	r3,r2
1000fd1c:	00801444 	movi	r2,81
1000fd20:	18800015 	stw	r2,0(r3)
    return -1;
1000fd24:	00bfffc4 	movi	r2,-1
  }
}
1000fd28:	e037883a 	mov	sp,fp
1000fd2c:	dfc00117 	ldw	ra,4(sp)
1000fd30:	df000017 	ldw	fp,0(sp)
1000fd34:	dec00204 	addi	sp,sp,8
1000fd38:	f800283a 	ret

1000fd3c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000fd3c:	defffc04 	addi	sp,sp,-16
1000fd40:	df000315 	stw	fp,12(sp)
1000fd44:	df000304 	addi	fp,sp,12
1000fd48:	e13ffd15 	stw	r4,-12(fp)
1000fd4c:	e17ffe15 	stw	r5,-8(fp)
1000fd50:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000fd54:	e0bfff17 	ldw	r2,-4(fp)
}
1000fd58:	e037883a 	mov	sp,fp
1000fd5c:	df000017 	ldw	fp,0(sp)
1000fd60:	dec00104 	addi	sp,sp,4
1000fd64:	f800283a 	ret

1000fd68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fd68:	defffe04 	addi	sp,sp,-8
1000fd6c:	dfc00115 	stw	ra,4(sp)
1000fd70:	df000015 	stw	fp,0(sp)
1000fd74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fd78:	00840074 	movhi	r2,4097
1000fd7c:	10908804 	addi	r2,r2,16928
1000fd80:	10800017 	ldw	r2,0(r2)
1000fd84:	10000526 	beq	r2,zero,1000fd9c <alt_get_errno+0x34>
1000fd88:	00840074 	movhi	r2,4097
1000fd8c:	10908804 	addi	r2,r2,16928
1000fd90:	10800017 	ldw	r2,0(r2)
1000fd94:	103ee83a 	callr	r2
1000fd98:	00000206 	br	1000fda4 <alt_get_errno+0x3c>
1000fd9c:	00840074 	movhi	r2,4097
1000fda0:	10975604 	addi	r2,r2,23896
}
1000fda4:	e037883a 	mov	sp,fp
1000fda8:	dfc00117 	ldw	ra,4(sp)
1000fdac:	df000017 	ldw	fp,0(sp)
1000fdb0:	dec00204 	addi	sp,sp,8
1000fdb4:	f800283a 	ret

1000fdb8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000fdb8:	defffb04 	addi	sp,sp,-20
1000fdbc:	dfc00415 	stw	ra,16(sp)
1000fdc0:	df000315 	stw	fp,12(sp)
1000fdc4:	df000304 	addi	fp,sp,12
1000fdc8:	e13ffe15 	stw	r4,-8(fp)
1000fdcc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fdd0:	e0bffe17 	ldw	r2,-8(fp)
1000fdd4:	10000816 	blt	r2,zero,1000fdf8 <fstat+0x40>
1000fdd8:	e13ffe17 	ldw	r4,-8(fp)
1000fddc:	01400304 	movi	r5,12
1000fde0:	00040ec0 	call	100040ec <__mulsi3>
1000fde4:	1007883a 	mov	r3,r2
1000fde8:	00840074 	movhi	r2,4097
1000fdec:	108c0404 	addi	r2,r2,12304
1000fdf0:	1885883a 	add	r2,r3,r2
1000fdf4:	00000106 	br	1000fdfc <fstat+0x44>
1000fdf8:	0005883a 	mov	r2,zero
1000fdfc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000fe00:	e0bffd17 	ldw	r2,-12(fp)
1000fe04:	10001026 	beq	r2,zero,1000fe48 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000fe08:	e0bffd17 	ldw	r2,-12(fp)
1000fe0c:	10800017 	ldw	r2,0(r2)
1000fe10:	10800817 	ldw	r2,32(r2)
1000fe14:	10000726 	beq	r2,zero,1000fe34 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000fe18:	e0bffd17 	ldw	r2,-12(fp)
1000fe1c:	10800017 	ldw	r2,0(r2)
1000fe20:	10800817 	ldw	r2,32(r2)
1000fe24:	e13ffd17 	ldw	r4,-12(fp)
1000fe28:	e17fff17 	ldw	r5,-4(fp)
1000fe2c:	103ee83a 	callr	r2
1000fe30:	00000a06 	br	1000fe5c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000fe34:	e0bfff17 	ldw	r2,-4(fp)
1000fe38:	00c80004 	movi	r3,8192
1000fe3c:	10c00115 	stw	r3,4(r2)
      return 0;
1000fe40:	0005883a 	mov	r2,zero
1000fe44:	00000506 	br	1000fe5c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000fe48:	000fd680 	call	1000fd68 <alt_get_errno>
1000fe4c:	1007883a 	mov	r3,r2
1000fe50:	00801444 	movi	r2,81
1000fe54:	18800015 	stw	r2,0(r3)
    return -1;
1000fe58:	00bfffc4 	movi	r2,-1
  }
}
1000fe5c:	e037883a 	mov	sp,fp
1000fe60:	dfc00117 	ldw	ra,4(sp)
1000fe64:	df000017 	ldw	fp,0(sp)
1000fe68:	dec00204 	addi	sp,sp,8
1000fe6c:	f800283a 	ret

1000fe70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fe70:	defffe04 	addi	sp,sp,-8
1000fe74:	dfc00115 	stw	ra,4(sp)
1000fe78:	df000015 	stw	fp,0(sp)
1000fe7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fe80:	00840074 	movhi	r2,4097
1000fe84:	10908804 	addi	r2,r2,16928
1000fe88:	10800017 	ldw	r2,0(r2)
1000fe8c:	10000526 	beq	r2,zero,1000fea4 <alt_get_errno+0x34>
1000fe90:	00840074 	movhi	r2,4097
1000fe94:	10908804 	addi	r2,r2,16928
1000fe98:	10800017 	ldw	r2,0(r2)
1000fe9c:	103ee83a 	callr	r2
1000fea0:	00000206 	br	1000feac <alt_get_errno+0x3c>
1000fea4:	00840074 	movhi	r2,4097
1000fea8:	10975604 	addi	r2,r2,23896
}
1000feac:	e037883a 	mov	sp,fp
1000feb0:	dfc00117 	ldw	ra,4(sp)
1000feb4:	df000017 	ldw	fp,0(sp)
1000feb8:	dec00204 	addi	sp,sp,8
1000febc:	f800283a 	ret

1000fec0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000fec0:	deffed04 	addi	sp,sp,-76
1000fec4:	dfc01215 	stw	ra,72(sp)
1000fec8:	df001115 	stw	fp,68(sp)
1000fecc:	df001104 	addi	fp,sp,68
1000fed0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fed4:	e0bfff17 	ldw	r2,-4(fp)
1000fed8:	10000816 	blt	r2,zero,1000fefc <isatty+0x3c>
1000fedc:	e13fff17 	ldw	r4,-4(fp)
1000fee0:	01400304 	movi	r5,12
1000fee4:	00040ec0 	call	100040ec <__mulsi3>
1000fee8:	1007883a 	mov	r3,r2
1000feec:	00840074 	movhi	r2,4097
1000fef0:	108c0404 	addi	r2,r2,12304
1000fef4:	1885883a 	add	r2,r3,r2
1000fef8:	00000106 	br	1000ff00 <isatty+0x40>
1000fefc:	0005883a 	mov	r2,zero
1000ff00:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000ff04:	e0bfef17 	ldw	r2,-68(fp)
1000ff08:	10000e26 	beq	r2,zero,1000ff44 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000ff0c:	e0bfef17 	ldw	r2,-68(fp)
1000ff10:	10800017 	ldw	r2,0(r2)
1000ff14:	10800817 	ldw	r2,32(r2)
1000ff18:	1000021e 	bne	r2,zero,1000ff24 <isatty+0x64>
    {
      return 1;
1000ff1c:	00800044 	movi	r2,1
1000ff20:	00000d06 	br	1000ff58 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000ff24:	e0bff004 	addi	r2,fp,-64
1000ff28:	e13fff17 	ldw	r4,-4(fp)
1000ff2c:	100b883a 	mov	r5,r2
1000ff30:	000fdb80 	call	1000fdb8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000ff34:	e0bff117 	ldw	r2,-60(fp)
1000ff38:	10880020 	cmpeqi	r2,r2,8192
1000ff3c:	10803fcc 	andi	r2,r2,255
1000ff40:	00000506 	br	1000ff58 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000ff44:	000fe700 	call	1000fe70 <alt_get_errno>
1000ff48:	1007883a 	mov	r3,r2
1000ff4c:	00801444 	movi	r2,81
1000ff50:	18800015 	stw	r2,0(r3)
    return 0;
1000ff54:	0005883a 	mov	r2,zero
  }
}
1000ff58:	e037883a 	mov	sp,fp
1000ff5c:	dfc00117 	ldw	ra,4(sp)
1000ff60:	df000017 	ldw	fp,0(sp)
1000ff64:	dec00204 	addi	sp,sp,8
1000ff68:	f800283a 	ret

1000ff6c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000ff6c:	defffc04 	addi	sp,sp,-16
1000ff70:	df000315 	stw	fp,12(sp)
1000ff74:	df000304 	addi	fp,sp,12
1000ff78:	e13ffd15 	stw	r4,-12(fp)
1000ff7c:	e17ffe15 	stw	r5,-8(fp)
1000ff80:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000ff84:	e0fffe17 	ldw	r3,-8(fp)
1000ff88:	e0bffd17 	ldw	r2,-12(fp)
1000ff8c:	18800c26 	beq	r3,r2,1000ffc0 <alt_load_section+0x54>
  {
    while( to != end )
1000ff90:	00000806 	br	1000ffb4 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000ff94:	e0bffe17 	ldw	r2,-8(fp)
1000ff98:	10c00104 	addi	r3,r2,4
1000ff9c:	e0fffe15 	stw	r3,-8(fp)
1000ffa0:	e0fffd17 	ldw	r3,-12(fp)
1000ffa4:	19000104 	addi	r4,r3,4
1000ffa8:	e13ffd15 	stw	r4,-12(fp)
1000ffac:	18c00017 	ldw	r3,0(r3)
1000ffb0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000ffb4:	e0fffe17 	ldw	r3,-8(fp)
1000ffb8:	e0bfff17 	ldw	r2,-4(fp)
1000ffbc:	18bff51e 	bne	r3,r2,1000ff94 <__alt_data_end+0xf800ff94>
    {
      *to++ = *from++;
    }
  }
}
1000ffc0:	e037883a 	mov	sp,fp
1000ffc4:	df000017 	ldw	fp,0(sp)
1000ffc8:	dec00104 	addi	sp,sp,4
1000ffcc:	f800283a 	ret

1000ffd0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000ffd0:	defffe04 	addi	sp,sp,-8
1000ffd4:	dfc00115 	stw	ra,4(sp)
1000ffd8:	df000015 	stw	fp,0(sp)
1000ffdc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000ffe0:	01040074 	movhi	r4,4097
1000ffe4:	21108d04 	addi	r4,r4,16948
1000ffe8:	01440074 	movhi	r5,4097
1000ffec:	2949d104 	addi	r5,r5,10052
1000fff0:	01840074 	movhi	r6,4097
1000fff4:	31908d04 	addi	r6,r6,16948
1000fff8:	000ff6c0 	call	1000ff6c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000fffc:	01040034 	movhi	r4,4096
10010000:	21000804 	addi	r4,r4,32
10010004:	01440034 	movhi	r5,4096
10010008:	29400804 	addi	r5,r5,32
1001000c:	01840034 	movhi	r6,4096
10010010:	31808b04 	addi	r6,r6,556
10010014:	000ff6c0 	call	1000ff6c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10010018:	01040074 	movhi	r4,4097
1001001c:	2108db04 	addi	r4,r4,9068
10010020:	01440074 	movhi	r5,4097
10010024:	2948db04 	addi	r5,r5,9068
10010028:	01840074 	movhi	r6,4097
1001002c:	3189d104 	addi	r6,r6,10052
10010030:	000ff6c0 	call	1000ff6c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10010034:	00112480 	call	10011248 <alt_dcache_flush_all>
  alt_icache_flush_all();
10010038:	00114100 	call	10011410 <alt_icache_flush_all>
}
1001003c:	e037883a 	mov	sp,fp
10010040:	dfc00117 	ldw	ra,4(sp)
10010044:	df000017 	ldw	fp,0(sp)
10010048:	dec00204 	addi	sp,sp,8
1001004c:	f800283a 	ret

10010050 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010050:	defffe04 	addi	sp,sp,-8
10010054:	dfc00115 	stw	ra,4(sp)
10010058:	df000015 	stw	fp,0(sp)
1001005c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010060:	00840074 	movhi	r2,4097
10010064:	10908804 	addi	r2,r2,16928
10010068:	10800017 	ldw	r2,0(r2)
1001006c:	10000526 	beq	r2,zero,10010084 <alt_get_errno+0x34>
10010070:	00840074 	movhi	r2,4097
10010074:	10908804 	addi	r2,r2,16928
10010078:	10800017 	ldw	r2,0(r2)
1001007c:	103ee83a 	callr	r2
10010080:	00000206 	br	1001008c <alt_get_errno+0x3c>
10010084:	00840074 	movhi	r2,4097
10010088:	10975604 	addi	r2,r2,23896
}
1001008c:	e037883a 	mov	sp,fp
10010090:	dfc00117 	ldw	ra,4(sp)
10010094:	df000017 	ldw	fp,0(sp)
10010098:	dec00204 	addi	sp,sp,8
1001009c:	f800283a 	ret

100100a0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
100100a0:	defff904 	addi	sp,sp,-28
100100a4:	dfc00615 	stw	ra,24(sp)
100100a8:	df000515 	stw	fp,20(sp)
100100ac:	df000504 	addi	fp,sp,20
100100b0:	e13ffd15 	stw	r4,-12(fp)
100100b4:	e17ffe15 	stw	r5,-8(fp)
100100b8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
100100bc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100100c0:	e0bffd17 	ldw	r2,-12(fp)
100100c4:	10000816 	blt	r2,zero,100100e8 <lseek+0x48>
100100c8:	e13ffd17 	ldw	r4,-12(fp)
100100cc:	01400304 	movi	r5,12
100100d0:	00040ec0 	call	100040ec <__mulsi3>
100100d4:	1007883a 	mov	r3,r2
100100d8:	00840074 	movhi	r2,4097
100100dc:	108c0404 	addi	r2,r2,12304
100100e0:	1885883a 	add	r2,r3,r2
100100e4:	00000106 	br	100100ec <lseek+0x4c>
100100e8:	0005883a 	mov	r2,zero
100100ec:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
100100f0:	e0bffc17 	ldw	r2,-16(fp)
100100f4:	10001026 	beq	r2,zero,10010138 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
100100f8:	e0bffc17 	ldw	r2,-16(fp)
100100fc:	10800017 	ldw	r2,0(r2)
10010100:	10800717 	ldw	r2,28(r2)
10010104:	10000926 	beq	r2,zero,1001012c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10010108:	e0bffc17 	ldw	r2,-16(fp)
1001010c:	10800017 	ldw	r2,0(r2)
10010110:	10800717 	ldw	r2,28(r2)
10010114:	e13ffc17 	ldw	r4,-16(fp)
10010118:	e17ffe17 	ldw	r5,-8(fp)
1001011c:	e1bfff17 	ldw	r6,-4(fp)
10010120:	103ee83a 	callr	r2
10010124:	e0bffb15 	stw	r2,-20(fp)
10010128:	00000506 	br	10010140 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1001012c:	00bfde84 	movi	r2,-134
10010130:	e0bffb15 	stw	r2,-20(fp)
10010134:	00000206 	br	10010140 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10010138:	00bfebc4 	movi	r2,-81
1001013c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10010140:	e0bffb17 	ldw	r2,-20(fp)
10010144:	1000070e 	bge	r2,zero,10010164 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10010148:	00100500 	call	10010050 <alt_get_errno>
1001014c:	1007883a 	mov	r3,r2
10010150:	e0bffb17 	ldw	r2,-20(fp)
10010154:	0085c83a 	sub	r2,zero,r2
10010158:	18800015 	stw	r2,0(r3)
    rc = -1;
1001015c:	00bfffc4 	movi	r2,-1
10010160:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10010164:	e0bffb17 	ldw	r2,-20(fp)
}
10010168:	e037883a 	mov	sp,fp
1001016c:	dfc00117 	ldw	ra,4(sp)
10010170:	df000017 	ldw	fp,0(sp)
10010174:	dec00204 	addi	sp,sp,8
10010178:	f800283a 	ret

1001017c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1001017c:	defffd04 	addi	sp,sp,-12
10010180:	dfc00215 	stw	ra,8(sp)
10010184:	df000115 	stw	fp,4(sp)
10010188:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1001018c:	0009883a 	mov	r4,zero
10010190:	00106400 	call	10010640 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10010194:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10010198:	00106740 	call	10010674 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1001019c:	01040074 	movhi	r4,4097
100101a0:	2109c704 	addi	r4,r4,10012
100101a4:	01440074 	movhi	r5,4097
100101a8:	2949c704 	addi	r5,r5,10012
100101ac:	01840074 	movhi	r6,4097
100101b0:	3189c704 	addi	r6,r6,10012
100101b4:	00117dc0 	call	100117dc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
100101b8:	00113580 	call	10011358 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
100101bc:	01040074 	movhi	r4,4097
100101c0:	2104ed04 	addi	r4,r4,5044
100101c4:	0011fc80 	call	10011fc8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
100101c8:	d126db17 	ldw	r4,-25748(gp)
100101cc:	d0e6dc17 	ldw	r3,-25744(gp)
100101d0:	d0a6dd17 	ldw	r2,-25740(gp)
100101d4:	180b883a 	mov	r5,r3
100101d8:	100d883a 	mov	r6,r2
100101dc:	00002680 	call	10000268 <main>
100101e0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
100101e4:	01000044 	movi	r4,1
100101e8:	000fc640 	call	1000fc64 <close>
  exit (result);
100101ec:	e13fff17 	ldw	r4,-4(fp)
100101f0:	0011fdc0 	call	10011fdc <exit>

100101f4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
100101f4:	defffe04 	addi	sp,sp,-8
100101f8:	df000115 	stw	fp,4(sp)
100101fc:	df000104 	addi	fp,sp,4
10010200:	e13fff15 	stw	r4,-4(fp)
}
10010204:	e037883a 	mov	sp,fp
10010208:	df000017 	ldw	fp,0(sp)
1001020c:	dec00104 	addi	sp,sp,4
10010210:	f800283a 	ret

10010214 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10010214:	defffe04 	addi	sp,sp,-8
10010218:	df000115 	stw	fp,4(sp)
1001021c:	df000104 	addi	fp,sp,4
10010220:	e13fff15 	stw	r4,-4(fp)
}
10010224:	e037883a 	mov	sp,fp
10010228:	df000017 	ldw	fp,0(sp)
1001022c:	dec00104 	addi	sp,sp,4
10010230:	f800283a 	ret

10010234 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010234:	defffe04 	addi	sp,sp,-8
10010238:	dfc00115 	stw	ra,4(sp)
1001023c:	df000015 	stw	fp,0(sp)
10010240:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010244:	00840074 	movhi	r2,4097
10010248:	10908804 	addi	r2,r2,16928
1001024c:	10800017 	ldw	r2,0(r2)
10010250:	10000526 	beq	r2,zero,10010268 <alt_get_errno+0x34>
10010254:	00840074 	movhi	r2,4097
10010258:	10908804 	addi	r2,r2,16928
1001025c:	10800017 	ldw	r2,0(r2)
10010260:	103ee83a 	callr	r2
10010264:	00000206 	br	10010270 <alt_get_errno+0x3c>
10010268:	00840074 	movhi	r2,4097
1001026c:	10975604 	addi	r2,r2,23896
}
10010270:	e037883a 	mov	sp,fp
10010274:	dfc00117 	ldw	ra,4(sp)
10010278:	df000017 	ldw	fp,0(sp)
1001027c:	dec00204 	addi	sp,sp,8
10010280:	f800283a 	ret

10010284 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10010284:	defff904 	addi	sp,sp,-28
10010288:	dfc00615 	stw	ra,24(sp)
1001028c:	df000515 	stw	fp,20(sp)
10010290:	df000504 	addi	fp,sp,20
10010294:	e13ffd15 	stw	r4,-12(fp)
10010298:	e17ffe15 	stw	r5,-8(fp)
1001029c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100102a0:	e0bffd17 	ldw	r2,-12(fp)
100102a4:	10000816 	blt	r2,zero,100102c8 <read+0x44>
100102a8:	e13ffd17 	ldw	r4,-12(fp)
100102ac:	01400304 	movi	r5,12
100102b0:	00040ec0 	call	100040ec <__mulsi3>
100102b4:	1007883a 	mov	r3,r2
100102b8:	00840074 	movhi	r2,4097
100102bc:	108c0404 	addi	r2,r2,12304
100102c0:	1885883a 	add	r2,r3,r2
100102c4:	00000106 	br	100102cc <read+0x48>
100102c8:	0005883a 	mov	r2,zero
100102cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
100102d0:	e0bffb17 	ldw	r2,-20(fp)
100102d4:	10002226 	beq	r2,zero,10010360 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
100102d8:	e0bffb17 	ldw	r2,-20(fp)
100102dc:	10800217 	ldw	r2,8(r2)
100102e0:	108000cc 	andi	r2,r2,3
100102e4:	10800060 	cmpeqi	r2,r2,1
100102e8:	1000181e 	bne	r2,zero,1001034c <read+0xc8>
        (fd->dev->read))
100102ec:	e0bffb17 	ldw	r2,-20(fp)
100102f0:	10800017 	ldw	r2,0(r2)
100102f4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
100102f8:	10001426 	beq	r2,zero,1001034c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
100102fc:	e0bffb17 	ldw	r2,-20(fp)
10010300:	10800017 	ldw	r2,0(r2)
10010304:	10800517 	ldw	r2,20(r2)
10010308:	e0ffff17 	ldw	r3,-4(fp)
1001030c:	e13ffb17 	ldw	r4,-20(fp)
10010310:	e17ffe17 	ldw	r5,-8(fp)
10010314:	180d883a 	mov	r6,r3
10010318:	103ee83a 	callr	r2
1001031c:	e0bffc15 	stw	r2,-16(fp)
10010320:	e0bffc17 	ldw	r2,-16(fp)
10010324:	1000070e 	bge	r2,zero,10010344 <read+0xc0>
        {
          ALT_ERRNO = -rval;
10010328:	00102340 	call	10010234 <alt_get_errno>
1001032c:	1007883a 	mov	r3,r2
10010330:	e0bffc17 	ldw	r2,-16(fp)
10010334:	0085c83a 	sub	r2,zero,r2
10010338:	18800015 	stw	r2,0(r3)
          return -1;
1001033c:	00bfffc4 	movi	r2,-1
10010340:	00000c06 	br	10010374 <read+0xf0>
        }
        return rval;
10010344:	e0bffc17 	ldw	r2,-16(fp)
10010348:	00000a06 	br	10010374 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1001034c:	00102340 	call	10010234 <alt_get_errno>
10010350:	1007883a 	mov	r3,r2
10010354:	00800344 	movi	r2,13
10010358:	18800015 	stw	r2,0(r3)
1001035c:	00000406 	br	10010370 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10010360:	00102340 	call	10010234 <alt_get_errno>
10010364:	1007883a 	mov	r3,r2
10010368:	00801444 	movi	r2,81
1001036c:	18800015 	stw	r2,0(r3)
  }
  return -1;
10010370:	00bfffc4 	movi	r2,-1
}
10010374:	e037883a 	mov	sp,fp
10010378:	dfc00117 	ldw	ra,4(sp)
1001037c:	df000017 	ldw	fp,0(sp)
10010380:	dec00204 	addi	sp,sp,8
10010384:	f800283a 	ret

10010388 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10010388:	defffc04 	addi	sp,sp,-16
1001038c:	dfc00315 	stw	ra,12(sp)
10010390:	df000215 	stw	fp,8(sp)
10010394:	dc000115 	stw	r16,4(sp)
10010398:	df000204 	addi	fp,sp,8
1001039c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
100103a0:	e0bffe17 	ldw	r2,-8(fp)
100103a4:	108000d0 	cmplti	r2,r2,3
100103a8:	1000111e 	bne	r2,zero,100103f0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
100103ac:	04040074 	movhi	r16,4097
100103b0:	840c0404 	addi	r16,r16,12304
100103b4:	e0bffe17 	ldw	r2,-8(fp)
100103b8:	1009883a 	mov	r4,r2
100103bc:	01400304 	movi	r5,12
100103c0:	00040ec0 	call	100040ec <__mulsi3>
100103c4:	8085883a 	add	r2,r16,r2
100103c8:	10800204 	addi	r2,r2,8
100103cc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
100103d0:	04040074 	movhi	r16,4097
100103d4:	840c0404 	addi	r16,r16,12304
100103d8:	e0bffe17 	ldw	r2,-8(fp)
100103dc:	1009883a 	mov	r4,r2
100103e0:	01400304 	movi	r5,12
100103e4:	00040ec0 	call	100040ec <__mulsi3>
100103e8:	8085883a 	add	r2,r16,r2
100103ec:	10000015 	stw	zero,0(r2)
  }
}
100103f0:	e6ffff04 	addi	sp,fp,-4
100103f4:	dfc00217 	ldw	ra,8(sp)
100103f8:	df000117 	ldw	fp,4(sp)
100103fc:	dc000017 	ldw	r16,0(sp)
10010400:	dec00304 	addi	sp,sp,12
10010404:	f800283a 	ret

10010408 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10010408:	defff904 	addi	sp,sp,-28
1001040c:	df000615 	stw	fp,24(sp)
10010410:	df000604 	addi	fp,sp,24
10010414:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010418:	0005303a 	rdctl	r2,status
1001041c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010420:	e0fffc17 	ldw	r3,-16(fp)
10010424:	00bfff84 	movi	r2,-2
10010428:	1884703a 	and	r2,r3,r2
1001042c:	1001703a 	wrctl	status,r2
  
  return context;
10010430:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10010434:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10010438:	d0a00d17 	ldw	r2,-32716(gp)
1001043c:	10c000c4 	addi	r3,r2,3
10010440:	00bfff04 	movi	r2,-4
10010444:	1884703a 	and	r2,r3,r2
10010448:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1001044c:	d0e00d17 	ldw	r3,-32716(gp)
10010450:	e0bfff17 	ldw	r2,-4(fp)
10010454:	1887883a 	add	r3,r3,r2
10010458:	00860034 	movhi	r2,6144
1001045c:	10800004 	addi	r2,r2,0
10010460:	10c0062e 	bgeu	r2,r3,1001047c <sbrk+0x74>
10010464:	e0bffa17 	ldw	r2,-24(fp)
10010468:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001046c:	e0bffd17 	ldw	r2,-12(fp)
10010470:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10010474:	00bfffc4 	movi	r2,-1
10010478:	00000b06 	br	100104a8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1001047c:	d0a00d17 	ldw	r2,-32716(gp)
10010480:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
10010484:	d0e00d17 	ldw	r3,-32716(gp)
10010488:	e0bfff17 	ldw	r2,-4(fp)
1001048c:	1885883a 	add	r2,r3,r2
10010490:	d0a00d15 	stw	r2,-32716(gp)
10010494:	e0bffa17 	ldw	r2,-24(fp)
10010498:	e0bffe15 	stw	r2,-8(fp)
1001049c:	e0bffe17 	ldw	r2,-8(fp)
100104a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
100104a4:	e0bffb17 	ldw	r2,-20(fp)
} 
100104a8:	e037883a 	mov	sp,fp
100104ac:	df000017 	ldw	fp,0(sp)
100104b0:	dec00104 	addi	sp,sp,4
100104b4:	f800283a 	ret

100104b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100104b8:	defffe04 	addi	sp,sp,-8
100104bc:	dfc00115 	stw	ra,4(sp)
100104c0:	df000015 	stw	fp,0(sp)
100104c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100104c8:	00840074 	movhi	r2,4097
100104cc:	10908804 	addi	r2,r2,16928
100104d0:	10800017 	ldw	r2,0(r2)
100104d4:	10000526 	beq	r2,zero,100104ec <alt_get_errno+0x34>
100104d8:	00840074 	movhi	r2,4097
100104dc:	10908804 	addi	r2,r2,16928
100104e0:	10800017 	ldw	r2,0(r2)
100104e4:	103ee83a 	callr	r2
100104e8:	00000206 	br	100104f4 <alt_get_errno+0x3c>
100104ec:	00840074 	movhi	r2,4097
100104f0:	10975604 	addi	r2,r2,23896
}
100104f4:	e037883a 	mov	sp,fp
100104f8:	dfc00117 	ldw	ra,4(sp)
100104fc:	df000017 	ldw	fp,0(sp)
10010500:	dec00204 	addi	sp,sp,8
10010504:	f800283a 	ret

10010508 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10010508:	defff904 	addi	sp,sp,-28
1001050c:	dfc00615 	stw	ra,24(sp)
10010510:	df000515 	stw	fp,20(sp)
10010514:	df000504 	addi	fp,sp,20
10010518:	e13ffd15 	stw	r4,-12(fp)
1001051c:	e17ffe15 	stw	r5,-8(fp)
10010520:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010524:	e0bffd17 	ldw	r2,-12(fp)
10010528:	10000816 	blt	r2,zero,1001054c <write+0x44>
1001052c:	e13ffd17 	ldw	r4,-12(fp)
10010530:	01400304 	movi	r5,12
10010534:	00040ec0 	call	100040ec <__mulsi3>
10010538:	1007883a 	mov	r3,r2
1001053c:	00840074 	movhi	r2,4097
10010540:	108c0404 	addi	r2,r2,12304
10010544:	1885883a 	add	r2,r3,r2
10010548:	00000106 	br	10010550 <write+0x48>
1001054c:	0005883a 	mov	r2,zero
10010550:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10010554:	e0bffb17 	ldw	r2,-20(fp)
10010558:	10002126 	beq	r2,zero,100105e0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1001055c:	e0bffb17 	ldw	r2,-20(fp)
10010560:	10800217 	ldw	r2,8(r2)
10010564:	108000cc 	andi	r2,r2,3
10010568:	10001826 	beq	r2,zero,100105cc <write+0xc4>
1001056c:	e0bffb17 	ldw	r2,-20(fp)
10010570:	10800017 	ldw	r2,0(r2)
10010574:	10800617 	ldw	r2,24(r2)
10010578:	10001426 	beq	r2,zero,100105cc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1001057c:	e0bffb17 	ldw	r2,-20(fp)
10010580:	10800017 	ldw	r2,0(r2)
10010584:	10800617 	ldw	r2,24(r2)
10010588:	e0ffff17 	ldw	r3,-4(fp)
1001058c:	e13ffb17 	ldw	r4,-20(fp)
10010590:	e17ffe17 	ldw	r5,-8(fp)
10010594:	180d883a 	mov	r6,r3
10010598:	103ee83a 	callr	r2
1001059c:	e0bffc15 	stw	r2,-16(fp)
100105a0:	e0bffc17 	ldw	r2,-16(fp)
100105a4:	1000070e 	bge	r2,zero,100105c4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
100105a8:	00104b80 	call	100104b8 <alt_get_errno>
100105ac:	1007883a 	mov	r3,r2
100105b0:	e0bffc17 	ldw	r2,-16(fp)
100105b4:	0085c83a 	sub	r2,zero,r2
100105b8:	18800015 	stw	r2,0(r3)
        return -1;
100105bc:	00bfffc4 	movi	r2,-1
100105c0:	00000c06 	br	100105f4 <write+0xec>
      }
      return rval;
100105c4:	e0bffc17 	ldw	r2,-16(fp)
100105c8:	00000a06 	br	100105f4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
100105cc:	00104b80 	call	100104b8 <alt_get_errno>
100105d0:	1007883a 	mov	r3,r2
100105d4:	00800344 	movi	r2,13
100105d8:	18800015 	stw	r2,0(r3)
100105dc:	00000406 	br	100105f0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
100105e0:	00104b80 	call	100104b8 <alt_get_errno>
100105e4:	1007883a 	mov	r3,r2
100105e8:	00801444 	movi	r2,81
100105ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
100105f0:	00bfffc4 	movi	r2,-1
}
100105f4:	e037883a 	mov	sp,fp
100105f8:	dfc00117 	ldw	ra,4(sp)
100105fc:	df000017 	ldw	fp,0(sp)
10010600:	dec00204 	addi	sp,sp,8
10010604:	f800283a 	ret

10010608 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10010608:	defffd04 	addi	sp,sp,-12
1001060c:	dfc00215 	stw	ra,8(sp)
10010610:	df000115 	stw	fp,4(sp)
10010614:	df000104 	addi	fp,sp,4
10010618:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1001061c:	e13fff17 	ldw	r4,-4(fp)
10010620:	01440074 	movhi	r5,4097
10010624:	29508504 	addi	r5,r5,16916
10010628:	00112b40 	call	100112b4 <alt_dev_llist_insert>
}
1001062c:	e037883a 	mov	sp,fp
10010630:	dfc00117 	ldw	ra,4(sp)
10010634:	df000017 	ldw	fp,0(sp)
10010638:	dec00204 	addi	sp,sp,8
1001063c:	f800283a 	ret

10010640 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10010640:	defffd04 	addi	sp,sp,-12
10010644:	dfc00215 	stw	ra,8(sp)
10010648:	df000115 	stw	fp,4(sp)
1001064c:	df000104 	addi	fp,sp,4
10010650:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
10010654:	0011c940 	call	10011c94 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10010658:	00800044 	movi	r2,1
1001065c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10010660:	e037883a 	mov	sp,fp
10010664:	dfc00117 	ldw	ra,4(sp)
10010668:	df000017 	ldw	fp,0(sp)
1001066c:	dec00204 	addi	sp,sp,8
10010670:	f800283a 	ret

10010674 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10010674:	defffe04 	addi	sp,sp,-8
10010678:	dfc00115 	stw	ra,4(sp)
1001067c:	df000015 	stw	fp,0(sp)
10010680:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10010684:	01040074 	movhi	r4,4097
10010688:	210c6e04 	addi	r4,r4,12728
1001068c:	000b883a 	mov	r5,zero
10010690:	01800144 	movi	r6,5
10010694:	00108200 	call	10010820 <altera_avalon_jtag_uart_init>
10010698:	01040074 	movhi	r4,4097
1001069c:	210c6404 	addi	r4,r4,12688
100106a0:	00106080 	call	10010608 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
100106a4:	0001883a 	nop
}
100106a8:	e037883a 	mov	sp,fp
100106ac:	dfc00117 	ldw	ra,4(sp)
100106b0:	df000017 	ldw	fp,0(sp)
100106b4:	dec00204 	addi	sp,sp,8
100106b8:	f800283a 	ret

100106bc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
100106bc:	defffa04 	addi	sp,sp,-24
100106c0:	dfc00515 	stw	ra,20(sp)
100106c4:	df000415 	stw	fp,16(sp)
100106c8:	df000404 	addi	fp,sp,16
100106cc:	e13ffd15 	stw	r4,-12(fp)
100106d0:	e17ffe15 	stw	r5,-8(fp)
100106d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100106d8:	e0bffd17 	ldw	r2,-12(fp)
100106dc:	10800017 	ldw	r2,0(r2)
100106e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
100106e4:	e0bffc17 	ldw	r2,-16(fp)
100106e8:	10c00a04 	addi	r3,r2,40
100106ec:	e0bffd17 	ldw	r2,-12(fp)
100106f0:	10800217 	ldw	r2,8(r2)
100106f4:	1809883a 	mov	r4,r3
100106f8:	e17ffe17 	ldw	r5,-8(fp)
100106fc:	e1bfff17 	ldw	r6,-4(fp)
10010700:	100f883a 	mov	r7,r2
10010704:	0010ce40 	call	10010ce4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10010708:	e037883a 	mov	sp,fp
1001070c:	dfc00117 	ldw	ra,4(sp)
10010710:	df000017 	ldw	fp,0(sp)
10010714:	dec00204 	addi	sp,sp,8
10010718:	f800283a 	ret

1001071c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1001071c:	defffa04 	addi	sp,sp,-24
10010720:	dfc00515 	stw	ra,20(sp)
10010724:	df000415 	stw	fp,16(sp)
10010728:	df000404 	addi	fp,sp,16
1001072c:	e13ffd15 	stw	r4,-12(fp)
10010730:	e17ffe15 	stw	r5,-8(fp)
10010734:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010738:	e0bffd17 	ldw	r2,-12(fp)
1001073c:	10800017 	ldw	r2,0(r2)
10010740:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10010744:	e0bffc17 	ldw	r2,-16(fp)
10010748:	10c00a04 	addi	r3,r2,40
1001074c:	e0bffd17 	ldw	r2,-12(fp)
10010750:	10800217 	ldw	r2,8(r2)
10010754:	1809883a 	mov	r4,r3
10010758:	e17ffe17 	ldw	r5,-8(fp)
1001075c:	e1bfff17 	ldw	r6,-4(fp)
10010760:	100f883a 	mov	r7,r2
10010764:	0010ef00 	call	10010ef0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10010768:	e037883a 	mov	sp,fp
1001076c:	dfc00117 	ldw	ra,4(sp)
10010770:	df000017 	ldw	fp,0(sp)
10010774:	dec00204 	addi	sp,sp,8
10010778:	f800283a 	ret

1001077c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1001077c:	defffc04 	addi	sp,sp,-16
10010780:	dfc00315 	stw	ra,12(sp)
10010784:	df000215 	stw	fp,8(sp)
10010788:	df000204 	addi	fp,sp,8
1001078c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010790:	e0bfff17 	ldw	r2,-4(fp)
10010794:	10800017 	ldw	r2,0(r2)
10010798:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1001079c:	e0bffe17 	ldw	r2,-8(fp)
100107a0:	10c00a04 	addi	r3,r2,40
100107a4:	e0bfff17 	ldw	r2,-4(fp)
100107a8:	10800217 	ldw	r2,8(r2)
100107ac:	1809883a 	mov	r4,r3
100107b0:	100b883a 	mov	r5,r2
100107b4:	0010b900 	call	10010b90 <altera_avalon_jtag_uart_close>
}
100107b8:	e037883a 	mov	sp,fp
100107bc:	dfc00117 	ldw	ra,4(sp)
100107c0:	df000017 	ldw	fp,0(sp)
100107c4:	dec00204 	addi	sp,sp,8
100107c8:	f800283a 	ret

100107cc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
100107cc:	defffa04 	addi	sp,sp,-24
100107d0:	dfc00515 	stw	ra,20(sp)
100107d4:	df000415 	stw	fp,16(sp)
100107d8:	df000404 	addi	fp,sp,16
100107dc:	e13ffd15 	stw	r4,-12(fp)
100107e0:	e17ffe15 	stw	r5,-8(fp)
100107e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
100107e8:	e0bffd17 	ldw	r2,-12(fp)
100107ec:	10800017 	ldw	r2,0(r2)
100107f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
100107f4:	e0bffc17 	ldw	r2,-16(fp)
100107f8:	10800a04 	addi	r2,r2,40
100107fc:	1009883a 	mov	r4,r2
10010800:	e17ffe17 	ldw	r5,-8(fp)
10010804:	e1bfff17 	ldw	r6,-4(fp)
10010808:	0010bf80 	call	10010bf8 <altera_avalon_jtag_uart_ioctl>
}
1001080c:	e037883a 	mov	sp,fp
10010810:	dfc00117 	ldw	ra,4(sp)
10010814:	df000017 	ldw	fp,0(sp)
10010818:	dec00204 	addi	sp,sp,8
1001081c:	f800283a 	ret

10010820 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10010820:	defffa04 	addi	sp,sp,-24
10010824:	dfc00515 	stw	ra,20(sp)
10010828:	df000415 	stw	fp,16(sp)
1001082c:	df000404 	addi	fp,sp,16
10010830:	e13ffd15 	stw	r4,-12(fp)
10010834:	e17ffe15 	stw	r5,-8(fp)
10010838:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1001083c:	e0bffd17 	ldw	r2,-12(fp)
10010840:	00c00044 	movi	r3,1
10010844:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10010848:	e0bffd17 	ldw	r2,-12(fp)
1001084c:	10800017 	ldw	r2,0(r2)
10010850:	10800104 	addi	r2,r2,4
10010854:	1007883a 	mov	r3,r2
10010858:	e0bffd17 	ldw	r2,-12(fp)
1001085c:	10800817 	ldw	r2,32(r2)
10010860:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10010864:	e0fffe17 	ldw	r3,-8(fp)
10010868:	e0bfff17 	ldw	r2,-4(fp)
1001086c:	d8000015 	stw	zero,0(sp)
10010870:	1809883a 	mov	r4,r3
10010874:	100b883a 	mov	r5,r2
10010878:	01840074 	movhi	r6,4097
1001087c:	31823904 	addi	r6,r6,2276
10010880:	e1fffd17 	ldw	r7,-12(fp)
10010884:	001142c0 	call	1001142c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10010888:	e0bffd17 	ldw	r2,-12(fp)
1001088c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10010890:	e0bffd17 	ldw	r2,-12(fp)
10010894:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10010898:	00840074 	movhi	r2,4097
1001089c:	10975b04 	addi	r2,r2,23916
100108a0:	10800017 	ldw	r2,0(r2)
100108a4:	1809883a 	mov	r4,r3
100108a8:	100b883a 	mov	r5,r2
100108ac:	01840074 	movhi	r6,4097
100108b0:	3182ba04 	addi	r6,r6,2792
100108b4:	e1fffd17 	ldw	r7,-12(fp)
100108b8:	00111080 	call	10011108 <alt_alarm_start>
100108bc:	1000040e 	bge	r2,zero,100108d0 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
100108c0:	e0fffd17 	ldw	r3,-12(fp)
100108c4:	00a00034 	movhi	r2,32768
100108c8:	10bfffc4 	addi	r2,r2,-1
100108cc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
100108d0:	e037883a 	mov	sp,fp
100108d4:	dfc00117 	ldw	ra,4(sp)
100108d8:	df000017 	ldw	fp,0(sp)
100108dc:	dec00204 	addi	sp,sp,8
100108e0:	f800283a 	ret

100108e4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
100108e4:	defff804 	addi	sp,sp,-32
100108e8:	df000715 	stw	fp,28(sp)
100108ec:	df000704 	addi	fp,sp,28
100108f0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
100108f4:	e0bfff17 	ldw	r2,-4(fp)
100108f8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
100108fc:	e0bffb17 	ldw	r2,-20(fp)
10010900:	10800017 	ldw	r2,0(r2)
10010904:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010908:	e0bffc17 	ldw	r2,-16(fp)
1001090c:	10800104 	addi	r2,r2,4
10010910:	10800037 	ldwio	r2,0(r2)
10010914:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10010918:	e0bffd17 	ldw	r2,-12(fp)
1001091c:	1080c00c 	andi	r2,r2,768
10010920:	1000011e 	bne	r2,zero,10010928 <altera_avalon_jtag_uart_irq+0x44>
      break;
10010924:	00006c06 	br	10010ad8 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10010928:	e0bffd17 	ldw	r2,-12(fp)
1001092c:	1080400c 	andi	r2,r2,256
10010930:	10003426 	beq	r2,zero,10010a04 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10010934:	00800074 	movhi	r2,1
10010938:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001093c:	e0bffb17 	ldw	r2,-20(fp)
10010940:	10800a17 	ldw	r2,40(r2)
10010944:	10800044 	addi	r2,r2,1
10010948:	1081ffcc 	andi	r2,r2,2047
1001094c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10010950:	e0bffb17 	ldw	r2,-20(fp)
10010954:	10c00b17 	ldw	r3,44(r2)
10010958:	e0bffe17 	ldw	r2,-8(fp)
1001095c:	1880011e 	bne	r3,r2,10010964 <altera_avalon_jtag_uart_irq+0x80>
          break;
10010960:	00001606 	br	100109bc <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10010964:	e0bffc17 	ldw	r2,-16(fp)
10010968:	10800037 	ldwio	r2,0(r2)
1001096c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10010970:	e0bff917 	ldw	r2,-28(fp)
10010974:	10a0000c 	andi	r2,r2,32768
10010978:	1000011e 	bne	r2,zero,10010980 <altera_avalon_jtag_uart_irq+0x9c>
          break;
1001097c:	00000f06 	br	100109bc <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10010980:	e0bffb17 	ldw	r2,-20(fp)
10010984:	10800a17 	ldw	r2,40(r2)
10010988:	e0fff917 	ldw	r3,-28(fp)
1001098c:	1809883a 	mov	r4,r3
10010990:	e0fffb17 	ldw	r3,-20(fp)
10010994:	1885883a 	add	r2,r3,r2
10010998:	10800e04 	addi	r2,r2,56
1001099c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100109a0:	e0bffb17 	ldw	r2,-20(fp)
100109a4:	10800a17 	ldw	r2,40(r2)
100109a8:	10800044 	addi	r2,r2,1
100109ac:	10c1ffcc 	andi	r3,r2,2047
100109b0:	e0bffb17 	ldw	r2,-20(fp)
100109b4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
100109b8:	003fe006 	br	1001093c <__alt_data_end+0xf801093c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
100109bc:	e0bff917 	ldw	r2,-28(fp)
100109c0:	10bfffec 	andhi	r2,r2,65535
100109c4:	10000f26 	beq	r2,zero,10010a04 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100109c8:	e0bffb17 	ldw	r2,-20(fp)
100109cc:	10c00817 	ldw	r3,32(r2)
100109d0:	00bfff84 	movi	r2,-2
100109d4:	1886703a 	and	r3,r3,r2
100109d8:	e0bffb17 	ldw	r2,-20(fp)
100109dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
100109e0:	e0bffc17 	ldw	r2,-16(fp)
100109e4:	10800104 	addi	r2,r2,4
100109e8:	1007883a 	mov	r3,r2
100109ec:	e0bffb17 	ldw	r2,-20(fp)
100109f0:	10800817 	ldw	r2,32(r2)
100109f4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100109f8:	e0bffc17 	ldw	r2,-16(fp)
100109fc:	10800104 	addi	r2,r2,4
10010a00:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10010a04:	e0bffd17 	ldw	r2,-12(fp)
10010a08:	1080800c 	andi	r2,r2,512
10010a0c:	10003126 	beq	r2,zero,10010ad4 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10010a10:	e0bffd17 	ldw	r2,-12(fp)
10010a14:	1004d43a 	srli	r2,r2,16
10010a18:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10010a1c:	00001406 	br	10010a70 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10010a20:	e0bffc17 	ldw	r2,-16(fp)
10010a24:	e0fffb17 	ldw	r3,-20(fp)
10010a28:	18c00d17 	ldw	r3,52(r3)
10010a2c:	e13ffb17 	ldw	r4,-20(fp)
10010a30:	20c7883a 	add	r3,r4,r3
10010a34:	18c20e04 	addi	r3,r3,2104
10010a38:	18c00003 	ldbu	r3,0(r3)
10010a3c:	18c03fcc 	andi	r3,r3,255
10010a40:	18c0201c 	xori	r3,r3,128
10010a44:	18ffe004 	addi	r3,r3,-128
10010a48:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010a4c:	e0bffb17 	ldw	r2,-20(fp)
10010a50:	10800d17 	ldw	r2,52(r2)
10010a54:	10800044 	addi	r2,r2,1
10010a58:	10c1ffcc 	andi	r3,r2,2047
10010a5c:	e0bffb17 	ldw	r2,-20(fp)
10010a60:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10010a64:	e0bffa17 	ldw	r2,-24(fp)
10010a68:	10bfffc4 	addi	r2,r2,-1
10010a6c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10010a70:	e0bffa17 	ldw	r2,-24(fp)
10010a74:	10000526 	beq	r2,zero,10010a8c <altera_avalon_jtag_uart_irq+0x1a8>
10010a78:	e0bffb17 	ldw	r2,-20(fp)
10010a7c:	10c00d17 	ldw	r3,52(r2)
10010a80:	e0bffb17 	ldw	r2,-20(fp)
10010a84:	10800c17 	ldw	r2,48(r2)
10010a88:	18bfe51e 	bne	r3,r2,10010a20 <__alt_data_end+0xf8010a20>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10010a8c:	e0bffa17 	ldw	r2,-24(fp)
10010a90:	10001026 	beq	r2,zero,10010ad4 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010a94:	e0bffb17 	ldw	r2,-20(fp)
10010a98:	10c00817 	ldw	r3,32(r2)
10010a9c:	00bfff44 	movi	r2,-3
10010aa0:	1886703a 	and	r3,r3,r2
10010aa4:	e0bffb17 	ldw	r2,-20(fp)
10010aa8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010aac:	e0bffb17 	ldw	r2,-20(fp)
10010ab0:	10800017 	ldw	r2,0(r2)
10010ab4:	10800104 	addi	r2,r2,4
10010ab8:	1007883a 	mov	r3,r2
10010abc:	e0bffb17 	ldw	r2,-20(fp)
10010ac0:	10800817 	ldw	r2,32(r2)
10010ac4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010ac8:	e0bffc17 	ldw	r2,-16(fp)
10010acc:	10800104 	addi	r2,r2,4
10010ad0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10010ad4:	003f8c06 	br	10010908 <__alt_data_end+0xf8010908>
}
10010ad8:	e037883a 	mov	sp,fp
10010adc:	df000017 	ldw	fp,0(sp)
10010ae0:	dec00104 	addi	sp,sp,4
10010ae4:	f800283a 	ret

10010ae8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10010ae8:	defff804 	addi	sp,sp,-32
10010aec:	df000715 	stw	fp,28(sp)
10010af0:	df000704 	addi	fp,sp,28
10010af4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10010af8:	e0bffb17 	ldw	r2,-20(fp)
10010afc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10010b00:	e0bff917 	ldw	r2,-28(fp)
10010b04:	10800017 	ldw	r2,0(r2)
10010b08:	10800104 	addi	r2,r2,4
10010b0c:	10800037 	ldwio	r2,0(r2)
10010b10:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10010b14:	e0bffa17 	ldw	r2,-24(fp)
10010b18:	1081000c 	andi	r2,r2,1024
10010b1c:	10000b26 	beq	r2,zero,10010b4c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10010b20:	e0bff917 	ldw	r2,-28(fp)
10010b24:	10800017 	ldw	r2,0(r2)
10010b28:	10800104 	addi	r2,r2,4
10010b2c:	1007883a 	mov	r3,r2
10010b30:	e0bff917 	ldw	r2,-28(fp)
10010b34:	10800817 	ldw	r2,32(r2)
10010b38:	10810014 	ori	r2,r2,1024
10010b3c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10010b40:	e0bff917 	ldw	r2,-28(fp)
10010b44:	10000915 	stw	zero,36(r2)
10010b48:	00000a06 	br	10010b74 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10010b4c:	e0bff917 	ldw	r2,-28(fp)
10010b50:	10c00917 	ldw	r3,36(r2)
10010b54:	00a00034 	movhi	r2,32768
10010b58:	10bfff04 	addi	r2,r2,-4
10010b5c:	10c00536 	bltu	r2,r3,10010b74 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10010b60:	e0bff917 	ldw	r2,-28(fp)
10010b64:	10800917 	ldw	r2,36(r2)
10010b68:	10c00044 	addi	r3,r2,1
10010b6c:	e0bff917 	ldw	r2,-28(fp)
10010b70:	10c00915 	stw	r3,36(r2)
10010b74:	00840074 	movhi	r2,4097
10010b78:	10975b04 	addi	r2,r2,23916
10010b7c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10010b80:	e037883a 	mov	sp,fp
10010b84:	df000017 	ldw	fp,0(sp)
10010b88:	dec00104 	addi	sp,sp,4
10010b8c:	f800283a 	ret

10010b90 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10010b90:	defffd04 	addi	sp,sp,-12
10010b94:	df000215 	stw	fp,8(sp)
10010b98:	df000204 	addi	fp,sp,8
10010b9c:	e13ffe15 	stw	r4,-8(fp)
10010ba0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010ba4:	00000506 	br	10010bbc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10010ba8:	e0bfff17 	ldw	r2,-4(fp)
10010bac:	1090000c 	andi	r2,r2,16384
10010bb0:	10000226 	beq	r2,zero,10010bbc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10010bb4:	00bffd44 	movi	r2,-11
10010bb8:	00000b06 	br	10010be8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010bbc:	e0bffe17 	ldw	r2,-8(fp)
10010bc0:	10c00d17 	ldw	r3,52(r2)
10010bc4:	e0bffe17 	ldw	r2,-8(fp)
10010bc8:	10800c17 	ldw	r2,48(r2)
10010bcc:	18800526 	beq	r3,r2,10010be4 <altera_avalon_jtag_uart_close+0x54>
10010bd0:	e0bffe17 	ldw	r2,-8(fp)
10010bd4:	10c00917 	ldw	r3,36(r2)
10010bd8:	e0bffe17 	ldw	r2,-8(fp)
10010bdc:	10800117 	ldw	r2,4(r2)
10010be0:	18bff136 	bltu	r3,r2,10010ba8 <__alt_data_end+0xf8010ba8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10010be4:	0005883a 	mov	r2,zero
}
10010be8:	e037883a 	mov	sp,fp
10010bec:	df000017 	ldw	fp,0(sp)
10010bf0:	dec00104 	addi	sp,sp,4
10010bf4:	f800283a 	ret

10010bf8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10010bf8:	defffa04 	addi	sp,sp,-24
10010bfc:	df000515 	stw	fp,20(sp)
10010c00:	df000504 	addi	fp,sp,20
10010c04:	e13ffd15 	stw	r4,-12(fp)
10010c08:	e17ffe15 	stw	r5,-8(fp)
10010c0c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10010c10:	00bff9c4 	movi	r2,-25
10010c14:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10010c18:	e0bffe17 	ldw	r2,-8(fp)
10010c1c:	10da8060 	cmpeqi	r3,r2,27137
10010c20:	1800031e 	bne	r3,zero,10010c30 <altera_avalon_jtag_uart_ioctl+0x38>
10010c24:	109a80a0 	cmpeqi	r2,r2,27138
10010c28:	1000191e 	bne	r2,zero,10010c90 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
10010c2c:	00002806 	br	10010cd0 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10010c30:	e0bffd17 	ldw	r2,-12(fp)
10010c34:	10c00117 	ldw	r3,4(r2)
10010c38:	00a00034 	movhi	r2,32768
10010c3c:	10bfffc4 	addi	r2,r2,-1
10010c40:	18801226 	beq	r3,r2,10010c8c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
10010c44:	e0bfff17 	ldw	r2,-4(fp)
10010c48:	10800017 	ldw	r2,0(r2)
10010c4c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10010c50:	e0bffc17 	ldw	r2,-16(fp)
10010c54:	10800090 	cmplti	r2,r2,2
10010c58:	1000061e 	bne	r2,zero,10010c74 <altera_avalon_jtag_uart_ioctl+0x7c>
10010c5c:	e0fffc17 	ldw	r3,-16(fp)
10010c60:	00a00034 	movhi	r2,32768
10010c64:	10bfffc4 	addi	r2,r2,-1
10010c68:	18800226 	beq	r3,r2,10010c74 <altera_avalon_jtag_uart_ioctl+0x7c>
10010c6c:	e0bffc17 	ldw	r2,-16(fp)
10010c70:	00000206 	br	10010c7c <altera_avalon_jtag_uart_ioctl+0x84>
10010c74:	00a00034 	movhi	r2,32768
10010c78:	10bfff84 	addi	r2,r2,-2
10010c7c:	e0fffd17 	ldw	r3,-12(fp)
10010c80:	18800115 	stw	r2,4(r3)
      rc = 0;
10010c84:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010c88:	00001106 	br	10010cd0 <altera_avalon_jtag_uart_ioctl+0xd8>
10010c8c:	00001006 	br	10010cd0 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10010c90:	e0bffd17 	ldw	r2,-12(fp)
10010c94:	10c00117 	ldw	r3,4(r2)
10010c98:	00a00034 	movhi	r2,32768
10010c9c:	10bfffc4 	addi	r2,r2,-1
10010ca0:	18800a26 	beq	r3,r2,10010ccc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10010ca4:	e0bffd17 	ldw	r2,-12(fp)
10010ca8:	10c00917 	ldw	r3,36(r2)
10010cac:	e0bffd17 	ldw	r2,-12(fp)
10010cb0:	10800117 	ldw	r2,4(r2)
10010cb4:	1885803a 	cmpltu	r2,r3,r2
10010cb8:	10c03fcc 	andi	r3,r2,255
10010cbc:	e0bfff17 	ldw	r2,-4(fp)
10010cc0:	10c00015 	stw	r3,0(r2)
      rc = 0;
10010cc4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010cc8:	00000006 	br	10010ccc <altera_avalon_jtag_uart_ioctl+0xd4>
10010ccc:	0001883a 	nop

  default:
    break;
  }

  return rc;
10010cd0:	e0bffb17 	ldw	r2,-20(fp)
}
10010cd4:	e037883a 	mov	sp,fp
10010cd8:	df000017 	ldw	fp,0(sp)
10010cdc:	dec00104 	addi	sp,sp,4
10010ce0:	f800283a 	ret

10010ce4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10010ce4:	defff304 	addi	sp,sp,-52
10010ce8:	dfc00c15 	stw	ra,48(sp)
10010cec:	df000b15 	stw	fp,44(sp)
10010cf0:	df000b04 	addi	fp,sp,44
10010cf4:	e13ffc15 	stw	r4,-16(fp)
10010cf8:	e17ffd15 	stw	r5,-12(fp)
10010cfc:	e1bffe15 	stw	r6,-8(fp)
10010d00:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10010d04:	e0bffd17 	ldw	r2,-12(fp)
10010d08:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10010d0c:	00004906 	br	10010e34 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10010d10:	e0bffc17 	ldw	r2,-16(fp)
10010d14:	10800a17 	ldw	r2,40(r2)
10010d18:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10010d1c:	e0bffc17 	ldw	r2,-16(fp)
10010d20:	10800b17 	ldw	r2,44(r2)
10010d24:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10010d28:	e0fff717 	ldw	r3,-36(fp)
10010d2c:	e0bff817 	ldw	r2,-32(fp)
10010d30:	18800536 	bltu	r3,r2,10010d48 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10010d34:	e0fff717 	ldw	r3,-36(fp)
10010d38:	e0bff817 	ldw	r2,-32(fp)
10010d3c:	1885c83a 	sub	r2,r3,r2
10010d40:	e0bff615 	stw	r2,-40(fp)
10010d44:	00000406 	br	10010d58 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10010d48:	00c20004 	movi	r3,2048
10010d4c:	e0bff817 	ldw	r2,-32(fp)
10010d50:	1885c83a 	sub	r2,r3,r2
10010d54:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10010d58:	e0bff617 	ldw	r2,-40(fp)
10010d5c:	1000011e 	bne	r2,zero,10010d64 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
10010d60:	00001d06 	br	10010dd8 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
10010d64:	e0fffe17 	ldw	r3,-8(fp)
10010d68:	e0bff617 	ldw	r2,-40(fp)
10010d6c:	1880022e 	bgeu	r3,r2,10010d78 <altera_avalon_jtag_uart_read+0x94>
        n = space;
10010d70:	e0bffe17 	ldw	r2,-8(fp)
10010d74:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10010d78:	e0bff817 	ldw	r2,-32(fp)
10010d7c:	10800e04 	addi	r2,r2,56
10010d80:	e0fffc17 	ldw	r3,-16(fp)
10010d84:	1885883a 	add	r2,r3,r2
10010d88:	e13ff517 	ldw	r4,-44(fp)
10010d8c:	100b883a 	mov	r5,r2
10010d90:	e1bff617 	ldw	r6,-40(fp)
10010d94:	000bc5c0 	call	1000bc5c <memcpy>
      ptr   += n;
10010d98:	e0fff517 	ldw	r3,-44(fp)
10010d9c:	e0bff617 	ldw	r2,-40(fp)
10010da0:	1885883a 	add	r2,r3,r2
10010da4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10010da8:	e0fffe17 	ldw	r3,-8(fp)
10010dac:	e0bff617 	ldw	r2,-40(fp)
10010db0:	1885c83a 	sub	r2,r3,r2
10010db4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010db8:	e0fff817 	ldw	r3,-32(fp)
10010dbc:	e0bff617 	ldw	r2,-40(fp)
10010dc0:	1885883a 	add	r2,r3,r2
10010dc4:	10c1ffcc 	andi	r3,r2,2047
10010dc8:	e0bffc17 	ldw	r2,-16(fp)
10010dcc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10010dd0:	e0bffe17 	ldw	r2,-8(fp)
10010dd4:	00bfce16 	blt	zero,r2,10010d10 <__alt_data_end+0xf8010d10>

    /* If we read any data then return it */
    if (ptr != buffer)
10010dd8:	e0fff517 	ldw	r3,-44(fp)
10010ddc:	e0bffd17 	ldw	r2,-12(fp)
10010de0:	18800126 	beq	r3,r2,10010de8 <altera_avalon_jtag_uart_read+0x104>
      break;
10010de4:	00001506 	br	10010e3c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10010de8:	e0bfff17 	ldw	r2,-4(fp)
10010dec:	1090000c 	andi	r2,r2,16384
10010df0:	10000126 	beq	r2,zero,10010df8 <altera_avalon_jtag_uart_read+0x114>
      break;
10010df4:	00001106 	br	10010e3c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10010df8:	0001883a 	nop
10010dfc:	e0bffc17 	ldw	r2,-16(fp)
10010e00:	10c00a17 	ldw	r3,40(r2)
10010e04:	e0bff717 	ldw	r2,-36(fp)
10010e08:	1880051e 	bne	r3,r2,10010e20 <altera_avalon_jtag_uart_read+0x13c>
10010e0c:	e0bffc17 	ldw	r2,-16(fp)
10010e10:	10c00917 	ldw	r3,36(r2)
10010e14:	e0bffc17 	ldw	r2,-16(fp)
10010e18:	10800117 	ldw	r2,4(r2)
10010e1c:	18bff736 	bltu	r3,r2,10010dfc <__alt_data_end+0xf8010dfc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10010e20:	e0bffc17 	ldw	r2,-16(fp)
10010e24:	10c00a17 	ldw	r3,40(r2)
10010e28:	e0bff717 	ldw	r2,-36(fp)
10010e2c:	1880011e 	bne	r3,r2,10010e34 <altera_avalon_jtag_uart_read+0x150>
      break;
10010e30:	00000206 	br	10010e3c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10010e34:	e0bffe17 	ldw	r2,-8(fp)
10010e38:	00bfb516 	blt	zero,r2,10010d10 <__alt_data_end+0xf8010d10>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10010e3c:	e0fff517 	ldw	r3,-44(fp)
10010e40:	e0bffd17 	ldw	r2,-12(fp)
10010e44:	18801826 	beq	r3,r2,10010ea8 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010e48:	0005303a 	rdctl	r2,status
10010e4c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010e50:	e0fffa17 	ldw	r3,-24(fp)
10010e54:	00bfff84 	movi	r2,-2
10010e58:	1884703a 	and	r2,r3,r2
10010e5c:	1001703a 	wrctl	status,r2
  
  return context;
10010e60:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10010e64:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010e68:	e0bffc17 	ldw	r2,-16(fp)
10010e6c:	10800817 	ldw	r2,32(r2)
10010e70:	10c00054 	ori	r3,r2,1
10010e74:	e0bffc17 	ldw	r2,-16(fp)
10010e78:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010e7c:	e0bffc17 	ldw	r2,-16(fp)
10010e80:	10800017 	ldw	r2,0(r2)
10010e84:	10800104 	addi	r2,r2,4
10010e88:	1007883a 	mov	r3,r2
10010e8c:	e0bffc17 	ldw	r2,-16(fp)
10010e90:	10800817 	ldw	r2,32(r2)
10010e94:	18800035 	stwio	r2,0(r3)
10010e98:	e0bff917 	ldw	r2,-28(fp)
10010e9c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010ea0:	e0bffb17 	ldw	r2,-20(fp)
10010ea4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10010ea8:	e0fff517 	ldw	r3,-44(fp)
10010eac:	e0bffd17 	ldw	r2,-12(fp)
10010eb0:	18800426 	beq	r3,r2,10010ec4 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
10010eb4:	e0fff517 	ldw	r3,-44(fp)
10010eb8:	e0bffd17 	ldw	r2,-12(fp)
10010ebc:	1885c83a 	sub	r2,r3,r2
10010ec0:	00000606 	br	10010edc <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
10010ec4:	e0bfff17 	ldw	r2,-4(fp)
10010ec8:	1090000c 	andi	r2,r2,16384
10010ecc:	10000226 	beq	r2,zero,10010ed8 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
10010ed0:	00bffd44 	movi	r2,-11
10010ed4:	00000106 	br	10010edc <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
10010ed8:	00bffec4 	movi	r2,-5
}
10010edc:	e037883a 	mov	sp,fp
10010ee0:	dfc00117 	ldw	ra,4(sp)
10010ee4:	df000017 	ldw	fp,0(sp)
10010ee8:	dec00204 	addi	sp,sp,8
10010eec:	f800283a 	ret

10010ef0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10010ef0:	defff304 	addi	sp,sp,-52
10010ef4:	dfc00c15 	stw	ra,48(sp)
10010ef8:	df000b15 	stw	fp,44(sp)
10010efc:	df000b04 	addi	fp,sp,44
10010f00:	e13ffc15 	stw	r4,-16(fp)
10010f04:	e17ffd15 	stw	r5,-12(fp)
10010f08:	e1bffe15 	stw	r6,-8(fp)
10010f0c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10010f10:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10010f14:	e0bffd17 	ldw	r2,-12(fp)
10010f18:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10010f1c:	00003806 	br	10011000 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10010f20:	e0bffc17 	ldw	r2,-16(fp)
10010f24:	10800c17 	ldw	r2,48(r2)
10010f28:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
10010f2c:	e0bffc17 	ldw	r2,-16(fp)
10010f30:	10800d17 	ldw	r2,52(r2)
10010f34:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10010f38:	e0fff817 	ldw	r3,-32(fp)
10010f3c:	e0bff517 	ldw	r2,-44(fp)
10010f40:	1880062e 	bgeu	r3,r2,10010f5c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10010f44:	e0fff517 	ldw	r3,-44(fp)
10010f48:	e0bff817 	ldw	r2,-32(fp)
10010f4c:	1885c83a 	sub	r2,r3,r2
10010f50:	10bfffc4 	addi	r2,r2,-1
10010f54:	e0bff615 	stw	r2,-40(fp)
10010f58:	00000b06 	br	10010f88 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10010f5c:	e0bff517 	ldw	r2,-44(fp)
10010f60:	10000526 	beq	r2,zero,10010f78 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10010f64:	00c20004 	movi	r3,2048
10010f68:	e0bff817 	ldw	r2,-32(fp)
10010f6c:	1885c83a 	sub	r2,r3,r2
10010f70:	e0bff615 	stw	r2,-40(fp)
10010f74:	00000406 	br	10010f88 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10010f78:	00c1ffc4 	movi	r3,2047
10010f7c:	e0bff817 	ldw	r2,-32(fp)
10010f80:	1885c83a 	sub	r2,r3,r2
10010f84:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10010f88:	e0bff617 	ldw	r2,-40(fp)
10010f8c:	1000011e 	bne	r2,zero,10010f94 <altera_avalon_jtag_uart_write+0xa4>
        break;
10010f90:	00001d06 	br	10011008 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
10010f94:	e0fffe17 	ldw	r3,-8(fp)
10010f98:	e0bff617 	ldw	r2,-40(fp)
10010f9c:	1880022e 	bgeu	r3,r2,10010fa8 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
10010fa0:	e0bffe17 	ldw	r2,-8(fp)
10010fa4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10010fa8:	e0bff817 	ldw	r2,-32(fp)
10010fac:	10820e04 	addi	r2,r2,2104
10010fb0:	e0fffc17 	ldw	r3,-16(fp)
10010fb4:	1885883a 	add	r2,r3,r2
10010fb8:	1009883a 	mov	r4,r2
10010fbc:	e17ffd17 	ldw	r5,-12(fp)
10010fc0:	e1bff617 	ldw	r6,-40(fp)
10010fc4:	000bc5c0 	call	1000bc5c <memcpy>
      ptr   += n;
10010fc8:	e0fffd17 	ldw	r3,-12(fp)
10010fcc:	e0bff617 	ldw	r2,-40(fp)
10010fd0:	1885883a 	add	r2,r3,r2
10010fd4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10010fd8:	e0fffe17 	ldw	r3,-8(fp)
10010fdc:	e0bff617 	ldw	r2,-40(fp)
10010fe0:	1885c83a 	sub	r2,r3,r2
10010fe4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010fe8:	e0fff817 	ldw	r3,-32(fp)
10010fec:	e0bff617 	ldw	r2,-40(fp)
10010ff0:	1885883a 	add	r2,r3,r2
10010ff4:	10c1ffcc 	andi	r3,r2,2047
10010ff8:	e0bffc17 	ldw	r2,-16(fp)
10010ffc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10011000:	e0bffe17 	ldw	r2,-8(fp)
10011004:	00bfc616 	blt	zero,r2,10010f20 <__alt_data_end+0xf8010f20>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011008:	0005303a 	rdctl	r2,status
1001100c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011010:	e0fffa17 	ldw	r3,-24(fp)
10011014:	00bfff84 	movi	r2,-2
10011018:	1884703a 	and	r2,r3,r2
1001101c:	1001703a 	wrctl	status,r2
  
  return context;
10011020:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10011024:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10011028:	e0bffc17 	ldw	r2,-16(fp)
1001102c:	10800817 	ldw	r2,32(r2)
10011030:	10c00094 	ori	r3,r2,2
10011034:	e0bffc17 	ldw	r2,-16(fp)
10011038:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1001103c:	e0bffc17 	ldw	r2,-16(fp)
10011040:	10800017 	ldw	r2,0(r2)
10011044:	10800104 	addi	r2,r2,4
10011048:	1007883a 	mov	r3,r2
1001104c:	e0bffc17 	ldw	r2,-16(fp)
10011050:	10800817 	ldw	r2,32(r2)
10011054:	18800035 	stwio	r2,0(r3)
10011058:	e0bff917 	ldw	r2,-28(fp)
1001105c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011060:	e0bffb17 	ldw	r2,-20(fp)
10011064:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10011068:	e0bffe17 	ldw	r2,-8(fp)
1001106c:	0080120e 	bge	zero,r2,100110b8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
10011070:	e0bfff17 	ldw	r2,-4(fp)
10011074:	1090000c 	andi	r2,r2,16384
10011078:	10000126 	beq	r2,zero,10011080 <altera_avalon_jtag_uart_write+0x190>
        break;
1001107c:	00001006 	br	100110c0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10011080:	0001883a 	nop
10011084:	e0bffc17 	ldw	r2,-16(fp)
10011088:	10c00d17 	ldw	r3,52(r2)
1001108c:	e0bff517 	ldw	r2,-44(fp)
10011090:	1880051e 	bne	r3,r2,100110a8 <altera_avalon_jtag_uart_write+0x1b8>
10011094:	e0bffc17 	ldw	r2,-16(fp)
10011098:	10c00917 	ldw	r3,36(r2)
1001109c:	e0bffc17 	ldw	r2,-16(fp)
100110a0:	10800117 	ldw	r2,4(r2)
100110a4:	18bff736 	bltu	r3,r2,10011084 <__alt_data_end+0xf8011084>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
100110a8:	e0bffc17 	ldw	r2,-16(fp)
100110ac:	10800917 	ldw	r2,36(r2)
100110b0:	10000126 	beq	r2,zero,100110b8 <altera_avalon_jtag_uart_write+0x1c8>
         break;
100110b4:	00000206 	br	100110c0 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
100110b8:	e0bffe17 	ldw	r2,-8(fp)
100110bc:	00bf9716 	blt	zero,r2,10010f1c <__alt_data_end+0xf8010f1c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
100110c0:	e0fffd17 	ldw	r3,-12(fp)
100110c4:	e0bff717 	ldw	r2,-36(fp)
100110c8:	18800426 	beq	r3,r2,100110dc <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
100110cc:	e0fffd17 	ldw	r3,-12(fp)
100110d0:	e0bff717 	ldw	r2,-36(fp)
100110d4:	1885c83a 	sub	r2,r3,r2
100110d8:	00000606 	br	100110f4 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
100110dc:	e0bfff17 	ldw	r2,-4(fp)
100110e0:	1090000c 	andi	r2,r2,16384
100110e4:	10000226 	beq	r2,zero,100110f0 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
100110e8:	00bffd44 	movi	r2,-11
100110ec:	00000106 	br	100110f4 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
100110f0:	00bffec4 	movi	r2,-5
}
100110f4:	e037883a 	mov	sp,fp
100110f8:	dfc00117 	ldw	ra,4(sp)
100110fc:	df000017 	ldw	fp,0(sp)
10011100:	dec00204 	addi	sp,sp,8
10011104:	f800283a 	ret

10011108 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10011108:	defff504 	addi	sp,sp,-44
1001110c:	df000a15 	stw	fp,40(sp)
10011110:	df000a04 	addi	fp,sp,40
10011114:	e13ffc15 	stw	r4,-16(fp)
10011118:	e17ffd15 	stw	r5,-12(fp)
1001111c:	e1bffe15 	stw	r6,-8(fp)
10011120:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10011124:	e03ff615 	stw	zero,-40(fp)
10011128:	00840074 	movhi	r2,4097
1001112c:	10975b04 	addi	r2,r2,23916
10011130:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
10011134:	10003f26 	beq	r2,zero,10011234 <alt_alarm_start+0x12c>
  {
    if (alarm)
10011138:	e0bffc17 	ldw	r2,-16(fp)
1001113c:	10003b26 	beq	r2,zero,1001122c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
10011140:	e0bffc17 	ldw	r2,-16(fp)
10011144:	e0fffe17 	ldw	r3,-8(fp)
10011148:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1001114c:	e0bffc17 	ldw	r2,-16(fp)
10011150:	e0ffff17 	ldw	r3,-4(fp)
10011154:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011158:	0005303a 	rdctl	r2,status
1001115c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011160:	e0fff817 	ldw	r3,-32(fp)
10011164:	00bfff84 	movi	r2,-2
10011168:	1884703a 	and	r2,r3,r2
1001116c:	1001703a 	wrctl	status,r2
  
  return context;
10011170:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
10011174:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10011178:	00840074 	movhi	r2,4097
1001117c:	10975c04 	addi	r2,r2,23920
10011180:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
10011184:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10011188:	e0fffd17 	ldw	r3,-12(fp)
1001118c:	e0bff617 	ldw	r2,-40(fp)
10011190:	1885883a 	add	r2,r3,r2
10011194:	10c00044 	addi	r3,r2,1
10011198:	e0bffc17 	ldw	r2,-16(fp)
1001119c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
100111a0:	e0bffc17 	ldw	r2,-16(fp)
100111a4:	10c00217 	ldw	r3,8(r2)
100111a8:	e0bff617 	ldw	r2,-40(fp)
100111ac:	1880042e 	bgeu	r3,r2,100111c0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
100111b0:	e0bffc17 	ldw	r2,-16(fp)
100111b4:	00c00044 	movi	r3,1
100111b8:	10c00405 	stb	r3,16(r2)
100111bc:	00000206 	br	100111c8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
100111c0:	e0bffc17 	ldw	r2,-16(fp)
100111c4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
100111c8:	e0fffc17 	ldw	r3,-16(fp)
100111cc:	00840074 	movhi	r2,4097
100111d0:	10908b04 	addi	r2,r2,16940
100111d4:	e0bff915 	stw	r2,-28(fp)
100111d8:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100111dc:	e0bffa17 	ldw	r2,-24(fp)
100111e0:	e0fff917 	ldw	r3,-28(fp)
100111e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100111e8:	e0bff917 	ldw	r2,-28(fp)
100111ec:	10c00017 	ldw	r3,0(r2)
100111f0:	e0bffa17 	ldw	r2,-24(fp)
100111f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100111f8:	e0bff917 	ldw	r2,-28(fp)
100111fc:	10800017 	ldw	r2,0(r2)
10011200:	e0fffa17 	ldw	r3,-24(fp)
10011204:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10011208:	e0bff917 	ldw	r2,-28(fp)
1001120c:	e0fffa17 	ldw	r3,-24(fp)
10011210:	10c00015 	stw	r3,0(r2)
10011214:	e0bff717 	ldw	r2,-36(fp)
10011218:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001121c:	e0bffb17 	ldw	r2,-20(fp)
10011220:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10011224:	0005883a 	mov	r2,zero
10011228:	00000306 	br	10011238 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1001122c:	00bffa84 	movi	r2,-22
10011230:	00000106 	br	10011238 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
10011234:	00bfde84 	movi	r2,-134
  }
}
10011238:	e037883a 	mov	sp,fp
1001123c:	df000017 	ldw	fp,0(sp)
10011240:	dec00104 	addi	sp,sp,4
10011244:	f800283a 	ret

10011248 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10011248:	deffff04 	addi	sp,sp,-4
1001124c:	df000015 	stw	fp,0(sp)
10011250:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10011254:	e037883a 	mov	sp,fp
10011258:	df000017 	ldw	fp,0(sp)
1001125c:	dec00104 	addi	sp,sp,4
10011260:	f800283a 	ret

10011264 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011264:	defffe04 	addi	sp,sp,-8
10011268:	dfc00115 	stw	ra,4(sp)
1001126c:	df000015 	stw	fp,0(sp)
10011270:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011274:	00840074 	movhi	r2,4097
10011278:	10908804 	addi	r2,r2,16928
1001127c:	10800017 	ldw	r2,0(r2)
10011280:	10000526 	beq	r2,zero,10011298 <alt_get_errno+0x34>
10011284:	00840074 	movhi	r2,4097
10011288:	10908804 	addi	r2,r2,16928
1001128c:	10800017 	ldw	r2,0(r2)
10011290:	103ee83a 	callr	r2
10011294:	00000206 	br	100112a0 <alt_get_errno+0x3c>
10011298:	00840074 	movhi	r2,4097
1001129c:	10975604 	addi	r2,r2,23896
}
100112a0:	e037883a 	mov	sp,fp
100112a4:	dfc00117 	ldw	ra,4(sp)
100112a8:	df000017 	ldw	fp,0(sp)
100112ac:	dec00204 	addi	sp,sp,8
100112b0:	f800283a 	ret

100112b4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
100112b4:	defffa04 	addi	sp,sp,-24
100112b8:	dfc00515 	stw	ra,20(sp)
100112bc:	df000415 	stw	fp,16(sp)
100112c0:	df000404 	addi	fp,sp,16
100112c4:	e13ffe15 	stw	r4,-8(fp)
100112c8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
100112cc:	e0bffe17 	ldw	r2,-8(fp)
100112d0:	10000326 	beq	r2,zero,100112e0 <alt_dev_llist_insert+0x2c>
100112d4:	e0bffe17 	ldw	r2,-8(fp)
100112d8:	10800217 	ldw	r2,8(r2)
100112dc:	1000061e 	bne	r2,zero,100112f8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
100112e0:	00112640 	call	10011264 <alt_get_errno>
100112e4:	1007883a 	mov	r3,r2
100112e8:	00800584 	movi	r2,22
100112ec:	18800015 	stw	r2,0(r3)
    return -EINVAL;
100112f0:	00bffa84 	movi	r2,-22
100112f4:	00001306 	br	10011344 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
100112f8:	e0bffe17 	ldw	r2,-8(fp)
100112fc:	e0ffff17 	ldw	r3,-4(fp)
10011300:	e0fffc15 	stw	r3,-16(fp)
10011304:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10011308:	e0bffd17 	ldw	r2,-12(fp)
1001130c:	e0fffc17 	ldw	r3,-16(fp)
10011310:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10011314:	e0bffc17 	ldw	r2,-16(fp)
10011318:	10c00017 	ldw	r3,0(r2)
1001131c:	e0bffd17 	ldw	r2,-12(fp)
10011320:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10011324:	e0bffc17 	ldw	r2,-16(fp)
10011328:	10800017 	ldw	r2,0(r2)
1001132c:	e0fffd17 	ldw	r3,-12(fp)
10011330:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10011334:	e0bffc17 	ldw	r2,-16(fp)
10011338:	e0fffd17 	ldw	r3,-12(fp)
1001133c:	10c00015 	stw	r3,0(r2)

  return 0;  
10011340:	0005883a 	mov	r2,zero
}
10011344:	e037883a 	mov	sp,fp
10011348:	dfc00117 	ldw	ra,4(sp)
1001134c:	df000017 	ldw	fp,0(sp)
10011350:	dec00204 	addi	sp,sp,8
10011354:	f800283a 	ret

10011358 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10011358:	defffd04 	addi	sp,sp,-12
1001135c:	dfc00215 	stw	ra,8(sp)
10011360:	df000115 	stw	fp,4(sp)
10011364:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10011368:	00840074 	movhi	r2,4097
1001136c:	1088da04 	addi	r2,r2,9064
10011370:	e0bfff15 	stw	r2,-4(fp)
10011374:	00000606 	br	10011390 <_do_ctors+0x38>
        (*ctor) (); 
10011378:	e0bfff17 	ldw	r2,-4(fp)
1001137c:	10800017 	ldw	r2,0(r2)
10011380:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10011384:	e0bfff17 	ldw	r2,-4(fp)
10011388:	10bfff04 	addi	r2,r2,-4
1001138c:	e0bfff15 	stw	r2,-4(fp)
10011390:	e0ffff17 	ldw	r3,-4(fp)
10011394:	00840074 	movhi	r2,4097
10011398:	1088db04 	addi	r2,r2,9068
1001139c:	18bff62e 	bgeu	r3,r2,10011378 <__alt_data_end+0xf8011378>
        (*ctor) (); 
}
100113a0:	e037883a 	mov	sp,fp
100113a4:	dfc00117 	ldw	ra,4(sp)
100113a8:	df000017 	ldw	fp,0(sp)
100113ac:	dec00204 	addi	sp,sp,8
100113b0:	f800283a 	ret

100113b4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
100113b4:	defffd04 	addi	sp,sp,-12
100113b8:	dfc00215 	stw	ra,8(sp)
100113bc:	df000115 	stw	fp,4(sp)
100113c0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100113c4:	00840074 	movhi	r2,4097
100113c8:	1088da04 	addi	r2,r2,9064
100113cc:	e0bfff15 	stw	r2,-4(fp)
100113d0:	00000606 	br	100113ec <_do_dtors+0x38>
        (*dtor) (); 
100113d4:	e0bfff17 	ldw	r2,-4(fp)
100113d8:	10800017 	ldw	r2,0(r2)
100113dc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100113e0:	e0bfff17 	ldw	r2,-4(fp)
100113e4:	10bfff04 	addi	r2,r2,-4
100113e8:	e0bfff15 	stw	r2,-4(fp)
100113ec:	e0ffff17 	ldw	r3,-4(fp)
100113f0:	00840074 	movhi	r2,4097
100113f4:	1088db04 	addi	r2,r2,9068
100113f8:	18bff62e 	bgeu	r3,r2,100113d4 <__alt_data_end+0xf80113d4>
        (*dtor) (); 
}
100113fc:	e037883a 	mov	sp,fp
10011400:	dfc00117 	ldw	ra,4(sp)
10011404:	df000017 	ldw	fp,0(sp)
10011408:	dec00204 	addi	sp,sp,8
1001140c:	f800283a 	ret

10011410 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10011410:	deffff04 	addi	sp,sp,-4
10011414:	df000015 	stw	fp,0(sp)
10011418:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1001141c:	e037883a 	mov	sp,fp
10011420:	df000017 	ldw	fp,0(sp)
10011424:	dec00104 	addi	sp,sp,4
10011428:	f800283a 	ret

1001142c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1001142c:	defff904 	addi	sp,sp,-28
10011430:	dfc00615 	stw	ra,24(sp)
10011434:	df000515 	stw	fp,20(sp)
10011438:	df000504 	addi	fp,sp,20
1001143c:	e13ffc15 	stw	r4,-16(fp)
10011440:	e17ffd15 	stw	r5,-12(fp)
10011444:	e1bffe15 	stw	r6,-8(fp)
10011448:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1001144c:	e0800217 	ldw	r2,8(fp)
10011450:	d8800015 	stw	r2,0(sp)
10011454:	e13ffc17 	ldw	r4,-16(fp)
10011458:	e17ffd17 	ldw	r5,-12(fp)
1001145c:	e1bffe17 	ldw	r6,-8(fp)
10011460:	e1ffff17 	ldw	r7,-4(fp)
10011464:	001160c0 	call	1001160c <alt_iic_isr_register>
}  
10011468:	e037883a 	mov	sp,fp
1001146c:	dfc00117 	ldw	ra,4(sp)
10011470:	df000017 	ldw	fp,0(sp)
10011474:	dec00204 	addi	sp,sp,8
10011478:	f800283a 	ret

1001147c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1001147c:	defff904 	addi	sp,sp,-28
10011480:	df000615 	stw	fp,24(sp)
10011484:	df000604 	addi	fp,sp,24
10011488:	e13ffe15 	stw	r4,-8(fp)
1001148c:	e17fff15 	stw	r5,-4(fp)
10011490:	e0bfff17 	ldw	r2,-4(fp)
10011494:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011498:	0005303a 	rdctl	r2,status
1001149c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100114a0:	e0fffb17 	ldw	r3,-20(fp)
100114a4:	00bfff84 	movi	r2,-2
100114a8:	1884703a 	and	r2,r3,r2
100114ac:	1001703a 	wrctl	status,r2
  
  return context;
100114b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100114b4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
100114b8:	e0bffa17 	ldw	r2,-24(fp)
100114bc:	00c00044 	movi	r3,1
100114c0:	1884983a 	sll	r2,r3,r2
100114c4:	1007883a 	mov	r3,r2
100114c8:	00840074 	movhi	r2,4097
100114cc:	10975a04 	addi	r2,r2,23912
100114d0:	10800017 	ldw	r2,0(r2)
100114d4:	1886b03a 	or	r3,r3,r2
100114d8:	00840074 	movhi	r2,4097
100114dc:	10975a04 	addi	r2,r2,23912
100114e0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100114e4:	00840074 	movhi	r2,4097
100114e8:	10975a04 	addi	r2,r2,23912
100114ec:	10800017 	ldw	r2,0(r2)
100114f0:	100170fa 	wrctl	ienable,r2
100114f4:	e0bffc17 	ldw	r2,-16(fp)
100114f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100114fc:	e0bffd17 	ldw	r2,-12(fp)
10011500:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10011504:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10011508:	0001883a 	nop
}
1001150c:	e037883a 	mov	sp,fp
10011510:	df000017 	ldw	fp,0(sp)
10011514:	dec00104 	addi	sp,sp,4
10011518:	f800283a 	ret

1001151c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1001151c:	defff904 	addi	sp,sp,-28
10011520:	df000615 	stw	fp,24(sp)
10011524:	df000604 	addi	fp,sp,24
10011528:	e13ffe15 	stw	r4,-8(fp)
1001152c:	e17fff15 	stw	r5,-4(fp)
10011530:	e0bfff17 	ldw	r2,-4(fp)
10011534:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011538:	0005303a 	rdctl	r2,status
1001153c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011540:	e0fffb17 	ldw	r3,-20(fp)
10011544:	00bfff84 	movi	r2,-2
10011548:	1884703a 	and	r2,r3,r2
1001154c:	1001703a 	wrctl	status,r2
  
  return context;
10011550:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011554:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10011558:	e0bffa17 	ldw	r2,-24(fp)
1001155c:	00c00044 	movi	r3,1
10011560:	1884983a 	sll	r2,r3,r2
10011564:	0084303a 	nor	r2,zero,r2
10011568:	1007883a 	mov	r3,r2
1001156c:	00840074 	movhi	r2,4097
10011570:	10975a04 	addi	r2,r2,23912
10011574:	10800017 	ldw	r2,0(r2)
10011578:	1886703a 	and	r3,r3,r2
1001157c:	00840074 	movhi	r2,4097
10011580:	10975a04 	addi	r2,r2,23912
10011584:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011588:	00840074 	movhi	r2,4097
1001158c:	10975a04 	addi	r2,r2,23912
10011590:	10800017 	ldw	r2,0(r2)
10011594:	100170fa 	wrctl	ienable,r2
10011598:	e0bffc17 	ldw	r2,-16(fp)
1001159c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100115a0:	e0bffd17 	ldw	r2,-12(fp)
100115a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100115a8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
100115ac:	0001883a 	nop
}
100115b0:	e037883a 	mov	sp,fp
100115b4:	df000017 	ldw	fp,0(sp)
100115b8:	dec00104 	addi	sp,sp,4
100115bc:	f800283a 	ret

100115c0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
100115c0:	defffc04 	addi	sp,sp,-16
100115c4:	df000315 	stw	fp,12(sp)
100115c8:	df000304 	addi	fp,sp,12
100115cc:	e13ffe15 	stw	r4,-8(fp)
100115d0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
100115d4:	000530fa 	rdctl	r2,ienable
100115d8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
100115dc:	e0bfff17 	ldw	r2,-4(fp)
100115e0:	00c00044 	movi	r3,1
100115e4:	1884983a 	sll	r2,r3,r2
100115e8:	1007883a 	mov	r3,r2
100115ec:	e0bffd17 	ldw	r2,-12(fp)
100115f0:	1884703a 	and	r2,r3,r2
100115f4:	1004c03a 	cmpne	r2,r2,zero
100115f8:	10803fcc 	andi	r2,r2,255
}
100115fc:	e037883a 	mov	sp,fp
10011600:	df000017 	ldw	fp,0(sp)
10011604:	dec00104 	addi	sp,sp,4
10011608:	f800283a 	ret

1001160c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1001160c:	defff504 	addi	sp,sp,-44
10011610:	dfc00a15 	stw	ra,40(sp)
10011614:	df000915 	stw	fp,36(sp)
10011618:	df000904 	addi	fp,sp,36
1001161c:	e13ffc15 	stw	r4,-16(fp)
10011620:	e17ffd15 	stw	r5,-12(fp)
10011624:	e1bffe15 	stw	r6,-8(fp)
10011628:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1001162c:	00bffa84 	movi	r2,-22
10011630:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10011634:	e0bffd17 	ldw	r2,-12(fp)
10011638:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1001163c:	e0bff817 	ldw	r2,-32(fp)
10011640:	10800808 	cmpgei	r2,r2,32
10011644:	1000271e 	bne	r2,zero,100116e4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011648:	0005303a 	rdctl	r2,status
1001164c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011650:	e0fffa17 	ldw	r3,-24(fp)
10011654:	00bfff84 	movi	r2,-2
10011658:	1884703a 	and	r2,r3,r2
1001165c:	1001703a 	wrctl	status,r2
  
  return context;
10011660:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10011664:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10011668:	00840074 	movhi	r2,4097
1001166c:	1097f804 	addi	r2,r2,24544
10011670:	e0fff817 	ldw	r3,-32(fp)
10011674:	180690fa 	slli	r3,r3,3
10011678:	10c5883a 	add	r2,r2,r3
1001167c:	e0fffe17 	ldw	r3,-8(fp)
10011680:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10011684:	00840074 	movhi	r2,4097
10011688:	1097f804 	addi	r2,r2,24544
1001168c:	e0fff817 	ldw	r3,-32(fp)
10011690:	180690fa 	slli	r3,r3,3
10011694:	10c5883a 	add	r2,r2,r3
10011698:	10800104 	addi	r2,r2,4
1001169c:	e0ffff17 	ldw	r3,-4(fp)
100116a0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
100116a4:	e0bffe17 	ldw	r2,-8(fp)
100116a8:	10000526 	beq	r2,zero,100116c0 <alt_iic_isr_register+0xb4>
100116ac:	e0bff817 	ldw	r2,-32(fp)
100116b0:	e13ffc17 	ldw	r4,-16(fp)
100116b4:	100b883a 	mov	r5,r2
100116b8:	001147c0 	call	1001147c <alt_ic_irq_enable>
100116bc:	00000406 	br	100116d0 <alt_iic_isr_register+0xc4>
100116c0:	e0bff817 	ldw	r2,-32(fp)
100116c4:	e13ffc17 	ldw	r4,-16(fp)
100116c8:	100b883a 	mov	r5,r2
100116cc:	001151c0 	call	1001151c <alt_ic_irq_disable>
100116d0:	e0bff715 	stw	r2,-36(fp)
100116d4:	e0bff917 	ldw	r2,-28(fp)
100116d8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100116dc:	e0bffb17 	ldw	r2,-20(fp)
100116e0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
100116e4:	e0bff717 	ldw	r2,-36(fp)
}
100116e8:	e037883a 	mov	sp,fp
100116ec:	dfc00117 	ldw	ra,4(sp)
100116f0:	df000017 	ldw	fp,0(sp)
100116f4:	dec00204 	addi	sp,sp,8
100116f8:	f800283a 	ret

100116fc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
100116fc:	defff804 	addi	sp,sp,-32
10011700:	dfc00715 	stw	ra,28(sp)
10011704:	df000615 	stw	fp,24(sp)
10011708:	dc000515 	stw	r16,20(sp)
1001170c:	df000604 	addi	fp,sp,24
10011710:	e13ffb15 	stw	r4,-20(fp)
10011714:	e17ffc15 	stw	r5,-16(fp)
10011718:	e1bffd15 	stw	r6,-12(fp)
1001171c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10011720:	e13ffc17 	ldw	r4,-16(fp)
10011724:	e17ffd17 	ldw	r5,-12(fp)
10011728:	e1bffe17 	ldw	r6,-8(fp)
1001172c:	00119980 	call	10011998 <open>
10011730:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10011734:	e0bffa17 	ldw	r2,-24(fp)
10011738:	10002216 	blt	r2,zero,100117c4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1001173c:	04040074 	movhi	r16,4097
10011740:	840c0404 	addi	r16,r16,12304
10011744:	e0bffa17 	ldw	r2,-24(fp)
10011748:	1009883a 	mov	r4,r2
1001174c:	01400304 	movi	r5,12
10011750:	00040ec0 	call	100040ec <__mulsi3>
10011754:	8085883a 	add	r2,r16,r2
10011758:	10c00017 	ldw	r3,0(r2)
1001175c:	e0bffb17 	ldw	r2,-20(fp)
10011760:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10011764:	04040074 	movhi	r16,4097
10011768:	840c0404 	addi	r16,r16,12304
1001176c:	e0bffa17 	ldw	r2,-24(fp)
10011770:	1009883a 	mov	r4,r2
10011774:	01400304 	movi	r5,12
10011778:	00040ec0 	call	100040ec <__mulsi3>
1001177c:	8085883a 	add	r2,r16,r2
10011780:	10800104 	addi	r2,r2,4
10011784:	10c00017 	ldw	r3,0(r2)
10011788:	e0bffb17 	ldw	r2,-20(fp)
1001178c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10011790:	04040074 	movhi	r16,4097
10011794:	840c0404 	addi	r16,r16,12304
10011798:	e0bffa17 	ldw	r2,-24(fp)
1001179c:	1009883a 	mov	r4,r2
100117a0:	01400304 	movi	r5,12
100117a4:	00040ec0 	call	100040ec <__mulsi3>
100117a8:	8085883a 	add	r2,r16,r2
100117ac:	10800204 	addi	r2,r2,8
100117b0:	10c00017 	ldw	r3,0(r2)
100117b4:	e0bffb17 	ldw	r2,-20(fp)
100117b8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
100117bc:	e13ffa17 	ldw	r4,-24(fp)
100117c0:	00103880 	call	10010388 <alt_release_fd>
  }
} 
100117c4:	e6ffff04 	addi	sp,fp,-4
100117c8:	dfc00217 	ldw	ra,8(sp)
100117cc:	df000117 	ldw	fp,4(sp)
100117d0:	dc000017 	ldw	r16,0(sp)
100117d4:	dec00304 	addi	sp,sp,12
100117d8:	f800283a 	ret

100117dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
100117dc:	defffb04 	addi	sp,sp,-20
100117e0:	dfc00415 	stw	ra,16(sp)
100117e4:	df000315 	stw	fp,12(sp)
100117e8:	df000304 	addi	fp,sp,12
100117ec:	e13ffd15 	stw	r4,-12(fp)
100117f0:	e17ffe15 	stw	r5,-8(fp)
100117f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
100117f8:	01040074 	movhi	r4,4097
100117fc:	210c0704 	addi	r4,r4,12316
10011800:	e17ffd17 	ldw	r5,-12(fp)
10011804:	01800044 	movi	r6,1
10011808:	01c07fc4 	movi	r7,511
1001180c:	00116fc0 	call	100116fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10011810:	01040074 	movhi	r4,4097
10011814:	210c0404 	addi	r4,r4,12304
10011818:	e17ffe17 	ldw	r5,-8(fp)
1001181c:	000d883a 	mov	r6,zero
10011820:	01c07fc4 	movi	r7,511
10011824:	00116fc0 	call	100116fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10011828:	01040074 	movhi	r4,4097
1001182c:	210c0a04 	addi	r4,r4,12328
10011830:	e17fff17 	ldw	r5,-4(fp)
10011834:	01800044 	movi	r6,1
10011838:	01c07fc4 	movi	r7,511
1001183c:	00116fc0 	call	100116fc <alt_open_fd>
}  
10011840:	e037883a 	mov	sp,fp
10011844:	dfc00117 	ldw	ra,4(sp)
10011848:	df000017 	ldw	fp,0(sp)
1001184c:	dec00204 	addi	sp,sp,8
10011850:	f800283a 	ret

10011854 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011854:	defffe04 	addi	sp,sp,-8
10011858:	dfc00115 	stw	ra,4(sp)
1001185c:	df000015 	stw	fp,0(sp)
10011860:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011864:	00840074 	movhi	r2,4097
10011868:	10908804 	addi	r2,r2,16928
1001186c:	10800017 	ldw	r2,0(r2)
10011870:	10000526 	beq	r2,zero,10011888 <alt_get_errno+0x34>
10011874:	00840074 	movhi	r2,4097
10011878:	10908804 	addi	r2,r2,16928
1001187c:	10800017 	ldw	r2,0(r2)
10011880:	103ee83a 	callr	r2
10011884:	00000206 	br	10011890 <alt_get_errno+0x3c>
10011888:	00840074 	movhi	r2,4097
1001188c:	10975604 	addi	r2,r2,23896
}
10011890:	e037883a 	mov	sp,fp
10011894:	dfc00117 	ldw	ra,4(sp)
10011898:	df000017 	ldw	fp,0(sp)
1001189c:	dec00204 	addi	sp,sp,8
100118a0:	f800283a 	ret

100118a4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
100118a4:	defffb04 	addi	sp,sp,-20
100118a8:	dfc00415 	stw	ra,16(sp)
100118ac:	df000315 	stw	fp,12(sp)
100118b0:	dc000215 	stw	r16,8(sp)
100118b4:	df000304 	addi	fp,sp,12
100118b8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
100118bc:	e0bffe17 	ldw	r2,-8(fp)
100118c0:	10800217 	ldw	r2,8(r2)
100118c4:	10d00034 	orhi	r3,r2,16384
100118c8:	e0bffe17 	ldw	r2,-8(fp)
100118cc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100118d0:	e03ffd15 	stw	zero,-12(fp)
100118d4:	00002306 	br	10011964 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100118d8:	04040074 	movhi	r16,4097
100118dc:	840c0404 	addi	r16,r16,12304
100118e0:	e0bffd17 	ldw	r2,-12(fp)
100118e4:	1009883a 	mov	r4,r2
100118e8:	01400304 	movi	r5,12
100118ec:	00040ec0 	call	100040ec <__mulsi3>
100118f0:	8085883a 	add	r2,r16,r2
100118f4:	10c00017 	ldw	r3,0(r2)
100118f8:	e0bffe17 	ldw	r2,-8(fp)
100118fc:	10800017 	ldw	r2,0(r2)
10011900:	1880151e 	bne	r3,r2,10011958 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10011904:	04040074 	movhi	r16,4097
10011908:	840c0404 	addi	r16,r16,12304
1001190c:	e0bffd17 	ldw	r2,-12(fp)
10011910:	1009883a 	mov	r4,r2
10011914:	01400304 	movi	r5,12
10011918:	00040ec0 	call	100040ec <__mulsi3>
1001191c:	8085883a 	add	r2,r16,r2
10011920:	10800204 	addi	r2,r2,8
10011924:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10011928:	10000b0e 	bge	r2,zero,10011958 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1001192c:	e13ffd17 	ldw	r4,-12(fp)
10011930:	01400304 	movi	r5,12
10011934:	00040ec0 	call	100040ec <__mulsi3>
10011938:	1007883a 	mov	r3,r2
1001193c:	00840074 	movhi	r2,4097
10011940:	108c0404 	addi	r2,r2,12304
10011944:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10011948:	e0bffe17 	ldw	r2,-8(fp)
1001194c:	18800226 	beq	r3,r2,10011958 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10011950:	00bffcc4 	movi	r2,-13
10011954:	00000a06 	br	10011980 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10011958:	e0bffd17 	ldw	r2,-12(fp)
1001195c:	10800044 	addi	r2,r2,1
10011960:	e0bffd15 	stw	r2,-12(fp)
10011964:	00840074 	movhi	r2,4097
10011968:	10908704 	addi	r2,r2,16924
1001196c:	10800017 	ldw	r2,0(r2)
10011970:	1007883a 	mov	r3,r2
10011974:	e0bffd17 	ldw	r2,-12(fp)
10011978:	18bfd72e 	bgeu	r3,r2,100118d8 <__alt_data_end+0xf80118d8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1001197c:	0005883a 	mov	r2,zero
}
10011980:	e6ffff04 	addi	sp,fp,-4
10011984:	dfc00217 	ldw	ra,8(sp)
10011988:	df000117 	ldw	fp,4(sp)
1001198c:	dc000017 	ldw	r16,0(sp)
10011990:	dec00304 	addi	sp,sp,12
10011994:	f800283a 	ret

10011998 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10011998:	defff604 	addi	sp,sp,-40
1001199c:	dfc00915 	stw	ra,36(sp)
100119a0:	df000815 	stw	fp,32(sp)
100119a4:	df000804 	addi	fp,sp,32
100119a8:	e13ffd15 	stw	r4,-12(fp)
100119ac:	e17ffe15 	stw	r5,-8(fp)
100119b0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
100119b4:	00bfffc4 	movi	r2,-1
100119b8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
100119bc:	00bffb44 	movi	r2,-19
100119c0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
100119c4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
100119c8:	e13ffd17 	ldw	r4,-12(fp)
100119cc:	01440074 	movhi	r5,4097
100119d0:	29508504 	addi	r5,r5,16916
100119d4:	0011cb40 	call	10011cb4 <alt_find_dev>
100119d8:	e0bff815 	stw	r2,-32(fp)
100119dc:	e0bff817 	ldw	r2,-32(fp)
100119e0:	1000051e 	bne	r2,zero,100119f8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
100119e4:	e13ffd17 	ldw	r4,-12(fp)
100119e8:	0011d440 	call	10011d44 <alt_find_file>
100119ec:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
100119f0:	00800044 	movi	r2,1
100119f4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
100119f8:	e0bff817 	ldw	r2,-32(fp)
100119fc:	10002b26 	beq	r2,zero,10011aac <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10011a00:	e13ff817 	ldw	r4,-32(fp)
10011a04:	0011e580 	call	10011e58 <alt_get_fd>
10011a08:	e0bff915 	stw	r2,-28(fp)
10011a0c:	e0bff917 	ldw	r2,-28(fp)
10011a10:	1000030e 	bge	r2,zero,10011a20 <open+0x88>
    {
      status = index;
10011a14:	e0bff917 	ldw	r2,-28(fp)
10011a18:	e0bffa15 	stw	r2,-24(fp)
10011a1c:	00002506 	br	10011ab4 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10011a20:	e13ff917 	ldw	r4,-28(fp)
10011a24:	01400304 	movi	r5,12
10011a28:	00040ec0 	call	100040ec <__mulsi3>
10011a2c:	1007883a 	mov	r3,r2
10011a30:	00840074 	movhi	r2,4097
10011a34:	108c0404 	addi	r2,r2,12304
10011a38:	1885883a 	add	r2,r3,r2
10011a3c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10011a40:	e0fffe17 	ldw	r3,-8(fp)
10011a44:	00900034 	movhi	r2,16384
10011a48:	10bfffc4 	addi	r2,r2,-1
10011a4c:	1886703a 	and	r3,r3,r2
10011a50:	e0bffc17 	ldw	r2,-16(fp)
10011a54:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10011a58:	e0bffb17 	ldw	r2,-20(fp)
10011a5c:	1000051e 	bne	r2,zero,10011a74 <open+0xdc>
10011a60:	e13ffc17 	ldw	r4,-16(fp)
10011a64:	00118a40 	call	100118a4 <alt_file_locked>
10011a68:	e0bffa15 	stw	r2,-24(fp)
10011a6c:	e0bffa17 	ldw	r2,-24(fp)
10011a70:	10001016 	blt	r2,zero,10011ab4 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10011a74:	e0bff817 	ldw	r2,-32(fp)
10011a78:	10800317 	ldw	r2,12(r2)
10011a7c:	10000826 	beq	r2,zero,10011aa0 <open+0x108>
10011a80:	e0bff817 	ldw	r2,-32(fp)
10011a84:	10800317 	ldw	r2,12(r2)
10011a88:	e13ffc17 	ldw	r4,-16(fp)
10011a8c:	e17ffd17 	ldw	r5,-12(fp)
10011a90:	e1bffe17 	ldw	r6,-8(fp)
10011a94:	e1ffff17 	ldw	r7,-4(fp)
10011a98:	103ee83a 	callr	r2
10011a9c:	00000106 	br	10011aa4 <open+0x10c>
10011aa0:	0005883a 	mov	r2,zero
10011aa4:	e0bffa15 	stw	r2,-24(fp)
10011aa8:	00000206 	br	10011ab4 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10011aac:	00bffb44 	movi	r2,-19
10011ab0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10011ab4:	e0bffa17 	ldw	r2,-24(fp)
10011ab8:	1000090e 	bge	r2,zero,10011ae0 <open+0x148>
  {
    alt_release_fd (index);  
10011abc:	e13ff917 	ldw	r4,-28(fp)
10011ac0:	00103880 	call	10010388 <alt_release_fd>
    ALT_ERRNO = -status;
10011ac4:	00118540 	call	10011854 <alt_get_errno>
10011ac8:	1007883a 	mov	r3,r2
10011acc:	e0bffa17 	ldw	r2,-24(fp)
10011ad0:	0085c83a 	sub	r2,zero,r2
10011ad4:	18800015 	stw	r2,0(r3)
    return -1;
10011ad8:	00bfffc4 	movi	r2,-1
10011adc:	00000106 	br	10011ae4 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10011ae0:	e0bff917 	ldw	r2,-28(fp)
}
10011ae4:	e037883a 	mov	sp,fp
10011ae8:	dfc00117 	ldw	ra,4(sp)
10011aec:	df000017 	ldw	fp,0(sp)
10011af0:	dec00204 	addi	sp,sp,8
10011af4:	f800283a 	ret

10011af8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10011af8:	defffa04 	addi	sp,sp,-24
10011afc:	df000515 	stw	fp,20(sp)
10011b00:	df000504 	addi	fp,sp,20
10011b04:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011b08:	0005303a 	rdctl	r2,status
10011b0c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011b10:	e0fffc17 	ldw	r3,-16(fp)
10011b14:	00bfff84 	movi	r2,-2
10011b18:	1884703a 	and	r2,r3,r2
10011b1c:	1001703a 	wrctl	status,r2
  
  return context;
10011b20:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10011b24:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10011b28:	e0bfff17 	ldw	r2,-4(fp)
10011b2c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10011b30:	e0bffd17 	ldw	r2,-12(fp)
10011b34:	10800017 	ldw	r2,0(r2)
10011b38:	e0fffd17 	ldw	r3,-12(fp)
10011b3c:	18c00117 	ldw	r3,4(r3)
10011b40:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10011b44:	e0bffd17 	ldw	r2,-12(fp)
10011b48:	10800117 	ldw	r2,4(r2)
10011b4c:	e0fffd17 	ldw	r3,-12(fp)
10011b50:	18c00017 	ldw	r3,0(r3)
10011b54:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10011b58:	e0bffd17 	ldw	r2,-12(fp)
10011b5c:	e0fffd17 	ldw	r3,-12(fp)
10011b60:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10011b64:	e0bffd17 	ldw	r2,-12(fp)
10011b68:	e0fffd17 	ldw	r3,-12(fp)
10011b6c:	10c00015 	stw	r3,0(r2)
10011b70:	e0bffb17 	ldw	r2,-20(fp)
10011b74:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011b78:	e0bffe17 	ldw	r2,-8(fp)
10011b7c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10011b80:	e037883a 	mov	sp,fp
10011b84:	df000017 	ldw	fp,0(sp)
10011b88:	dec00104 	addi	sp,sp,4
10011b8c:	f800283a 	ret

10011b90 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10011b90:	defffb04 	addi	sp,sp,-20
10011b94:	dfc00415 	stw	ra,16(sp)
10011b98:	df000315 	stw	fp,12(sp)
10011b9c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10011ba0:	d0a00f17 	ldw	r2,-32708(gp)
10011ba4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10011ba8:	d0a6e017 	ldw	r2,-25728(gp)
10011bac:	10800044 	addi	r2,r2,1
10011bb0:	d0a6e015 	stw	r2,-25728(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10011bb4:	00002e06 	br	10011c70 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10011bb8:	e0bffd17 	ldw	r2,-12(fp)
10011bbc:	10800017 	ldw	r2,0(r2)
10011bc0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10011bc4:	e0bffd17 	ldw	r2,-12(fp)
10011bc8:	10800403 	ldbu	r2,16(r2)
10011bcc:	10803fcc 	andi	r2,r2,255
10011bd0:	10000426 	beq	r2,zero,10011be4 <alt_tick+0x54>
10011bd4:	d0a6e017 	ldw	r2,-25728(gp)
10011bd8:	1000021e 	bne	r2,zero,10011be4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10011bdc:	e0bffd17 	ldw	r2,-12(fp)
10011be0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10011be4:	e0bffd17 	ldw	r2,-12(fp)
10011be8:	10800217 	ldw	r2,8(r2)
10011bec:	d0e6e017 	ldw	r3,-25728(gp)
10011bf0:	18801d36 	bltu	r3,r2,10011c68 <alt_tick+0xd8>
10011bf4:	e0bffd17 	ldw	r2,-12(fp)
10011bf8:	10800403 	ldbu	r2,16(r2)
10011bfc:	10803fcc 	andi	r2,r2,255
10011c00:	1000191e 	bne	r2,zero,10011c68 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10011c04:	e0bffd17 	ldw	r2,-12(fp)
10011c08:	10800317 	ldw	r2,12(r2)
10011c0c:	e0fffd17 	ldw	r3,-12(fp)
10011c10:	18c00517 	ldw	r3,20(r3)
10011c14:	1809883a 	mov	r4,r3
10011c18:	103ee83a 	callr	r2
10011c1c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10011c20:	e0bfff17 	ldw	r2,-4(fp)
10011c24:	1000031e 	bne	r2,zero,10011c34 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10011c28:	e13ffd17 	ldw	r4,-12(fp)
10011c2c:	0011af80 	call	10011af8 <alt_alarm_stop>
10011c30:	00000d06 	br	10011c68 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10011c34:	e0bffd17 	ldw	r2,-12(fp)
10011c38:	10c00217 	ldw	r3,8(r2)
10011c3c:	e0bfff17 	ldw	r2,-4(fp)
10011c40:	1887883a 	add	r3,r3,r2
10011c44:	e0bffd17 	ldw	r2,-12(fp)
10011c48:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10011c4c:	e0bffd17 	ldw	r2,-12(fp)
10011c50:	10c00217 	ldw	r3,8(r2)
10011c54:	d0a6e017 	ldw	r2,-25728(gp)
10011c58:	1880032e 	bgeu	r3,r2,10011c68 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10011c5c:	e0bffd17 	ldw	r2,-12(fp)
10011c60:	00c00044 	movi	r3,1
10011c64:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10011c68:	e0bffe17 	ldw	r2,-8(fp)
10011c6c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10011c70:	e0fffd17 	ldw	r3,-12(fp)
10011c74:	d0a00f04 	addi	r2,gp,-32708
10011c78:	18bfcf1e 	bne	r3,r2,10011bb8 <__alt_data_end+0xf8011bb8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10011c7c:	0001883a 	nop
}
10011c80:	e037883a 	mov	sp,fp
10011c84:	dfc00117 	ldw	ra,4(sp)
10011c88:	df000017 	ldw	fp,0(sp)
10011c8c:	dec00204 	addi	sp,sp,8
10011c90:	f800283a 	ret

10011c94 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10011c94:	deffff04 	addi	sp,sp,-4
10011c98:	df000015 	stw	fp,0(sp)
10011c9c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10011ca0:	000170fa 	wrctl	ienable,zero
}
10011ca4:	e037883a 	mov	sp,fp
10011ca8:	df000017 	ldw	fp,0(sp)
10011cac:	dec00104 	addi	sp,sp,4
10011cb0:	f800283a 	ret

10011cb4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10011cb4:	defffa04 	addi	sp,sp,-24
10011cb8:	dfc00515 	stw	ra,20(sp)
10011cbc:	df000415 	stw	fp,16(sp)
10011cc0:	df000404 	addi	fp,sp,16
10011cc4:	e13ffe15 	stw	r4,-8(fp)
10011cc8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10011ccc:	e0bfff17 	ldw	r2,-4(fp)
10011cd0:	10800017 	ldw	r2,0(r2)
10011cd4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10011cd8:	e13ffe17 	ldw	r4,-8(fp)
10011cdc:	000d1340 	call	1000d134 <strlen>
10011ce0:	10800044 	addi	r2,r2,1
10011ce4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011ce8:	00000d06 	br	10011d20 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10011cec:	e0bffc17 	ldw	r2,-16(fp)
10011cf0:	10c00217 	ldw	r3,8(r2)
10011cf4:	e0bffd17 	ldw	r2,-12(fp)
10011cf8:	1809883a 	mov	r4,r3
10011cfc:	e17ffe17 	ldw	r5,-8(fp)
10011d00:	100d883a 	mov	r6,r2
10011d04:	00120140 	call	10012014 <memcmp>
10011d08:	1000021e 	bne	r2,zero,10011d14 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10011d0c:	e0bffc17 	ldw	r2,-16(fp)
10011d10:	00000706 	br	10011d30 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10011d14:	e0bffc17 	ldw	r2,-16(fp)
10011d18:	10800017 	ldw	r2,0(r2)
10011d1c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011d20:	e0fffc17 	ldw	r3,-16(fp)
10011d24:	e0bfff17 	ldw	r2,-4(fp)
10011d28:	18bff01e 	bne	r3,r2,10011cec <__alt_data_end+0xf8011cec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10011d2c:	0005883a 	mov	r2,zero
}
10011d30:	e037883a 	mov	sp,fp
10011d34:	dfc00117 	ldw	ra,4(sp)
10011d38:	df000017 	ldw	fp,0(sp)
10011d3c:	dec00204 	addi	sp,sp,8
10011d40:	f800283a 	ret

10011d44 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10011d44:	defffb04 	addi	sp,sp,-20
10011d48:	dfc00415 	stw	ra,16(sp)
10011d4c:	df000315 	stw	fp,12(sp)
10011d50:	df000304 	addi	fp,sp,12
10011d54:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10011d58:	00840074 	movhi	r2,4097
10011d5c:	10908304 	addi	r2,r2,16908
10011d60:	10800017 	ldw	r2,0(r2)
10011d64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011d68:	00003106 	br	10011e30 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10011d6c:	e0bffd17 	ldw	r2,-12(fp)
10011d70:	10800217 	ldw	r2,8(r2)
10011d74:	1009883a 	mov	r4,r2
10011d78:	000d1340 	call	1000d134 <strlen>
10011d7c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10011d80:	e0bffd17 	ldw	r2,-12(fp)
10011d84:	10c00217 	ldw	r3,8(r2)
10011d88:	e0bffe17 	ldw	r2,-8(fp)
10011d8c:	10bfffc4 	addi	r2,r2,-1
10011d90:	1885883a 	add	r2,r3,r2
10011d94:	10800003 	ldbu	r2,0(r2)
10011d98:	10803fcc 	andi	r2,r2,255
10011d9c:	1080201c 	xori	r2,r2,128
10011da0:	10bfe004 	addi	r2,r2,-128
10011da4:	10800bd8 	cmpnei	r2,r2,47
10011da8:	1000031e 	bne	r2,zero,10011db8 <alt_find_file+0x74>
    {
      len -= 1;
10011dac:	e0bffe17 	ldw	r2,-8(fp)
10011db0:	10bfffc4 	addi	r2,r2,-1
10011db4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011db8:	e0bffe17 	ldw	r2,-8(fp)
10011dbc:	e0ffff17 	ldw	r3,-4(fp)
10011dc0:	1885883a 	add	r2,r3,r2
10011dc4:	10800003 	ldbu	r2,0(r2)
10011dc8:	10803fcc 	andi	r2,r2,255
10011dcc:	1080201c 	xori	r2,r2,128
10011dd0:	10bfe004 	addi	r2,r2,-128
10011dd4:	10800be0 	cmpeqi	r2,r2,47
10011dd8:	1000081e 	bne	r2,zero,10011dfc <alt_find_file+0xb8>
10011ddc:	e0bffe17 	ldw	r2,-8(fp)
10011de0:	e0ffff17 	ldw	r3,-4(fp)
10011de4:	1885883a 	add	r2,r3,r2
10011de8:	10800003 	ldbu	r2,0(r2)
10011dec:	10803fcc 	andi	r2,r2,255
10011df0:	1080201c 	xori	r2,r2,128
10011df4:	10bfe004 	addi	r2,r2,-128
10011df8:	10000a1e 	bne	r2,zero,10011e24 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10011dfc:	e0bffd17 	ldw	r2,-12(fp)
10011e00:	10c00217 	ldw	r3,8(r2)
10011e04:	e0bffe17 	ldw	r2,-8(fp)
10011e08:	1809883a 	mov	r4,r3
10011e0c:	e17fff17 	ldw	r5,-4(fp)
10011e10:	100d883a 	mov	r6,r2
10011e14:	00120140 	call	10012014 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011e18:	1000021e 	bne	r2,zero,10011e24 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10011e1c:	e0bffd17 	ldw	r2,-12(fp)
10011e20:	00000806 	br	10011e44 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10011e24:	e0bffd17 	ldw	r2,-12(fp)
10011e28:	10800017 	ldw	r2,0(r2)
10011e2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011e30:	e0fffd17 	ldw	r3,-12(fp)
10011e34:	00840074 	movhi	r2,4097
10011e38:	10908304 	addi	r2,r2,16908
10011e3c:	18bfcb1e 	bne	r3,r2,10011d6c <__alt_data_end+0xf8011d6c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10011e40:	0005883a 	mov	r2,zero
}
10011e44:	e037883a 	mov	sp,fp
10011e48:	dfc00117 	ldw	ra,4(sp)
10011e4c:	df000017 	ldw	fp,0(sp)
10011e50:	dec00204 	addi	sp,sp,8
10011e54:	f800283a 	ret

10011e58 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10011e58:	defffa04 	addi	sp,sp,-24
10011e5c:	dfc00515 	stw	ra,20(sp)
10011e60:	df000415 	stw	fp,16(sp)
10011e64:	dc000315 	stw	r16,12(sp)
10011e68:	df000404 	addi	fp,sp,16
10011e6c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10011e70:	00bffa04 	movi	r2,-24
10011e74:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011e78:	e03ffc15 	stw	zero,-16(fp)
10011e7c:	00002106 	br	10011f04 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10011e80:	04040074 	movhi	r16,4097
10011e84:	840c0404 	addi	r16,r16,12304
10011e88:	e0bffc17 	ldw	r2,-16(fp)
10011e8c:	1009883a 	mov	r4,r2
10011e90:	01400304 	movi	r5,12
10011e94:	00040ec0 	call	100040ec <__mulsi3>
10011e98:	8085883a 	add	r2,r16,r2
10011e9c:	10800017 	ldw	r2,0(r2)
10011ea0:	1000151e 	bne	r2,zero,10011ef8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10011ea4:	04040074 	movhi	r16,4097
10011ea8:	840c0404 	addi	r16,r16,12304
10011eac:	e0bffc17 	ldw	r2,-16(fp)
10011eb0:	1009883a 	mov	r4,r2
10011eb4:	01400304 	movi	r5,12
10011eb8:	00040ec0 	call	100040ec <__mulsi3>
10011ebc:	8085883a 	add	r2,r16,r2
10011ec0:	e0fffe17 	ldw	r3,-8(fp)
10011ec4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10011ec8:	00840074 	movhi	r2,4097
10011ecc:	10908704 	addi	r2,r2,16924
10011ed0:	10c00017 	ldw	r3,0(r2)
10011ed4:	e0bffc17 	ldw	r2,-16(fp)
10011ed8:	1880040e 	bge	r3,r2,10011eec <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10011edc:	00840074 	movhi	r2,4097
10011ee0:	10908704 	addi	r2,r2,16924
10011ee4:	e0fffc17 	ldw	r3,-16(fp)
10011ee8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10011eec:	e0bffc17 	ldw	r2,-16(fp)
10011ef0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10011ef4:	00000606 	br	10011f10 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011ef8:	e0bffc17 	ldw	r2,-16(fp)
10011efc:	10800044 	addi	r2,r2,1
10011f00:	e0bffc15 	stw	r2,-16(fp)
10011f04:	e0bffc17 	ldw	r2,-16(fp)
10011f08:	10800810 	cmplti	r2,r2,32
10011f0c:	103fdc1e 	bne	r2,zero,10011e80 <__alt_data_end+0xf8011e80>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10011f10:	e0bffd17 	ldw	r2,-12(fp)
}
10011f14:	e6ffff04 	addi	sp,fp,-4
10011f18:	dfc00217 	ldw	ra,8(sp)
10011f1c:	df000117 	ldw	fp,4(sp)
10011f20:	dc000017 	ldw	r16,0(sp)
10011f24:	dec00304 	addi	sp,sp,12
10011f28:	f800283a 	ret

10011f2c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10011f2c:	defffe04 	addi	sp,sp,-8
10011f30:	df000115 	stw	fp,4(sp)
10011f34:	df000104 	addi	fp,sp,4
10011f38:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10011f3c:	e0bfff17 	ldw	r2,-4(fp)
10011f40:	10bffe84 	addi	r2,r2,-6
10011f44:	10c00428 	cmpgeui	r3,r2,16
10011f48:	18001a1e 	bne	r3,zero,10011fb4 <alt_exception_cause_generated_bad_addr+0x88>
10011f4c:	100690ba 	slli	r3,r2,2
10011f50:	00840074 	movhi	r2,4097
10011f54:	1087d904 	addi	r2,r2,8036
10011f58:	1885883a 	add	r2,r3,r2
10011f5c:	10800017 	ldw	r2,0(r2)
10011f60:	1000683a 	jmp	r2
10011f64:	10011fa4 	muli	zero,r2,1150
10011f68:	10011fa4 	muli	zero,r2,1150
10011f6c:	10011fb4 	orhi	zero,r2,1150
10011f70:	10011fb4 	orhi	zero,r2,1150
10011f74:	10011fb4 	orhi	zero,r2,1150
10011f78:	10011fa4 	muli	zero,r2,1150
10011f7c:	10011fac 	andhi	zero,r2,1150
10011f80:	10011fb4 	orhi	zero,r2,1150
10011f84:	10011fa4 	muli	zero,r2,1150
10011f88:	10011fa4 	muli	zero,r2,1150
10011f8c:	10011fb4 	orhi	zero,r2,1150
10011f90:	10011fa4 	muli	zero,r2,1150
10011f94:	10011fac 	andhi	zero,r2,1150
10011f98:	10011fb4 	orhi	zero,r2,1150
10011f9c:	10011fb4 	orhi	zero,r2,1150
10011fa0:	10011fa4 	muli	zero,r2,1150
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10011fa4:	00800044 	movi	r2,1
10011fa8:	00000306 	br	10011fb8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10011fac:	0005883a 	mov	r2,zero
10011fb0:	00000106 	br	10011fb8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10011fb4:	0005883a 	mov	r2,zero
  }
}
10011fb8:	e037883a 	mov	sp,fp
10011fbc:	df000017 	ldw	fp,0(sp)
10011fc0:	dec00104 	addi	sp,sp,4
10011fc4:	f800283a 	ret

10011fc8 <atexit>:
10011fc8:	200b883a 	mov	r5,r4
10011fcc:	000d883a 	mov	r6,zero
10011fd0:	0009883a 	mov	r4,zero
10011fd4:	000f883a 	mov	r7,zero
10011fd8:	00120901 	jmpi	10012090 <__register_exitproc>

10011fdc <exit>:
10011fdc:	defffe04 	addi	sp,sp,-8
10011fe0:	000b883a 	mov	r5,zero
10011fe4:	dc000015 	stw	r16,0(sp)
10011fe8:	dfc00115 	stw	ra,4(sp)
10011fec:	2021883a 	mov	r16,r4
10011ff0:	00121a40 	call	100121a4 <__call_exitprocs>
10011ff4:	00840074 	movhi	r2,4097
10011ff8:	10907d04 	addi	r2,r2,16884
10011ffc:	11000017 	ldw	r4,0(r2)
10012000:	20800f17 	ldw	r2,60(r4)
10012004:	10000126 	beq	r2,zero,1001200c <exit+0x30>
10012008:	103ee83a 	callr	r2
1001200c:	8009883a 	mov	r4,r16
10012010:	00123380 	call	10012338 <_exit>

10012014 <memcmp>:
10012014:	01c000c4 	movi	r7,3
10012018:	3980192e 	bgeu	r7,r6,10012080 <memcmp+0x6c>
1001201c:	2144b03a 	or	r2,r4,r5
10012020:	11c4703a 	and	r2,r2,r7
10012024:	10000f26 	beq	r2,zero,10012064 <memcmp+0x50>
10012028:	20800003 	ldbu	r2,0(r4)
1001202c:	28c00003 	ldbu	r3,0(r5)
10012030:	10c0151e 	bne	r2,r3,10012088 <memcmp+0x74>
10012034:	31bfff84 	addi	r6,r6,-2
10012038:	01ffffc4 	movi	r7,-1
1001203c:	00000406 	br	10012050 <memcmp+0x3c>
10012040:	20800003 	ldbu	r2,0(r4)
10012044:	28c00003 	ldbu	r3,0(r5)
10012048:	31bfffc4 	addi	r6,r6,-1
1001204c:	10c00e1e 	bne	r2,r3,10012088 <memcmp+0x74>
10012050:	21000044 	addi	r4,r4,1
10012054:	29400044 	addi	r5,r5,1
10012058:	31fff91e 	bne	r6,r7,10012040 <__alt_data_end+0xf8012040>
1001205c:	0005883a 	mov	r2,zero
10012060:	f800283a 	ret
10012064:	20c00017 	ldw	r3,0(r4)
10012068:	28800017 	ldw	r2,0(r5)
1001206c:	1880041e 	bne	r3,r2,10012080 <memcmp+0x6c>
10012070:	31bfff04 	addi	r6,r6,-4
10012074:	21000104 	addi	r4,r4,4
10012078:	29400104 	addi	r5,r5,4
1001207c:	39bff936 	bltu	r7,r6,10012064 <__alt_data_end+0xf8012064>
10012080:	303fe91e 	bne	r6,zero,10012028 <__alt_data_end+0xf8012028>
10012084:	003ff506 	br	1001205c <__alt_data_end+0xf801205c>
10012088:	10c5c83a 	sub	r2,r2,r3
1001208c:	f800283a 	ret

10012090 <__register_exitproc>:
10012090:	00840074 	movhi	r2,4097
10012094:	defffa04 	addi	sp,sp,-24
10012098:	10907d04 	addi	r2,r2,16884
1001209c:	dc000315 	stw	r16,12(sp)
100120a0:	14000017 	ldw	r16,0(r2)
100120a4:	dc400415 	stw	r17,16(sp)
100120a8:	dfc00515 	stw	ra,20(sp)
100120ac:	80805217 	ldw	r2,328(r16)
100120b0:	2023883a 	mov	r17,r4
100120b4:	10003626 	beq	r2,zero,10012190 <__register_exitproc+0x100>
100120b8:	10c00117 	ldw	r3,4(r2)
100120bc:	010007c4 	movi	r4,31
100120c0:	20c00e16 	blt	r4,r3,100120fc <__register_exitproc+0x6c>
100120c4:	1a400044 	addi	r9,r3,1
100120c8:	8800211e 	bne	r17,zero,10012150 <__register_exitproc+0xc0>
100120cc:	18c00084 	addi	r3,r3,2
100120d0:	18c7883a 	add	r3,r3,r3
100120d4:	18c7883a 	add	r3,r3,r3
100120d8:	12400115 	stw	r9,4(r2)
100120dc:	10c7883a 	add	r3,r2,r3
100120e0:	19400015 	stw	r5,0(r3)
100120e4:	0005883a 	mov	r2,zero
100120e8:	dfc00517 	ldw	ra,20(sp)
100120ec:	dc400417 	ldw	r17,16(sp)
100120f0:	dc000317 	ldw	r16,12(sp)
100120f4:	dec00604 	addi	sp,sp,24
100120f8:	f800283a 	ret
100120fc:	00800034 	movhi	r2,0
10012100:	10800004 	addi	r2,r2,0
10012104:	10002526 	beq	r2,zero,1001219c <__register_exitproc+0x10c>
10012108:	01006404 	movi	r4,400
1001210c:	d9400015 	stw	r5,0(sp)
10012110:	d9800115 	stw	r6,4(sp)
10012114:	d9c00215 	stw	r7,8(sp)
10012118:	00000000 	call	10000000 <__alt_mem_sdram>
1001211c:	d9400017 	ldw	r5,0(sp)
10012120:	d9800117 	ldw	r6,4(sp)
10012124:	d9c00217 	ldw	r7,8(sp)
10012128:	10001c26 	beq	r2,zero,1001219c <__register_exitproc+0x10c>
1001212c:	80c05217 	ldw	r3,328(r16)
10012130:	10000115 	stw	zero,4(r2)
10012134:	02400044 	movi	r9,1
10012138:	10c00015 	stw	r3,0(r2)
1001213c:	80805215 	stw	r2,328(r16)
10012140:	10006215 	stw	zero,392(r2)
10012144:	10006315 	stw	zero,396(r2)
10012148:	0007883a 	mov	r3,zero
1001214c:	883fdf26 	beq	r17,zero,100120cc <__alt_data_end+0xf80120cc>
10012150:	18d1883a 	add	r8,r3,r3
10012154:	4211883a 	add	r8,r8,r8
10012158:	1211883a 	add	r8,r2,r8
1001215c:	41802215 	stw	r6,136(r8)
10012160:	01000044 	movi	r4,1
10012164:	11806217 	ldw	r6,392(r2)
10012168:	20c8983a 	sll	r4,r4,r3
1001216c:	310cb03a 	or	r6,r6,r4
10012170:	11806215 	stw	r6,392(r2)
10012174:	41c04215 	stw	r7,264(r8)
10012178:	01800084 	movi	r6,2
1001217c:	89bfd31e 	bne	r17,r6,100120cc <__alt_data_end+0xf80120cc>
10012180:	11806317 	ldw	r6,396(r2)
10012184:	3108b03a 	or	r4,r6,r4
10012188:	11006315 	stw	r4,396(r2)
1001218c:	003fcf06 	br	100120cc <__alt_data_end+0xf80120cc>
10012190:	80805304 	addi	r2,r16,332
10012194:	80805215 	stw	r2,328(r16)
10012198:	003fc706 	br	100120b8 <__alt_data_end+0xf80120b8>
1001219c:	00bfffc4 	movi	r2,-1
100121a0:	003fd106 	br	100120e8 <__alt_data_end+0xf80120e8>

100121a4 <__call_exitprocs>:
100121a4:	00840074 	movhi	r2,4097
100121a8:	10907d04 	addi	r2,r2,16884
100121ac:	10800017 	ldw	r2,0(r2)
100121b0:	defff404 	addi	sp,sp,-48
100121b4:	dd800815 	stw	r22,32(sp)
100121b8:	d8800015 	stw	r2,0(sp)
100121bc:	10805204 	addi	r2,r2,328
100121c0:	dd000615 	stw	r20,24(sp)
100121c4:	dc800415 	stw	r18,16(sp)
100121c8:	dfc00b15 	stw	ra,44(sp)
100121cc:	df000a15 	stw	fp,40(sp)
100121d0:	ddc00915 	stw	r23,36(sp)
100121d4:	dd400715 	stw	r21,28(sp)
100121d8:	dcc00515 	stw	r19,20(sp)
100121dc:	dc400315 	stw	r17,12(sp)
100121e0:	dc000215 	stw	r16,8(sp)
100121e4:	2025883a 	mov	r18,r4
100121e8:	2829883a 	mov	r20,r5
100121ec:	d8800115 	stw	r2,4(sp)
100121f0:	05bfffc4 	movi	r22,-1
100121f4:	d8800017 	ldw	r2,0(sp)
100121f8:	14c05217 	ldw	r19,328(r2)
100121fc:	98001d26 	beq	r19,zero,10012274 <__call_exitprocs+0xd0>
10012200:	dd400117 	ldw	r21,4(sp)
10012204:	98800117 	ldw	r2,4(r19)
10012208:	173fffc4 	addi	fp,r2,-1
1001220c:	e0000d16 	blt	fp,zero,10012244 <__call_exitprocs+0xa0>
10012210:	14000044 	addi	r16,r2,1
10012214:	8421883a 	add	r16,r16,r16
10012218:	8421883a 	add	r16,r16,r16
1001221c:	84402004 	addi	r17,r16,128
10012220:	9c63883a 	add	r17,r19,r17
10012224:	9c21883a 	add	r16,r19,r16
10012228:	a0001e26 	beq	r20,zero,100122a4 <__call_exitprocs+0x100>
1001222c:	80804017 	ldw	r2,256(r16)
10012230:	15001c26 	beq	r2,r20,100122a4 <__call_exitprocs+0x100>
10012234:	e73fffc4 	addi	fp,fp,-1
10012238:	843fff04 	addi	r16,r16,-4
1001223c:	8c7fff04 	addi	r17,r17,-4
10012240:	e5bff91e 	bne	fp,r22,10012228 <__alt_data_end+0xf8012228>
10012244:	00800034 	movhi	r2,0
10012248:	10800004 	addi	r2,r2,0
1001224c:	10000926 	beq	r2,zero,10012274 <__call_exitprocs+0xd0>
10012250:	98800117 	ldw	r2,4(r19)
10012254:	1000311e 	bne	r2,zero,1001231c <__call_exitprocs+0x178>
10012258:	98800017 	ldw	r2,0(r19)
1001225c:	10003426 	beq	r2,zero,10012330 <__call_exitprocs+0x18c>
10012260:	9809883a 	mov	r4,r19
10012264:	a8800015 	stw	r2,0(r21)
10012268:	00000000 	call	10000000 <__alt_mem_sdram>
1001226c:	acc00017 	ldw	r19,0(r21)
10012270:	983fe41e 	bne	r19,zero,10012204 <__alt_data_end+0xf8012204>
10012274:	dfc00b17 	ldw	ra,44(sp)
10012278:	df000a17 	ldw	fp,40(sp)
1001227c:	ddc00917 	ldw	r23,36(sp)
10012280:	dd800817 	ldw	r22,32(sp)
10012284:	dd400717 	ldw	r21,28(sp)
10012288:	dd000617 	ldw	r20,24(sp)
1001228c:	dcc00517 	ldw	r19,20(sp)
10012290:	dc800417 	ldw	r18,16(sp)
10012294:	dc400317 	ldw	r17,12(sp)
10012298:	dc000217 	ldw	r16,8(sp)
1001229c:	dec00c04 	addi	sp,sp,48
100122a0:	f800283a 	ret
100122a4:	98800117 	ldw	r2,4(r19)
100122a8:	80c00017 	ldw	r3,0(r16)
100122ac:	10bfffc4 	addi	r2,r2,-1
100122b0:	17001526 	beq	r2,fp,10012308 <__call_exitprocs+0x164>
100122b4:	80000015 	stw	zero,0(r16)
100122b8:	183fde26 	beq	r3,zero,10012234 <__alt_data_end+0xf8012234>
100122bc:	00800044 	movi	r2,1
100122c0:	1708983a 	sll	r4,r2,fp
100122c4:	98806217 	ldw	r2,392(r19)
100122c8:	9dc00117 	ldw	r23,4(r19)
100122cc:	2084703a 	and	r2,r4,r2
100122d0:	1000061e 	bne	r2,zero,100122ec <__call_exitprocs+0x148>
100122d4:	183ee83a 	callr	r3
100122d8:	98800117 	ldw	r2,4(r19)
100122dc:	15ffc51e 	bne	r2,r23,100121f4 <__alt_data_end+0xf80121f4>
100122e0:	a8800017 	ldw	r2,0(r21)
100122e4:	14ffd326 	beq	r2,r19,10012234 <__alt_data_end+0xf8012234>
100122e8:	003fc206 	br	100121f4 <__alt_data_end+0xf80121f4>
100122ec:	98806317 	ldw	r2,396(r19)
100122f0:	2084703a 	and	r2,r4,r2
100122f4:	1000061e 	bne	r2,zero,10012310 <__call_exitprocs+0x16c>
100122f8:	89400017 	ldw	r5,0(r17)
100122fc:	9009883a 	mov	r4,r18
10012300:	183ee83a 	callr	r3
10012304:	003ff406 	br	100122d8 <__alt_data_end+0xf80122d8>
10012308:	9f000115 	stw	fp,4(r19)
1001230c:	003fea06 	br	100122b8 <__alt_data_end+0xf80122b8>
10012310:	89000017 	ldw	r4,0(r17)
10012314:	183ee83a 	callr	r3
10012318:	003fef06 	br	100122d8 <__alt_data_end+0xf80122d8>
1001231c:	98800017 	ldw	r2,0(r19)
10012320:	982b883a 	mov	r21,r19
10012324:	1027883a 	mov	r19,r2
10012328:	983fb61e 	bne	r19,zero,10012204 <__alt_data_end+0xf8012204>
1001232c:	003fd106 	br	10012274 <__alt_data_end+0xf8012274>
10012330:	0005883a 	mov	r2,zero
10012334:	003ffa06 	br	10012320 <__alt_data_end+0xf8012320>

10012338 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10012338:	defffd04 	addi	sp,sp,-12
1001233c:	df000215 	stw	fp,8(sp)
10012340:	df000204 	addi	fp,sp,8
10012344:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10012348:	0001883a 	nop
1001234c:	e0bfff17 	ldw	r2,-4(fp)
10012350:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10012354:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10012358:	10000226 	beq	r2,zero,10012364 <_exit+0x2c>
    ALT_SIM_FAIL();
1001235c:	002af070 	cmpltui	zero,zero,43969
10012360:	00000106 	br	10012368 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10012364:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10012368:	003fff06 	br	10012368 <__alt_data_end+0xf8012368>
