
Vegetable-Viking.elf:     file format elf32-littlenios2
Vegetable-Viking.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00010be0 memsz 0x00010be0 flags r-x
    LOAD off    0x00011c00 vaddr 0x10010c00 paddr 0x100126ec align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000141d8 vaddr 0x100141d8 paddr 0x100141d8 align 2**12
         filesz 0x00000000 memsz 0x000003bc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000106c0  1000022c  1000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000314  100108ec  100108ec  000118ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  10010c00  100126ec  00011c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000003bc  100141d8  100141d8  000141d8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000136ec  2**0
                  CONTENTS
  7 .sdram        00000000  10014594  10014594  000136ec  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000136ec  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000cf0  00000000  00000000  00013710  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000237c1  00000000  00000000  00014400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008ebf  00000000  00000000  00037bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000af95  00000000  00000000  00040a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000021d8  00000000  00000000  0004ba18  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000382a  00000000  00000000  0004dbf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016df0  00000000  00000000  0005141a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0006820c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000013c0  00000000  00000000  00068220  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006c91f  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006c922  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006c92e  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006c92f  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006c930  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006c934  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006c938  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006c93c  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006c947  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006c952  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0006c95d  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001a  00000000  00000000  0006c968  2**0
                  CONTENTS, READONLY
 30 .jdi          00004447  00000000  00000000  0006c982  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000d0e60  00000000  00000000  00070dc9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
1000022c l    d  .text	00000000 .text
100108ec l    d  .rodata	00000000 .rodata
10010c00 l    d  .rwdata	00000000 .rwdata
100141d8 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10014594 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Vegetable-Viking_bsp//obj/HAL/src/crt0.o
10000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
100023d0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 vfprintf.c
10010a46 l     O .rodata	00000010 zeroes.4181
10010a56 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10005b80 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10007728 l     F .text	00000008 __fp_lock
10007730 l     F .text	00000008 __fp_unlock
10007744 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10010c00 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10011044 l     O .rwdata	00000020 lc_ctype_charset
10011024 l     O .rwdata	00000020 lc_message_charset
10011064 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10010a88 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000a16c l     F .text	000000fc __sprint_r.part.0
10010bbc l     O .rodata	00000010 blanks.4125
10010bac l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
1000e194 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000e2bc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000e2e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000e3f0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000e4ec l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000e5d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000e7b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100126dc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000ea38 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000eb88 l     F .text	00000038 alt_dev_reg
1001164c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000ee64 l     F .text	00000204 altera_avalon_jtag_uart_irq
1000f068 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000f7e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1000fc7c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1000fdd4 l     F .text	00000050 alt_get_errno
1000fe24 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10014228 g     O .bss	00000004 alt_instruction_exception_handler
10001624 g     F .text	00000068 convertDecimalToBinary
10009cb4 g     F .text	00000074 _mprec_log10
10009da0 g     F .text	0000008c __any_on
1000c03c g     F .text	00000054 _isatty_r
10010a94 g     O .rodata	00000028 __mprec_tinytens
1000e6fc g     F .text	00000078 alt_main
10014494 g     O .bss	00000100 alt_irq
1000c090 g     F .text	0000005c _lseek_r
100126ec g       *ABS*	00000000 __flash_rwdata_start
1000d640 g     F .text	00000084 .hidden __eqdf2
10014594 g       *ABS*	00000000 __alt_heap_start
10003878 g     F .text	0000003c printf
1000c9b4 g     F .text	0000009c _wcrtomb_r
10009fcc g     F .text	0000005c __sseek
10007a8c g     F .text	00000010 __sinit
1000c844 g     F .text	00000154 __swbuf_r
10008060 g     F .text	0000007c _setlocale_r
100078e4 g     F .text	00000078 __sfmoreglue
10000b94 g     F .text	0000025c sliceEngine
1000e794 g     F .text	00000020 __malloc_unlock
10000900 g     F .text	00000294 spawningEngine
1000c0ec g     F .text	0000015c memmove
10007a74 g     F .text	00000018 _cleanup
10008de4 g     F .text	000000a8 _Balloc
1000d6c4 g     F .text	000000e0 .hidden __gtdf2
10010214 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000bb40 g     F .text	00000058 _fstat_r
1001420c g     O .bss	00000004 errno
10009f48 g     F .text	00000008 __seofread
10014214 g     O .bss	00000004 alt_argv
1001a6ac g       *ABS*	00000000 _gp
100141d8 g     O .bss	00000004 yCursor
100114cc g     O .rwdata	00000180 alt_fd_list
10010234 g     F .text	00000090 alt_find_dev
10008b88 g     F .text	00000138 memcpy
10007738 g     F .text	0000000c _cleanup_r
10003718 g     F .text	000000d0 .hidden __floatsidf
1000fd5c g     F .text	00000078 alt_io_redirect
1000d7a4 g     F .text	000000e0 .hidden __ltdf2
100141dc g     O .bss	00000004 xCursor
100108ec g       *ABS*	00000000 __DTOR_END__
100104ac g     F .text	0000009c alt_exception_cause_generated_bad_addr
10009e2c g     F .text	00000074 __fpclassifyd
10009c10 g     F .text	000000a4 __ratio
1000b6a4 g     F .text	00000024 __vfiprintf_internal
1000f264 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
1000384c g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
100024ec g     F .text	00000008 .hidden __udivsi3
1000e440 g     F .text	000000ac isatty
10010ae4 g     O .rodata	000000c8 __mprec_tens
100080dc g     F .text	0000000c __locale_charset
10014208 g     O .bss	00000004 __malloc_top_pad
100126b4 g     O .rwdata	00000004 __mb_cur_max
1000810c g     F .text	0000000c _localeconv_r
1000bb98 g     F .text	000004a4 __sfvwrite_r
1000920c g     F .text	0000003c __i2b
10009ea0 g     F .text	00000054 _sbrk_r
100141e0 g     O .bss	00000004 cursorClicked
1000c248 g     F .text	0000005c _read_r
100126d4 g     O .rwdata	00000004 alt_max_fd
1000b850 g     F .text	00000100 _fclose_r
100076f8 g     F .text	00000030 fflush
10014204 g     O .bss	00000004 __malloc_max_sbrked_mem
10002524 g     F .text	0000089c .hidden __adddf3
100099b8 g     F .text	0000011c __b2d
10001db4 g     F .text	0000061c .hidden __umoddi3
1000e620 g     F .text	000000dc lseek
100126ac g     O .rwdata	00000004 _global_impure_ptr
1000c2a4 g     F .text	000005a0 _realloc_r
10014594 g       *ABS*	00000000 __bss_end
1000fb8c g     F .text	000000f0 alt_iic_isr_register
10014254 g     O .bss	00000240 veggieObject
10010110 g     F .text	00000104 alt_tick
100141e4 g     O .bss	00000004 cursorStreak
10001774 g     F .text	00000640 .hidden __udivdi3
1000b964 g     F .text	00000184 _fputwc_r
10010abc g     O .rodata	00000028 __mprec_bigtens
10008ff0 g     F .text	00000104 __s2b
1000e0f0 g     F .text	000000a4 .hidden __floatunsidf
10009760 g     F .text	00000060 __mcmp
10007aac g     F .text	00000018 __fp_lock_all
1000fb40 g     F .text	0000004c alt_ic_irq_enabled
10010078 g     F .text	00000098 alt_alarm_stop
1001421c g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d0 alt_irq_handler
100114a4 g     O .rwdata	00000028 alt_dev_null
10001534 g     F .text	000000f0 port2Unpackager
1000f7c8 g     F .text	0000001c alt_dcache_flush_all
100090f4 g     F .text	00000068 __hi0bits
10003690 g     F .text	00000088 .hidden __fixdfsi
100126ec g       *ABS*	00000000 __ram_rwdata_end
100126cc g     O .rwdata	00000008 alt_dev_list
1000ea88 g     F .text	00000100 write
10010c00 g       *ABS*	00000000 __ram_rodata_end
1000e338 g     F .text	000000b8 fstat
1000d7a4 g     F .text	000000e0 .hidden __ledf2
100094d8 g     F .text	00000140 __pow5mult
1000a280 g     F .text	00001424 ___vfiprintf_internal_r
100141fc g     O .bss	00000004 __nlocale_changed
100024f4 g     F .text	00000008 .hidden __umodsi3
10014594 g       *ABS*	00000000 end
100141e8 g     O .bss	00000004 key1
1000eda0 g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000060 alt_instruction_exception_entry
100108ec g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
100037e8 g     F .text	00000064 .hidden __clzsi2
1000f470 g     F .text	00000218 altera_avalon_jtag_uart_write
10007a9c g     F .text	00000004 __sfp_lock_acquire
10008aa0 g     F .text	000000e8 memchr
10003930 g     F .text	000020fc ___vfprintf_internal_r
10007c00 g     F .text	000002f0 _free_r
100080e8 g     F .text	00000010 __locale_mb_cur_max
10010724 g     F .text	00000194 __call_exitprocs
100141f8 g     O .bss	00000004 __mlocale_changed
100126b8 g     O .rwdata	00000004 __malloc_sbrk_base
1000022c g     F .text	0000003c _start
10014220 g     O .bss	00000004 _alt_tick_rate
100038cc g     F .text	00000064 rand
10009618 g     F .text	00000148 __lshift
10014224 g     O .bss	00000004 _alt_nticks
1000e804 g     F .text	00000104 read
1000ebf4 g     F .text	00000048 alt_sys_init
10010610 g     F .text	00000114 __register_exitproc
10009248 g     F .text	00000290 __multiply
1000f110 g     F .text	00000068 altera_avalon_jtag_uart_close
100024fc g     F .text	00000028 .hidden __mulsi3
10010c00 g       *ABS*	00000000 __ram_rwdata_start
100108ec g       *ABS*	00000000 __ram_rodata_start
1001422c g     O .bss	00000028 __malloc_current_mallinfo
10009ad4 g     F .text	0000013c __d2b
1000ec3c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
100103d8 g     F .text	000000d4 alt_get_fd
1000b724 g     F .text	00000054 _close_r
10010594 g     F .text	0000007c memcmp
1000ecfc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10014594 g       *ABS*	00000000 __alt_stack_base
1000ed4c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10005a50 g     F .text	00000130 __swsetup_r
1000ccc0 g     F .text	00000980 .hidden __divdf3
1000795c g     F .text	00000118 __sfp
10009d28 g     F .text	00000078 __copybits
1001109c g     O .rwdata	00000408 __malloc_av_
10007aa8 g     F .text	00000004 __sinit_lock_release
1000d884 g     F .text	0000086c .hidden __muldf3
10009ef4 g     F .text	00000054 __sread
100102c4 g     F .text	00000114 alt_find_file
1000f834 g     F .text	000000a4 alt_dev_llist_insert
1000e774 g     F .text	00000020 __malloc_lock
1000e988 g     F .text	000000b0 sbrk
100074d0 g     F .text	00000228 _fflush_r
1000b778 g     F .text	000000d8 _calloc_r
100141d8 g       *ABS*	00000000 __bss_start
10008cc0 g     F .text	00000124 memset
10000268 g     F .text	000002c4 main
10014218 g     O .bss	00000004 alt_envp
10014200 g     O .bss	00000004 __malloc_max_total_mem
1000ec9c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000c998 g     F .text	0000001c __swbuf
100038b4 g     F .text	00000018 srand
1000168c g     F .text	000000e8 convertBinaryToDecimal
1000a028 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000b950 g     F .text	00000014 fclose
10005da8 g     F .text	00001728 _dtoa_r
100082f8 g     F .text	000007a8 _malloc_r
1000cb28 g     F .text	00000030 __ascii_wctomb
100126d8 g     O .rwdata	00000004 alt_errno
10007ef0 g     F .text	000000b8 _fwalk
1000243c g     F .text	00000054 .hidden __divsi3
10007adc g     F .text	00000124 _malloc_trim_r
100108ec g       *ABS*	00000000 __CTOR_END__
1000a030 g     F .text	000000a4 strcmp
100108ec g       *ABS*	00000000 __flash_rodata_start
100108ec g       *ABS*	00000000 __DTOR_LIST__
100141ec g     O .bss	00000004 key3
1000d640 g     F .text	00000084 .hidden __nedf2
1000ebc0 g     F .text	00000034 alt_irq_init
1000e908 g     F .text	00000080 alt_release_fd
10010904 g     O .rodata	00000100 .hidden __clz_tab
100141f4 g     O .bss	00000004 _PathLocale
10010548 g     F .text	00000014 atexit
100013d8 g     F .text	0000015c messagePackager
1000b6c8 g     F .text	0000005c _write_r
10008118 g     F .text	0000001c setlocale
100126b0 g     O .rwdata	00000004 _impure_ptr
10014210 g     O .bss	00000004 alt_argc
1000f934 g     F .text	0000005c _do_dtors
10008104 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10009958 g     F .text	00000060 __ulp
10007ac4 g     F .text	00000018 __fp_unlock_all
100126c4 g     O .rwdata	00000008 alt_fs_list
10000df0 g     F .text	00000150 disintegrateEngine
10000020 g       *ABS*	00000000 __ram_exceptions_start
10008134 g     F .text	0000000c localeconv
1000f9ac g     F .text	00000050 alt_ic_isr_register
100126ec g       *ABS*	00000000 _edata
10014594 g       *ABS*	00000000 _end
1000022c g       *ABS*	00000000 __ram_exceptions_end
1000f178 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
100141f0 g     O .bss	00000004 key2
1000fa9c g     F .text	000000a4 alt_ic_irq_disable
10009f50 g     F .text	0000007c __swrite
100126bc g     O .rwdata	00000004 __malloc_trim_threshold
100080f8 g     F .text	0000000c __locale_msgcharset
1001055c g     F .text	00000038 exit
10007fa8 g     F .text	000000b8 _fwalk_reent
100097c0 g     F .text	00000198 __mdiff
1000052c g     F .text	000003d4 physicsEngine
10002490 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10007aa0 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100108b8 g     F .text	00000034 _exit
1000f688 g     F .text	00000140 alt_alarm_start
1000cbb4 g     F .text	0000010c .hidden __muldi3
10008140 g     F .text	000001b8 __smakebuf_r
1000a0d4 g     F .text	00000098 strlen
1000ff18 g     F .text	00000160 open
1000d6c4 g     F .text	000000e0 .hidden __gedf2
100126c0 g     O .rwdata	00000004 __wctomb
1000a268 g     F .text	00000018 __sprint_r
1000f990 g     F .text	0000001c alt_icache_flush_all
10000f40 g     F .text	00000498 FPGAcommunicator
100126e0 g     O .rwdata	00000004 alt_priority_mask
1000f9fc g     F .text	000000a0 alt_ic_irq_enable
10005a2c g     F .text	00000024 __vfprintf_internal
1000cb58 g     F .text	0000005c _wctomb_r
10002dc0 g     F .text	000008d0 .hidden __subdf3
1000915c g     F .text	000000b0 __lo0bits
100126e4 g     O .rwdata	00000008 alt_alarm_list
1000f8d8 g     F .text	0000005c _do_ctors
1000ca50 g     F .text	000000d8 wcrtomb
1000e1e4 g     F .text	000000d8 close
1000e550 g     F .text	00000080 alt_load
1000bae8 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
10007aa4 g     F .text	00000004 __sinit_lock_acquire
10008eb4 g     F .text	0000013c __multadd
10008e8c g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408b14 	ori	at,at,556
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10912504 	addi	r2,r2,17556
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10912504 	addi	r2,r2,17556
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e0:	00bfffc4 	movi	r2,-1
100001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001ec:	d0a6df17 	ldw	r2,-25732(gp)
100001f0:	10000726 	beq	r2,zero,10000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f4:	d0a6df17 	ldw	r2,-25732(gp)
100001f8:	e0fffd17 	ldw	r3,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	e17fff17 	ldw	r5,-4(fp)
10000204:	e1bffe17 	ldw	r6,-8(fp)
10000208:	103ee83a 	callr	r2
1000020c:	00000206 	br	10000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

Disassembly of section .text:

1000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
1000022c:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000234:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000238:	d6a9ab14 	ori	gp,gp,42668
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
1000023c:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000240:	10907614 	ori	r2,r2,16856

    movhi r3, %hi(__bss_end)
10000244:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
10000248:	18d16514 	ori	r3,r3,17812

    beq r2, r3, 1f
1000024c:	10c00326 	beq	r2,r3,1000025c <_start+0x30>

0:
    stw zero, (r2)
10000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000258:	10fffd36 	bltu	r2,r3,10000250 <__alt_data_end+0xf8000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
1000025c:	000e5500 	call	1000e550 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000260:	000e6fc0 	call	1000e6fc <alt_main>

10000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000264:	003fff06 	br	10000264 <__alt_data_end+0xf8000264>

10000268 <main>:
unsigned long convertDecimalToBinary(unsigned long n);	// read the title
unsigned long convertBinaryToDecimal(unsigned long long n);	// see above

// our main function!!! this is where the magic happens
int main()
{
10000268:	defff504 	addi	sp,sp,-44
1000026c:	dfc00a15 	stw	ra,40(sp)
10000270:	df000915 	stw	fp,36(sp)
10000274:	dc000815 	stw	r16,32(sp)
10000278:	df000904 	addi	fp,sp,36
	// put in our seed
	srand(*to_sw_port0);
1000027c:	00804c04 	movi	r2,304
10000280:	10800017 	ldw	r2,0(r2)
10000284:	1009883a 	mov	r4,r2
10000288:	00038b40 	call	100038b4 <srand>
//	printf("Our current inputseed is %lu \n", *to_sw_port0);

	// initialize timing stuff
	unsigned long processorStart = *to_sw_port1;
1000028c:	00804804 	movi	r2,288
10000290:	10800017 	ldw	r2,0(r2)
10000294:	e0bffc15 	stw	r2,-16(fp)
	unsigned long processorTime = processorStart;
10000298:	e0bffc17 	ldw	r2,-16(fp)
1000029c:	e0bffd15 	stw	r2,-12(fp)
	unsigned long elapsedTime;
	unsigned long lastPhysixed = processorTime;
100002a0:	e0bffd17 	ldw	r2,-12(fp)
100002a4:	e0bff715 	stw	r2,-36(fp)
	unsigned long lastSpawned = processorTime;
100002a8:	e0bffd17 	ldw	r2,-12(fp)
100002ac:	e0bff815 	stw	r2,-32(fp)
	unsigned long nextSpawnTime = processorTime;
100002b0:	e0bffd17 	ldw	r2,-12(fp)
100002b4:	e0bff915 	stw	r2,-28(fp)
	unsigned long lastDisintegrated = processorTime;
100002b8:	e0bffd17 	ldw	r2,-12(fp)
100002bc:	e0bffa15 	stw	r2,-24(fp)
//	printf("our start time is %ld \n", processorStart);

	// initialize our cursor and key stuff
	xCursor = *to_sw_port3;
100002c0:	00806004 	movi	r2,384
100002c4:	10800017 	ldw	r2,0(r2)
100002c8:	d0a6cc15 	stw	r2,-25808(gp)
	yCursor = *to_sw_port4;
100002cc:	00805c04 	movi	r2,368
100002d0:	10800017 	ldw	r2,0(r2)
100002d4:	d0a6cb15 	stw	r2,-25812(gp)
	port2Unpackager();
100002d8:	00015340 	call	10001534 <port2Unpackager>

	// initialize all our structs
	int i;
	for(i=0; i<16; i++)
100002dc:	e03ffb15 	stw	zero,-20(fp)
100002e0:	00004306 	br	100003f0 <main+0x188>
	{
		veggieObject[i].xPosition = 0;
100002e4:	04040074 	movhi	r16,4097
100002e8:	84109504 	addi	r16,r16,16980
100002ec:	e0bffb17 	ldw	r2,-20(fp)
100002f0:	1009883a 	mov	r4,r2
100002f4:	01400904 	movi	r5,36
100002f8:	00024fc0 	call	100024fc <__mulsi3>
100002fc:	8085883a 	add	r2,r16,r2
10000300:	10000015 	stw	zero,0(r2)
		veggieObject[i].yPosition = 0;
10000304:	04040074 	movhi	r16,4097
10000308:	84109504 	addi	r16,r16,16980
1000030c:	e0bffb17 	ldw	r2,-20(fp)
10000310:	1009883a 	mov	r4,r2
10000314:	01400904 	movi	r5,36
10000318:	00024fc0 	call	100024fc <__mulsi3>
1000031c:	8085883a 	add	r2,r16,r2
10000320:	10800104 	addi	r2,r2,4
10000324:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectType = 0;
10000328:	04040074 	movhi	r16,4097
1000032c:	84109504 	addi	r16,r16,16980
10000330:	e0bffb17 	ldw	r2,-20(fp)
10000334:	1009883a 	mov	r4,r2
10000338:	01400904 	movi	r5,36
1000033c:	00024fc0 	call	100024fc <__mulsi3>
10000340:	8085883a 	add	r2,r16,r2
10000344:	10800204 	addi	r2,r2,8
10000348:	10000015 	stw	zero,0(r2)
		veggieObject[i].objectState = 0;
1000034c:	04040074 	movhi	r16,4097
10000350:	84109504 	addi	r16,r16,16980
10000354:	e0bffb17 	ldw	r2,-20(fp)
10000358:	1009883a 	mov	r4,r2
1000035c:	01400904 	movi	r5,36
10000360:	00024fc0 	call	100024fc <__mulsi3>
10000364:	8085883a 	add	r2,r16,r2
10000368:	10800304 	addi	r2,r2,12
1000036c:	10000015 	stw	zero,0(r2)
		veggieObject[i].packageType = 0;
10000370:	04040074 	movhi	r16,4097
10000374:	84109504 	addi	r16,r16,16980
10000378:	e0bffb17 	ldw	r2,-20(fp)
1000037c:	1009883a 	mov	r4,r2
10000380:	01400904 	movi	r5,36
10000384:	00024fc0 	call	100024fc <__mulsi3>
10000388:	8085883a 	add	r2,r16,r2
1000038c:	10800404 	addi	r2,r2,16
10000390:	10000015 	stw	zero,0(r2)
		veggieObject[i].xVelocity = 0;
10000394:	04040074 	movhi	r16,4097
10000398:	84109504 	addi	r16,r16,16980
1000039c:	e0bffb17 	ldw	r2,-20(fp)
100003a0:	1009883a 	mov	r4,r2
100003a4:	01400904 	movi	r5,36
100003a8:	00024fc0 	call	100024fc <__mulsi3>
100003ac:	8085883a 	add	r2,r16,r2
100003b0:	10800504 	addi	r2,r2,20
100003b4:	10000015 	stw	zero,0(r2)
100003b8:	10000115 	stw	zero,4(r2)
		veggieObject[i].yVelocity = 0;
100003bc:	04040074 	movhi	r16,4097
100003c0:	84109504 	addi	r16,r16,16980
100003c4:	e0bffb17 	ldw	r2,-20(fp)
100003c8:	1009883a 	mov	r4,r2
100003cc:	01400904 	movi	r5,36
100003d0:	00024fc0 	call	100024fc <__mulsi3>
100003d4:	8085883a 	add	r2,r16,r2
100003d8:	10800704 	addi	r2,r2,28
100003dc:	10000015 	stw	zero,0(r2)
100003e0:	10000115 	stw	zero,4(r2)
	yCursor = *to_sw_port4;
	port2Unpackager();

	// initialize all our structs
	int i;
	for(i=0; i<16; i++)
100003e4:	e0bffb17 	ldw	r2,-20(fp)
100003e8:	10800044 	addi	r2,r2,1
100003ec:	e0bffb15 	stw	r2,-20(fp)
100003f0:	e0bffb17 	ldw	r2,-20(fp)
100003f4:	10800410 	cmplti	r2,r2,16
100003f8:	103fba1e 	bne	r2,zero,100002e4 <__alt_data_end+0xf80002e4>
		veggieObject[i].objectState = 0;
		veggieObject[i].packageType = 0;
		veggieObject[i].xVelocity = 0;
		veggieObject[i].yVelocity = 0;
	}
	veggieObject[0].packageType = 1;	// game status
100003fc:	00840074 	movhi	r2,4097
10000400:	10909504 	addi	r2,r2,16980
10000404:	00c00044 	movi	r3,1
10000408:	10c00415 	stw	r3,16(r2)

	// TEST STUFF
	veggieObject[0].xPosition = 94;
1000040c:	00840074 	movhi	r2,4097
10000410:	10909504 	addi	r2,r2,16980
10000414:	00c01784 	movi	r3,94
10000418:	10c00015 	stw	r3,0(r2)
	veggieObject[0].yPosition = 34;
1000041c:	00840074 	movhi	r2,4097
10000420:	10909504 	addi	r2,r2,16980
10000424:	00c00884 	movi	r3,34
10000428:	10c00115 	stw	r3,4(r2)
	veggieObject[0].objectType = 5;
1000042c:	00840074 	movhi	r2,4097
10000430:	10909504 	addi	r2,r2,16980
10000434:	00c00144 	movi	r3,5
10000438:	10c00215 	stw	r3,8(r2)
	veggieObject[0].objectState = 1;
1000043c:	00840074 	movhi	r2,4097
10000440:	10909504 	addi	r2,r2,16980
10000444:	00c00044 	movi	r3,1
10000448:	10c00315 	stw	r3,12(r2)
	veggieObject[0].packageType = 1;
1000044c:	00840074 	movhi	r2,4097
10000450:	10909504 	addi	r2,r2,16980
10000454:	00c00044 	movi	r3,1
10000458:	10c00415 	stw	r3,16(r2)
	veggieObject[0].xVelocity = 0;
1000045c:	00840074 	movhi	r2,4097
10000460:	10909504 	addi	r2,r2,16980
10000464:	10000515 	stw	zero,20(r2)
10000468:	10000615 	stw	zero,24(r2)
	veggieObject[0].yVelocity = 0;
1000046c:	00840074 	movhi	r2,4097
10000470:	10909504 	addi	r2,r2,16980
10000474:	10000715 	stw	zero,28(r2)
10000478:	10000815 	stw	zero,32(r2)

	while(1)
	{
		// constantly updating our current time in seconds
		processorTime = *to_sw_port1;
1000047c:	00804804 	movi	r2,288
10000480:	10800017 	ldw	r2,0(r2)
10000484:	e0bffd15 	stw	r2,-12(fp)
//		printf("our time is %lu \n", processorTime);
		elapsedTime = processorTime - processorStart;
10000488:	e0fffd17 	ldw	r3,-12(fp)
1000048c:	e0bffc17 	ldw	r2,-16(fp)
10000490:	1885c83a 	sub	r2,r3,r2
10000494:	e0bffe15 	stw	r2,-8(fp)
		printf("elapsed time is %lu \n", elapsedTime);
10000498:	01040074 	movhi	r4,4097
1000049c:	21023b04 	addi	r4,r4,2284
100004a0:	e17ffe17 	ldw	r5,-8(fp)
100004a4:	00038780 	call	10003878 <printf>

		// constantly doing physics
		if ((elapsedTime - lastPhysixed) > 1)	// greater than .02 seconds pass
100004a8:	e0fffe17 	ldw	r3,-8(fp)
100004ac:	e0bff717 	ldw	r2,-36(fp)
100004b0:	1885c83a 	sub	r2,r3,r2
100004b4:	108000b0 	cmpltui	r2,r2,2
100004b8:	1000031e 	bne	r2,zero,100004c8 <main+0x260>
		{
			physicsEngine();	// call our physics engine!
100004bc:	000052c0 	call	1000052c <physicsEngine>
			lastPhysixed = elapsedTime;
100004c0:	e0bffe17 	ldw	r2,-8(fp)
100004c4:	e0bff715 	stw	r2,-36(fp)
		}

		// spawning objects
		if ((elapsedTime - lastSpawned) > nextSpawnTime)	// greater than random time
100004c8:	e0fffe17 	ldw	r3,-8(fp)
100004cc:	e0bff817 	ldw	r2,-32(fp)
100004d0:	1885c83a 	sub	r2,r3,r2
100004d4:	e0fff917 	ldw	r3,-28(fp)
100004d8:	1880092e 	bgeu	r3,r2,10000500 <main+0x298>
		{
			spawningEngine();	// call our spawning engine!
100004dc:	00009000 	call	10000900 <spawningEngine>
			lastSpawned = elapsedTime;
100004e0:	e0bffe17 	ldw	r2,-8(fp)
100004e4:	e0bff815 	stw	r2,-32(fp)
			nextSpawnTime = (rand() % 50) + 50;
100004e8:	00038cc0 	call	100038cc <rand>
100004ec:	1009883a 	mov	r4,r2
100004f0:	01400c84 	movi	r5,50
100004f4:	00024900 	call	10002490 <__modsi3>
100004f8:	10800c84 	addi	r2,r2,50
100004fc:	e0bff915 	stw	r2,-28(fp)
	//		printf("we generated a random number at %lu   ", nextSpawnTime);
		}

		if ((elapsedTime - lastDisintegrated) > 20)	// greater than .2 sec
10000500:	e0fffe17 	ldw	r3,-8(fp)
10000504:	e0bffa17 	ldw	r2,-24(fp)
10000508:	1885c83a 	sub	r2,r3,r2
1000050c:	10800570 	cmpltui	r2,r2,21
10000510:	1000031e 	bne	r2,zero,10000520 <main+0x2b8>
		{
			disintegrateEngine();	// call our spawning engine!
10000514:	0000df00 	call	10000df0 <disintegrateEngine>
			lastDisintegrated = elapsedTime;
10000518:	e0bffe17 	ldw	r2,-8(fp)
1000051c:	e0bffa15 	stw	r2,-24(fp)
		}
	port2Unpackager();	// keep unpacking our stuff! (also updates cursor)
10000520:	00015340 	call	10001534 <port2Unpackager>
	FPGAcommunicator();	// call this every time to update the FPGA
10000524:	0000f400 	call	10000f40 <FPGAcommunicator>
	}
10000528:	003fd406 	br	1000047c <__alt_data_end+0xf800047c>

1000052c <physicsEngine>:
	return 0;
}

void physicsEngine()
{
1000052c:	defffa04 	addi	sp,sp,-24
10000530:	dfc00515 	stw	ra,20(sp)
10000534:	df000415 	stw	fp,16(sp)
10000538:	dc800315 	stw	r18,12(sp)
1000053c:	dc400215 	stw	r17,8(sp)
10000540:	dc000115 	stw	r16,4(sp)
10000544:	df000404 	addi	fp,sp,16
	int i;
	for(i=1; i<16; i++)	// update all our physics of all objects!
10000548:	00800044 	movi	r2,1
1000054c:	e0bffc15 	stw	r2,-16(fp)
10000550:	0000df06 	br	100008d0 <physicsEngine+0x3a4>
	{
		if(veggieObject[i].objectState != 0)	// does it even exist?
10000554:	04040074 	movhi	r16,4097
10000558:	84109504 	addi	r16,r16,16980
1000055c:	e0bffc17 	ldw	r2,-16(fp)
10000560:	1009883a 	mov	r4,r2
10000564:	01400904 	movi	r5,36
10000568:	00024fc0 	call	100024fc <__mulsi3>
1000056c:	8085883a 	add	r2,r16,r2
10000570:	10800304 	addi	r2,r2,12
10000574:	10800017 	ldw	r2,0(r2)
10000578:	1000d226 	beq	r2,zero,100008c4 <physicsEngine+0x398>
		{
			// PHYSICS MAGIC!
			veggieObject[i].xPosition = veggieObject[i].xPosition + veggieObject[i].xVelocity;
1000057c:	04040074 	movhi	r16,4097
10000580:	84109504 	addi	r16,r16,16980
10000584:	e0bffc17 	ldw	r2,-16(fp)
10000588:	1009883a 	mov	r4,r2
1000058c:	01400904 	movi	r5,36
10000590:	00024fc0 	call	100024fc <__mulsi3>
10000594:	8085883a 	add	r2,r16,r2
10000598:	10800017 	ldw	r2,0(r2)
1000059c:	1009883a 	mov	r4,r2
100005a0:	00037180 	call	10003718 <__floatsidf>
100005a4:	1023883a 	mov	r17,r2
100005a8:	1825883a 	mov	r18,r3
100005ac:	04040074 	movhi	r16,4097
100005b0:	84109504 	addi	r16,r16,16980
100005b4:	e0bffc17 	ldw	r2,-16(fp)
100005b8:	1009883a 	mov	r4,r2
100005bc:	01400904 	movi	r5,36
100005c0:	00024fc0 	call	100024fc <__mulsi3>
100005c4:	8085883a 	add	r2,r16,r2
100005c8:	11000504 	addi	r4,r2,20
100005cc:	20800017 	ldw	r2,0(r4)
100005d0:	20c00117 	ldw	r3,4(r4)
100005d4:	8809883a 	mov	r4,r17
100005d8:	900b883a 	mov	r5,r18
100005dc:	100d883a 	mov	r6,r2
100005e0:	180f883a 	mov	r7,r3
100005e4:	00025240 	call	10002524 <__adddf3>
100005e8:	1009883a 	mov	r4,r2
100005ec:	180b883a 	mov	r5,r3
100005f0:	2005883a 	mov	r2,r4
100005f4:	2807883a 	mov	r3,r5
100005f8:	1009883a 	mov	r4,r2
100005fc:	180b883a 	mov	r5,r3
10000600:	00036900 	call	10003690 <__fixdfsi>
10000604:	1023883a 	mov	r17,r2
10000608:	04040074 	movhi	r16,4097
1000060c:	84109504 	addi	r16,r16,16980
10000610:	e0bffc17 	ldw	r2,-16(fp)
10000614:	1009883a 	mov	r4,r2
10000618:	01400904 	movi	r5,36
1000061c:	00024fc0 	call	100024fc <__mulsi3>
10000620:	8085883a 	add	r2,r16,r2
10000624:	14400015 	stw	r17,0(r2)
			veggieObject[i].yPosition = veggieObject[i].yPosition + veggieObject[i].yVelocity;
10000628:	04040074 	movhi	r16,4097
1000062c:	84109504 	addi	r16,r16,16980
10000630:	e0bffc17 	ldw	r2,-16(fp)
10000634:	1009883a 	mov	r4,r2
10000638:	01400904 	movi	r5,36
1000063c:	00024fc0 	call	100024fc <__mulsi3>
10000640:	8085883a 	add	r2,r16,r2
10000644:	10800104 	addi	r2,r2,4
10000648:	10800017 	ldw	r2,0(r2)
1000064c:	1009883a 	mov	r4,r2
10000650:	00037180 	call	10003718 <__floatsidf>
10000654:	1023883a 	mov	r17,r2
10000658:	1825883a 	mov	r18,r3
1000065c:	04040074 	movhi	r16,4097
10000660:	84109504 	addi	r16,r16,16980
10000664:	e0bffc17 	ldw	r2,-16(fp)
10000668:	1009883a 	mov	r4,r2
1000066c:	01400904 	movi	r5,36
10000670:	00024fc0 	call	100024fc <__mulsi3>
10000674:	8085883a 	add	r2,r16,r2
10000678:	11000704 	addi	r4,r2,28
1000067c:	20800017 	ldw	r2,0(r4)
10000680:	20c00117 	ldw	r3,4(r4)
10000684:	8809883a 	mov	r4,r17
10000688:	900b883a 	mov	r5,r18
1000068c:	100d883a 	mov	r6,r2
10000690:	180f883a 	mov	r7,r3
10000694:	00025240 	call	10002524 <__adddf3>
10000698:	1009883a 	mov	r4,r2
1000069c:	180b883a 	mov	r5,r3
100006a0:	2005883a 	mov	r2,r4
100006a4:	2807883a 	mov	r3,r5
100006a8:	1009883a 	mov	r4,r2
100006ac:	180b883a 	mov	r5,r3
100006b0:	00036900 	call	10003690 <__fixdfsi>
100006b4:	1023883a 	mov	r17,r2
100006b8:	04040074 	movhi	r16,4097
100006bc:	84109504 	addi	r16,r16,16980
100006c0:	e0bffc17 	ldw	r2,-16(fp)
100006c4:	1009883a 	mov	r4,r2
100006c8:	01400904 	movi	r5,36
100006cc:	00024fc0 	call	100024fc <__mulsi3>
100006d0:	8085883a 	add	r2,r16,r2
100006d4:	10800104 	addi	r2,r2,4
100006d8:	14400015 	stw	r17,0(r2)
			veggieObject[i].yVelocity = veggieObject[i].yVelocity - 5;
100006dc:	04040074 	movhi	r16,4097
100006e0:	84109504 	addi	r16,r16,16980
100006e4:	e0bffc17 	ldw	r2,-16(fp)
100006e8:	1009883a 	mov	r4,r2
100006ec:	01400904 	movi	r5,36
100006f0:	00024fc0 	call	100024fc <__mulsi3>
100006f4:	8085883a 	add	r2,r16,r2
100006f8:	11000704 	addi	r4,r2,28
100006fc:	20800017 	ldw	r2,0(r4)
10000700:	20c00117 	ldw	r3,4(r4)
10000704:	1009883a 	mov	r4,r2
10000708:	180b883a 	mov	r5,r3
1000070c:	000d883a 	mov	r6,zero
10000710:	01d00534 	movhi	r7,16404
10000714:	0002dc00 	call	10002dc0 <__subdf3>
10000718:	1009883a 	mov	r4,r2
1000071c:	180b883a 	mov	r5,r3
10000720:	2021883a 	mov	r16,r4
10000724:	2823883a 	mov	r17,r5
10000728:	04840074 	movhi	r18,4097
1000072c:	94909504 	addi	r18,r18,16980
10000730:	e0bffc17 	ldw	r2,-16(fp)
10000734:	1009883a 	mov	r4,r2
10000738:	01400904 	movi	r5,36
1000073c:	00024fc0 	call	100024fc <__mulsi3>
10000740:	9085883a 	add	r2,r18,r2
10000744:	10800704 	addi	r2,r2,28
10000748:	14000015 	stw	r16,0(r2)
1000074c:	14400115 	stw	r17,4(r2)
			printf("xPosition is  %li ", veggieObject[i].xPosition);
			printf("yPosition is  %li ", veggieObject[i].yPosition);
			printf("yVelocity is  %f \n", veggieObject[i].yVelocity);
	*/
			// let's now check if any of these objects are beyond the screen
			if((veggieObject[i].yPosition < 0) || (veggieObject[i].xPosition < 0) || (veggieObject[i].xPosition > 640))
10000750:	04040074 	movhi	r16,4097
10000754:	84109504 	addi	r16,r16,16980
10000758:	e0bffc17 	ldw	r2,-16(fp)
1000075c:	1009883a 	mov	r4,r2
10000760:	01400904 	movi	r5,36
10000764:	00024fc0 	call	100024fc <__mulsi3>
10000768:	8085883a 	add	r2,r16,r2
1000076c:	10800104 	addi	r2,r2,4
10000770:	10800017 	ldw	r2,0(r2)
10000774:	10001316 	blt	r2,zero,100007c4 <physicsEngine+0x298>
10000778:	04040074 	movhi	r16,4097
1000077c:	84109504 	addi	r16,r16,16980
10000780:	e0bffc17 	ldw	r2,-16(fp)
10000784:	1009883a 	mov	r4,r2
10000788:	01400904 	movi	r5,36
1000078c:	00024fc0 	call	100024fc <__mulsi3>
10000790:	8085883a 	add	r2,r16,r2
10000794:	10800017 	ldw	r2,0(r2)
10000798:	10000a16 	blt	r2,zero,100007c4 <physicsEngine+0x298>
1000079c:	04040074 	movhi	r16,4097
100007a0:	84109504 	addi	r16,r16,16980
100007a4:	e0bffc17 	ldw	r2,-16(fp)
100007a8:	1009883a 	mov	r4,r2
100007ac:	01400904 	movi	r5,36
100007b0:	00024fc0 	call	100024fc <__mulsi3>
100007b4:	8085883a 	add	r2,r16,r2
100007b8:	10800017 	ldw	r2,0(r2)
100007bc:	1080a050 	cmplti	r2,r2,641
100007c0:	1000401e 	bne	r2,zero,100008c4 <physicsEngine+0x398>
			{
				// it has outlived its usefulness. ruthlessly slaughter it!
				veggieObject[i].xPosition = 0;
100007c4:	04040074 	movhi	r16,4097
100007c8:	84109504 	addi	r16,r16,16980
100007cc:	e0bffc17 	ldw	r2,-16(fp)
100007d0:	1009883a 	mov	r4,r2
100007d4:	01400904 	movi	r5,36
100007d8:	00024fc0 	call	100024fc <__mulsi3>
100007dc:	8085883a 	add	r2,r16,r2
100007e0:	10000015 	stw	zero,0(r2)
				veggieObject[i].yPosition = 0;
100007e4:	04040074 	movhi	r16,4097
100007e8:	84109504 	addi	r16,r16,16980
100007ec:	e0bffc17 	ldw	r2,-16(fp)
100007f0:	1009883a 	mov	r4,r2
100007f4:	01400904 	movi	r5,36
100007f8:	00024fc0 	call	100024fc <__mulsi3>
100007fc:	8085883a 	add	r2,r16,r2
10000800:	10800104 	addi	r2,r2,4
10000804:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectType = 0;
10000808:	04040074 	movhi	r16,4097
1000080c:	84109504 	addi	r16,r16,16980
10000810:	e0bffc17 	ldw	r2,-16(fp)
10000814:	1009883a 	mov	r4,r2
10000818:	01400904 	movi	r5,36
1000081c:	00024fc0 	call	100024fc <__mulsi3>
10000820:	8085883a 	add	r2,r16,r2
10000824:	10800204 	addi	r2,r2,8
10000828:	10000015 	stw	zero,0(r2)
				veggieObject[i].objectState = 0;
1000082c:	04040074 	movhi	r16,4097
10000830:	84109504 	addi	r16,r16,16980
10000834:	e0bffc17 	ldw	r2,-16(fp)
10000838:	1009883a 	mov	r4,r2
1000083c:	01400904 	movi	r5,36
10000840:	00024fc0 	call	100024fc <__mulsi3>
10000844:	8085883a 	add	r2,r16,r2
10000848:	10800304 	addi	r2,r2,12
1000084c:	10000015 	stw	zero,0(r2)
				veggieObject[i].packageType = 0;
10000850:	04040074 	movhi	r16,4097
10000854:	84109504 	addi	r16,r16,16980
10000858:	e0bffc17 	ldw	r2,-16(fp)
1000085c:	1009883a 	mov	r4,r2
10000860:	01400904 	movi	r5,36
10000864:	00024fc0 	call	100024fc <__mulsi3>
10000868:	8085883a 	add	r2,r16,r2
1000086c:	10800404 	addi	r2,r2,16
10000870:	10000015 	stw	zero,0(r2)
				veggieObject[i].xVelocity = 0;
10000874:	04040074 	movhi	r16,4097
10000878:	84109504 	addi	r16,r16,16980
1000087c:	e0bffc17 	ldw	r2,-16(fp)
10000880:	1009883a 	mov	r4,r2
10000884:	01400904 	movi	r5,36
10000888:	00024fc0 	call	100024fc <__mulsi3>
1000088c:	8085883a 	add	r2,r16,r2
10000890:	10800504 	addi	r2,r2,20
10000894:	10000015 	stw	zero,0(r2)
10000898:	10000115 	stw	zero,4(r2)
				veggieObject[i].yVelocity = 0;
1000089c:	04040074 	movhi	r16,4097
100008a0:	84109504 	addi	r16,r16,16980
100008a4:	e0bffc17 	ldw	r2,-16(fp)
100008a8:	1009883a 	mov	r4,r2
100008ac:	01400904 	movi	r5,36
100008b0:	00024fc0 	call	100024fc <__mulsi3>
100008b4:	8085883a 	add	r2,r16,r2
100008b8:	10800704 	addi	r2,r2,28
100008bc:	10000015 	stw	zero,0(r2)
100008c0:	10000115 	stw	zero,4(r2)
}

void physicsEngine()
{
	int i;
	for(i=1; i<16; i++)	// update all our physics of all objects!
100008c4:	e0bffc17 	ldw	r2,-16(fp)
100008c8:	10800044 	addi	r2,r2,1
100008cc:	e0bffc15 	stw	r2,-16(fp)
100008d0:	e0bffc17 	ldw	r2,-16(fp)
100008d4:	10800410 	cmplti	r2,r2,16
100008d8:	103f1e1e 	bne	r2,zero,10000554 <__alt_data_end+0xf8000554>
				veggieObject[i].yVelocity = 0;
			//	printf("eliminating object %d! \n", i);
			}
		}
	}
	return;
100008dc:	0001883a 	nop
}
100008e0:	e6fffd04 	addi	sp,fp,-12
100008e4:	dfc00417 	ldw	ra,16(sp)
100008e8:	df000317 	ldw	fp,12(sp)
100008ec:	dc800217 	ldw	r18,8(sp)
100008f0:	dc400117 	ldw	r17,4(sp)
100008f4:	dc000017 	ldw	r16,0(sp)
100008f8:	dec00504 	addi	sp,sp,20
100008fc:	f800283a 	ret

10000900 <spawningEngine>:

void spawningEngine()
{
10000900:	defff504 	addi	sp,sp,-44
10000904:	dfc00a15 	stw	ra,40(sp)
10000908:	df000915 	stw	fp,36(sp)
1000090c:	dc400815 	stw	r17,32(sp)
10000910:	dc000715 	stw	r16,28(sp)
10000914:	df000904 	addi	fp,sp,36
	int i;
	for(i=1; i<16; i++)	// let's go through our objects and see which ones are free
10000918:	00800044 	movi	r2,1
1000091c:	e0bff715 	stw	r2,-36(fp)
10000920:	00009206 	br	10000b6c <spawningEngine+0x26c>
	{
		if(veggieObject[i].objectState == 0)	// if one doesn't exist, go for it
10000924:	04040074 	movhi	r16,4097
10000928:	84109504 	addi	r16,r16,16980
1000092c:	e0bff717 	ldw	r2,-36(fp)
10000930:	1009883a 	mov	r4,r2
10000934:	01400904 	movi	r5,36
10000938:	00024fc0 	call	100024fc <__mulsi3>
1000093c:	8085883a 	add	r2,r16,r2
10000940:	10800304 	addi	r2,r2,12
10000944:	10800017 	ldw	r2,0(r2)
10000948:	1000851e 	bne	r2,zero,10000b60 <spawningEngine+0x260>
		{
			// RANDOM GENERATION!!
			unsigned int randomX = (rand() % 540) + 50;
1000094c:	00038cc0 	call	100038cc <rand>
10000950:	1009883a 	mov	r4,r2
10000954:	01408704 	movi	r5,540
10000958:	00024900 	call	10002490 <__modsi3>
1000095c:	10800c84 	addi	r2,r2,50
10000960:	e0bffa15 	stw	r2,-24(fp)
			int randomType = (rand() % 8) + 1;
10000964:	00038cc0 	call	100038cc <rand>
10000968:	1007883a 	mov	r3,r2
1000096c:	00a00034 	movhi	r2,32768
10000970:	108001c4 	addi	r2,r2,7
10000974:	1884703a 	and	r2,r3,r2
10000978:	1000040e 	bge	r2,zero,1000098c <spawningEngine+0x8c>
1000097c:	10bfffc4 	addi	r2,r2,-1
10000980:	00fffe04 	movi	r3,-8
10000984:	10c4b03a 	or	r2,r2,r3
10000988:	10800044 	addi	r2,r2,1
1000098c:	10800044 	addi	r2,r2,1
10000990:	e0bffb15 	stw	r2,-20(fp)
			double randomSpeedY = (rand() % 22) + 45;
10000994:	00038cc0 	call	100038cc <rand>
10000998:	1009883a 	mov	r4,r2
1000099c:	01400584 	movi	r5,22
100009a0:	00024900 	call	10002490 <__modsi3>
100009a4:	10800b44 	addi	r2,r2,45
100009a8:	1009883a 	mov	r4,r2
100009ac:	00037180 	call	10003718 <__floatsidf>
100009b0:	1009883a 	mov	r4,r2
100009b4:	180b883a 	mov	r5,r3
100009b8:	e13ffc15 	stw	r4,-16(fp)
100009bc:	e17ffd15 	stw	r5,-12(fp)
			double randomSpeedX = (rand() % 40) - 20;
100009c0:	00038cc0 	call	100038cc <rand>
100009c4:	1009883a 	mov	r4,r2
100009c8:	01400a04 	movi	r5,40
100009cc:	00024900 	call	10002490 <__modsi3>
100009d0:	10bffb04 	addi	r2,r2,-20
100009d4:	1009883a 	mov	r4,r2
100009d8:	00037180 	call	10003718 <__floatsidf>
100009dc:	1009883a 	mov	r4,r2
100009e0:	180b883a 	mov	r5,r3
100009e4:	e13ff815 	stw	r4,-32(fp)
100009e8:	e17ff915 	stw	r5,-28(fp)

			if (randomX < 100)
100009ec:	e0bffa17 	ldw	r2,-24(fp)
100009f0:	10801928 	cmpgeui	r2,r2,100
100009f4:	10000b1e 	bne	r2,zero,10000a24 <spawningEngine+0x124>
			{
				randomSpeedX = (rand() % 40);
100009f8:	00038cc0 	call	100038cc <rand>
100009fc:	1009883a 	mov	r4,r2
10000a00:	01400a04 	movi	r5,40
10000a04:	00024900 	call	10002490 <__modsi3>
10000a08:	1009883a 	mov	r4,r2
10000a0c:	00037180 	call	10003718 <__floatsidf>
10000a10:	1009883a 	mov	r4,r2
10000a14:	180b883a 	mov	r5,r3
10000a18:	e13ff815 	stw	r4,-32(fp)
10000a1c:	e17ff915 	stw	r5,-28(fp)
10000a20:	00000e06 	br	10000a5c <spawningEngine+0x15c>
			}
			else if (randomX > 540)
10000a24:	e0bffa17 	ldw	r2,-24(fp)
10000a28:	10808770 	cmpltui	r2,r2,541
10000a2c:	10000b1e 	bne	r2,zero,10000a5c <spawningEngine+0x15c>
			{
				randomSpeedX = (rand() % 40) - 40;
10000a30:	00038cc0 	call	100038cc <rand>
10000a34:	1009883a 	mov	r4,r2
10000a38:	01400a04 	movi	r5,40
10000a3c:	00024900 	call	10002490 <__modsi3>
10000a40:	10bff604 	addi	r2,r2,-40
10000a44:	1009883a 	mov	r4,r2
10000a48:	00037180 	call	10003718 <__floatsidf>
10000a4c:	1009883a 	mov	r4,r2
10000a50:	180b883a 	mov	r5,r3
10000a54:	e13ff815 	stw	r4,-32(fp)
10000a58:	e17ff915 	stw	r5,-28(fp)
			}

			// now let's store these
			veggieObject[i].xPosition = randomX;
10000a5c:	e47ffa17 	ldw	r17,-24(fp)
10000a60:	04040074 	movhi	r16,4097
10000a64:	84109504 	addi	r16,r16,16980
10000a68:	e0bff717 	ldw	r2,-36(fp)
10000a6c:	1009883a 	mov	r4,r2
10000a70:	01400904 	movi	r5,36
10000a74:	00024fc0 	call	100024fc <__mulsi3>
10000a78:	8085883a 	add	r2,r16,r2
10000a7c:	14400015 	stw	r17,0(r2)
			veggieObject[i].yPosition = 0;
10000a80:	04040074 	movhi	r16,4097
10000a84:	84109504 	addi	r16,r16,16980
10000a88:	e0bff717 	ldw	r2,-36(fp)
10000a8c:	1009883a 	mov	r4,r2
10000a90:	01400904 	movi	r5,36
10000a94:	00024fc0 	call	100024fc <__mulsi3>
10000a98:	8085883a 	add	r2,r16,r2
10000a9c:	10800104 	addi	r2,r2,4
10000aa0:	10000015 	stw	zero,0(r2)
			veggieObject[i].objectType = randomType;
10000aa4:	04040074 	movhi	r16,4097
10000aa8:	84109504 	addi	r16,r16,16980
10000aac:	e0bff717 	ldw	r2,-36(fp)
10000ab0:	1009883a 	mov	r4,r2
10000ab4:	01400904 	movi	r5,36
10000ab8:	00024fc0 	call	100024fc <__mulsi3>
10000abc:	8085883a 	add	r2,r16,r2
10000ac0:	10800204 	addi	r2,r2,8
10000ac4:	e0fffb17 	ldw	r3,-20(fp)
10000ac8:	10c00015 	stw	r3,0(r2)
			veggieObject[i].objectState = 1;
10000acc:	04040074 	movhi	r16,4097
10000ad0:	84109504 	addi	r16,r16,16980
10000ad4:	e0bff717 	ldw	r2,-36(fp)
10000ad8:	1009883a 	mov	r4,r2
10000adc:	01400904 	movi	r5,36
10000ae0:	00024fc0 	call	100024fc <__mulsi3>
10000ae4:	8085883a 	add	r2,r16,r2
10000ae8:	10800304 	addi	r2,r2,12
10000aec:	00c00044 	movi	r3,1
10000af0:	10c00015 	stw	r3,0(r2)
			veggieObject[i].xVelocity = randomSpeedX;
10000af4:	04040074 	movhi	r16,4097
10000af8:	84109504 	addi	r16,r16,16980
10000afc:	e0bff717 	ldw	r2,-36(fp)
10000b00:	1009883a 	mov	r4,r2
10000b04:	01400904 	movi	r5,36
10000b08:	00024fc0 	call	100024fc <__mulsi3>
10000b0c:	8085883a 	add	r2,r16,r2
10000b10:	10800504 	addi	r2,r2,20
10000b14:	e0fff817 	ldw	r3,-32(fp)
10000b18:	10c00015 	stw	r3,0(r2)
10000b1c:	e0fff917 	ldw	r3,-28(fp)
10000b20:	10c00115 	stw	r3,4(r2)
			veggieObject[i].yVelocity = randomSpeedY;
10000b24:	04040074 	movhi	r16,4097
10000b28:	84109504 	addi	r16,r16,16980
10000b2c:	e0bff717 	ldw	r2,-36(fp)
10000b30:	1009883a 	mov	r4,r2
10000b34:	01400904 	movi	r5,36
10000b38:	00024fc0 	call	100024fc <__mulsi3>
10000b3c:	8085883a 	add	r2,r16,r2
10000b40:	10800704 	addi	r2,r2,28
10000b44:	e0fffc17 	ldw	r3,-16(fp)
10000b48:	10c00015 	stw	r3,0(r2)
10000b4c:	e0fffd17 	ldw	r3,-12(fp)
10000b50:	10c00115 	stw	r3,4(r2)
/*			printf("x is %lu  ", randomX);
			printf("type is %d  ", randomType);
			printf("xvelocity is %f  ", randomSpeedX);
			printf("yvelocity is %f  \n", randomSpeedY);
*/
			i = 42;
10000b54:	00800a84 	movi	r2,42
10000b58:	e0bff715 	stw	r2,-36(fp)
			break;
10000b5c:	00000606 	br	10000b78 <spawningEngine+0x278>
}

void spawningEngine()
{
	int i;
	for(i=1; i<16; i++)	// let's go through our objects and see which ones are free
10000b60:	e0bff717 	ldw	r2,-36(fp)
10000b64:	10800044 	addi	r2,r2,1
10000b68:	e0bff715 	stw	r2,-36(fp)
10000b6c:	e0bff717 	ldw	r2,-36(fp)
10000b70:	10800410 	cmplti	r2,r2,16
10000b74:	103f6b1e 	bne	r2,zero,10000924 <__alt_data_end+0xf8000924>
*/
			i = 42;
			break;
		}
	}
}
10000b78:	e6fffe04 	addi	sp,fp,-8
10000b7c:	dfc00317 	ldw	ra,12(sp)
10000b80:	df000217 	ldw	fp,8(sp)
10000b84:	dc400117 	ldw	r17,4(sp)
10000b88:	dc000017 	ldw	r16,0(sp)
10000b8c:	dec00404 	addi	sp,sp,16
10000b90:	f800283a 	ret

10000b94 <sliceEngine>:

void sliceEngine()
{
10000b94:	defff704 	addi	sp,sp,-36
10000b98:	dfc00815 	stw	ra,32(sp)
10000b9c:	df000715 	stw	fp,28(sp)
10000ba0:	dc000615 	stw	r16,24(sp)
10000ba4:	df000704 	addi	fp,sp,28
	int i;
	for(i=1; i<16; i++)	// let's go through our objects and see which ones collide
10000ba8:	00800044 	movi	r2,1
10000bac:	e0bff915 	stw	r2,-28(fp)
10000bb0:	00008606 	br	10000dcc <sliceEngine+0x238>
	{
		if(veggieObject[i].objectState == 1)	// only if it is in perfect state
10000bb4:	04040074 	movhi	r16,4097
10000bb8:	84109504 	addi	r16,r16,16980
10000bbc:	e0bff917 	ldw	r2,-28(fp)
10000bc0:	1009883a 	mov	r4,r2
10000bc4:	01400904 	movi	r5,36
10000bc8:	00024fc0 	call	100024fc <__mulsi3>
10000bcc:	8085883a 	add	r2,r16,r2
10000bd0:	10800304 	addi	r2,r2,12
10000bd4:	10800017 	ldw	r2,0(r2)
10000bd8:	10800058 	cmpnei	r2,r2,1
10000bdc:	1000781e 	bne	r2,zero,10000dc0 <sliceEngine+0x22c>
		{
			// let's grab the vegetable coordinates
			int veggieX = veggieObject[i].xPosition;
10000be0:	04040074 	movhi	r16,4097
10000be4:	84109504 	addi	r16,r16,16980
10000be8:	e0bff917 	ldw	r2,-28(fp)
10000bec:	1009883a 	mov	r4,r2
10000bf0:	01400904 	movi	r5,36
10000bf4:	00024fc0 	call	100024fc <__mulsi3>
10000bf8:	8085883a 	add	r2,r16,r2
10000bfc:	10800017 	ldw	r2,0(r2)
10000c00:	e0bffd15 	stw	r2,-12(fp)
			int veggieY = veggieObject[i].xPosition;
10000c04:	04040074 	movhi	r16,4097
10000c08:	84109504 	addi	r16,r16,16980
10000c0c:	e0bff917 	ldw	r2,-28(fp)
10000c10:	1009883a 	mov	r4,r2
10000c14:	01400904 	movi	r5,36
10000c18:	00024fc0 	call	100024fc <__mulsi3>
10000c1c:	8085883a 	add	r2,r16,r2
10000c20:	10800017 	ldw	r2,0(r2)
10000c24:	e0bffe15 	stw	r2,-8(fp)

			// let's set our collision box
			int collideX, collideY;
			int offsetX = 10;
10000c28:	00800284 	movi	r2,10
10000c2c:	e0bffc15 	stw	r2,-16(fp)
			if((veggieObject[i].objectType == 1)) //eggplant
10000c30:	04040074 	movhi	r16,4097
10000c34:	84109504 	addi	r16,r16,16980
10000c38:	e0bff917 	ldw	r2,-28(fp)
10000c3c:	1009883a 	mov	r4,r2
10000c40:	01400904 	movi	r5,36
10000c44:	00024fc0 	call	100024fc <__mulsi3>
10000c48:	8085883a 	add	r2,r16,r2
10000c4c:	10800204 	addi	r2,r2,8
10000c50:	10800017 	ldw	r2,0(r2)
10000c54:	10800058 	cmpnei	r2,r2,1
10000c58:	1000051e 	bne	r2,zero,10000c70 <sliceEngine+0xdc>
			{
				collideX = 45;
10000c5c:	00800b44 	movi	r2,45
10000c60:	e0bffa15 	stw	r2,-24(fp)
				collideY = 85;
10000c64:	00801544 	movi	r2,85
10000c68:	e0bffb15 	stw	r2,-20(fp)
10000c6c:	00003506 	br	10000d44 <sliceEngine+0x1b0>
			}
			else if((veggieObject[i].objectType == 2))	// potato
10000c70:	04040074 	movhi	r16,4097
10000c74:	84109504 	addi	r16,r16,16980
10000c78:	e0bff917 	ldw	r2,-28(fp)
10000c7c:	1009883a 	mov	r4,r2
10000c80:	01400904 	movi	r5,36
10000c84:	00024fc0 	call	100024fc <__mulsi3>
10000c88:	8085883a 	add	r2,r16,r2
10000c8c:	10800204 	addi	r2,r2,8
10000c90:	10800017 	ldw	r2,0(r2)
10000c94:	10800098 	cmpnei	r2,r2,2
10000c98:	1000051e 	bne	r2,zero,10000cb0 <sliceEngine+0x11c>
			{
				collideX = 45;
10000c9c:	00800b44 	movi	r2,45
10000ca0:	e0bffa15 	stw	r2,-24(fp)
				collideY = 80;
10000ca4:	00801404 	movi	r2,80
10000ca8:	e0bffb15 	stw	r2,-20(fp)
10000cac:	00002506 	br	10000d44 <sliceEngine+0x1b0>
			}
			else if((veggieObject[i].objectType == 3)) 	// carrot
10000cb0:	04040074 	movhi	r16,4097
10000cb4:	84109504 	addi	r16,r16,16980
10000cb8:	e0bff917 	ldw	r2,-28(fp)
10000cbc:	1009883a 	mov	r4,r2
10000cc0:	01400904 	movi	r5,36
10000cc4:	00024fc0 	call	100024fc <__mulsi3>
10000cc8:	8085883a 	add	r2,r16,r2
10000ccc:	10800204 	addi	r2,r2,8
10000cd0:	10800017 	ldw	r2,0(r2)
10000cd4:	108000d8 	cmpnei	r2,r2,3
10000cd8:	1000051e 	bne	r2,zero,10000cf0 <sliceEngine+0x15c>
			{
				collideX = 45;
10000cdc:	00800b44 	movi	r2,45
10000ce0:	e0bffa15 	stw	r2,-24(fp)
				collideY = 40;
10000ce4:	00800a04 	movi	r2,40
10000ce8:	e0bffb15 	stw	r2,-20(fp)
10000cec:	00001506 	br	10000d44 <sliceEngine+0x1b0>
			}
			else if((veggieObject[i].objectType == 3))	// tomato
10000cf0:	04040074 	movhi	r16,4097
10000cf4:	84109504 	addi	r16,r16,16980
10000cf8:	e0bff917 	ldw	r2,-28(fp)
10000cfc:	1009883a 	mov	r4,r2
10000d00:	01400904 	movi	r5,36
10000d04:	00024fc0 	call	100024fc <__mulsi3>
10000d08:	8085883a 	add	r2,r16,r2
10000d0c:	10800204 	addi	r2,r2,8
10000d10:	10800017 	ldw	r2,0(r2)
10000d14:	108000d8 	cmpnei	r2,r2,3
10000d18:	1000051e 	bne	r2,zero,10000d30 <sliceEngine+0x19c>
			{
				collideX = 40;
10000d1c:	00800a04 	movi	r2,40
10000d20:	e0bffa15 	stw	r2,-24(fp)
				collideY = 40;
10000d24:	00800a04 	movi	r2,40
10000d28:	e0bffb15 	stw	r2,-20(fp)
10000d2c:	00000506 	br	10000d44 <sliceEngine+0x1b0>
			}
			else	// broccoli, cabbage, radish, onion
			{
				offsetX = 0;
10000d30:	e03ffc15 	stw	zero,-16(fp)
				collideX = 64;
10000d34:	00801004 	movi	r2,64
10000d38:	e0bffa15 	stw	r2,-24(fp)
				collideY = 64;
10000d3c:	00801004 	movi	r2,64
10000d40:	e0bffb15 	stw	r2,-20(fp)
			}

			// now let's check collision
			if(((veggieX+offsetX)<xCursor)&&((veggieX+collideX)>xCursor)&&(veggieY<yCursor)&&((veggieY+collideY)>yCursor))
10000d44:	e0fffd17 	ldw	r3,-12(fp)
10000d48:	e0bffc17 	ldw	r2,-16(fp)
10000d4c:	1885883a 	add	r2,r3,r2
10000d50:	1007883a 	mov	r3,r2
10000d54:	d0a6cc17 	ldw	r2,-25808(gp)
10000d58:	1880192e 	bgeu	r3,r2,10000dc0 <sliceEngine+0x22c>
10000d5c:	e0fffd17 	ldw	r3,-12(fp)
10000d60:	e0bffa17 	ldw	r2,-24(fp)
10000d64:	1885883a 	add	r2,r3,r2
10000d68:	1007883a 	mov	r3,r2
10000d6c:	d0a6cc17 	ldw	r2,-25808(gp)
10000d70:	10c0132e 	bgeu	r2,r3,10000dc0 <sliceEngine+0x22c>
10000d74:	e0fffe17 	ldw	r3,-8(fp)
10000d78:	d0a6cb17 	ldw	r2,-25812(gp)
10000d7c:	1880102e 	bgeu	r3,r2,10000dc0 <sliceEngine+0x22c>
10000d80:	e0fffe17 	ldw	r3,-8(fp)
10000d84:	e0bffb17 	ldw	r2,-20(fp)
10000d88:	1885883a 	add	r2,r3,r2
10000d8c:	1007883a 	mov	r3,r2
10000d90:	d0a6cb17 	ldw	r2,-25812(gp)
10000d94:	10c00a2e 	bgeu	r2,r3,10000dc0 <sliceEngine+0x22c>
			{
				// this means we are in the 'hitbox'!! kill the fruit!
				veggieObject[i].objectState = 2;
10000d98:	04040074 	movhi	r16,4097
10000d9c:	84109504 	addi	r16,r16,16980
10000da0:	e0bff917 	ldw	r2,-28(fp)
10000da4:	1009883a 	mov	r4,r2
10000da8:	01400904 	movi	r5,36
10000dac:	00024fc0 	call	100024fc <__mulsi3>
10000db0:	8085883a 	add	r2,r16,r2
10000db4:	10800304 	addi	r2,r2,12
10000db8:	00c00084 	movi	r3,2
10000dbc:	10c00015 	stw	r3,0(r2)
}

void sliceEngine()
{
	int i;
	for(i=1; i<16; i++)	// let's go through our objects and see which ones collide
10000dc0:	e0bff917 	ldw	r2,-28(fp)
10000dc4:	10800044 	addi	r2,r2,1
10000dc8:	e0bff915 	stw	r2,-28(fp)
10000dcc:	e0bff917 	ldw	r2,-28(fp)
10000dd0:	10800410 	cmplti	r2,r2,16
10000dd4:	103f771e 	bne	r2,zero,10000bb4 <__alt_data_end+0xf8000bb4>
				// this means we are in the 'hitbox'!! kill the fruit!
				veggieObject[i].objectState = 2;
			}
		}
	}
}
10000dd8:	e6ffff04 	addi	sp,fp,-4
10000ddc:	dfc00217 	ldw	ra,8(sp)
10000de0:	df000117 	ldw	fp,4(sp)
10000de4:	dc000017 	ldw	r16,0(sp)
10000de8:	dec00304 	addi	sp,sp,12
10000dec:	f800283a 	ret

10000df0 <disintegrateEngine>:

void disintegrateEngine()
{
10000df0:	defffc04 	addi	sp,sp,-16
10000df4:	dfc00315 	stw	ra,12(sp)
10000df8:	df000215 	stw	fp,8(sp)
10000dfc:	dc000115 	stw	r16,4(sp)
10000e00:	df000204 	addi	fp,sp,8
	int i;
	for(i=1; i<16; i++)	// let's go through our objects
10000e04:	00800044 	movi	r2,1
10000e08:	e0bffe15 	stw	r2,-8(fp)
10000e0c:	00004306 	br	10000f1c <disintegrateEngine+0x12c>
	{
		if(veggieObject[i].objectState == 2) // just been cut
10000e10:	04040074 	movhi	r16,4097
10000e14:	84109504 	addi	r16,r16,16980
10000e18:	e0bffe17 	ldw	r2,-8(fp)
10000e1c:	1009883a 	mov	r4,r2
10000e20:	01400904 	movi	r5,36
10000e24:	00024fc0 	call	100024fc <__mulsi3>
10000e28:	8085883a 	add	r2,r16,r2
10000e2c:	10800304 	addi	r2,r2,12
10000e30:	10800017 	ldw	r2,0(r2)
10000e34:	10800098 	cmpnei	r2,r2,2
10000e38:	10000b1e 	bne	r2,zero,10000e68 <disintegrateEngine+0x78>
		{
			veggieObject[i].objectState = 3;
10000e3c:	04040074 	movhi	r16,4097
10000e40:	84109504 	addi	r16,r16,16980
10000e44:	e0bffe17 	ldw	r2,-8(fp)
10000e48:	1009883a 	mov	r4,r2
10000e4c:	01400904 	movi	r5,36
10000e50:	00024fc0 	call	100024fc <__mulsi3>
10000e54:	8085883a 	add	r2,r16,r2
10000e58:	10800304 	addi	r2,r2,12
10000e5c:	00c000c4 	movi	r3,3
10000e60:	10c00015 	stw	r3,0(r2)
10000e64:	00002a06 	br	10000f10 <disintegrateEngine+0x120>
		}
		else if(veggieObject[i].objectState == 3) // midway through
10000e68:	04040074 	movhi	r16,4097
10000e6c:	84109504 	addi	r16,r16,16980
10000e70:	e0bffe17 	ldw	r2,-8(fp)
10000e74:	1009883a 	mov	r4,r2
10000e78:	01400904 	movi	r5,36
10000e7c:	00024fc0 	call	100024fc <__mulsi3>
10000e80:	8085883a 	add	r2,r16,r2
10000e84:	10800304 	addi	r2,r2,12
10000e88:	10800017 	ldw	r2,0(r2)
10000e8c:	108000d8 	cmpnei	r2,r2,3
10000e90:	10000b1e 	bne	r2,zero,10000ec0 <disintegrateEngine+0xd0>
		{
			veggieObject[i].objectState = 4;
10000e94:	04040074 	movhi	r16,4097
10000e98:	84109504 	addi	r16,r16,16980
10000e9c:	e0bffe17 	ldw	r2,-8(fp)
10000ea0:	1009883a 	mov	r4,r2
10000ea4:	01400904 	movi	r5,36
10000ea8:	00024fc0 	call	100024fc <__mulsi3>
10000eac:	8085883a 	add	r2,r16,r2
10000eb0:	10800304 	addi	r2,r2,12
10000eb4:	00c00104 	movi	r3,4
10000eb8:	10c00015 	stw	r3,0(r2)
10000ebc:	00001406 	br	10000f10 <disintegrateEngine+0x120>
		}
		else if(veggieObject[i].objectState == 4) // almost dedded
10000ec0:	04040074 	movhi	r16,4097
10000ec4:	84109504 	addi	r16,r16,16980
10000ec8:	e0bffe17 	ldw	r2,-8(fp)
10000ecc:	1009883a 	mov	r4,r2
10000ed0:	01400904 	movi	r5,36
10000ed4:	00024fc0 	call	100024fc <__mulsi3>
10000ed8:	8085883a 	add	r2,r16,r2
10000edc:	10800304 	addi	r2,r2,12
10000ee0:	10800017 	ldw	r2,0(r2)
10000ee4:	10800118 	cmpnei	r2,r2,4
10000ee8:	1000091e 	bne	r2,zero,10000f10 <disintegrateEngine+0x120>
		{
			veggieObject[i].objectState = 0;	// gone!
10000eec:	04040074 	movhi	r16,4097
10000ef0:	84109504 	addi	r16,r16,16980
10000ef4:	e0bffe17 	ldw	r2,-8(fp)
10000ef8:	1009883a 	mov	r4,r2
10000efc:	01400904 	movi	r5,36
10000f00:	00024fc0 	call	100024fc <__mulsi3>
10000f04:	8085883a 	add	r2,r16,r2
10000f08:	10800304 	addi	r2,r2,12
10000f0c:	10000015 	stw	zero,0(r2)
}

void disintegrateEngine()
{
	int i;
	for(i=1; i<16; i++)	// let's go through our objects
10000f10:	e0bffe17 	ldw	r2,-8(fp)
10000f14:	10800044 	addi	r2,r2,1
10000f18:	e0bffe15 	stw	r2,-8(fp)
10000f1c:	e0bffe17 	ldw	r2,-8(fp)
10000f20:	10800410 	cmplti	r2,r2,16
10000f24:	103fba1e 	bne	r2,zero,10000e10 <__alt_data_end+0xf8000e10>
		else if(veggieObject[i].objectState == 4) // almost dedded
		{
			veggieObject[i].objectState = 0;	// gone!
		}
	}
}
10000f28:	e6ffff04 	addi	sp,fp,-4
10000f2c:	dfc00217 	ldw	ra,8(sp)
10000f30:	df000117 	ldw	fp,4(sp)
10000f34:	dc000017 	ldw	r16,0(sp)
10000f38:	dec00304 	addi	sp,sp,12
10000f3c:	f800283a 	ret

10000f40 <FPGAcommunicator>:

// this function takes an array of 32-bit messages and sends them all out
void FPGAcommunicator()
{
10000f40:	deffe704 	addi	sp,sp,-100
10000f44:	dfc01815 	stw	ra,96(sp)
10000f48:	df001715 	stw	fp,92(sp)
10000f4c:	dc001615 	stw	r16,88(sp)
10000f50:	df001704 	addi	fp,sp,92
	// start putting in our xcoords
	*to_hw_sig = 1;	// 1 means we're starting communication of xCoord
10000f54:	00801c04 	movi	r2,112
10000f58:	00c00044 	movi	r3,1
10000f5c:	10c00005 	stb	r3,0(r2)
	*to_hw_port0 = veggieObject[0].xPosition;
10000f60:	00c04004 	movi	r3,256
10000f64:	00840074 	movhi	r2,4097
10000f68:	10909504 	addi	r2,r2,16980
10000f6c:	10800017 	ldw	r2,0(r2)
10000f70:	18800015 	stw	r2,0(r3)
	*to_hw_port1 = veggieObject[1].xPosition;
10000f74:	00c03c04 	movi	r3,240
10000f78:	00840074 	movhi	r2,4097
10000f7c:	10909504 	addi	r2,r2,16980
10000f80:	10800917 	ldw	r2,36(r2)
10000f84:	18800015 	stw	r2,0(r3)
	*to_hw_port2 = veggieObject[2].xPosition;
10000f88:	00c03804 	movi	r3,224
10000f8c:	00840074 	movhi	r2,4097
10000f90:	10909504 	addi	r2,r2,16980
10000f94:	10801217 	ldw	r2,72(r2)
10000f98:	18800015 	stw	r2,0(r3)
	*to_hw_port3 = veggieObject[3].xPosition;
10000f9c:	00c03404 	movi	r3,208
10000fa0:	00840074 	movhi	r2,4097
10000fa4:	10909504 	addi	r2,r2,16980
10000fa8:	10801b17 	ldw	r2,108(r2)
10000fac:	18800015 	stw	r2,0(r3)
	*to_hw_port4 = veggieObject[4].xPosition;
10000fb0:	00c03004 	movi	r3,192
10000fb4:	00840074 	movhi	r2,4097
10000fb8:	10909504 	addi	r2,r2,16980
10000fbc:	10802417 	ldw	r2,144(r2)
10000fc0:	18800015 	stw	r2,0(r3)
	*to_hw_port5 = veggieObject[5].xPosition;
10000fc4:	00c02c04 	movi	r3,176
10000fc8:	00840074 	movhi	r2,4097
10000fcc:	10909504 	addi	r2,r2,16980
10000fd0:	10802d17 	ldw	r2,180(r2)
10000fd4:	18800015 	stw	r2,0(r3)
	*to_hw_port6 = veggieObject[6].xPosition;
10000fd8:	00c02804 	movi	r3,160
10000fdc:	00840074 	movhi	r2,4097
10000fe0:	10909504 	addi	r2,r2,16980
10000fe4:	10803617 	ldw	r2,216(r2)
10000fe8:	18800015 	stw	r2,0(r3)
	*to_hw_port7 = veggieObject[7].xPosition;
10000fec:	00c01804 	movi	r3,96
10000ff0:	00840074 	movhi	r2,4097
10000ff4:	10909504 	addi	r2,r2,16980
10000ff8:	10803f17 	ldw	r2,252(r2)
10000ffc:	18800015 	stw	r2,0(r3)
	*to_hw_port8 = veggieObject[8].xPosition;
10001000:	00c02404 	movi	r3,144
10001004:	00840074 	movhi	r2,4097
10001008:	10909504 	addi	r2,r2,16980
1000100c:	10804817 	ldw	r2,288(r2)
10001010:	18800015 	stw	r2,0(r3)
	*to_hw_port9 = veggieObject[9].xPosition;
10001014:	00c02004 	movi	r3,128
10001018:	00840074 	movhi	r2,4097
1000101c:	10909504 	addi	r2,r2,16980
10001020:	10805117 	ldw	r2,324(r2)
10001024:	18800015 	stw	r2,0(r3)
	*to_hw_port10 = veggieObject[10].xPosition;
10001028:	00c01004 	movi	r3,64
1000102c:	00840074 	movhi	r2,4097
10001030:	10909504 	addi	r2,r2,16980
10001034:	10805a17 	ldw	r2,360(r2)
10001038:	18800015 	stw	r2,0(r3)
	*to_hw_port11 = veggieObject[11].xPosition;
1000103c:	00c00c04 	movi	r3,48
10001040:	00840074 	movhi	r2,4097
10001044:	10909504 	addi	r2,r2,16980
10001048:	10806317 	ldw	r2,396(r2)
1000104c:	18800015 	stw	r2,0(r3)
	*to_hw_port12 = veggieObject[12].xPosition;
10001050:	00c00804 	movi	r3,32
10001054:	00840074 	movhi	r2,4097
10001058:	10909504 	addi	r2,r2,16980
1000105c:	10806c17 	ldw	r2,432(r2)
10001060:	18800015 	stw	r2,0(r3)
	*to_hw_port13 = veggieObject[13].xPosition;
10001064:	00c05804 	movi	r3,352
10001068:	00840074 	movhi	r2,4097
1000106c:	10909504 	addi	r2,r2,16980
10001070:	10807517 	ldw	r2,468(r2)
10001074:	18800015 	stw	r2,0(r3)
	*to_hw_port14 = veggieObject[14].xPosition;
10001078:	00c05404 	movi	r3,336
1000107c:	00840074 	movhi	r2,4097
10001080:	10909504 	addi	r2,r2,16980
10001084:	10807e17 	ldw	r2,504(r2)
10001088:	18800015 	stw	r2,0(r3)
	*to_hw_port15 = veggieObject[15].xPosition;
1000108c:	00c05004 	movi	r3,320
10001090:	00840074 	movhi	r2,4097
10001094:	10909504 	addi	r2,r2,16980
10001098:	10808717 	ldw	r2,540(r2)
1000109c:	18800015 	stw	r2,0(r3)
	// wait for response
	while(*to_sw_sig != 1);
100010a0:	0001883a 	nop
100010a4:	00801404 	movi	r2,80
100010a8:	10800003 	ldbu	r2,0(r2)
100010ac:	10803fcc 	andi	r2,r2,255
100010b0:	1080201c 	xori	r2,r2,128
100010b4:	10bfe004 	addi	r2,r2,-128
100010b8:	10800058 	cmpnei	r2,r2,1
100010bc:	103ff91e 	bne	r2,zero,100010a4 <__alt_data_end+0xf80010a4>

	*to_hw_sig = 2;	// 2 means we're starting communication of yCoord
100010c0:	00801c04 	movi	r2,112
100010c4:	00c00084 	movi	r3,2
100010c8:	10c00005 	stb	r3,0(r2)
	*to_hw_port0 = veggieObject[0].yPosition;
100010cc:	00c04004 	movi	r3,256
100010d0:	00840074 	movhi	r2,4097
100010d4:	10909504 	addi	r2,r2,16980
100010d8:	10800117 	ldw	r2,4(r2)
100010dc:	18800015 	stw	r2,0(r3)
	*to_hw_port1 = veggieObject[1].yPosition;
100010e0:	00c03c04 	movi	r3,240
100010e4:	00840074 	movhi	r2,4097
100010e8:	10909504 	addi	r2,r2,16980
100010ec:	10800a17 	ldw	r2,40(r2)
100010f0:	18800015 	stw	r2,0(r3)
	*to_hw_port2 = veggieObject[2].yPosition;
100010f4:	00c03804 	movi	r3,224
100010f8:	00840074 	movhi	r2,4097
100010fc:	10909504 	addi	r2,r2,16980
10001100:	10801317 	ldw	r2,76(r2)
10001104:	18800015 	stw	r2,0(r3)
	*to_hw_port3 = veggieObject[3].yPosition;
10001108:	00c03404 	movi	r3,208
1000110c:	00840074 	movhi	r2,4097
10001110:	10909504 	addi	r2,r2,16980
10001114:	10801c17 	ldw	r2,112(r2)
10001118:	18800015 	stw	r2,0(r3)
	*to_hw_port4 = veggieObject[4].yPosition;
1000111c:	00c03004 	movi	r3,192
10001120:	00840074 	movhi	r2,4097
10001124:	10909504 	addi	r2,r2,16980
10001128:	10802517 	ldw	r2,148(r2)
1000112c:	18800015 	stw	r2,0(r3)
	*to_hw_port5 = veggieObject[5].yPosition;
10001130:	00c02c04 	movi	r3,176
10001134:	00840074 	movhi	r2,4097
10001138:	10909504 	addi	r2,r2,16980
1000113c:	10802e17 	ldw	r2,184(r2)
10001140:	18800015 	stw	r2,0(r3)
	*to_hw_port6 = veggieObject[6].yPosition;
10001144:	00c02804 	movi	r3,160
10001148:	00840074 	movhi	r2,4097
1000114c:	10909504 	addi	r2,r2,16980
10001150:	10803717 	ldw	r2,220(r2)
10001154:	18800015 	stw	r2,0(r3)
	*to_hw_port7 = veggieObject[7].yPosition;
10001158:	00c01804 	movi	r3,96
1000115c:	00840074 	movhi	r2,4097
10001160:	10909504 	addi	r2,r2,16980
10001164:	10804017 	ldw	r2,256(r2)
10001168:	18800015 	stw	r2,0(r3)
	*to_hw_port8 = veggieObject[8].yPosition;
1000116c:	00c02404 	movi	r3,144
10001170:	00840074 	movhi	r2,4097
10001174:	10909504 	addi	r2,r2,16980
10001178:	10804917 	ldw	r2,292(r2)
1000117c:	18800015 	stw	r2,0(r3)
	*to_hw_port9 = veggieObject[9].yPosition;
10001180:	00c02004 	movi	r3,128
10001184:	00840074 	movhi	r2,4097
10001188:	10909504 	addi	r2,r2,16980
1000118c:	10805217 	ldw	r2,328(r2)
10001190:	18800015 	stw	r2,0(r3)
	*to_hw_port10 = veggieObject[10].yPosition;
10001194:	00c01004 	movi	r3,64
10001198:	00840074 	movhi	r2,4097
1000119c:	10909504 	addi	r2,r2,16980
100011a0:	10805b17 	ldw	r2,364(r2)
100011a4:	18800015 	stw	r2,0(r3)
	*to_hw_port11 = veggieObject[11].yPosition;
100011a8:	00c00c04 	movi	r3,48
100011ac:	00840074 	movhi	r2,4097
100011b0:	10909504 	addi	r2,r2,16980
100011b4:	10806417 	ldw	r2,400(r2)
100011b8:	18800015 	stw	r2,0(r3)
	*to_hw_port12 = veggieObject[12].yPosition;
100011bc:	00c00804 	movi	r3,32
100011c0:	00840074 	movhi	r2,4097
100011c4:	10909504 	addi	r2,r2,16980
100011c8:	10806d17 	ldw	r2,436(r2)
100011cc:	18800015 	stw	r2,0(r3)
	*to_hw_port13 = veggieObject[13].yPosition;
100011d0:	00c05804 	movi	r3,352
100011d4:	00840074 	movhi	r2,4097
100011d8:	10909504 	addi	r2,r2,16980
100011dc:	10807617 	ldw	r2,472(r2)
100011e0:	18800015 	stw	r2,0(r3)
	*to_hw_port14 = veggieObject[14].yPosition;
100011e4:	00c05404 	movi	r3,336
100011e8:	00840074 	movhi	r2,4097
100011ec:	10909504 	addi	r2,r2,16980
100011f0:	10807f17 	ldw	r2,508(r2)
100011f4:	18800015 	stw	r2,0(r3)
	*to_hw_port15 = veggieObject[15].yPosition;
100011f8:	00c05004 	movi	r3,320
100011fc:	00840074 	movhi	r2,4097
10001200:	10909504 	addi	r2,r2,16980
10001204:	10808817 	ldw	r2,544(r2)
10001208:	18800015 	stw	r2,0(r3)
	// wait for confirmation
	while(*to_sw_sig != 2);
1000120c:	0001883a 	nop
10001210:	00801404 	movi	r2,80
10001214:	10800003 	ldbu	r2,0(r2)
10001218:	10803fcc 	andi	r2,r2,255
1000121c:	1080201c 	xori	r2,r2,128
10001220:	10bfe004 	addi	r2,r2,-128
10001224:	10800098 	cmpnei	r2,r2,2
10001228:	103ff91e 	bne	r2,zero,10001210 <__alt_data_end+0xf8001210>

	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned int FPGAmessage[15];
	int i;		// load all of our structs in
	for (i=0; i<16; i++)
1000122c:	e03fee15 	stw	zero,-72(fp)
10001230:	00002206 	br	100012bc <FPGAcommunicator+0x37c>
	{
		unsigned int tempPackage = messagePackager(veggieObject[i]);
10001234:	04040074 	movhi	r16,4097
10001238:	84109504 	addi	r16,r16,16980
1000123c:	e0bfee17 	ldw	r2,-72(fp)
10001240:	1009883a 	mov	r4,r2
10001244:	01400904 	movi	r5,36
10001248:	00024fc0 	call	100024fc <__mulsi3>
1000124c:	8085883a 	add	r2,r16,r2
10001250:	10c00417 	ldw	r3,16(r2)
10001254:	d8c00015 	stw	r3,0(sp)
10001258:	10c00517 	ldw	r3,20(r2)
1000125c:	d8c00115 	stw	r3,4(sp)
10001260:	10c00617 	ldw	r3,24(r2)
10001264:	d8c00215 	stw	r3,8(sp)
10001268:	10c00717 	ldw	r3,28(r2)
1000126c:	d8c00315 	stw	r3,12(sp)
10001270:	10c00817 	ldw	r3,32(r2)
10001274:	d8c00415 	stw	r3,16(sp)
10001278:	11000017 	ldw	r4,0(r2)
1000127c:	11400117 	ldw	r5,4(r2)
10001280:	11800217 	ldw	r6,8(r2)
10001284:	11c00317 	ldw	r7,12(r2)
10001288:	00013d80 	call	100013d8 <messagePackager>
1000128c:	e0bfef15 	stw	r2,-68(fp)
	//	printf("Our %dth message is %llu\n", i, tempPackage);
		FPGAmessage[i] = tempPackage;
10001290:	e0bfee17 	ldw	r2,-72(fp)
10001294:	1085883a 	add	r2,r2,r2
10001298:	1085883a 	add	r2,r2,r2
1000129c:	e0ffee04 	addi	r3,fp,-72
100012a0:	1885883a 	add	r2,r3,r2
100012a4:	10800204 	addi	r2,r2,8
100012a8:	e0ffef17 	ldw	r3,-68(fp)
100012ac:	10c00015 	stw	r3,0(r2)
	while(*to_sw_sig != 2);

	// initialization of message we need to send to FPGA (array of 32-bit messages)
	unsigned int FPGAmessage[15];
	int i;		// load all of our structs in
	for (i=0; i<16; i++)
100012b0:	e0bfee17 	ldw	r2,-72(fp)
100012b4:	10800044 	addi	r2,r2,1
100012b8:	e0bfee15 	stw	r2,-72(fp)
100012bc:	e0bfee17 	ldw	r2,-72(fp)
100012c0:	10800410 	cmplti	r2,r2,16
100012c4:	103fdb1e 	bne	r2,zero,10001234 <__alt_data_end+0xf8001234>
	{
		unsigned int tempPackage = messagePackager(veggieObject[i]);
	//	printf("Our %dth message is %llu\n", i, tempPackage);
		FPGAmessage[i] = tempPackage;
	}
	*to_hw_sig = 3;		// our final sending
100012c8:	00801c04 	movi	r2,112
100012cc:	00c000c4 	movi	r3,3
100012d0:	10c00005 	stb	r3,0(r2)
	*to_hw_port0 = FPGAmessage[0];
100012d4:	00804004 	movi	r2,256
100012d8:	e0fff017 	ldw	r3,-64(fp)
100012dc:	10c00015 	stw	r3,0(r2)
	*to_hw_port1 = FPGAmessage[1];
100012e0:	00803c04 	movi	r2,240
100012e4:	e0fff117 	ldw	r3,-60(fp)
100012e8:	10c00015 	stw	r3,0(r2)
	*to_hw_port2 = FPGAmessage[2];
100012ec:	00803804 	movi	r2,224
100012f0:	e0fff217 	ldw	r3,-56(fp)
100012f4:	10c00015 	stw	r3,0(r2)
	*to_hw_port3 = FPGAmessage[3];
100012f8:	00803404 	movi	r2,208
100012fc:	e0fff317 	ldw	r3,-52(fp)
10001300:	10c00015 	stw	r3,0(r2)
	*to_hw_port4 = FPGAmessage[4];
10001304:	00803004 	movi	r2,192
10001308:	e0fff417 	ldw	r3,-48(fp)
1000130c:	10c00015 	stw	r3,0(r2)
	*to_hw_port5 = FPGAmessage[5];
10001310:	00802c04 	movi	r2,176
10001314:	e0fff517 	ldw	r3,-44(fp)
10001318:	10c00015 	stw	r3,0(r2)
	*to_hw_port6 = FPGAmessage[6];
1000131c:	00802804 	movi	r2,160
10001320:	e0fff617 	ldw	r3,-40(fp)
10001324:	10c00015 	stw	r3,0(r2)
	*to_hw_port7 = FPGAmessage[7];
10001328:	00801804 	movi	r2,96
1000132c:	e0fff717 	ldw	r3,-36(fp)
10001330:	10c00015 	stw	r3,0(r2)
	*to_hw_port8 = FPGAmessage[8];
10001334:	00802404 	movi	r2,144
10001338:	e0fff817 	ldw	r3,-32(fp)
1000133c:	10c00015 	stw	r3,0(r2)
	*to_hw_port9 = FPGAmessage[9];
10001340:	00802004 	movi	r2,128
10001344:	e0fff917 	ldw	r3,-28(fp)
10001348:	10c00015 	stw	r3,0(r2)
	*to_hw_port10 = FPGAmessage[10];
1000134c:	00801004 	movi	r2,64
10001350:	e0fffa17 	ldw	r3,-24(fp)
10001354:	10c00015 	stw	r3,0(r2)
	*to_hw_port11 = FPGAmessage[11];
10001358:	00800c04 	movi	r2,48
1000135c:	e0fffb17 	ldw	r3,-20(fp)
10001360:	10c00015 	stw	r3,0(r2)
	*to_hw_port12 = FPGAmessage[12];
10001364:	00800804 	movi	r2,32
10001368:	e0fffc17 	ldw	r3,-16(fp)
1000136c:	10c00015 	stw	r3,0(r2)
	*to_hw_port13 = FPGAmessage[13];
10001370:	00805804 	movi	r2,352
10001374:	e0fffd17 	ldw	r3,-12(fp)
10001378:	10c00015 	stw	r3,0(r2)
	*to_hw_port14 = FPGAmessage[14];
1000137c:	00805404 	movi	r2,336
10001380:	e0fffe17 	ldw	r3,-8(fp)
10001384:	10c00015 	stw	r3,0(r2)
	*to_hw_port15 = FPGAmessage[15];
10001388:	00805004 	movi	r2,320
1000138c:	e0ffff17 	ldw	r3,-4(fp)
10001390:	10c00015 	stw	r3,0(r2)

	// last confirmation
	while(*to_sw_sig != 3);
10001394:	0001883a 	nop
10001398:	00801404 	movi	r2,80
1000139c:	10800003 	ldbu	r2,0(r2)
100013a0:	10803fcc 	andi	r2,r2,255
100013a4:	1080201c 	xori	r2,r2,128
100013a8:	10bfe004 	addi	r2,r2,-128
100013ac:	108000d8 	cmpnei	r2,r2,3
100013b0:	103ff91e 	bne	r2,zero,10001398 <__alt_data_end+0xf8001398>
	*to_hw_sig = 0;
100013b4:	00801c04 	movi	r2,112
100013b8:	10000005 	stb	zero,0(r2)

	return;
100013bc:	0001883a 	nop
}
100013c0:	e6ffff04 	addi	sp,fp,-4
100013c4:	dfc00217 	ldw	ra,8(sp)
100013c8:	df000117 	ldw	fp,4(sp)
100013cc:	dc000017 	ldw	r16,0(sp)
100013d0:	dec00304 	addi	sp,sp,12
100013d4:	f800283a 	ret

100013d8 <messagePackager>:

// this function takes a single struct and converts it into a message we can send
unsigned long messagePackager(struct gameObject specifiedObject)
{
100013d8:	deffee04 	addi	sp,sp,-72
100013dc:	dfc00d15 	stw	ra,52(sp)
100013e0:	df000c15 	stw	fp,48(sp)
100013e4:	dc800b15 	stw	r18,44(sp)
100013e8:	dc400a15 	stw	r17,40(sp)
100013ec:	dc000915 	stw	r16,36(sp)
100013f0:	df000c04 	addi	fp,sp,48
100013f4:	e1000215 	stw	r4,8(fp)
100013f8:	e1400315 	stw	r5,12(fp)
100013fc:	e1800415 	stw	r6,16(fp)
10001400:	e1c00515 	stw	r7,20(fp)
	int packageType;
	unsigned int tempDecimal;
	unsigned long tempBinary;

	// figure out how to package it
	packageType = specifiedObject.packageType;
10001404:	e0800617 	ldw	r2,24(fp)
10001408:	e0bff515 	stw	r2,-44(fp)

	if (packageType == 100)		// impossible number for now
1000140c:	e0bff517 	ldw	r2,-44(fp)
10001410:	10801918 	cmpnei	r2,r2,100
10001414:	1000261e 	bne	r2,zero,100014b0 <messagePackager+0xd8>
	{
		// this means we are packaging our game package instead
		unsigned long tempScore, tempTime, tempStart, tempEnd;

		// grab our stuff in conversion
		tempScore = specifiedObject.xPosition;
10001418:	e0800217 	ldw	r2,8(fp)
1000141c:	e0bff615 	stw	r2,-40(fp)
		tempTime = specifiedObject.yPosition;
10001420:	e0800317 	ldw	r2,12(fp)
10001424:	e0bff715 	stw	r2,-36(fp)
		tempStart = specifiedObject.objectType;
10001428:	e0800417 	ldw	r2,16(fp)
1000142c:	e0bff815 	stw	r2,-32(fp)
		tempEnd = specifiedObject.objectState;
10001430:	e0800517 	ldw	r2,20(fp)
10001434:	e0bff915 	stw	r2,-28(fp)

		// and convert it to binary!
		tempScore = convertDecimalToBinary(tempScore);
10001438:	e13ff617 	ldw	r4,-40(fp)
1000143c:	00016240 	call	10001624 <convertDecimalToBinary>
10001440:	e0bff615 	stw	r2,-40(fp)
		tempTime = convertDecimalToBinary(tempTime);
10001444:	e13ff717 	ldw	r4,-36(fp)
10001448:	00016240 	call	10001624 <convertDecimalToBinary>
1000144c:	e0bff715 	stw	r2,-36(fp)
		tempStart = convertDecimalToBinary(tempStart);
10001450:	e13ff817 	ldw	r4,-32(fp)
10001454:	00016240 	call	10001624 <convertDecimalToBinary>
10001458:	e0bff815 	stw	r2,-32(fp)
		tempEnd = convertDecimalToBinary(tempEnd);
1000145c:	e13ff917 	ldw	r4,-28(fp)
10001460:	00016240 	call	10001624 <convertDecimalToBinary>
10001464:	e0bff915 	stw	r2,-28(fp)

		// and now we append everything together!			// TO DO HERE
		tempBinary = tempScore + tempTime*10000000 + tempStart*10000000*10000000 + tempEnd*1000*10000000*10000000;
10001468:	e13ff717 	ldw	r4,-36(fp)
1000146c:	01402674 	movhi	r5,153
10001470:	2965a004 	addi	r5,r5,-27008
10001474:	00024fc0 	call	100024fc <__mulsi3>
10001478:	1025883a 	mov	r18,r2
1000147c:	e13ff817 	ldw	r4,-32(fp)
10001480:	01441eb4 	movhi	r5,4218
10001484:	29500004 	addi	r5,r5,16384
10001488:	00024fc0 	call	100024fc <__mulsi3>
1000148c:	9087883a 	add	r3,r18,r2
10001490:	e0bff617 	ldw	r2,-40(fp)
10001494:	18a5883a 	add	r18,r3,r2
10001498:	e13ff917 	ldw	r4,-28(fp)
1000149c:	015762b4 	movhi	r5,23946
100014a0:	00024fc0 	call	100024fc <__mulsi3>
100014a4:	9085883a 	add	r2,r18,r2
100014a8:	e0bff415 	stw	r2,-48(fp)
100014ac:	00001106 	br	100014f4 <messagePackager+0x11c>
		unsigned long tempType, tempState;

		// grab our stuff from the struct
//		tempType = specifiedObject.objectType;
//		tempState = specifiedObject.objectState;
		tempType = 4;
100014b0:	00800104 	movi	r2,4
100014b4:	e0bffa15 	stw	r2,-24(fp)
		tempState = 7;
100014b8:	008001c4 	movi	r2,7
100014bc:	e0bffb15 	stw	r2,-20(fp)

		// and convert stuff to binary!
		tempType = convertDecimalToBinary(tempType);
100014c0:	e13ffa17 	ldw	r4,-24(fp)
100014c4:	00016240 	call	10001624 <convertDecimalToBinary>
100014c8:	e0bffa15 	stw	r2,-24(fp)
		tempState = convertDecimalToBinary(tempState);
100014cc:	e13ffb17 	ldw	r4,-20(fp)
100014d0:	00016240 	call	10001624 <convertDecimalToBinary>
100014d4:	e0bffb15 	stw	r2,-20(fp)
		printf("tempY: %llu   ", tempY);
		printf("tempType: %llu   ", tempType);
		printf("tempState: %llu   ", tempState);
*/
		// now we append everything together!
		tempBinary = tempState + tempType*1000;
100014d8:	e13ffa17 	ldw	r4,-24(fp)
100014dc:	0140fa04 	movi	r5,1000
100014e0:	00024fc0 	call	100024fc <__mulsi3>
100014e4:	1007883a 	mov	r3,r2
100014e8:	e0bffb17 	ldw	r2,-20(fp)
100014ec:	1885883a 	add	r2,r3,r2
100014f0:	e0bff415 	stw	r2,-48(fp)
		//	printf("tempBinary: %llu   ", tempBinary);
	}
	// and convert it back to decimal!
	// SEE IF WE CAN SEND TO HARDWARE TO DO THIS
	tempDecimal = convertBinaryToDecimal(tempBinary);
100014f4:	e0bff417 	ldw	r2,-48(fp)
100014f8:	1021883a 	mov	r16,r2
100014fc:	0023883a 	mov	r17,zero
10001500:	8009883a 	mov	r4,r16
10001504:	880b883a 	mov	r5,r17
10001508:	000168c0 	call	1000168c <convertBinaryToDecimal>
1000150c:	e0bffc15 	stw	r2,-16(fp)

	// and return it!
	return tempDecimal;
10001510:	e0bffc17 	ldw	r2,-16(fp)
}
10001514:	e6fffd04 	addi	sp,fp,-12
10001518:	dfc00417 	ldw	ra,16(sp)
1000151c:	df000317 	ldw	fp,12(sp)
10001520:	dc800217 	ldw	r18,8(sp)
10001524:	dc400117 	ldw	r17,4(sp)
10001528:	dc000017 	ldw	r16,0(sp)
1000152c:	dec00904 	addi	sp,sp,36
10001530:	f800283a 	ret

10001534 <port2Unpackager>:

// this function unpacks to software port 2 into its 5 different signals
void port2Unpackager()
{
10001534:	defff704 	addi	sp,sp,-36
10001538:	dfc00815 	stw	ra,32(sp)
1000153c:	df000715 	stw	fp,28(sp)
10001540:	df000704 	addi	fp,sp,28
	// read it in and convert to binary
	unsigned long port2 = *to_sw_port2;
10001544:	00804404 	movi	r2,272
10001548:	10800003 	ldbu	r2,0(r2)
1000154c:	10803fcc 	andi	r2,r2,255
10001550:	1080201c 	xori	r2,r2,128
10001554:	10bfe004 	addi	r2,r2,-128
10001558:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);
1000155c:	e13ff917 	ldw	r4,-28(fp)
10001560:	00016240 	call	10001624 <convertDecimalToBinary>
10001564:	e0bff915 	stw	r2,-28(fp)

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
10001568:	e03ffa15 	stw	zero,-24(fp)
1000156c:	00001406 	br	100015c0 <port2Unpackager+0x8c>
	{
		unpackaged[i] = port2 % 10;
10001570:	e0bff917 	ldw	r2,-28(fp)
10001574:	1009883a 	mov	r4,r2
10001578:	01400284 	movi	r5,10
1000157c:	00024f40 	call	100024f4 <__umodsi3>
10001580:	1007883a 	mov	r3,r2
10001584:	e0bffa17 	ldw	r2,-24(fp)
10001588:	1085883a 	add	r2,r2,r2
1000158c:	1085883a 	add	r2,r2,r2
10001590:	e13ff904 	addi	r4,fp,-28
10001594:	2085883a 	add	r2,r4,r2
10001598:	10800204 	addi	r2,r2,8
1000159c:	10c00015 	stw	r3,0(r2)
		port2 /= 10;
100015a0:	e0bff917 	ldw	r2,-28(fp)
100015a4:	1009883a 	mov	r4,r2
100015a8:	01400284 	movi	r5,10
100015ac:	00024ec0 	call	100024ec <__udivsi3>
100015b0:	e0bff915 	stw	r2,-28(fp)
	port2 = convertDecimalToBinary(port2);

	// now let's unpack it one by one
	int unpackaged[5];
	int i;
	for(i=0; i<5; i++)
100015b4:	e0bffa17 	ldw	r2,-24(fp)
100015b8:	10800044 	addi	r2,r2,1
100015bc:	e0bffa15 	stw	r2,-24(fp)
100015c0:	e0bffa17 	ldw	r2,-24(fp)
100015c4:	10800150 	cmplti	r2,r2,5
100015c8:	103fe91e 	bne	r2,zero,10001570 <__alt_data_end+0xf8001570>
		unpackaged[i] = port2 % 10;
		port2 /= 10;
	}

	// now let's assign out all the statements
	key1 = unpackaged[2];
100015cc:	e0bffd17 	ldw	r2,-12(fp)
100015d0:	d0a6cf15 	stw	r2,-25796(gp)
	key2 = unpackaged[3];
100015d4:	e0bffe17 	ldw	r2,-8(fp)
100015d8:	d0a6d115 	stw	r2,-25788(gp)
	key3 = unpackaged[4];
100015dc:	e0bfff17 	ldw	r2,-4(fp)
100015e0:	d0a6d015 	stw	r2,-25792(gp)
	cursorStreak = unpackaged[0];
100015e4:	e0bffb17 	ldw	r2,-20(fp)
100015e8:	d0a6ce15 	stw	r2,-25800(gp)
	cursorClicked = unpackaged[1];
100015ec:	e0bffc17 	ldw	r2,-16(fp)
100015f0:	d0a6cd15 	stw	r2,-25804(gp)
	xCursor = *to_sw_port3;
100015f4:	00806004 	movi	r2,384
100015f8:	10800017 	ldw	r2,0(r2)
100015fc:	d0a6cc15 	stw	r2,-25808(gp)
	yCursor = *to_sw_port4;
10001600:	00805c04 	movi	r2,368
10001604:	10800017 	ldw	r2,0(r2)
10001608:	d0a6cb15 	stw	r2,-25812(gp)
	return;
1000160c:	0001883a 	nop
}
10001610:	e037883a 	mov	sp,fp
10001614:	dfc00117 	ldw	ra,4(sp)
10001618:	df000017 	ldw	fp,0(sp)
1000161c:	dec00204 	addi	sp,sp,8
10001620:	f800283a 	ret

10001624 <convertDecimalToBinary>:

// converts decimal to binary
unsigned long convertDecimalToBinary(unsigned long n)
{
10001624:	defffc04 	addi	sp,sp,-16
10001628:	dfc00315 	stw	ra,12(sp)
1000162c:	df000215 	stw	fp,8(sp)
10001630:	dc000115 	stw	r16,4(sp)
10001634:	df000204 	addi	fp,sp,8
10001638:	e13ffe15 	stw	r4,-8(fp)
	if (n == 0)
1000163c:	e0bffe17 	ldw	r2,-8(fp)
10001640:	1000021e 	bne	r2,zero,1000164c <convertDecimalToBinary+0x28>
    {
        return 0;
10001644:	0005883a 	mov	r2,zero
10001648:	00000a06 	br	10001674 <convertDecimalToBinary+0x50>
    }
    else
    {
        return (n % 2 + 10 * convertDecimalToBinary(n / 2));
1000164c:	e0bffe17 	ldw	r2,-8(fp)
10001650:	1400004c 	andi	r16,r2,1
10001654:	e0bffe17 	ldw	r2,-8(fp)
10001658:	1004d07a 	srli	r2,r2,1
1000165c:	1009883a 	mov	r4,r2
10001660:	00016240 	call	10001624 <convertDecimalToBinary>
10001664:	1009883a 	mov	r4,r2
10001668:	01400284 	movi	r5,10
1000166c:	00024fc0 	call	100024fc <__mulsi3>
10001670:	8085883a 	add	r2,r16,r2
    }
}
10001674:	e6ffff04 	addi	sp,fp,-4
10001678:	dfc00217 	ldw	ra,8(sp)
1000167c:	df000117 	ldw	fp,4(sp)
10001680:	dc000017 	ldw	r16,0(sp)
10001684:	dec00304 	addi	sp,sp,12
10001688:	f800283a 	ret

1000168c <convertBinaryToDecimal>:

// converts binary to decimal! (NOW FASTER AND BETTER THAN EVER!!)
unsigned long convertBinaryToDecimal(unsigned long long n)
{
1000168c:	defffa04 	addi	sp,sp,-24
10001690:	dfc00515 	stw	ra,20(sp)
10001694:	df000415 	stw	fp,16(sp)
10001698:	df000404 	addi	fp,sp,16
1000169c:	e13ffe15 	stw	r4,-8(fp)
100016a0:	e17fff15 	stw	r5,-4(fp)
 //	printf("binary input: %llu   ", n);
    unsigned decimal = 0;
100016a4:	e03ffc15 	stw	zero,-16(fp)
    int i;
    for(i = 0; n > 0; ++i)
100016a8:	e03ffd15 	stw	zero,-12(fp)
100016ac:	00002706 	br	1000174c <convertBinaryToDecimal+0xc0>
    {
        if((n % 10) == 1)
100016b0:	e0bffe17 	ldw	r2,-8(fp)
100016b4:	e0ffff17 	ldw	r3,-4(fp)
100016b8:	01c00284 	movi	r7,10
100016bc:	0011883a 	mov	r8,zero
100016c0:	1009883a 	mov	r4,r2
100016c4:	180b883a 	mov	r5,r3
100016c8:	380d883a 	mov	r6,r7
100016cc:	400f883a 	mov	r7,r8
100016d0:	0001db40 	call	10001db4 <__umoddi3>
100016d4:	1009883a 	mov	r4,r2
100016d8:	180b883a 	mov	r5,r3
100016dc:	2005883a 	mov	r2,r4
100016e0:	2807883a 	mov	r3,r5
100016e4:	11000058 	cmpnei	r4,r2,1
100016e8:	2000081e 	bne	r4,zero,1000170c <convertBinaryToDecimal+0x80>
100016ec:	1800071e 	bne	r3,zero,1000170c <convertBinaryToDecimal+0x80>
            decimal += (1 << i);
100016f0:	00c00044 	movi	r3,1
100016f4:	e0bffd17 	ldw	r2,-12(fp)
100016f8:	1884983a 	sll	r2,r3,r2
100016fc:	1007883a 	mov	r3,r2
10001700:	e0bffc17 	ldw	r2,-16(fp)
10001704:	10c5883a 	add	r2,r2,r3
10001708:	e0bffc15 	stw	r2,-16(fp)

        n /= 10;
1000170c:	e0bffe17 	ldw	r2,-8(fp)
10001710:	e0ffff17 	ldw	r3,-4(fp)
10001714:	01c00284 	movi	r7,10
10001718:	0011883a 	mov	r8,zero
1000171c:	1009883a 	mov	r4,r2
10001720:	180b883a 	mov	r5,r3
10001724:	380d883a 	mov	r6,r7
10001728:	400f883a 	mov	r7,r8
1000172c:	00017740 	call	10001774 <__udivdi3>
10001730:	1009883a 	mov	r4,r2
10001734:	180b883a 	mov	r5,r3
10001738:	e13ffe15 	stw	r4,-8(fp)
1000173c:	e17fff15 	stw	r5,-4(fp)
unsigned long convertBinaryToDecimal(unsigned long long n)
{
 //	printf("binary input: %llu   ", n);
    unsigned decimal = 0;
    int i;
    for(i = 0; n > 0; ++i)
10001740:	e0bffd17 	ldw	r2,-12(fp)
10001744:	10800044 	addi	r2,r2,1
10001748:	e0bffd15 	stw	r2,-12(fp)
1000174c:	e0bffe17 	ldw	r2,-8(fp)
10001750:	e0ffff17 	ldw	r3,-4(fp)
10001754:	10c4b03a 	or	r2,r2,r3
10001758:	103fd51e 	bne	r2,zero,100016b0 <__alt_data_end+0xf80016b0>
        if((n % 10) == 1)
            decimal += (1 << i);

        n /= 10;
    }
    return decimal;
1000175c:	e0bffc17 	ldw	r2,-16(fp)
}
10001760:	e037883a 	mov	sp,fp
10001764:	dfc00117 	ldw	ra,4(sp)
10001768:	df000017 	ldw	fp,0(sp)
1000176c:	dec00204 	addi	sp,sp,8
10001770:	f800283a 	ret

10001774 <__udivdi3>:
10001774:	defff504 	addi	sp,sp,-44
10001778:	dcc00415 	stw	r19,16(sp)
1000177c:	dc000115 	stw	r16,4(sp)
10001780:	dfc00a15 	stw	ra,40(sp)
10001784:	df000915 	stw	fp,36(sp)
10001788:	ddc00815 	stw	r23,32(sp)
1000178c:	dd800715 	stw	r22,28(sp)
10001790:	dd400615 	stw	r21,24(sp)
10001794:	dd000515 	stw	r20,20(sp)
10001798:	dc800315 	stw	r18,12(sp)
1000179c:	dc400215 	stw	r17,8(sp)
100017a0:	2027883a 	mov	r19,r4
100017a4:	2821883a 	mov	r16,r5
100017a8:	3800471e 	bne	r7,zero,100018c8 <__udivdi3+0x154>
100017ac:	3025883a 	mov	r18,r6
100017b0:	2023883a 	mov	r17,r4
100017b4:	2980592e 	bgeu	r5,r6,1000191c <__udivdi3+0x1a8>
100017b8:	00bfffd4 	movui	r2,65535
100017bc:	2829883a 	mov	r20,r5
100017c0:	1180b236 	bltu	r2,r6,10001a8c <__udivdi3+0x318>
100017c4:	00803fc4 	movi	r2,255
100017c8:	1181622e 	bgeu	r2,r6,10001d54 <__udivdi3+0x5e0>
100017cc:	00800204 	movi	r2,8
100017d0:	1007883a 	mov	r3,r2
100017d4:	3084d83a 	srl	r2,r6,r2
100017d8:	01040074 	movhi	r4,4097
100017dc:	21024104 	addi	r4,r4,2308
100017e0:	2085883a 	add	r2,r4,r2
100017e4:	11000003 	ldbu	r4,0(r2)
100017e8:	20c9883a 	add	r4,r4,r3
100017ec:	00c00804 	movi	r3,32
100017f0:	1907c83a 	sub	r3,r3,r4
100017f4:	18000526 	beq	r3,zero,1000180c <__udivdi3+0x98>
100017f8:	80e0983a 	sll	r16,r16,r3
100017fc:	9908d83a 	srl	r4,r19,r4
10001800:	30e4983a 	sll	r18,r6,r3
10001804:	98e2983a 	sll	r17,r19,r3
10001808:	8128b03a 	or	r20,r16,r4
1000180c:	902ad43a 	srli	r21,r18,16
10001810:	a009883a 	mov	r4,r20
10001814:	95bfffcc 	andi	r22,r18,65535
10001818:	a80b883a 	mov	r5,r21
1000181c:	00024f40 	call	100024f4 <__umodsi3>
10001820:	a009883a 	mov	r4,r20
10001824:	a80b883a 	mov	r5,r21
10001828:	102f883a 	mov	r23,r2
1000182c:	00024ec0 	call	100024ec <__udivsi3>
10001830:	1009883a 	mov	r4,r2
10001834:	b00b883a 	mov	r5,r22
10001838:	1021883a 	mov	r16,r2
1000183c:	00024fc0 	call	100024fc <__mulsi3>
10001840:	b82e943a 	slli	r23,r23,16
10001844:	8808d43a 	srli	r4,r17,16
10001848:	b906b03a 	or	r3,r23,r4
1000184c:	1880052e 	bgeu	r3,r2,10001864 <__udivdi3+0xf0>
10001850:	1c87883a 	add	r3,r3,r18
10001854:	813fffc4 	addi	r4,r16,-1
10001858:	1c800136 	bltu	r3,r18,10001860 <__udivdi3+0xec>
1000185c:	18815236 	bltu	r3,r2,10001da8 <__udivdi3+0x634>
10001860:	2021883a 	mov	r16,r4
10001864:	18a7c83a 	sub	r19,r3,r2
10001868:	9809883a 	mov	r4,r19
1000186c:	a80b883a 	mov	r5,r21
10001870:	00024f40 	call	100024f4 <__umodsi3>
10001874:	1029883a 	mov	r20,r2
10001878:	9809883a 	mov	r4,r19
1000187c:	a80b883a 	mov	r5,r21
10001880:	a028943a 	slli	r20,r20,16
10001884:	00024ec0 	call	100024ec <__udivsi3>
10001888:	1009883a 	mov	r4,r2
1000188c:	b00b883a 	mov	r5,r22
10001890:	8c7fffcc 	andi	r17,r17,65535
10001894:	1027883a 	mov	r19,r2
10001898:	a462b03a 	or	r17,r20,r17
1000189c:	00024fc0 	call	100024fc <__mulsi3>
100018a0:	8880052e 	bgeu	r17,r2,100018b8 <__udivdi3+0x144>
100018a4:	8ca3883a 	add	r17,r17,r18
100018a8:	98ffffc4 	addi	r3,r19,-1
100018ac:	8c811036 	bltu	r17,r18,10001cf0 <__udivdi3+0x57c>
100018b0:	88810f2e 	bgeu	r17,r2,10001cf0 <__udivdi3+0x57c>
100018b4:	9cffff84 	addi	r19,r19,-2
100018b8:	8020943a 	slli	r16,r16,16
100018bc:	0007883a 	mov	r3,zero
100018c0:	9c04b03a 	or	r2,r19,r16
100018c4:	00006006 	br	10001a48 <__udivdi3+0x2d4>
100018c8:	29c05d36 	bltu	r5,r7,10001a40 <__udivdi3+0x2cc>
100018cc:	00bfffd4 	movui	r2,65535
100018d0:	11c0692e 	bgeu	r2,r7,10001a78 <__udivdi3+0x304>
100018d4:	00804034 	movhi	r2,256
100018d8:	10bfffc4 	addi	r2,r2,-1
100018dc:	11c10e2e 	bgeu	r2,r7,10001d18 <__udivdi3+0x5a4>
100018e0:	01400604 	movi	r5,24
100018e4:	2811883a 	mov	r8,r5
100018e8:	394ad83a 	srl	r5,r7,r5
100018ec:	00840074 	movhi	r2,4097
100018f0:	10824104 	addi	r2,r2,2308
100018f4:	114b883a 	add	r5,r2,r5
100018f8:	29400003 	ldbu	r5,0(r5)
100018fc:	00c00804 	movi	r3,32
10001900:	2a0b883a 	add	r5,r5,r8
10001904:	196fc83a 	sub	r23,r3,r5
10001908:	b8006b1e 	bne	r23,zero,10001ab8 <__udivdi3+0x344>
1000190c:	3c011436 	bltu	r7,r16,10001d60 <__udivdi3+0x5ec>
10001910:	9985403a 	cmpgeu	r2,r19,r6
10001914:	0007883a 	mov	r3,zero
10001918:	00004b06 	br	10001a48 <__udivdi3+0x2d4>
1000191c:	3000041e 	bne	r6,zero,10001930 <__udivdi3+0x1bc>
10001920:	01000044 	movi	r4,1
10001924:	000b883a 	mov	r5,zero
10001928:	00024ec0 	call	100024ec <__udivsi3>
1000192c:	1025883a 	mov	r18,r2
10001930:	00bfffd4 	movui	r2,65535
10001934:	14805b2e 	bgeu	r2,r18,10001aa4 <__udivdi3+0x330>
10001938:	00804034 	movhi	r2,256
1000193c:	10bfffc4 	addi	r2,r2,-1
10001940:	1480fe2e 	bgeu	r2,r18,10001d3c <__udivdi3+0x5c8>
10001944:	00800604 	movi	r2,24
10001948:	1007883a 	mov	r3,r2
1000194c:	9084d83a 	srl	r2,r18,r2
10001950:	01040074 	movhi	r4,4097
10001954:	21024104 	addi	r4,r4,2308
10001958:	2085883a 	add	r2,r4,r2
1000195c:	11800003 	ldbu	r6,0(r2)
10001960:	01c00804 	movi	r7,32
10001964:	30c7883a 	add	r3,r6,r3
10001968:	38cfc83a 	sub	r7,r7,r3
1000196c:	3800a71e 	bne	r7,zero,10001c0c <__udivdi3+0x498>
10001970:	9028d43a 	srli	r20,r18,16
10001974:	84a1c83a 	sub	r16,r16,r18
10001978:	957fffcc 	andi	r21,r18,65535
1000197c:	00c00044 	movi	r3,1
10001980:	8009883a 	mov	r4,r16
10001984:	a00b883a 	mov	r5,r20
10001988:	d8c00015 	stw	r3,0(sp)
1000198c:	00024f40 	call	100024f4 <__umodsi3>
10001990:	8009883a 	mov	r4,r16
10001994:	a00b883a 	mov	r5,r20
10001998:	102d883a 	mov	r22,r2
1000199c:	00024ec0 	call	100024ec <__udivsi3>
100019a0:	1009883a 	mov	r4,r2
100019a4:	a80b883a 	mov	r5,r21
100019a8:	1021883a 	mov	r16,r2
100019ac:	00024fc0 	call	100024fc <__mulsi3>
100019b0:	b02c943a 	slli	r22,r22,16
100019b4:	880ed43a 	srli	r7,r17,16
100019b8:	d8c00017 	ldw	r3,0(sp)
100019bc:	b1ccb03a 	or	r6,r22,r7
100019c0:	3080052e 	bgeu	r6,r2,100019d8 <__udivdi3+0x264>
100019c4:	348d883a 	add	r6,r6,r18
100019c8:	813fffc4 	addi	r4,r16,-1
100019cc:	34800136 	bltu	r6,r18,100019d4 <__udivdi3+0x260>
100019d0:	3080f236 	bltu	r6,r2,10001d9c <__udivdi3+0x628>
100019d4:	2021883a 	mov	r16,r4
100019d8:	30a7c83a 	sub	r19,r6,r2
100019dc:	9809883a 	mov	r4,r19
100019e0:	a00b883a 	mov	r5,r20
100019e4:	d8c00015 	stw	r3,0(sp)
100019e8:	00024f40 	call	100024f4 <__umodsi3>
100019ec:	102d883a 	mov	r22,r2
100019f0:	9809883a 	mov	r4,r19
100019f4:	a00b883a 	mov	r5,r20
100019f8:	b02c943a 	slli	r22,r22,16
100019fc:	00024ec0 	call	100024ec <__udivsi3>
10001a00:	1009883a 	mov	r4,r2
10001a04:	a80b883a 	mov	r5,r21
10001a08:	8c7fffcc 	andi	r17,r17,65535
10001a0c:	1027883a 	mov	r19,r2
10001a10:	b462b03a 	or	r17,r22,r17
10001a14:	00024fc0 	call	100024fc <__mulsi3>
10001a18:	d8c00017 	ldw	r3,0(sp)
10001a1c:	8880052e 	bgeu	r17,r2,10001a34 <__udivdi3+0x2c0>
10001a20:	8ca3883a 	add	r17,r17,r18
10001a24:	993fffc4 	addi	r4,r19,-1
10001a28:	8c80af36 	bltu	r17,r18,10001ce8 <__udivdi3+0x574>
10001a2c:	8880ae2e 	bgeu	r17,r2,10001ce8 <__udivdi3+0x574>
10001a30:	9cffff84 	addi	r19,r19,-2
10001a34:	8020943a 	slli	r16,r16,16
10001a38:	9c04b03a 	or	r2,r19,r16
10001a3c:	00000206 	br	10001a48 <__udivdi3+0x2d4>
10001a40:	0007883a 	mov	r3,zero
10001a44:	0005883a 	mov	r2,zero
10001a48:	dfc00a17 	ldw	ra,40(sp)
10001a4c:	df000917 	ldw	fp,36(sp)
10001a50:	ddc00817 	ldw	r23,32(sp)
10001a54:	dd800717 	ldw	r22,28(sp)
10001a58:	dd400617 	ldw	r21,24(sp)
10001a5c:	dd000517 	ldw	r20,20(sp)
10001a60:	dcc00417 	ldw	r19,16(sp)
10001a64:	dc800317 	ldw	r18,12(sp)
10001a68:	dc400217 	ldw	r17,8(sp)
10001a6c:	dc000117 	ldw	r16,4(sp)
10001a70:	dec00b04 	addi	sp,sp,44
10001a74:	f800283a 	ret
10001a78:	00803fc4 	movi	r2,255
10001a7c:	11c0a92e 	bgeu	r2,r7,10001d24 <__udivdi3+0x5b0>
10001a80:	01400204 	movi	r5,8
10001a84:	2811883a 	mov	r8,r5
10001a88:	003f9706 	br	100018e8 <__alt_data_end+0xf80018e8>
10001a8c:	00804034 	movhi	r2,256
10001a90:	10bfffc4 	addi	r2,r2,-1
10001a94:	1180a62e 	bgeu	r2,r6,10001d30 <__udivdi3+0x5bc>
10001a98:	00800604 	movi	r2,24
10001a9c:	1007883a 	mov	r3,r2
10001aa0:	003f4c06 	br	100017d4 <__alt_data_end+0xf80017d4>
10001aa4:	00803fc4 	movi	r2,255
10001aa8:	1480a72e 	bgeu	r2,r18,10001d48 <__udivdi3+0x5d4>
10001aac:	00800204 	movi	r2,8
10001ab0:	1007883a 	mov	r3,r2
10001ab4:	003fa506 	br	1000194c <__alt_data_end+0xf800194c>
10001ab8:	3178d83a 	srl	fp,r6,r5
10001abc:	3dce983a 	sll	r7,r7,r23
10001ac0:	8168d83a 	srl	r20,r16,r5
10001ac4:	9950d83a 	srl	r8,r19,r5
10001ac8:	3f38b03a 	or	fp,r7,fp
10001acc:	e024d43a 	srli	r18,fp,16
10001ad0:	85e0983a 	sll	r16,r16,r23
10001ad4:	a009883a 	mov	r4,r20
10001ad8:	900b883a 	mov	r5,r18
10001adc:	8220b03a 	or	r16,r16,r8
10001ae0:	35ea983a 	sll	r21,r6,r23
10001ae4:	00024f40 	call	100024f4 <__umodsi3>
10001ae8:	a009883a 	mov	r4,r20
10001aec:	900b883a 	mov	r5,r18
10001af0:	1023883a 	mov	r17,r2
10001af4:	e5bfffcc 	andi	r22,fp,65535
10001af8:	00024ec0 	call	100024ec <__udivsi3>
10001afc:	1009883a 	mov	r4,r2
10001b00:	b00b883a 	mov	r5,r22
10001b04:	1029883a 	mov	r20,r2
10001b08:	00024fc0 	call	100024fc <__mulsi3>
10001b0c:	8806943a 	slli	r3,r17,16
10001b10:	8014d43a 	srli	r10,r16,16
10001b14:	1a92b03a 	or	r9,r3,r10
10001b18:	4880042e 	bgeu	r9,r2,10001b2c <__udivdi3+0x3b8>
10001b1c:	4f13883a 	add	r9,r9,fp
10001b20:	a0ffffc4 	addi	r3,r20,-1
10001b24:	4f00952e 	bgeu	r9,fp,10001d7c <__udivdi3+0x608>
10001b28:	1829883a 	mov	r20,r3
10001b2c:	48a3c83a 	sub	r17,r9,r2
10001b30:	8809883a 	mov	r4,r17
10001b34:	900b883a 	mov	r5,r18
10001b38:	00024f40 	call	100024f4 <__umodsi3>
10001b3c:	8809883a 	mov	r4,r17
10001b40:	900b883a 	mov	r5,r18
10001b44:	d8800015 	stw	r2,0(sp)
10001b48:	00024ec0 	call	100024ec <__udivsi3>
10001b4c:	1009883a 	mov	r4,r2
10001b50:	b00b883a 	mov	r5,r22
10001b54:	1023883a 	mov	r17,r2
10001b58:	00024fc0 	call	100024fc <__mulsi3>
10001b5c:	d8c00017 	ldw	r3,0(sp)
10001b60:	823fffcc 	andi	r8,r16,65535
10001b64:	1806943a 	slli	r3,r3,16
10001b68:	1a20b03a 	or	r16,r3,r8
10001b6c:	8080042e 	bgeu	r16,r2,10001b80 <__udivdi3+0x40c>
10001b70:	8721883a 	add	r16,r16,fp
10001b74:	88ffffc4 	addi	r3,r17,-1
10001b78:	87007c2e 	bgeu	r16,fp,10001d6c <__udivdi3+0x5f8>
10001b7c:	1823883a 	mov	r17,r3
10001b80:	a028943a 	slli	r20,r20,16
10001b84:	acbfffcc 	andi	r18,r21,65535
10001b88:	900b883a 	mov	r5,r18
10001b8c:	8d28b03a 	or	r20,r17,r20
10001b90:	a022d43a 	srli	r17,r20,16
10001b94:	a5bfffcc 	andi	r22,r20,65535
10001b98:	b009883a 	mov	r4,r22
10001b9c:	a82ad43a 	srli	r21,r21,16
10001ba0:	80a1c83a 	sub	r16,r16,r2
10001ba4:	00024fc0 	call	100024fc <__mulsi3>
10001ba8:	8809883a 	mov	r4,r17
10001bac:	900b883a 	mov	r5,r18
10001bb0:	1039883a 	mov	fp,r2
10001bb4:	00024fc0 	call	100024fc <__mulsi3>
10001bb8:	8809883a 	mov	r4,r17
10001bbc:	a80b883a 	mov	r5,r21
10001bc0:	1025883a 	mov	r18,r2
10001bc4:	00024fc0 	call	100024fc <__mulsi3>
10001bc8:	b009883a 	mov	r4,r22
10001bcc:	a80b883a 	mov	r5,r21
10001bd0:	1023883a 	mov	r17,r2
10001bd4:	00024fc0 	call	100024fc <__mulsi3>
10001bd8:	e006d43a 	srli	r3,fp,16
10001bdc:	9085883a 	add	r2,r18,r2
10001be0:	10c7883a 	add	r3,r2,r3
10001be4:	1c80022e 	bgeu	r3,r18,10001bf0 <__udivdi3+0x47c>
10001be8:	00800074 	movhi	r2,1
10001bec:	88a3883a 	add	r17,r17,r2
10001bf0:	1808d43a 	srli	r4,r3,16
10001bf4:	8909883a 	add	r4,r17,r4
10001bf8:	81004436 	bltu	r16,r4,10001d0c <__udivdi3+0x598>
10001bfc:	81003e26 	beq	r16,r4,10001cf8 <__udivdi3+0x584>
10001c00:	a005883a 	mov	r2,r20
10001c04:	0007883a 	mov	r3,zero
10001c08:	003f8f06 	br	10001a48 <__alt_data_end+0xf8001a48>
10001c0c:	91e4983a 	sll	r18,r18,r7
10001c10:	80eed83a 	srl	r23,r16,r3
10001c14:	81cc983a 	sll	r6,r16,r7
10001c18:	9028d43a 	srli	r20,r18,16
10001c1c:	98c6d83a 	srl	r3,r19,r3
10001c20:	b809883a 	mov	r4,r23
10001c24:	a00b883a 	mov	r5,r20
10001c28:	30ecb03a 	or	r22,r6,r3
10001c2c:	99e2983a 	sll	r17,r19,r7
10001c30:	00024f40 	call	100024f4 <__umodsi3>
10001c34:	b809883a 	mov	r4,r23
10001c38:	a00b883a 	mov	r5,r20
10001c3c:	1021883a 	mov	r16,r2
10001c40:	957fffcc 	andi	r21,r18,65535
10001c44:	00024ec0 	call	100024ec <__udivsi3>
10001c48:	a80b883a 	mov	r5,r21
10001c4c:	1009883a 	mov	r4,r2
10001c50:	102f883a 	mov	r23,r2
10001c54:	00024fc0 	call	100024fc <__mulsi3>
10001c58:	8020943a 	slli	r16,r16,16
10001c5c:	b00ad43a 	srli	r5,r22,16
10001c60:	814cb03a 	or	r6,r16,r5
10001c64:	3080062e 	bgeu	r6,r2,10001c80 <__udivdi3+0x50c>
10001c68:	348d883a 	add	r6,r6,r18
10001c6c:	b8ffffc4 	addi	r3,r23,-1
10001c70:	34804836 	bltu	r6,r18,10001d94 <__udivdi3+0x620>
10001c74:	3080472e 	bgeu	r6,r2,10001d94 <__udivdi3+0x620>
10001c78:	bdffff84 	addi	r23,r23,-2
10001c7c:	348d883a 	add	r6,r6,r18
10001c80:	30a7c83a 	sub	r19,r6,r2
10001c84:	9809883a 	mov	r4,r19
10001c88:	a00b883a 	mov	r5,r20
10001c8c:	00024f40 	call	100024f4 <__umodsi3>
10001c90:	9809883a 	mov	r4,r19
10001c94:	a00b883a 	mov	r5,r20
10001c98:	1039883a 	mov	fp,r2
10001c9c:	00024ec0 	call	100024ec <__udivsi3>
10001ca0:	1009883a 	mov	r4,r2
10001ca4:	a80b883a 	mov	r5,r21
10001ca8:	e038943a 	slli	fp,fp,16
10001cac:	1027883a 	mov	r19,r2
10001cb0:	00024fc0 	call	100024fc <__mulsi3>
10001cb4:	b1bfffcc 	andi	r6,r22,65535
10001cb8:	e18cb03a 	or	r6,fp,r6
10001cbc:	3080062e 	bgeu	r6,r2,10001cd8 <__udivdi3+0x564>
10001cc0:	348d883a 	add	r6,r6,r18
10001cc4:	98ffffc4 	addi	r3,r19,-1
10001cc8:	34803036 	bltu	r6,r18,10001d8c <__udivdi3+0x618>
10001ccc:	30802f2e 	bgeu	r6,r2,10001d8c <__udivdi3+0x618>
10001cd0:	9cffff84 	addi	r19,r19,-2
10001cd4:	348d883a 	add	r6,r6,r18
10001cd8:	b82e943a 	slli	r23,r23,16
10001cdc:	30a1c83a 	sub	r16,r6,r2
10001ce0:	9dc6b03a 	or	r3,r19,r23
10001ce4:	003f2606 	br	10001980 <__alt_data_end+0xf8001980>
10001ce8:	2027883a 	mov	r19,r4
10001cec:	003f5106 	br	10001a34 <__alt_data_end+0xf8001a34>
10001cf0:	1827883a 	mov	r19,r3
10001cf4:	003ef006 	br	100018b8 <__alt_data_end+0xf80018b8>
10001cf8:	1808943a 	slli	r4,r3,16
10001cfc:	9dc6983a 	sll	r3,r19,r23
10001d00:	e73fffcc 	andi	fp,fp,65535
10001d04:	2709883a 	add	r4,r4,fp
10001d08:	193fbd2e 	bgeu	r3,r4,10001c00 <__alt_data_end+0xf8001c00>
10001d0c:	a0bfffc4 	addi	r2,r20,-1
10001d10:	0007883a 	mov	r3,zero
10001d14:	003f4c06 	br	10001a48 <__alt_data_end+0xf8001a48>
10001d18:	01400404 	movi	r5,16
10001d1c:	2811883a 	mov	r8,r5
10001d20:	003ef106 	br	100018e8 <__alt_data_end+0xf80018e8>
10001d24:	000b883a 	mov	r5,zero
10001d28:	0011883a 	mov	r8,zero
10001d2c:	003eee06 	br	100018e8 <__alt_data_end+0xf80018e8>
10001d30:	00800404 	movi	r2,16
10001d34:	1007883a 	mov	r3,r2
10001d38:	003ea606 	br	100017d4 <__alt_data_end+0xf80017d4>
10001d3c:	00800404 	movi	r2,16
10001d40:	1007883a 	mov	r3,r2
10001d44:	003f0106 	br	1000194c <__alt_data_end+0xf800194c>
10001d48:	0005883a 	mov	r2,zero
10001d4c:	0007883a 	mov	r3,zero
10001d50:	003efe06 	br	1000194c <__alt_data_end+0xf800194c>
10001d54:	0005883a 	mov	r2,zero
10001d58:	0007883a 	mov	r3,zero
10001d5c:	003e9d06 	br	100017d4 <__alt_data_end+0xf80017d4>
10001d60:	0007883a 	mov	r3,zero
10001d64:	00800044 	movi	r2,1
10001d68:	003f3706 	br	10001a48 <__alt_data_end+0xf8001a48>
10001d6c:	80bf832e 	bgeu	r16,r2,10001b7c <__alt_data_end+0xf8001b7c>
10001d70:	8c7fff84 	addi	r17,r17,-2
10001d74:	8721883a 	add	r16,r16,fp
10001d78:	003f8106 	br	10001b80 <__alt_data_end+0xf8001b80>
10001d7c:	48bf6a2e 	bgeu	r9,r2,10001b28 <__alt_data_end+0xf8001b28>
10001d80:	a53fff84 	addi	r20,r20,-2
10001d84:	4f13883a 	add	r9,r9,fp
10001d88:	003f6806 	br	10001b2c <__alt_data_end+0xf8001b2c>
10001d8c:	1827883a 	mov	r19,r3
10001d90:	003fd106 	br	10001cd8 <__alt_data_end+0xf8001cd8>
10001d94:	182f883a 	mov	r23,r3
10001d98:	003fb906 	br	10001c80 <__alt_data_end+0xf8001c80>
10001d9c:	843fff84 	addi	r16,r16,-2
10001da0:	348d883a 	add	r6,r6,r18
10001da4:	003f0c06 	br	100019d8 <__alt_data_end+0xf80019d8>
10001da8:	843fff84 	addi	r16,r16,-2
10001dac:	1c87883a 	add	r3,r3,r18
10001db0:	003eac06 	br	10001864 <__alt_data_end+0xf8001864>

10001db4 <__umoddi3>:
10001db4:	defff404 	addi	sp,sp,-48
10001db8:	dd800815 	stw	r22,32(sp)
10001dbc:	dc400315 	stw	r17,12(sp)
10001dc0:	dc000215 	stw	r16,8(sp)
10001dc4:	dfc00b15 	stw	ra,44(sp)
10001dc8:	df000a15 	stw	fp,40(sp)
10001dcc:	ddc00915 	stw	r23,36(sp)
10001dd0:	dd400715 	stw	r21,28(sp)
10001dd4:	dd000615 	stw	r20,24(sp)
10001dd8:	dcc00515 	stw	r19,20(sp)
10001ddc:	dc800415 	stw	r18,16(sp)
10001de0:	2021883a 	mov	r16,r4
10001de4:	2823883a 	mov	r17,r5
10001de8:	282d883a 	mov	r22,r5
10001dec:	38003c1e 	bne	r7,zero,10001ee0 <__umoddi3+0x12c>
10001df0:	3027883a 	mov	r19,r6
10001df4:	2029883a 	mov	r20,r4
10001df8:	2980522e 	bgeu	r5,r6,10001f44 <__umoddi3+0x190>
10001dfc:	00bfffd4 	movui	r2,65535
10001e00:	1180a436 	bltu	r2,r6,10002094 <__umoddi3+0x2e0>
10001e04:	00803fc4 	movi	r2,255
10001e08:	11815e2e 	bgeu	r2,r6,10002384 <__umoddi3+0x5d0>
10001e0c:	01400204 	movi	r5,8
10001e10:	2805883a 	mov	r2,r5
10001e14:	314ad83a 	srl	r5,r6,r5
10001e18:	00c40074 	movhi	r3,4097
10001e1c:	18c24104 	addi	r3,r3,2308
10001e20:	194b883a 	add	r5,r3,r5
10001e24:	29000003 	ldbu	r4,0(r5)
10001e28:	2089883a 	add	r4,r4,r2
10001e2c:	00800804 	movi	r2,32
10001e30:	1105c83a 	sub	r2,r2,r4
10001e34:	10010c26 	beq	r2,zero,10002268 <__umoddi3+0x4b4>
10001e38:	88a2983a 	sll	r17,r17,r2
10001e3c:	8108d83a 	srl	r4,r16,r4
10001e40:	30a6983a 	sll	r19,r6,r2
10001e44:	80a8983a 	sll	r20,r16,r2
10001e48:	1025883a 	mov	r18,r2
10001e4c:	892cb03a 	or	r22,r17,r4
10001e50:	9822d43a 	srli	r17,r19,16
10001e54:	b009883a 	mov	r4,r22
10001e58:	9d7fffcc 	andi	r21,r19,65535
10001e5c:	880b883a 	mov	r5,r17
10001e60:	00024f40 	call	100024f4 <__umodsi3>
10001e64:	b009883a 	mov	r4,r22
10001e68:	880b883a 	mov	r5,r17
10001e6c:	102f883a 	mov	r23,r2
10001e70:	00024ec0 	call	100024ec <__udivsi3>
10001e74:	1009883a 	mov	r4,r2
10001e78:	a80b883a 	mov	r5,r21
10001e7c:	00024fc0 	call	100024fc <__mulsi3>
10001e80:	b82e943a 	slli	r23,r23,16
10001e84:	a008d43a 	srli	r4,r20,16
10001e88:	b906b03a 	or	r3,r23,r4
10001e8c:	1880042e 	bgeu	r3,r2,10001ea0 <__umoddi3+0xec>
10001e90:	1cc7883a 	add	r3,r3,r19
10001e94:	1cc00236 	bltu	r3,r19,10001ea0 <__umoddi3+0xec>
10001e98:	1880012e 	bgeu	r3,r2,10001ea0 <__umoddi3+0xec>
10001e9c:	1cc7883a 	add	r3,r3,r19
10001ea0:	18a1c83a 	sub	r16,r3,r2
10001ea4:	8009883a 	mov	r4,r16
10001ea8:	880b883a 	mov	r5,r17
10001eac:	00024f40 	call	100024f4 <__umodsi3>
10001eb0:	8009883a 	mov	r4,r16
10001eb4:	880b883a 	mov	r5,r17
10001eb8:	102d883a 	mov	r22,r2
10001ebc:	00024ec0 	call	100024ec <__udivsi3>
10001ec0:	1009883a 	mov	r4,r2
10001ec4:	a80b883a 	mov	r5,r21
10001ec8:	b02c943a 	slli	r22,r22,16
10001ecc:	00024fc0 	call	100024fc <__mulsi3>
10001ed0:	a13fffcc 	andi	r4,r20,65535
10001ed4:	b106b03a 	or	r3,r22,r4
10001ed8:	1880572e 	bgeu	r3,r2,10002038 <__umoddi3+0x284>
10001edc:	00005206 	br	10002028 <__umoddi3+0x274>
10001ee0:	29c05936 	bltu	r5,r7,10002048 <__umoddi3+0x294>
10001ee4:	00bfffd4 	movui	r2,65535
10001ee8:	11c0652e 	bgeu	r2,r7,10002080 <__umoddi3+0x2cc>
10001eec:	00804034 	movhi	r2,256
10001ef0:	10bfffc4 	addi	r2,r2,-1
10001ef4:	11c1172e 	bgeu	r2,r7,10002354 <__umoddi3+0x5a0>
10001ef8:	01400604 	movi	r5,24
10001efc:	282b883a 	mov	r21,r5
10001f00:	394ad83a 	srl	r5,r7,r5
10001f04:	00c40074 	movhi	r3,4097
10001f08:	18c24104 	addi	r3,r3,2308
10001f0c:	194b883a 	add	r5,r3,r5
10001f10:	28800003 	ldbu	r2,0(r5)
10001f14:	00c00804 	movi	r3,32
10001f18:	156b883a 	add	r21,r2,r21
10001f1c:	1d69c83a 	sub	r20,r3,r21
10001f20:	a000671e 	bne	r20,zero,100020c0 <__umoddi3+0x30c>
10001f24:	3c400136 	bltu	r7,r17,10001f2c <__umoddi3+0x178>
10001f28:	81812336 	bltu	r16,r6,100023b8 <__umoddi3+0x604>
10001f2c:	8185c83a 	sub	r2,r16,r6
10001f30:	89e3c83a 	sub	r17,r17,r7
10001f34:	8087803a 	cmpltu	r3,r16,r2
10001f38:	88edc83a 	sub	r22,r17,r3
10001f3c:	b007883a 	mov	r3,r22
10001f40:	00004306 	br	10002050 <__umoddi3+0x29c>
10001f44:	3000041e 	bne	r6,zero,10001f58 <__umoddi3+0x1a4>
10001f48:	01000044 	movi	r4,1
10001f4c:	000b883a 	mov	r5,zero
10001f50:	00024ec0 	call	100024ec <__udivsi3>
10001f54:	1027883a 	mov	r19,r2
10001f58:	00bfffd4 	movui	r2,65535
10001f5c:	14c0532e 	bgeu	r2,r19,100020ac <__umoddi3+0x2f8>
10001f60:	00804034 	movhi	r2,256
10001f64:	10bfffc4 	addi	r2,r2,-1
10001f68:	14c1032e 	bgeu	r2,r19,10002378 <__umoddi3+0x5c4>
10001f6c:	00800604 	movi	r2,24
10001f70:	1007883a 	mov	r3,r2
10001f74:	9884d83a 	srl	r2,r19,r2
10001f78:	01040074 	movhi	r4,4097
10001f7c:	21024104 	addi	r4,r4,2308
10001f80:	2085883a 	add	r2,r4,r2
10001f84:	11000003 	ldbu	r4,0(r2)
10001f88:	00800804 	movi	r2,32
10001f8c:	20c7883a 	add	r3,r4,r3
10001f90:	10c5c83a 	sub	r2,r2,r3
10001f94:	1000b61e 	bne	r2,zero,10002270 <__umoddi3+0x4bc>
10001f98:	982ad43a 	srli	r21,r19,16
10001f9c:	8ce3c83a 	sub	r17,r17,r19
10001fa0:	9dbfffcc 	andi	r22,r19,65535
10001fa4:	0025883a 	mov	r18,zero
10001fa8:	8809883a 	mov	r4,r17
10001fac:	a80b883a 	mov	r5,r21
10001fb0:	00024f40 	call	100024f4 <__umodsi3>
10001fb4:	8809883a 	mov	r4,r17
10001fb8:	a80b883a 	mov	r5,r21
10001fbc:	102f883a 	mov	r23,r2
10001fc0:	00024ec0 	call	100024ec <__udivsi3>
10001fc4:	1009883a 	mov	r4,r2
10001fc8:	b00b883a 	mov	r5,r22
10001fcc:	00024fc0 	call	100024fc <__mulsi3>
10001fd0:	b82e943a 	slli	r23,r23,16
10001fd4:	a008d43a 	srli	r4,r20,16
10001fd8:	b906b03a 	or	r3,r23,r4
10001fdc:	1880032e 	bgeu	r3,r2,10001fec <__umoddi3+0x238>
10001fe0:	1cc7883a 	add	r3,r3,r19
10001fe4:	1cc00136 	bltu	r3,r19,10001fec <__umoddi3+0x238>
10001fe8:	1880f136 	bltu	r3,r2,100023b0 <__umoddi3+0x5fc>
10001fec:	18a1c83a 	sub	r16,r3,r2
10001ff0:	8009883a 	mov	r4,r16
10001ff4:	a80b883a 	mov	r5,r21
10001ff8:	00024f40 	call	100024f4 <__umodsi3>
10001ffc:	8009883a 	mov	r4,r16
10002000:	a80b883a 	mov	r5,r21
10002004:	1023883a 	mov	r17,r2
10002008:	00024ec0 	call	100024ec <__udivsi3>
1000200c:	1009883a 	mov	r4,r2
10002010:	b00b883a 	mov	r5,r22
10002014:	8822943a 	slli	r17,r17,16
10002018:	00024fc0 	call	100024fc <__mulsi3>
1000201c:	a13fffcc 	andi	r4,r20,65535
10002020:	8906b03a 	or	r3,r17,r4
10002024:	1880042e 	bgeu	r3,r2,10002038 <__umoddi3+0x284>
10002028:	1cc7883a 	add	r3,r3,r19
1000202c:	1cc00236 	bltu	r3,r19,10002038 <__umoddi3+0x284>
10002030:	1880012e 	bgeu	r3,r2,10002038 <__umoddi3+0x284>
10002034:	1cc7883a 	add	r3,r3,r19
10002038:	1887c83a 	sub	r3,r3,r2
1000203c:	1c84d83a 	srl	r2,r3,r18
10002040:	0007883a 	mov	r3,zero
10002044:	00000206 	br	10002050 <__umoddi3+0x29c>
10002048:	2005883a 	mov	r2,r4
1000204c:	2807883a 	mov	r3,r5
10002050:	dfc00b17 	ldw	ra,44(sp)
10002054:	df000a17 	ldw	fp,40(sp)
10002058:	ddc00917 	ldw	r23,36(sp)
1000205c:	dd800817 	ldw	r22,32(sp)
10002060:	dd400717 	ldw	r21,28(sp)
10002064:	dd000617 	ldw	r20,24(sp)
10002068:	dcc00517 	ldw	r19,20(sp)
1000206c:	dc800417 	ldw	r18,16(sp)
10002070:	dc400317 	ldw	r17,12(sp)
10002074:	dc000217 	ldw	r16,8(sp)
10002078:	dec00c04 	addi	sp,sp,48
1000207c:	f800283a 	ret
10002080:	00803fc4 	movi	r2,255
10002084:	11c0b02e 	bgeu	r2,r7,10002348 <__umoddi3+0x594>
10002088:	01400204 	movi	r5,8
1000208c:	282b883a 	mov	r21,r5
10002090:	003f9b06 	br	10001f00 <__alt_data_end+0xf8001f00>
10002094:	00804034 	movhi	r2,256
10002098:	10bfffc4 	addi	r2,r2,-1
1000209c:	1180b02e 	bgeu	r2,r6,10002360 <__umoddi3+0x5ac>
100020a0:	01400604 	movi	r5,24
100020a4:	2805883a 	mov	r2,r5
100020a8:	003f5a06 	br	10001e14 <__alt_data_end+0xf8001e14>
100020ac:	00803fc4 	movi	r2,255
100020b0:	14c0ae2e 	bgeu	r2,r19,1000236c <__umoddi3+0x5b8>
100020b4:	00800204 	movi	r2,8
100020b8:	1007883a 	mov	r3,r2
100020bc:	003fad06 	br	10001f74 <__alt_data_end+0xf8001f74>
100020c0:	3d0a983a 	sll	r5,r7,r20
100020c4:	356cd83a 	srl	r22,r6,r21
100020c8:	8d78d83a 	srl	fp,r17,r21
100020cc:	8d10983a 	sll	r8,r17,r20
100020d0:	2dacb03a 	or	r22,r5,r22
100020d4:	b02ed43a 	srli	r23,r22,16
100020d8:	8564d83a 	srl	r18,r16,r21
100020dc:	e009883a 	mov	r4,fp
100020e0:	b80b883a 	mov	r5,r23
100020e4:	44a4b03a 	or	r18,r8,r18
100020e8:	3526983a 	sll	r19,r6,r20
100020ec:	00024f40 	call	100024f4 <__umodsi3>
100020f0:	e009883a 	mov	r4,fp
100020f4:	b80b883a 	mov	r5,r23
100020f8:	b47fffcc 	andi	r17,r22,65535
100020fc:	d8800015 	stw	r2,0(sp)
10002100:	00024ec0 	call	100024ec <__udivsi3>
10002104:	1009883a 	mov	r4,r2
10002108:	880b883a 	mov	r5,r17
1000210c:	1039883a 	mov	fp,r2
10002110:	00024fc0 	call	100024fc <__mulsi3>
10002114:	d9800017 	ldw	r6,0(sp)
10002118:	9008d43a 	srli	r4,r18,16
1000211c:	8520983a 	sll	r16,r16,r20
10002120:	300c943a 	slli	r6,r6,16
10002124:	3106b03a 	or	r3,r6,r4
10002128:	1880042e 	bgeu	r3,r2,1000213c <__umoddi3+0x388>
1000212c:	1d87883a 	add	r3,r3,r22
10002130:	e13fffc4 	addi	r4,fp,-1
10002134:	1d809a2e 	bgeu	r3,r22,100023a0 <__umoddi3+0x5ec>
10002138:	2039883a 	mov	fp,r4
1000213c:	1887c83a 	sub	r3,r3,r2
10002140:	1809883a 	mov	r4,r3
10002144:	b80b883a 	mov	r5,r23
10002148:	d8c00115 	stw	r3,4(sp)
1000214c:	00024f40 	call	100024f4 <__umodsi3>
10002150:	d8c00117 	ldw	r3,4(sp)
10002154:	b80b883a 	mov	r5,r23
10002158:	d8800015 	stw	r2,0(sp)
1000215c:	1809883a 	mov	r4,r3
10002160:	00024ec0 	call	100024ec <__udivsi3>
10002164:	880b883a 	mov	r5,r17
10002168:	1009883a 	mov	r4,r2
1000216c:	102f883a 	mov	r23,r2
10002170:	00024fc0 	call	100024fc <__mulsi3>
10002174:	d9800017 	ldw	r6,0(sp)
10002178:	947fffcc 	andi	r17,r18,65535
1000217c:	300c943a 	slli	r6,r6,16
10002180:	3464b03a 	or	r18,r6,r17
10002184:	9080042e 	bgeu	r18,r2,10002198 <__umoddi3+0x3e4>
10002188:	95a5883a 	add	r18,r18,r22
1000218c:	b8ffffc4 	addi	r3,r23,-1
10002190:	95807f2e 	bgeu	r18,r22,10002390 <__umoddi3+0x5dc>
10002194:	182f883a 	mov	r23,r3
10002198:	e038943a 	slli	fp,fp,16
1000219c:	980cd43a 	srli	r6,r19,16
100021a0:	98ffffcc 	andi	r3,r19,65535
100021a4:	bf38b03a 	or	fp,r23,fp
100021a8:	e02ed43a 	srli	r23,fp,16
100021ac:	e73fffcc 	andi	fp,fp,65535
100021b0:	180b883a 	mov	r5,r3
100021b4:	e009883a 	mov	r4,fp
100021b8:	d9800015 	stw	r6,0(sp)
100021bc:	d8c00115 	stw	r3,4(sp)
100021c0:	90a5c83a 	sub	r18,r18,r2
100021c4:	00024fc0 	call	100024fc <__mulsi3>
100021c8:	d8c00117 	ldw	r3,4(sp)
100021cc:	b809883a 	mov	r4,r23
100021d0:	1023883a 	mov	r17,r2
100021d4:	180b883a 	mov	r5,r3
100021d8:	00024fc0 	call	100024fc <__mulsi3>
100021dc:	d9800017 	ldw	r6,0(sp)
100021e0:	b809883a 	mov	r4,r23
100021e4:	d8800115 	stw	r2,4(sp)
100021e8:	300b883a 	mov	r5,r6
100021ec:	302f883a 	mov	r23,r6
100021f0:	00024fc0 	call	100024fc <__mulsi3>
100021f4:	e009883a 	mov	r4,fp
100021f8:	b80b883a 	mov	r5,r23
100021fc:	d8800015 	stw	r2,0(sp)
10002200:	00024fc0 	call	100024fc <__mulsi3>
10002204:	d8c00117 	ldw	r3,4(sp)
10002208:	880cd43a 	srli	r6,r17,16
1000220c:	d9c00017 	ldw	r7,0(sp)
10002210:	1885883a 	add	r2,r3,r2
10002214:	118d883a 	add	r6,r2,r6
10002218:	30c0022e 	bgeu	r6,r3,10002224 <__umoddi3+0x470>
1000221c:	00800074 	movhi	r2,1
10002220:	388f883a 	add	r7,r7,r2
10002224:	3006d43a 	srli	r3,r6,16
10002228:	300c943a 	slli	r6,r6,16
1000222c:	8c7fffcc 	andi	r17,r17,65535
10002230:	38c7883a 	add	r3,r7,r3
10002234:	3463883a 	add	r17,r6,r17
10002238:	90c03d36 	bltu	r18,r3,10002330 <__umoddi3+0x57c>
1000223c:	90c06026 	beq	r18,r3,100023c0 <__umoddi3+0x60c>
10002240:	90c9c83a 	sub	r4,r18,r3
10002244:	880f883a 	mov	r7,r17
10002248:	81cfc83a 	sub	r7,r16,r7
1000224c:	81c7803a 	cmpltu	r3,r16,r7
10002250:	20c7c83a 	sub	r3,r4,r3
10002254:	1d44983a 	sll	r2,r3,r21
10002258:	3d0ed83a 	srl	r7,r7,r20
1000225c:	1d06d83a 	srl	r3,r3,r20
10002260:	11c4b03a 	or	r2,r2,r7
10002264:	003f7a06 	br	10002050 <__alt_data_end+0xf8002050>
10002268:	0025883a 	mov	r18,zero
1000226c:	003ef806 	br	10001e50 <__alt_data_end+0xf8001e50>
10002270:	98a6983a 	sll	r19,r19,r2
10002274:	88e8d83a 	srl	r20,r17,r3
10002278:	80c6d83a 	srl	r3,r16,r3
1000227c:	982ad43a 	srli	r21,r19,16
10002280:	88a2983a 	sll	r17,r17,r2
10002284:	a009883a 	mov	r4,r20
10002288:	a80b883a 	mov	r5,r21
1000228c:	88eeb03a 	or	r23,r17,r3
10002290:	1025883a 	mov	r18,r2
10002294:	00024f40 	call	100024f4 <__umodsi3>
10002298:	a009883a 	mov	r4,r20
1000229c:	a80b883a 	mov	r5,r21
100022a0:	1023883a 	mov	r17,r2
100022a4:	9dbfffcc 	andi	r22,r19,65535
100022a8:	00024ec0 	call	100024ec <__udivsi3>
100022ac:	1009883a 	mov	r4,r2
100022b0:	b00b883a 	mov	r5,r22
100022b4:	00024fc0 	call	100024fc <__mulsi3>
100022b8:	8822943a 	slli	r17,r17,16
100022bc:	b808d43a 	srli	r4,r23,16
100022c0:	84a8983a 	sll	r20,r16,r18
100022c4:	8906b03a 	or	r3,r17,r4
100022c8:	1880042e 	bgeu	r3,r2,100022dc <__umoddi3+0x528>
100022cc:	1cc7883a 	add	r3,r3,r19
100022d0:	1cc00236 	bltu	r3,r19,100022dc <__umoddi3+0x528>
100022d4:	1880012e 	bgeu	r3,r2,100022dc <__umoddi3+0x528>
100022d8:	1cc7883a 	add	r3,r3,r19
100022dc:	18a1c83a 	sub	r16,r3,r2
100022e0:	8009883a 	mov	r4,r16
100022e4:	a80b883a 	mov	r5,r21
100022e8:	00024f40 	call	100024f4 <__umodsi3>
100022ec:	8009883a 	mov	r4,r16
100022f0:	a80b883a 	mov	r5,r21
100022f4:	1039883a 	mov	fp,r2
100022f8:	00024ec0 	call	100024ec <__udivsi3>
100022fc:	1009883a 	mov	r4,r2
10002300:	b00b883a 	mov	r5,r22
10002304:	00024fc0 	call	100024fc <__mulsi3>
10002308:	e006943a 	slli	r3,fp,16
1000230c:	b93fffcc 	andi	r4,r23,65535
10002310:	1906b03a 	or	r3,r3,r4
10002314:	1880042e 	bgeu	r3,r2,10002328 <__umoddi3+0x574>
10002318:	1cc7883a 	add	r3,r3,r19
1000231c:	1cc00236 	bltu	r3,r19,10002328 <__umoddi3+0x574>
10002320:	1880012e 	bgeu	r3,r2,10002328 <__umoddi3+0x574>
10002324:	1cc7883a 	add	r3,r3,r19
10002328:	18a3c83a 	sub	r17,r3,r2
1000232c:	003f1e06 	br	10001fa8 <__alt_data_end+0xf8001fa8>
10002330:	8ccfc83a 	sub	r7,r17,r19
10002334:	1d89c83a 	sub	r4,r3,r22
10002338:	89e3803a 	cmpltu	r17,r17,r7
1000233c:	2463c83a 	sub	r17,r4,r17
10002340:	9449c83a 	sub	r4,r18,r17
10002344:	003fc006 	br	10002248 <__alt_data_end+0xf8002248>
10002348:	000b883a 	mov	r5,zero
1000234c:	002b883a 	mov	r21,zero
10002350:	003eeb06 	br	10001f00 <__alt_data_end+0xf8001f00>
10002354:	01400404 	movi	r5,16
10002358:	282b883a 	mov	r21,r5
1000235c:	003ee806 	br	10001f00 <__alt_data_end+0xf8001f00>
10002360:	01400404 	movi	r5,16
10002364:	2805883a 	mov	r2,r5
10002368:	003eaa06 	br	10001e14 <__alt_data_end+0xf8001e14>
1000236c:	0005883a 	mov	r2,zero
10002370:	0007883a 	mov	r3,zero
10002374:	003eff06 	br	10001f74 <__alt_data_end+0xf8001f74>
10002378:	00800404 	movi	r2,16
1000237c:	1007883a 	mov	r3,r2
10002380:	003efc06 	br	10001f74 <__alt_data_end+0xf8001f74>
10002384:	000b883a 	mov	r5,zero
10002388:	0005883a 	mov	r2,zero
1000238c:	003ea106 	br	10001e14 <__alt_data_end+0xf8001e14>
10002390:	90bf802e 	bgeu	r18,r2,10002194 <__alt_data_end+0xf8002194>
10002394:	bdffff84 	addi	r23,r23,-2
10002398:	95a5883a 	add	r18,r18,r22
1000239c:	003f7e06 	br	10002198 <__alt_data_end+0xf8002198>
100023a0:	18bf652e 	bgeu	r3,r2,10002138 <__alt_data_end+0xf8002138>
100023a4:	e73fff84 	addi	fp,fp,-2
100023a8:	1d87883a 	add	r3,r3,r22
100023ac:	003f6306 	br	1000213c <__alt_data_end+0xf800213c>
100023b0:	1cc7883a 	add	r3,r3,r19
100023b4:	003f0d06 	br	10001fec <__alt_data_end+0xf8001fec>
100023b8:	8005883a 	mov	r2,r16
100023bc:	003edf06 	br	10001f3c <__alt_data_end+0xf8001f3c>
100023c0:	847fdb36 	bltu	r16,r17,10002330 <__alt_data_end+0xf8002330>
100023c4:	880f883a 	mov	r7,r17
100023c8:	0009883a 	mov	r4,zero
100023cc:	003f9e06 	br	10002248 <__alt_data_end+0xf8002248>

100023d0 <udivmodsi4>:
100023d0:	2900182e 	bgeu	r5,r4,10002434 <udivmodsi4+0x64>
100023d4:	28001716 	blt	r5,zero,10002434 <udivmodsi4+0x64>
100023d8:	00800804 	movi	r2,32
100023dc:	00c00044 	movi	r3,1
100023e0:	00000206 	br	100023ec <udivmodsi4+0x1c>
100023e4:	10001126 	beq	r2,zero,1000242c <udivmodsi4+0x5c>
100023e8:	28000516 	blt	r5,zero,10002400 <udivmodsi4+0x30>
100023ec:	294b883a 	add	r5,r5,r5
100023f0:	10bfffc4 	addi	r2,r2,-1
100023f4:	18c7883a 	add	r3,r3,r3
100023f8:	293ffa36 	bltu	r5,r4,100023e4 <__alt_data_end+0xf80023e4>
100023fc:	18000b26 	beq	r3,zero,1000242c <udivmodsi4+0x5c>
10002400:	0005883a 	mov	r2,zero
10002404:	21400236 	bltu	r4,r5,10002410 <udivmodsi4+0x40>
10002408:	2149c83a 	sub	r4,r4,r5
1000240c:	10c4b03a 	or	r2,r2,r3
10002410:	1806d07a 	srli	r3,r3,1
10002414:	280ad07a 	srli	r5,r5,1
10002418:	183ffa1e 	bne	r3,zero,10002404 <__alt_data_end+0xf8002404>
1000241c:	3000011e 	bne	r6,zero,10002424 <udivmodsi4+0x54>
10002420:	f800283a 	ret
10002424:	2005883a 	mov	r2,r4
10002428:	f800283a 	ret
1000242c:	0005883a 	mov	r2,zero
10002430:	003ffa06 	br	1000241c <__alt_data_end+0xf800241c>
10002434:	00c00044 	movi	r3,1
10002438:	003ff106 	br	10002400 <__alt_data_end+0xf8002400>

1000243c <__divsi3>:
1000243c:	defffe04 	addi	sp,sp,-8
10002440:	dfc00115 	stw	ra,4(sp)
10002444:	dc000015 	stw	r16,0(sp)
10002448:	20000b16 	blt	r4,zero,10002478 <__divsi3+0x3c>
1000244c:	0021883a 	mov	r16,zero
10002450:	28000c16 	blt	r5,zero,10002484 <__divsi3+0x48>
10002454:	000d883a 	mov	r6,zero
10002458:	00023d00 	call	100023d0 <udivmodsi4>
1000245c:	0407c83a 	sub	r3,zero,r16
10002460:	1884f03a 	xor	r2,r3,r2
10002464:	1405883a 	add	r2,r2,r16
10002468:	dfc00117 	ldw	ra,4(sp)
1000246c:	dc000017 	ldw	r16,0(sp)
10002470:	dec00204 	addi	sp,sp,8
10002474:	f800283a 	ret
10002478:	0109c83a 	sub	r4,zero,r4
1000247c:	04000044 	movi	r16,1
10002480:	283ff40e 	bge	r5,zero,10002454 <__alt_data_end+0xf8002454>
10002484:	014bc83a 	sub	r5,zero,r5
10002488:	8400005c 	xori	r16,r16,1
1000248c:	003ff106 	br	10002454 <__alt_data_end+0xf8002454>

10002490 <__modsi3>:
10002490:	defffd04 	addi	sp,sp,-12
10002494:	dfc00215 	stw	ra,8(sp)
10002498:	dc400115 	stw	r17,4(sp)
1000249c:	dc000015 	stw	r16,0(sp)
100024a0:	20000c16 	blt	r4,zero,100024d4 <__modsi3+0x44>
100024a4:	0023883a 	mov	r17,zero
100024a8:	0021883a 	mov	r16,zero
100024ac:	28000d16 	blt	r5,zero,100024e4 <__modsi3+0x54>
100024b0:	01800044 	movi	r6,1
100024b4:	00023d00 	call	100023d0 <udivmodsi4>
100024b8:	1404f03a 	xor	r2,r2,r16
100024bc:	8885883a 	add	r2,r17,r2
100024c0:	dfc00217 	ldw	ra,8(sp)
100024c4:	dc400117 	ldw	r17,4(sp)
100024c8:	dc000017 	ldw	r16,0(sp)
100024cc:	dec00304 	addi	sp,sp,12
100024d0:	f800283a 	ret
100024d4:	0109c83a 	sub	r4,zero,r4
100024d8:	04400044 	movi	r17,1
100024dc:	043fffc4 	movi	r16,-1
100024e0:	283ff30e 	bge	r5,zero,100024b0 <__alt_data_end+0xf80024b0>
100024e4:	014bc83a 	sub	r5,zero,r5
100024e8:	003ff106 	br	100024b0 <__alt_data_end+0xf80024b0>

100024ec <__udivsi3>:
100024ec:	000d883a 	mov	r6,zero
100024f0:	00023d01 	jmpi	100023d0 <udivmodsi4>

100024f4 <__umodsi3>:
100024f4:	01800044 	movi	r6,1
100024f8:	00023d01 	jmpi	100023d0 <udivmodsi4>

100024fc <__mulsi3>:
100024fc:	0005883a 	mov	r2,zero
10002500:	20000726 	beq	r4,zero,10002520 <__mulsi3+0x24>
10002504:	20c0004c 	andi	r3,r4,1
10002508:	2008d07a 	srli	r4,r4,1
1000250c:	18000126 	beq	r3,zero,10002514 <__mulsi3+0x18>
10002510:	1145883a 	add	r2,r2,r5
10002514:	294b883a 	add	r5,r5,r5
10002518:	203ffa1e 	bne	r4,zero,10002504 <__alt_data_end+0xf8002504>
1000251c:	f800283a 	ret
10002520:	f800283a 	ret

10002524 <__adddf3>:
10002524:	02000434 	movhi	r8,16
10002528:	423fffc4 	addi	r8,r8,-1
1000252c:	defffb04 	addi	sp,sp,-20
10002530:	2a12703a 	and	r9,r5,r8
10002534:	2806d7fa 	srli	r3,r5,31
10002538:	3a10703a 	and	r8,r7,r8
1000253c:	3804d53a 	srli	r2,r7,20
10002540:	3014d77a 	srli	r10,r6,29
10002544:	dc000015 	stw	r16,0(sp)
10002548:	481290fa 	slli	r9,r9,3
1000254c:	2820d53a 	srli	r16,r5,20
10002550:	401090fa 	slli	r8,r8,3
10002554:	200ad77a 	srli	r5,r4,29
10002558:	380ed7fa 	srli	r7,r7,31
1000255c:	dc800215 	stw	r18,8(sp)
10002560:	dc400115 	stw	r17,4(sp)
10002564:	dfc00415 	stw	ra,16(sp)
10002568:	dcc00315 	stw	r19,12(sp)
1000256c:	1c803fcc 	andi	r18,r3,255
10002570:	8401ffcc 	andi	r16,r16,2047
10002574:	494ab03a 	or	r5,r9,r5
10002578:	202290fa 	slli	r17,r4,3
1000257c:	1081ffcc 	andi	r2,r2,2047
10002580:	4290b03a 	or	r8,r8,r10
10002584:	300c90fa 	slli	r6,r6,3
10002588:	91c07026 	beq	r18,r7,1000274c <__adddf3+0x228>
1000258c:	8087c83a 	sub	r3,r16,r2
10002590:	00c0b30e 	bge	zero,r3,10002860 <__adddf3+0x33c>
10002594:	10002a1e 	bne	r2,zero,10002640 <__adddf3+0x11c>
10002598:	4184b03a 	or	r2,r8,r6
1000259c:	1000991e 	bne	r2,zero,10002804 <__adddf3+0x2e0>
100025a0:	888001cc 	andi	r2,r17,7
100025a4:	10005b26 	beq	r2,zero,10002714 <__adddf3+0x1f0>
100025a8:	88c003cc 	andi	r3,r17,15
100025ac:	00800104 	movi	r2,4
100025b0:	18805826 	beq	r3,r2,10002714 <__adddf3+0x1f0>
100025b4:	89800104 	addi	r6,r17,4
100025b8:	3463803a 	cmpltu	r17,r6,r17
100025bc:	2c4b883a 	add	r5,r5,r17
100025c0:	2880202c 	andhi	r2,r5,128
100025c4:	9007883a 	mov	r3,r18
100025c8:	3023883a 	mov	r17,r6
100025cc:	10005426 	beq	r2,zero,10002720 <__adddf3+0x1fc>
100025d0:	84000044 	addi	r16,r16,1
100025d4:	0081ffc4 	movi	r2,2047
100025d8:	8080c126 	beq	r16,r2,100028e0 <__adddf3+0x3bc>
100025dc:	013fe034 	movhi	r4,65408
100025e0:	213fffc4 	addi	r4,r4,-1
100025e4:	290a703a 	and	r5,r5,r4
100025e8:	2804977a 	slli	r2,r5,29
100025ec:	280a927a 	slli	r5,r5,9
100025f0:	8822d0fa 	srli	r17,r17,3
100025f4:	8401ffcc 	andi	r16,r16,2047
100025f8:	2808d33a 	srli	r4,r5,12
100025fc:	1444b03a 	or	r2,r2,r17
10002600:	8401ffcc 	andi	r16,r16,2047
10002604:	800a953a 	slli	r5,r16,20
10002608:	18c03fcc 	andi	r3,r3,255
1000260c:	04000434 	movhi	r16,16
10002610:	180697fa 	slli	r3,r3,31
10002614:	843fffc4 	addi	r16,r16,-1
10002618:	2420703a 	and	r16,r4,r16
1000261c:	8160b03a 	or	r16,r16,r5
10002620:	80c6b03a 	or	r3,r16,r3
10002624:	dfc00417 	ldw	ra,16(sp)
10002628:	dcc00317 	ldw	r19,12(sp)
1000262c:	dc800217 	ldw	r18,8(sp)
10002630:	dc400117 	ldw	r17,4(sp)
10002634:	dc000017 	ldw	r16,0(sp)
10002638:	dec00504 	addi	sp,sp,20
1000263c:	f800283a 	ret
10002640:	0081ffc4 	movi	r2,2047
10002644:	80bfd626 	beq	r16,r2,100025a0 <__alt_data_end+0xf80025a0>
10002648:	42002034 	orhi	r8,r8,128
1000264c:	00800e04 	movi	r2,56
10002650:	10c0a616 	blt	r2,r3,100028ec <__adddf3+0x3c8>
10002654:	008007c4 	movi	r2,31
10002658:	10c0c916 	blt	r2,r3,10002980 <__adddf3+0x45c>
1000265c:	00800804 	movi	r2,32
10002660:	10c5c83a 	sub	r2,r2,r3
10002664:	408e983a 	sll	r7,r8,r2
10002668:	30c8d83a 	srl	r4,r6,r3
1000266c:	3084983a 	sll	r2,r6,r2
10002670:	40c6d83a 	srl	r3,r8,r3
10002674:	390cb03a 	or	r6,r7,r4
10002678:	1004c03a 	cmpne	r2,r2,zero
1000267c:	308cb03a 	or	r6,r6,r2
10002680:	898dc83a 	sub	r6,r17,r6
10002684:	89a3803a 	cmpltu	r17,r17,r6
10002688:	28cbc83a 	sub	r5,r5,r3
1000268c:	2c4bc83a 	sub	r5,r5,r17
10002690:	3023883a 	mov	r17,r6
10002694:	2880202c 	andhi	r2,r5,128
10002698:	10006d26 	beq	r2,zero,10002850 <__adddf3+0x32c>
1000269c:	04c02034 	movhi	r19,128
100026a0:	9cffffc4 	addi	r19,r19,-1
100026a4:	2ce6703a 	and	r19,r5,r19
100026a8:	98007e26 	beq	r19,zero,100028a4 <__adddf3+0x380>
100026ac:	9809883a 	mov	r4,r19
100026b0:	00037e80 	call	100037e8 <__clzsi2>
100026b4:	10fffe04 	addi	r3,r2,-8
100026b8:	010007c4 	movi	r4,31
100026bc:	20c07f16 	blt	r4,r3,100028bc <__adddf3+0x398>
100026c0:	01400a04 	movi	r5,40
100026c4:	2885c83a 	sub	r2,r5,r2
100026c8:	888ad83a 	srl	r5,r17,r2
100026cc:	98e6983a 	sll	r19,r19,r3
100026d0:	88e2983a 	sll	r17,r17,r3
100026d4:	2ce6b03a 	or	r19,r5,r19
100026d8:	1c007c16 	blt	r3,r16,100028cc <__adddf3+0x3a8>
100026dc:	1c21c83a 	sub	r16,r3,r16
100026e0:	81400044 	addi	r5,r16,1
100026e4:	00c007c4 	movi	r3,31
100026e8:	19409816 	blt	r3,r5,1000294c <__adddf3+0x428>
100026ec:	1c21c83a 	sub	r16,r3,r16
100026f0:	8c08983a 	sll	r4,r17,r16
100026f4:	8946d83a 	srl	r3,r17,r5
100026f8:	9c20983a 	sll	r16,r19,r16
100026fc:	2008c03a 	cmpne	r4,r4,zero
10002700:	994ad83a 	srl	r5,r19,r5
10002704:	1c06b03a 	or	r3,r3,r16
10002708:	1922b03a 	or	r17,r3,r4
1000270c:	0021883a 	mov	r16,zero
10002710:	003fa306 	br	100025a0 <__alt_data_end+0xf80025a0>
10002714:	2880202c 	andhi	r2,r5,128
10002718:	9007883a 	mov	r3,r18
1000271c:	103fac1e 	bne	r2,zero,100025d0 <__alt_data_end+0xf80025d0>
10002720:	2804977a 	slli	r2,r5,29
10002724:	8822d0fa 	srli	r17,r17,3
10002728:	0101ffc4 	movi	r4,2047
1000272c:	280ad0fa 	srli	r5,r5,3
10002730:	1444b03a 	or	r2,r2,r17
10002734:	81002c26 	beq	r16,r4,100027e8 <__adddf3+0x2c4>
10002738:	8120703a 	and	r16,r16,r4
1000273c:	01000434 	movhi	r4,16
10002740:	213fffc4 	addi	r4,r4,-1
10002744:	2908703a 	and	r4,r5,r4
10002748:	003fad06 	br	10002600 <__alt_data_end+0xf8002600>
1000274c:	8089c83a 	sub	r4,r16,r2
10002750:	01006a0e 	bge	zero,r4,100028fc <__adddf3+0x3d8>
10002754:	10003326 	beq	r2,zero,10002824 <__adddf3+0x300>
10002758:	0081ffc4 	movi	r2,2047
1000275c:	80bf9026 	beq	r16,r2,100025a0 <__alt_data_end+0xf80025a0>
10002760:	42002034 	orhi	r8,r8,128
10002764:	00800e04 	movi	r2,56
10002768:	1100b116 	blt	r2,r4,10002a30 <__adddf3+0x50c>
1000276c:	008007c4 	movi	r2,31
10002770:	1100e216 	blt	r2,r4,10002afc <__adddf3+0x5d8>
10002774:	00800804 	movi	r2,32
10002778:	1105c83a 	sub	r2,r2,r4
1000277c:	4092983a 	sll	r9,r8,r2
10002780:	310ed83a 	srl	r7,r6,r4
10002784:	3084983a 	sll	r2,r6,r2
10002788:	4110d83a 	srl	r8,r8,r4
1000278c:	49ccb03a 	or	r6,r9,r7
10002790:	1004c03a 	cmpne	r2,r2,zero
10002794:	308cb03a 	or	r6,r6,r2
10002798:	344d883a 	add	r6,r6,r17
1000279c:	3463803a 	cmpltu	r17,r6,r17
100027a0:	414b883a 	add	r5,r8,r5
100027a4:	2c4b883a 	add	r5,r5,r17
100027a8:	3023883a 	mov	r17,r6
100027ac:	2880202c 	andhi	r2,r5,128
100027b0:	10002726 	beq	r2,zero,10002850 <__adddf3+0x32c>
100027b4:	84000044 	addi	r16,r16,1
100027b8:	0081ffc4 	movi	r2,2047
100027bc:	8080ae26 	beq	r16,r2,10002a78 <__adddf3+0x554>
100027c0:	00bfe034 	movhi	r2,65408
100027c4:	10bfffc4 	addi	r2,r2,-1
100027c8:	288a703a 	and	r5,r5,r2
100027cc:	880cd07a 	srli	r6,r17,1
100027d0:	280897fa 	slli	r4,r5,31
100027d4:	88c0004c 	andi	r3,r17,1
100027d8:	30e2b03a 	or	r17,r6,r3
100027dc:	280ad07a 	srli	r5,r5,1
100027e0:	8922b03a 	or	r17,r17,r4
100027e4:	003f6e06 	br	100025a0 <__alt_data_end+0xf80025a0>
100027e8:	1148b03a 	or	r4,r2,r5
100027ec:	20003c26 	beq	r4,zero,100028e0 <__adddf3+0x3bc>
100027f0:	29000234 	orhi	r4,r5,8
100027f4:	01400434 	movhi	r5,16
100027f8:	297fffc4 	addi	r5,r5,-1
100027fc:	2148703a 	and	r4,r4,r5
10002800:	003f7f06 	br	10002600 <__alt_data_end+0xf8002600>
10002804:	18ffffc4 	addi	r3,r3,-1
10002808:	18004d1e 	bne	r3,zero,10002940 <__adddf3+0x41c>
1000280c:	898dc83a 	sub	r6,r17,r6
10002810:	89a3803a 	cmpltu	r17,r17,r6
10002814:	2a0bc83a 	sub	r5,r5,r8
10002818:	2c4bc83a 	sub	r5,r5,r17
1000281c:	3023883a 	mov	r17,r6
10002820:	003f9c06 	br	10002694 <__alt_data_end+0xf8002694>
10002824:	4184b03a 	or	r2,r8,r6
10002828:	103f5d26 	beq	r2,zero,100025a0 <__alt_data_end+0xf80025a0>
1000282c:	213fffc4 	addi	r4,r4,-1
10002830:	203fd926 	beq	r4,zero,10002798 <__alt_data_end+0xf8002798>
10002834:	0081ffc4 	movi	r2,2047
10002838:	80bfca1e 	bne	r16,r2,10002764 <__alt_data_end+0xf8002764>
1000283c:	003f5806 	br	100025a0 <__alt_data_end+0xf80025a0>
10002840:	10c8b03a 	or	r4,r2,r3
10002844:	20008b26 	beq	r4,zero,10002a74 <__adddf3+0x550>
10002848:	100b883a 	mov	r5,r2
1000284c:	1823883a 	mov	r17,r3
10002850:	888001cc 	andi	r2,r17,7
10002854:	103f541e 	bne	r2,zero,100025a8 <__alt_data_end+0xf80025a8>
10002858:	9007883a 	mov	r3,r18
1000285c:	003fb006 	br	10002720 <__alt_data_end+0xf8002720>
10002860:	1800531e 	bne	r3,zero,100029b0 <__adddf3+0x48c>
10002864:	80800044 	addi	r2,r16,1
10002868:	1081ffcc 	andi	r2,r2,2047
1000286c:	00c00044 	movi	r3,1
10002870:	1880990e 	bge	r3,r2,10002ad8 <__adddf3+0x5b4>
10002874:	8985c83a 	sub	r2,r17,r6
10002878:	8887803a 	cmpltu	r3,r17,r2
1000287c:	2a27c83a 	sub	r19,r5,r8
10002880:	98e7c83a 	sub	r19,r19,r3
10002884:	98c0202c 	andhi	r3,r19,128
10002888:	18006226 	beq	r3,zero,10002a14 <__adddf3+0x4f0>
1000288c:	3463c83a 	sub	r17,r6,r17
10002890:	4151c83a 	sub	r8,r8,r5
10002894:	344d803a 	cmpltu	r6,r6,r17
10002898:	41a7c83a 	sub	r19,r8,r6
1000289c:	3825883a 	mov	r18,r7
100028a0:	983f821e 	bne	r19,zero,100026ac <__alt_data_end+0xf80026ac>
100028a4:	8809883a 	mov	r4,r17
100028a8:	00037e80 	call	100037e8 <__clzsi2>
100028ac:	10800804 	addi	r2,r2,32
100028b0:	10fffe04 	addi	r3,r2,-8
100028b4:	010007c4 	movi	r4,31
100028b8:	20ff810e 	bge	r4,r3,100026c0 <__alt_data_end+0xf80026c0>
100028bc:	14fff604 	addi	r19,r2,-40
100028c0:	8ce6983a 	sll	r19,r17,r19
100028c4:	0023883a 	mov	r17,zero
100028c8:	1c3f840e 	bge	r3,r16,100026dc <__alt_data_end+0xf80026dc>
100028cc:	017fe034 	movhi	r5,65408
100028d0:	297fffc4 	addi	r5,r5,-1
100028d4:	80e1c83a 	sub	r16,r16,r3
100028d8:	994a703a 	and	r5,r19,r5
100028dc:	003f3006 	br	100025a0 <__alt_data_end+0xf80025a0>
100028e0:	0009883a 	mov	r4,zero
100028e4:	0005883a 	mov	r2,zero
100028e8:	003f4506 	br	10002600 <__alt_data_end+0xf8002600>
100028ec:	418cb03a 	or	r6,r8,r6
100028f0:	300cc03a 	cmpne	r6,r6,zero
100028f4:	0007883a 	mov	r3,zero
100028f8:	003f6106 	br	10002680 <__alt_data_end+0xf8002680>
100028fc:	2000921e 	bne	r4,zero,10002b48 <__adddf3+0x624>
10002900:	80800044 	addi	r2,r16,1
10002904:	11c1ffcc 	andi	r7,r2,2047
10002908:	01000044 	movi	r4,1
1000290c:	21c0610e 	bge	r4,r7,10002a94 <__adddf3+0x570>
10002910:	0101ffc4 	movi	r4,2047
10002914:	1100a326 	beq	r2,r4,10002ba4 <__adddf3+0x680>
10002918:	344d883a 	add	r6,r6,r17
1000291c:	3463803a 	cmpltu	r17,r6,r17
10002920:	414b883a 	add	r5,r8,r5
10002924:	2c4b883a 	add	r5,r5,r17
10002928:	282297fa 	slli	r17,r5,31
1000292c:	300cd07a 	srli	r6,r6,1
10002930:	280ad07a 	srli	r5,r5,1
10002934:	1021883a 	mov	r16,r2
10002938:	89a2b03a 	or	r17,r17,r6
1000293c:	003f1806 	br	100025a0 <__alt_data_end+0xf80025a0>
10002940:	0081ffc4 	movi	r2,2047
10002944:	80bf411e 	bne	r16,r2,1000264c <__alt_data_end+0xf800264c>
10002948:	003f1506 	br	100025a0 <__alt_data_end+0xf80025a0>
1000294c:	80bff844 	addi	r2,r16,-31
10002950:	00c00804 	movi	r3,32
10002954:	9884d83a 	srl	r2,r19,r2
10002958:	28c04a26 	beq	r5,r3,10002a84 <__adddf3+0x560>
1000295c:	00c00fc4 	movi	r3,63
10002960:	1c21c83a 	sub	r16,r3,r16
10002964:	9c26983a 	sll	r19,r19,r16
10002968:	9c62b03a 	or	r17,r19,r17
1000296c:	8822c03a 	cmpne	r17,r17,zero
10002970:	88a2b03a 	or	r17,r17,r2
10002974:	000b883a 	mov	r5,zero
10002978:	0021883a 	mov	r16,zero
1000297c:	003fb406 	br	10002850 <__alt_data_end+0xf8002850>
10002980:	18bff804 	addi	r2,r3,-32
10002984:	01000804 	movi	r4,32
10002988:	4084d83a 	srl	r2,r8,r2
1000298c:	19003f26 	beq	r3,r4,10002a8c <__adddf3+0x568>
10002990:	01001004 	movi	r4,64
10002994:	20c7c83a 	sub	r3,r4,r3
10002998:	40d0983a 	sll	r8,r8,r3
1000299c:	418cb03a 	or	r6,r8,r6
100029a0:	300cc03a 	cmpne	r6,r6,zero
100029a4:	308cb03a 	or	r6,r6,r2
100029a8:	0007883a 	mov	r3,zero
100029ac:	003f3406 	br	10002680 <__alt_data_end+0xf8002680>
100029b0:	80002326 	beq	r16,zero,10002a40 <__adddf3+0x51c>
100029b4:	0101ffc4 	movi	r4,2047
100029b8:	11005e26 	beq	r2,r4,10002b34 <__adddf3+0x610>
100029bc:	00c7c83a 	sub	r3,zero,r3
100029c0:	29402034 	orhi	r5,r5,128
100029c4:	01000e04 	movi	r4,56
100029c8:	20c07216 	blt	r4,r3,10002b94 <__adddf3+0x670>
100029cc:	010007c4 	movi	r4,31
100029d0:	20c0ce16 	blt	r4,r3,10002d0c <__adddf3+0x7e8>
100029d4:	01000804 	movi	r4,32
100029d8:	20c9c83a 	sub	r4,r4,r3
100029dc:	2914983a 	sll	r10,r5,r4
100029e0:	88d2d83a 	srl	r9,r17,r3
100029e4:	8908983a 	sll	r4,r17,r4
100029e8:	28c6d83a 	srl	r3,r5,r3
100029ec:	5262b03a 	or	r17,r10,r9
100029f0:	2008c03a 	cmpne	r4,r4,zero
100029f4:	8922b03a 	or	r17,r17,r4
100029f8:	3463c83a 	sub	r17,r6,r17
100029fc:	40c7c83a 	sub	r3,r8,r3
10002a00:	344d803a 	cmpltu	r6,r6,r17
10002a04:	198bc83a 	sub	r5,r3,r6
10002a08:	1021883a 	mov	r16,r2
10002a0c:	3825883a 	mov	r18,r7
10002a10:	003f2006 	br	10002694 <__alt_data_end+0xf8002694>
10002a14:	9886b03a 	or	r3,r19,r2
10002a18:	1800141e 	bne	r3,zero,10002a6c <__adddf3+0x548>
10002a1c:	0007883a 	mov	r3,zero
10002a20:	000b883a 	mov	r5,zero
10002a24:	0023883a 	mov	r17,zero
10002a28:	0021883a 	mov	r16,zero
10002a2c:	003f3c06 	br	10002720 <__alt_data_end+0xf8002720>
10002a30:	418cb03a 	or	r6,r8,r6
10002a34:	300cc03a 	cmpne	r6,r6,zero
10002a38:	0011883a 	mov	r8,zero
10002a3c:	003f5606 	br	10002798 <__alt_data_end+0xf8002798>
10002a40:	2c48b03a 	or	r4,r5,r17
10002a44:	20003b26 	beq	r4,zero,10002b34 <__adddf3+0x610>
10002a48:	00c6303a 	nor	r3,zero,r3
10002a4c:	1800371e 	bne	r3,zero,10002b2c <__adddf3+0x608>
10002a50:	3463c83a 	sub	r17,r6,r17
10002a54:	414bc83a 	sub	r5,r8,r5
10002a58:	344d803a 	cmpltu	r6,r6,r17
10002a5c:	298bc83a 	sub	r5,r5,r6
10002a60:	1021883a 	mov	r16,r2
10002a64:	3825883a 	mov	r18,r7
10002a68:	003f0a06 	br	10002694 <__alt_data_end+0xf8002694>
10002a6c:	1023883a 	mov	r17,r2
10002a70:	003f0d06 	br	100026a8 <__alt_data_end+0xf80026a8>
10002a74:	0007883a 	mov	r3,zero
10002a78:	000b883a 	mov	r5,zero
10002a7c:	0023883a 	mov	r17,zero
10002a80:	003f2706 	br	10002720 <__alt_data_end+0xf8002720>
10002a84:	0027883a 	mov	r19,zero
10002a88:	003fb706 	br	10002968 <__alt_data_end+0xf8002968>
10002a8c:	0011883a 	mov	r8,zero
10002a90:	003fc206 	br	1000299c <__alt_data_end+0xf800299c>
10002a94:	2c44b03a 	or	r2,r5,r17
10002a98:	8000871e 	bne	r16,zero,10002cb8 <__adddf3+0x794>
10002a9c:	1000b126 	beq	r2,zero,10002d64 <__adddf3+0x840>
10002aa0:	4184b03a 	or	r2,r8,r6
10002aa4:	103ebe26 	beq	r2,zero,100025a0 <__alt_data_end+0xf80025a0>
10002aa8:	3445883a 	add	r2,r6,r17
10002aac:	1463803a 	cmpltu	r17,r2,r17
10002ab0:	414b883a 	add	r5,r8,r5
10002ab4:	2c4b883a 	add	r5,r5,r17
10002ab8:	28c0202c 	andhi	r3,r5,128
10002abc:	1023883a 	mov	r17,r2
10002ac0:	183f6326 	beq	r3,zero,10002850 <__alt_data_end+0xf8002850>
10002ac4:	00bfe034 	movhi	r2,65408
10002ac8:	10bfffc4 	addi	r2,r2,-1
10002acc:	2021883a 	mov	r16,r4
10002ad0:	288a703a 	and	r5,r5,r2
10002ad4:	003eb206 	br	100025a0 <__alt_data_end+0xf80025a0>
10002ad8:	2c44b03a 	or	r2,r5,r17
10002adc:	8000251e 	bne	r16,zero,10002b74 <__adddf3+0x650>
10002ae0:	10004b1e 	bne	r2,zero,10002c10 <__adddf3+0x6ec>
10002ae4:	4184b03a 	or	r2,r8,r6
10002ae8:	103fe226 	beq	r2,zero,10002a74 <__alt_data_end+0xf8002a74>
10002aec:	400b883a 	mov	r5,r8
10002af0:	3023883a 	mov	r17,r6
10002af4:	3825883a 	mov	r18,r7
10002af8:	003ea906 	br	100025a0 <__alt_data_end+0xf80025a0>
10002afc:	20bff804 	addi	r2,r4,-32
10002b00:	01c00804 	movi	r7,32
10002b04:	4084d83a 	srl	r2,r8,r2
10002b08:	21c07e26 	beq	r4,r7,10002d04 <__adddf3+0x7e0>
10002b0c:	01c01004 	movi	r7,64
10002b10:	3909c83a 	sub	r4,r7,r4
10002b14:	4110983a 	sll	r8,r8,r4
10002b18:	418cb03a 	or	r6,r8,r6
10002b1c:	300cc03a 	cmpne	r6,r6,zero
10002b20:	308cb03a 	or	r6,r6,r2
10002b24:	0011883a 	mov	r8,zero
10002b28:	003f1b06 	br	10002798 <__alt_data_end+0xf8002798>
10002b2c:	0101ffc4 	movi	r4,2047
10002b30:	113fa41e 	bne	r2,r4,100029c4 <__alt_data_end+0xf80029c4>
10002b34:	400b883a 	mov	r5,r8
10002b38:	3023883a 	mov	r17,r6
10002b3c:	1021883a 	mov	r16,r2
10002b40:	3825883a 	mov	r18,r7
10002b44:	003e9606 	br	100025a0 <__alt_data_end+0xf80025a0>
10002b48:	80001a1e 	bne	r16,zero,10002bb4 <__adddf3+0x690>
10002b4c:	2c4eb03a 	or	r7,r5,r17
10002b50:	38005526 	beq	r7,zero,10002ca8 <__adddf3+0x784>
10002b54:	0108303a 	nor	r4,zero,r4
10002b58:	2000511e 	bne	r4,zero,10002ca0 <__adddf3+0x77c>
10002b5c:	89a3883a 	add	r17,r17,r6
10002b60:	414b883a 	add	r5,r8,r5
10002b64:	898d803a 	cmpltu	r6,r17,r6
10002b68:	298b883a 	add	r5,r5,r6
10002b6c:	1021883a 	mov	r16,r2
10002b70:	003f0e06 	br	100027ac <__alt_data_end+0xf80027ac>
10002b74:	1000341e 	bne	r2,zero,10002c48 <__adddf3+0x724>
10002b78:	4184b03a 	or	r2,r8,r6
10002b7c:	10006f26 	beq	r2,zero,10002d3c <__adddf3+0x818>
10002b80:	400b883a 	mov	r5,r8
10002b84:	3023883a 	mov	r17,r6
10002b88:	3825883a 	mov	r18,r7
10002b8c:	0401ffc4 	movi	r16,2047
10002b90:	003e8306 	br	100025a0 <__alt_data_end+0xf80025a0>
10002b94:	2c62b03a 	or	r17,r5,r17
10002b98:	8822c03a 	cmpne	r17,r17,zero
10002b9c:	0007883a 	mov	r3,zero
10002ba0:	003f9506 	br	100029f8 <__alt_data_end+0xf80029f8>
10002ba4:	1021883a 	mov	r16,r2
10002ba8:	000b883a 	mov	r5,zero
10002bac:	0023883a 	mov	r17,zero
10002bb0:	003edb06 	br	10002720 <__alt_data_end+0xf8002720>
10002bb4:	01c1ffc4 	movi	r7,2047
10002bb8:	11c03b26 	beq	r2,r7,10002ca8 <__adddf3+0x784>
10002bbc:	0109c83a 	sub	r4,zero,r4
10002bc0:	29402034 	orhi	r5,r5,128
10002bc4:	01c00e04 	movi	r7,56
10002bc8:	39006216 	blt	r7,r4,10002d54 <__adddf3+0x830>
10002bcc:	01c007c4 	movi	r7,31
10002bd0:	39006b16 	blt	r7,r4,10002d80 <__adddf3+0x85c>
10002bd4:	01c00804 	movi	r7,32
10002bd8:	390fc83a 	sub	r7,r7,r4
10002bdc:	29d4983a 	sll	r10,r5,r7
10002be0:	8912d83a 	srl	r9,r17,r4
10002be4:	89ce983a 	sll	r7,r17,r7
10002be8:	2908d83a 	srl	r4,r5,r4
10002bec:	5262b03a 	or	r17,r10,r9
10002bf0:	380ac03a 	cmpne	r5,r7,zero
10002bf4:	8962b03a 	or	r17,r17,r5
10002bf8:	89a3883a 	add	r17,r17,r6
10002bfc:	2211883a 	add	r8,r4,r8
10002c00:	898d803a 	cmpltu	r6,r17,r6
10002c04:	418b883a 	add	r5,r8,r6
10002c08:	1021883a 	mov	r16,r2
10002c0c:	003ee706 	br	100027ac <__alt_data_end+0xf80027ac>
10002c10:	4184b03a 	or	r2,r8,r6
10002c14:	103e6226 	beq	r2,zero,100025a0 <__alt_data_end+0xf80025a0>
10002c18:	8987c83a 	sub	r3,r17,r6
10002c1c:	88c9803a 	cmpltu	r4,r17,r3
10002c20:	2a05c83a 	sub	r2,r5,r8
10002c24:	1105c83a 	sub	r2,r2,r4
10002c28:	1100202c 	andhi	r4,r2,128
10002c2c:	203f0426 	beq	r4,zero,10002840 <__alt_data_end+0xf8002840>
10002c30:	3463c83a 	sub	r17,r6,r17
10002c34:	414bc83a 	sub	r5,r8,r5
10002c38:	344d803a 	cmpltu	r6,r6,r17
10002c3c:	298bc83a 	sub	r5,r5,r6
10002c40:	3825883a 	mov	r18,r7
10002c44:	003e5606 	br	100025a0 <__alt_data_end+0xf80025a0>
10002c48:	4184b03a 	or	r2,r8,r6
10002c4c:	10002b26 	beq	r2,zero,10002cfc <__adddf3+0x7d8>
10002c50:	2804d0fa 	srli	r2,r5,3
10002c54:	8822d0fa 	srli	r17,r17,3
10002c58:	280a977a 	slli	r5,r5,29
10002c5c:	10c0022c 	andhi	r3,r2,8
10002c60:	2c62b03a 	or	r17,r5,r17
10002c64:	18000826 	beq	r3,zero,10002c88 <__adddf3+0x764>
10002c68:	4008d0fa 	srli	r4,r8,3
10002c6c:	20c0022c 	andhi	r3,r4,8
10002c70:	1800051e 	bne	r3,zero,10002c88 <__adddf3+0x764>
10002c74:	300cd0fa 	srli	r6,r6,3
10002c78:	4010977a 	slli	r8,r8,29
10002c7c:	2005883a 	mov	r2,r4
10002c80:	3825883a 	mov	r18,r7
10002c84:	41a2b03a 	or	r17,r8,r6
10002c88:	880ad77a 	srli	r5,r17,29
10002c8c:	100490fa 	slli	r2,r2,3
10002c90:	882290fa 	slli	r17,r17,3
10002c94:	0401ffc4 	movi	r16,2047
10002c98:	288ab03a 	or	r5,r5,r2
10002c9c:	003e4006 	br	100025a0 <__alt_data_end+0xf80025a0>
10002ca0:	01c1ffc4 	movi	r7,2047
10002ca4:	11ffc71e 	bne	r2,r7,10002bc4 <__alt_data_end+0xf8002bc4>
10002ca8:	400b883a 	mov	r5,r8
10002cac:	3023883a 	mov	r17,r6
10002cb0:	1021883a 	mov	r16,r2
10002cb4:	003e3a06 	br	100025a0 <__alt_data_end+0xf80025a0>
10002cb8:	10002d26 	beq	r2,zero,10002d70 <__adddf3+0x84c>
10002cbc:	4184b03a 	or	r2,r8,r6
10002cc0:	10000e26 	beq	r2,zero,10002cfc <__adddf3+0x7d8>
10002cc4:	2804d0fa 	srli	r2,r5,3
10002cc8:	8822d0fa 	srli	r17,r17,3
10002ccc:	280a977a 	slli	r5,r5,29
10002cd0:	10c0022c 	andhi	r3,r2,8
10002cd4:	2c62b03a 	or	r17,r5,r17
10002cd8:	183feb26 	beq	r3,zero,10002c88 <__alt_data_end+0xf8002c88>
10002cdc:	4008d0fa 	srli	r4,r8,3
10002ce0:	20c0022c 	andhi	r3,r4,8
10002ce4:	183fe81e 	bne	r3,zero,10002c88 <__alt_data_end+0xf8002c88>
10002ce8:	300cd0fa 	srli	r6,r6,3
10002cec:	4010977a 	slli	r8,r8,29
10002cf0:	2005883a 	mov	r2,r4
10002cf4:	41a2b03a 	or	r17,r8,r6
10002cf8:	003fe306 	br	10002c88 <__alt_data_end+0xf8002c88>
10002cfc:	0401ffc4 	movi	r16,2047
10002d00:	003e2706 	br	100025a0 <__alt_data_end+0xf80025a0>
10002d04:	0011883a 	mov	r8,zero
10002d08:	003f8306 	br	10002b18 <__alt_data_end+0xf8002b18>
10002d0c:	193ff804 	addi	r4,r3,-32
10002d10:	02400804 	movi	r9,32
10002d14:	2908d83a 	srl	r4,r5,r4
10002d18:	1a402526 	beq	r3,r9,10002db0 <__adddf3+0x88c>
10002d1c:	02401004 	movi	r9,64
10002d20:	48c7c83a 	sub	r3,r9,r3
10002d24:	28ca983a 	sll	r5,r5,r3
10002d28:	2c62b03a 	or	r17,r5,r17
10002d2c:	8822c03a 	cmpne	r17,r17,zero
10002d30:	8922b03a 	or	r17,r17,r4
10002d34:	0007883a 	mov	r3,zero
10002d38:	003f2f06 	br	100029f8 <__alt_data_end+0xf80029f8>
10002d3c:	01402034 	movhi	r5,128
10002d40:	0007883a 	mov	r3,zero
10002d44:	297fffc4 	addi	r5,r5,-1
10002d48:	047ffe04 	movi	r17,-8
10002d4c:	0401ffc4 	movi	r16,2047
10002d50:	003e7306 	br	10002720 <__alt_data_end+0xf8002720>
10002d54:	2c62b03a 	or	r17,r5,r17
10002d58:	8822c03a 	cmpne	r17,r17,zero
10002d5c:	0009883a 	mov	r4,zero
10002d60:	003fa506 	br	10002bf8 <__alt_data_end+0xf8002bf8>
10002d64:	400b883a 	mov	r5,r8
10002d68:	3023883a 	mov	r17,r6
10002d6c:	003e0c06 	br	100025a0 <__alt_data_end+0xf80025a0>
10002d70:	400b883a 	mov	r5,r8
10002d74:	3023883a 	mov	r17,r6
10002d78:	0401ffc4 	movi	r16,2047
10002d7c:	003e0806 	br	100025a0 <__alt_data_end+0xf80025a0>
10002d80:	21fff804 	addi	r7,r4,-32
10002d84:	02400804 	movi	r9,32
10002d88:	29ced83a 	srl	r7,r5,r7
10002d8c:	22400a26 	beq	r4,r9,10002db8 <__adddf3+0x894>
10002d90:	02401004 	movi	r9,64
10002d94:	4909c83a 	sub	r4,r9,r4
10002d98:	290a983a 	sll	r5,r5,r4
10002d9c:	2c62b03a 	or	r17,r5,r17
10002da0:	8822c03a 	cmpne	r17,r17,zero
10002da4:	89e2b03a 	or	r17,r17,r7
10002da8:	0009883a 	mov	r4,zero
10002dac:	003f9206 	br	10002bf8 <__alt_data_end+0xf8002bf8>
10002db0:	000b883a 	mov	r5,zero
10002db4:	003fdc06 	br	10002d28 <__alt_data_end+0xf8002d28>
10002db8:	000b883a 	mov	r5,zero
10002dbc:	003ff706 	br	10002d9c <__alt_data_end+0xf8002d9c>

10002dc0 <__subdf3>:
10002dc0:	00c00434 	movhi	r3,16
10002dc4:	18ffffc4 	addi	r3,r3,-1
10002dc8:	defffb04 	addi	sp,sp,-20
10002dcc:	28d2703a 	and	r9,r5,r3
10002dd0:	3814d53a 	srli	r10,r7,20
10002dd4:	38c6703a 	and	r3,r7,r3
10002dd8:	3004d77a 	srli	r2,r6,29
10002ddc:	dc800215 	stw	r18,8(sp)
10002de0:	dc000015 	stw	r16,0(sp)
10002de4:	2824d7fa 	srli	r18,r5,31
10002de8:	2820d53a 	srli	r16,r5,20
10002dec:	481290fa 	slli	r9,r9,3
10002df0:	200ad77a 	srli	r5,r4,29
10002df4:	180690fa 	slli	r3,r3,3
10002df8:	dc400115 	stw	r17,4(sp)
10002dfc:	dfc00415 	stw	ra,16(sp)
10002e00:	202290fa 	slli	r17,r4,3
10002e04:	dcc00315 	stw	r19,12(sp)
10002e08:	5281ffcc 	andi	r10,r10,2047
10002e0c:	0101ffc4 	movi	r4,2047
10002e10:	9011883a 	mov	r8,r18
10002e14:	8401ffcc 	andi	r16,r16,2047
10002e18:	94803fcc 	andi	r18,r18,255
10002e1c:	494ab03a 	or	r5,r9,r5
10002e20:	380ed7fa 	srli	r7,r7,31
10002e24:	1886b03a 	or	r3,r3,r2
10002e28:	300c90fa 	slli	r6,r6,3
10002e2c:	51009026 	beq	r10,r4,10003070 <__subdf3+0x2b0>
10002e30:	39c0005c 	xori	r7,r7,1
10002e34:	8285c83a 	sub	r2,r16,r10
10002e38:	91c06f26 	beq	r18,r7,10002ff8 <__subdf3+0x238>
10002e3c:	0080b10e 	bge	zero,r2,10003104 <__subdf3+0x344>
10002e40:	50002a1e 	bne	r10,zero,10002eec <__subdf3+0x12c>
10002e44:	1988b03a 	or	r4,r3,r6
10002e48:	2000941e 	bne	r4,zero,1000309c <__subdf3+0x2dc>
10002e4c:	888001cc 	andi	r2,r17,7
10002e50:	10005b26 	beq	r2,zero,10002fc0 <__subdf3+0x200>
10002e54:	88c003cc 	andi	r3,r17,15
10002e58:	00800104 	movi	r2,4
10002e5c:	18805826 	beq	r3,r2,10002fc0 <__subdf3+0x200>
10002e60:	88c00104 	addi	r3,r17,4
10002e64:	1c63803a 	cmpltu	r17,r3,r17
10002e68:	2c4b883a 	add	r5,r5,r17
10002e6c:	2880202c 	andhi	r2,r5,128
10002e70:	9200004c 	andi	r8,r18,1
10002e74:	1823883a 	mov	r17,r3
10002e78:	10005426 	beq	r2,zero,10002fcc <__subdf3+0x20c>
10002e7c:	84000044 	addi	r16,r16,1
10002e80:	0081ffc4 	movi	r2,2047
10002e84:	8080bf26 	beq	r16,r2,10003184 <__subdf3+0x3c4>
10002e88:	013fe034 	movhi	r4,65408
10002e8c:	213fffc4 	addi	r4,r4,-1
10002e90:	290a703a 	and	r5,r5,r4
10002e94:	2804977a 	slli	r2,r5,29
10002e98:	280a927a 	slli	r5,r5,9
10002e9c:	8822d0fa 	srli	r17,r17,3
10002ea0:	8401ffcc 	andi	r16,r16,2047
10002ea4:	2808d33a 	srli	r4,r5,12
10002ea8:	1444b03a 	or	r2,r2,r17
10002eac:	8401ffcc 	andi	r16,r16,2047
10002eb0:	800a953a 	slli	r5,r16,20
10002eb4:	40c03fcc 	andi	r3,r8,255
10002eb8:	04000434 	movhi	r16,16
10002ebc:	180697fa 	slli	r3,r3,31
10002ec0:	843fffc4 	addi	r16,r16,-1
10002ec4:	2420703a 	and	r16,r4,r16
10002ec8:	8160b03a 	or	r16,r16,r5
10002ecc:	80c6b03a 	or	r3,r16,r3
10002ed0:	dfc00417 	ldw	ra,16(sp)
10002ed4:	dcc00317 	ldw	r19,12(sp)
10002ed8:	dc800217 	ldw	r18,8(sp)
10002edc:	dc400117 	ldw	r17,4(sp)
10002ee0:	dc000017 	ldw	r16,0(sp)
10002ee4:	dec00504 	addi	sp,sp,20
10002ee8:	f800283a 	ret
10002eec:	0101ffc4 	movi	r4,2047
10002ef0:	813fd626 	beq	r16,r4,10002e4c <__alt_data_end+0xf8002e4c>
10002ef4:	18c02034 	orhi	r3,r3,128
10002ef8:	01000e04 	movi	r4,56
10002efc:	2080a416 	blt	r4,r2,10003190 <__subdf3+0x3d0>
10002f00:	010007c4 	movi	r4,31
10002f04:	2080c716 	blt	r4,r2,10003224 <__subdf3+0x464>
10002f08:	01000804 	movi	r4,32
10002f0c:	2089c83a 	sub	r4,r4,r2
10002f10:	1910983a 	sll	r8,r3,r4
10002f14:	308ed83a 	srl	r7,r6,r2
10002f18:	3108983a 	sll	r4,r6,r4
10002f1c:	1884d83a 	srl	r2,r3,r2
10002f20:	41ccb03a 	or	r6,r8,r7
10002f24:	2008c03a 	cmpne	r4,r4,zero
10002f28:	310cb03a 	or	r6,r6,r4
10002f2c:	898dc83a 	sub	r6,r17,r6
10002f30:	89a3803a 	cmpltu	r17,r17,r6
10002f34:	288bc83a 	sub	r5,r5,r2
10002f38:	2c4bc83a 	sub	r5,r5,r17
10002f3c:	3023883a 	mov	r17,r6
10002f40:	2880202c 	andhi	r2,r5,128
10002f44:	10006b26 	beq	r2,zero,100030f4 <__subdf3+0x334>
10002f48:	04c02034 	movhi	r19,128
10002f4c:	9cffffc4 	addi	r19,r19,-1
10002f50:	2ce6703a 	and	r19,r5,r19
10002f54:	98007c26 	beq	r19,zero,10003148 <__subdf3+0x388>
10002f58:	9809883a 	mov	r4,r19
10002f5c:	00037e80 	call	100037e8 <__clzsi2>
10002f60:	10fffe04 	addi	r3,r2,-8
10002f64:	010007c4 	movi	r4,31
10002f68:	20c07d16 	blt	r4,r3,10003160 <__subdf3+0x3a0>
10002f6c:	01400a04 	movi	r5,40
10002f70:	2885c83a 	sub	r2,r5,r2
10002f74:	888ad83a 	srl	r5,r17,r2
10002f78:	98e6983a 	sll	r19,r19,r3
10002f7c:	88e2983a 	sll	r17,r17,r3
10002f80:	2ce6b03a 	or	r19,r5,r19
10002f84:	1c007a16 	blt	r3,r16,10003170 <__subdf3+0x3b0>
10002f88:	1c21c83a 	sub	r16,r3,r16
10002f8c:	81400044 	addi	r5,r16,1
10002f90:	00c007c4 	movi	r3,31
10002f94:	19409616 	blt	r3,r5,100031f0 <__subdf3+0x430>
10002f98:	1c21c83a 	sub	r16,r3,r16
10002f9c:	8c08983a 	sll	r4,r17,r16
10002fa0:	8946d83a 	srl	r3,r17,r5
10002fa4:	9c20983a 	sll	r16,r19,r16
10002fa8:	2008c03a 	cmpne	r4,r4,zero
10002fac:	994ad83a 	srl	r5,r19,r5
10002fb0:	1c06b03a 	or	r3,r3,r16
10002fb4:	1922b03a 	or	r17,r3,r4
10002fb8:	0021883a 	mov	r16,zero
10002fbc:	003fa306 	br	10002e4c <__alt_data_end+0xf8002e4c>
10002fc0:	2880202c 	andhi	r2,r5,128
10002fc4:	9200004c 	andi	r8,r18,1
10002fc8:	103fac1e 	bne	r2,zero,10002e7c <__alt_data_end+0xf8002e7c>
10002fcc:	2804977a 	slli	r2,r5,29
10002fd0:	8822d0fa 	srli	r17,r17,3
10002fd4:	00c1ffc4 	movi	r3,2047
10002fd8:	280ad0fa 	srli	r5,r5,3
10002fdc:	1444b03a 	or	r2,r2,r17
10002fe0:	80c02726 	beq	r16,r3,10003080 <__subdf3+0x2c0>
10002fe4:	01000434 	movhi	r4,16
10002fe8:	213fffc4 	addi	r4,r4,-1
10002fec:	80e0703a 	and	r16,r16,r3
10002ff0:	2908703a 	and	r4,r5,r4
10002ff4:	003fad06 	br	10002eac <__alt_data_end+0xf8002eac>
10002ff8:	0080690e 	bge	zero,r2,100031a0 <__subdf3+0x3e0>
10002ffc:	50002f26 	beq	r10,zero,100030bc <__subdf3+0x2fc>
10003000:	0101ffc4 	movi	r4,2047
10003004:	813f9126 	beq	r16,r4,10002e4c <__alt_data_end+0xf8002e4c>
10003008:	18c02034 	orhi	r3,r3,128
1000300c:	01000e04 	movi	r4,56
10003010:	2080b00e 	bge	r4,r2,100032d4 <__subdf3+0x514>
10003014:	198cb03a 	or	r6,r3,r6
10003018:	300ec03a 	cmpne	r7,r6,zero
1000301c:	0005883a 	mov	r2,zero
10003020:	3c4f883a 	add	r7,r7,r17
10003024:	3c63803a 	cmpltu	r17,r7,r17
10003028:	114b883a 	add	r5,r2,r5
1000302c:	2c4b883a 	add	r5,r5,r17
10003030:	3823883a 	mov	r17,r7
10003034:	2880202c 	andhi	r2,r5,128
10003038:	10002e26 	beq	r2,zero,100030f4 <__subdf3+0x334>
1000303c:	84000044 	addi	r16,r16,1
10003040:	0081ffc4 	movi	r2,2047
10003044:	8080de26 	beq	r16,r2,100033c0 <__subdf3+0x600>
10003048:	00bfe034 	movhi	r2,65408
1000304c:	10bfffc4 	addi	r2,r2,-1
10003050:	288a703a 	and	r5,r5,r2
10003054:	880cd07a 	srli	r6,r17,1
10003058:	280897fa 	slli	r4,r5,31
1000305c:	88c0004c 	andi	r3,r17,1
10003060:	30e2b03a 	or	r17,r6,r3
10003064:	280ad07a 	srli	r5,r5,1
10003068:	8922b03a 	or	r17,r17,r4
1000306c:	003f7706 	br	10002e4c <__alt_data_end+0xf8002e4c>
10003070:	1984b03a 	or	r2,r3,r6
10003074:	103f6e26 	beq	r2,zero,10002e30 <__alt_data_end+0xf8002e30>
10003078:	39c03fcc 	andi	r7,r7,255
1000307c:	003f6d06 	br	10002e34 <__alt_data_end+0xf8002e34>
10003080:	1146b03a 	or	r3,r2,r5
10003084:	18003f26 	beq	r3,zero,10003184 <__subdf3+0x3c4>
10003088:	00c00434 	movhi	r3,16
1000308c:	29000234 	orhi	r4,r5,8
10003090:	18ffffc4 	addi	r3,r3,-1
10003094:	20c8703a 	and	r4,r4,r3
10003098:	003f8406 	br	10002eac <__alt_data_end+0xf8002eac>
1000309c:	10bfffc4 	addi	r2,r2,-1
100030a0:	1000501e 	bne	r2,zero,100031e4 <__subdf3+0x424>
100030a4:	898fc83a 	sub	r7,r17,r6
100030a8:	89e3803a 	cmpltu	r17,r17,r7
100030ac:	28cbc83a 	sub	r5,r5,r3
100030b0:	2c4bc83a 	sub	r5,r5,r17
100030b4:	3823883a 	mov	r17,r7
100030b8:	003fa106 	br	10002f40 <__alt_data_end+0xf8002f40>
100030bc:	1988b03a 	or	r4,r3,r6
100030c0:	203f6226 	beq	r4,zero,10002e4c <__alt_data_end+0xf8002e4c>
100030c4:	10bfffc4 	addi	r2,r2,-1
100030c8:	10009b1e 	bne	r2,zero,10003338 <__subdf3+0x578>
100030cc:	344d883a 	add	r6,r6,r17
100030d0:	3463803a 	cmpltu	r17,r6,r17
100030d4:	194b883a 	add	r5,r3,r5
100030d8:	2c4b883a 	add	r5,r5,r17
100030dc:	3023883a 	mov	r17,r6
100030e0:	003fd406 	br	10003034 <__alt_data_end+0xf8003034>
100030e4:	1106b03a 	or	r3,r2,r4
100030e8:	1800b426 	beq	r3,zero,100033bc <__subdf3+0x5fc>
100030ec:	100b883a 	mov	r5,r2
100030f0:	2023883a 	mov	r17,r4
100030f4:	888001cc 	andi	r2,r17,7
100030f8:	103f561e 	bne	r2,zero,10002e54 <__alt_data_end+0xf8002e54>
100030fc:	9200004c 	andi	r8,r18,1
10003100:	003fb206 	br	10002fcc <__alt_data_end+0xf8002fcc>
10003104:	1000531e 	bne	r2,zero,10003254 <__subdf3+0x494>
10003108:	80800044 	addi	r2,r16,1
1000310c:	1081ffcc 	andi	r2,r2,2047
10003110:	01000044 	movi	r4,1
10003114:	2080a00e 	bge	r4,r2,10003398 <__subdf3+0x5d8>
10003118:	8985c83a 	sub	r2,r17,r6
1000311c:	8889803a 	cmpltu	r4,r17,r2
10003120:	28e7c83a 	sub	r19,r5,r3
10003124:	9927c83a 	sub	r19,r19,r4
10003128:	9900202c 	andhi	r4,r19,128
1000312c:	20006226 	beq	r4,zero,100032b8 <__subdf3+0x4f8>
10003130:	3463c83a 	sub	r17,r6,r17
10003134:	194bc83a 	sub	r5,r3,r5
10003138:	344d803a 	cmpltu	r6,r6,r17
1000313c:	29a7c83a 	sub	r19,r5,r6
10003140:	3825883a 	mov	r18,r7
10003144:	983f841e 	bne	r19,zero,10002f58 <__alt_data_end+0xf8002f58>
10003148:	8809883a 	mov	r4,r17
1000314c:	00037e80 	call	100037e8 <__clzsi2>
10003150:	10800804 	addi	r2,r2,32
10003154:	10fffe04 	addi	r3,r2,-8
10003158:	010007c4 	movi	r4,31
1000315c:	20ff830e 	bge	r4,r3,10002f6c <__alt_data_end+0xf8002f6c>
10003160:	14fff604 	addi	r19,r2,-40
10003164:	8ce6983a 	sll	r19,r17,r19
10003168:	0023883a 	mov	r17,zero
1000316c:	1c3f860e 	bge	r3,r16,10002f88 <__alt_data_end+0xf8002f88>
10003170:	017fe034 	movhi	r5,65408
10003174:	297fffc4 	addi	r5,r5,-1
10003178:	80e1c83a 	sub	r16,r16,r3
1000317c:	994a703a 	and	r5,r19,r5
10003180:	003f3206 	br	10002e4c <__alt_data_end+0xf8002e4c>
10003184:	0009883a 	mov	r4,zero
10003188:	0005883a 	mov	r2,zero
1000318c:	003f4706 	br	10002eac <__alt_data_end+0xf8002eac>
10003190:	198cb03a 	or	r6,r3,r6
10003194:	300cc03a 	cmpne	r6,r6,zero
10003198:	0005883a 	mov	r2,zero
1000319c:	003f6306 	br	10002f2c <__alt_data_end+0xf8002f2c>
100031a0:	10009d1e 	bne	r2,zero,10003418 <__subdf3+0x658>
100031a4:	81c00044 	addi	r7,r16,1
100031a8:	3881ffcc 	andi	r2,r7,2047
100031ac:	02400044 	movi	r9,1
100031b0:	4880680e 	bge	r9,r2,10003354 <__subdf3+0x594>
100031b4:	0081ffc4 	movi	r2,2047
100031b8:	3880ae26 	beq	r7,r2,10003474 <__subdf3+0x6b4>
100031bc:	344d883a 	add	r6,r6,r17
100031c0:	3463803a 	cmpltu	r17,r6,r17
100031c4:	194b883a 	add	r5,r3,r5
100031c8:	2c4b883a 	add	r5,r5,r17
100031cc:	282297fa 	slli	r17,r5,31
100031d0:	300cd07a 	srli	r6,r6,1
100031d4:	280ad07a 	srli	r5,r5,1
100031d8:	3821883a 	mov	r16,r7
100031dc:	89a2b03a 	or	r17,r17,r6
100031e0:	003f1a06 	br	10002e4c <__alt_data_end+0xf8002e4c>
100031e4:	0101ffc4 	movi	r4,2047
100031e8:	813f431e 	bne	r16,r4,10002ef8 <__alt_data_end+0xf8002ef8>
100031ec:	003f1706 	br	10002e4c <__alt_data_end+0xf8002e4c>
100031f0:	80bff844 	addi	r2,r16,-31
100031f4:	00c00804 	movi	r3,32
100031f8:	9884d83a 	srl	r2,r19,r2
100031fc:	28c05126 	beq	r5,r3,10003344 <__subdf3+0x584>
10003200:	00c00fc4 	movi	r3,63
10003204:	1c21c83a 	sub	r16,r3,r16
10003208:	9c26983a 	sll	r19,r19,r16
1000320c:	9c62b03a 	or	r17,r19,r17
10003210:	8822c03a 	cmpne	r17,r17,zero
10003214:	88a2b03a 	or	r17,r17,r2
10003218:	000b883a 	mov	r5,zero
1000321c:	0021883a 	mov	r16,zero
10003220:	003fb406 	br	100030f4 <__alt_data_end+0xf80030f4>
10003224:	113ff804 	addi	r4,r2,-32
10003228:	01c00804 	movi	r7,32
1000322c:	1908d83a 	srl	r4,r3,r4
10003230:	11c04626 	beq	r2,r7,1000334c <__subdf3+0x58c>
10003234:	01c01004 	movi	r7,64
10003238:	3885c83a 	sub	r2,r7,r2
1000323c:	1884983a 	sll	r2,r3,r2
10003240:	118cb03a 	or	r6,r2,r6
10003244:	300cc03a 	cmpne	r6,r6,zero
10003248:	310cb03a 	or	r6,r6,r4
1000324c:	0005883a 	mov	r2,zero
10003250:	003f3606 	br	10002f2c <__alt_data_end+0xf8002f2c>
10003254:	80002b26 	beq	r16,zero,10003304 <__subdf3+0x544>
10003258:	0101ffc4 	movi	r4,2047
1000325c:	51006926 	beq	r10,r4,10003404 <__subdf3+0x644>
10003260:	0085c83a 	sub	r2,zero,r2
10003264:	29402034 	orhi	r5,r5,128
10003268:	01000e04 	movi	r4,56
1000326c:	20807d16 	blt	r4,r2,10003464 <__subdf3+0x6a4>
10003270:	010007c4 	movi	r4,31
10003274:	2080d916 	blt	r4,r2,100035dc <__subdf3+0x81c>
10003278:	01000804 	movi	r4,32
1000327c:	2089c83a 	sub	r4,r4,r2
10003280:	2912983a 	sll	r9,r5,r4
10003284:	8890d83a 	srl	r8,r17,r2
10003288:	8908983a 	sll	r4,r17,r4
1000328c:	2884d83a 	srl	r2,r5,r2
10003290:	4a22b03a 	or	r17,r9,r8
10003294:	2008c03a 	cmpne	r4,r4,zero
10003298:	8922b03a 	or	r17,r17,r4
1000329c:	3463c83a 	sub	r17,r6,r17
100032a0:	1885c83a 	sub	r2,r3,r2
100032a4:	344d803a 	cmpltu	r6,r6,r17
100032a8:	118bc83a 	sub	r5,r2,r6
100032ac:	5021883a 	mov	r16,r10
100032b0:	3825883a 	mov	r18,r7
100032b4:	003f2206 	br	10002f40 <__alt_data_end+0xf8002f40>
100032b8:	9886b03a 	or	r3,r19,r2
100032bc:	18001c1e 	bne	r3,zero,10003330 <__subdf3+0x570>
100032c0:	0011883a 	mov	r8,zero
100032c4:	000b883a 	mov	r5,zero
100032c8:	0023883a 	mov	r17,zero
100032cc:	0021883a 	mov	r16,zero
100032d0:	003f3e06 	br	10002fcc <__alt_data_end+0xf8002fcc>
100032d4:	010007c4 	movi	r4,31
100032d8:	20803c16 	blt	r4,r2,100033cc <__subdf3+0x60c>
100032dc:	01000804 	movi	r4,32
100032e0:	2089c83a 	sub	r4,r4,r2
100032e4:	1912983a 	sll	r9,r3,r4
100032e8:	308ed83a 	srl	r7,r6,r2
100032ec:	3108983a 	sll	r4,r6,r4
100032f0:	1884d83a 	srl	r2,r3,r2
100032f4:	49ceb03a 	or	r7,r9,r7
100032f8:	2008c03a 	cmpne	r4,r4,zero
100032fc:	390eb03a 	or	r7,r7,r4
10003300:	003f4706 	br	10003020 <__alt_data_end+0xf8003020>
10003304:	2c48b03a 	or	r4,r5,r17
10003308:	20003e26 	beq	r4,zero,10003404 <__subdf3+0x644>
1000330c:	0084303a 	nor	r2,zero,r2
10003310:	10003a1e 	bne	r2,zero,100033fc <__subdf3+0x63c>
10003314:	3463c83a 	sub	r17,r6,r17
10003318:	194bc83a 	sub	r5,r3,r5
1000331c:	344d803a 	cmpltu	r6,r6,r17
10003320:	298bc83a 	sub	r5,r5,r6
10003324:	5021883a 	mov	r16,r10
10003328:	3825883a 	mov	r18,r7
1000332c:	003f0406 	br	10002f40 <__alt_data_end+0xf8002f40>
10003330:	1023883a 	mov	r17,r2
10003334:	003f0706 	br	10002f54 <__alt_data_end+0xf8002f54>
10003338:	0101ffc4 	movi	r4,2047
1000333c:	813f331e 	bne	r16,r4,1000300c <__alt_data_end+0xf800300c>
10003340:	003ec206 	br	10002e4c <__alt_data_end+0xf8002e4c>
10003344:	0027883a 	mov	r19,zero
10003348:	003fb006 	br	1000320c <__alt_data_end+0xf800320c>
1000334c:	0005883a 	mov	r2,zero
10003350:	003fbb06 	br	10003240 <__alt_data_end+0xf8003240>
10003354:	2c44b03a 	or	r2,r5,r17
10003358:	80008b1e 	bne	r16,zero,10003588 <__subdf3+0x7c8>
1000335c:	1000b526 	beq	r2,zero,10003634 <__subdf3+0x874>
10003360:	1984b03a 	or	r2,r3,r6
10003364:	103eb926 	beq	r2,zero,10002e4c <__alt_data_end+0xf8002e4c>
10003368:	3449883a 	add	r4,r6,r17
1000336c:	2463803a 	cmpltu	r17,r4,r17
10003370:	194b883a 	add	r5,r3,r5
10003374:	2c4b883a 	add	r5,r5,r17
10003378:	2880202c 	andhi	r2,r5,128
1000337c:	2023883a 	mov	r17,r4
10003380:	103f5c26 	beq	r2,zero,100030f4 <__alt_data_end+0xf80030f4>
10003384:	00bfe034 	movhi	r2,65408
10003388:	10bfffc4 	addi	r2,r2,-1
1000338c:	4821883a 	mov	r16,r9
10003390:	288a703a 	and	r5,r5,r2
10003394:	003ead06 	br	10002e4c <__alt_data_end+0xf8002e4c>
10003398:	2c44b03a 	or	r2,r5,r17
1000339c:	8000291e 	bne	r16,zero,10003444 <__subdf3+0x684>
100033a0:	10004f1e 	bne	r2,zero,100034e0 <__subdf3+0x720>
100033a4:	1984b03a 	or	r2,r3,r6
100033a8:	10000426 	beq	r2,zero,100033bc <__subdf3+0x5fc>
100033ac:	180b883a 	mov	r5,r3
100033b0:	3023883a 	mov	r17,r6
100033b4:	3825883a 	mov	r18,r7
100033b8:	003ea406 	br	10002e4c <__alt_data_end+0xf8002e4c>
100033bc:	0011883a 	mov	r8,zero
100033c0:	000b883a 	mov	r5,zero
100033c4:	0023883a 	mov	r17,zero
100033c8:	003f0006 	br	10002fcc <__alt_data_end+0xf8002fcc>
100033cc:	11fff804 	addi	r7,r2,-32
100033d0:	19c8d83a 	srl	r4,r3,r7
100033d4:	01c00804 	movi	r7,32
100033d8:	11c07e26 	beq	r2,r7,100035d4 <__subdf3+0x814>
100033dc:	01c01004 	movi	r7,64
100033e0:	3885c83a 	sub	r2,r7,r2
100033e4:	1884983a 	sll	r2,r3,r2
100033e8:	118cb03a 	or	r6,r2,r6
100033ec:	300ec03a 	cmpne	r7,r6,zero
100033f0:	390eb03a 	or	r7,r7,r4
100033f4:	0005883a 	mov	r2,zero
100033f8:	003f0906 	br	10003020 <__alt_data_end+0xf8003020>
100033fc:	0101ffc4 	movi	r4,2047
10003400:	513f991e 	bne	r10,r4,10003268 <__alt_data_end+0xf8003268>
10003404:	180b883a 	mov	r5,r3
10003408:	3023883a 	mov	r17,r6
1000340c:	5021883a 	mov	r16,r10
10003410:	3825883a 	mov	r18,r7
10003414:	003e8d06 	br	10002e4c <__alt_data_end+0xf8002e4c>
10003418:	80001a1e 	bne	r16,zero,10003484 <__subdf3+0x6c4>
1000341c:	2c48b03a 	or	r4,r5,r17
10003420:	20005526 	beq	r4,zero,10003578 <__subdf3+0x7b8>
10003424:	0084303a 	nor	r2,zero,r2
10003428:	1000511e 	bne	r2,zero,10003570 <__subdf3+0x7b0>
1000342c:	89a3883a 	add	r17,r17,r6
10003430:	194b883a 	add	r5,r3,r5
10003434:	898d803a 	cmpltu	r6,r17,r6
10003438:	298b883a 	add	r5,r5,r6
1000343c:	5021883a 	mov	r16,r10
10003440:	003efc06 	br	10003034 <__alt_data_end+0xf8003034>
10003444:	1000341e 	bne	r2,zero,10003518 <__subdf3+0x758>
10003448:	1984b03a 	or	r2,r3,r6
1000344c:	10006f26 	beq	r2,zero,1000360c <__subdf3+0x84c>
10003450:	180b883a 	mov	r5,r3
10003454:	3023883a 	mov	r17,r6
10003458:	3825883a 	mov	r18,r7
1000345c:	0401ffc4 	movi	r16,2047
10003460:	003e7a06 	br	10002e4c <__alt_data_end+0xf8002e4c>
10003464:	2c62b03a 	or	r17,r5,r17
10003468:	8822c03a 	cmpne	r17,r17,zero
1000346c:	0005883a 	mov	r2,zero
10003470:	003f8a06 	br	1000329c <__alt_data_end+0xf800329c>
10003474:	3821883a 	mov	r16,r7
10003478:	000b883a 	mov	r5,zero
1000347c:	0023883a 	mov	r17,zero
10003480:	003ed206 	br	10002fcc <__alt_data_end+0xf8002fcc>
10003484:	0101ffc4 	movi	r4,2047
10003488:	51003b26 	beq	r10,r4,10003578 <__subdf3+0x7b8>
1000348c:	0085c83a 	sub	r2,zero,r2
10003490:	29402034 	orhi	r5,r5,128
10003494:	01000e04 	movi	r4,56
10003498:	20806216 	blt	r4,r2,10003624 <__subdf3+0x864>
1000349c:	010007c4 	movi	r4,31
100034a0:	20806b16 	blt	r4,r2,10003650 <__subdf3+0x890>
100034a4:	01000804 	movi	r4,32
100034a8:	2089c83a 	sub	r4,r4,r2
100034ac:	2912983a 	sll	r9,r5,r4
100034b0:	888ed83a 	srl	r7,r17,r2
100034b4:	8908983a 	sll	r4,r17,r4
100034b8:	2884d83a 	srl	r2,r5,r2
100034bc:	49e2b03a 	or	r17,r9,r7
100034c0:	2008c03a 	cmpne	r4,r4,zero
100034c4:	8922b03a 	or	r17,r17,r4
100034c8:	89a3883a 	add	r17,r17,r6
100034cc:	10c5883a 	add	r2,r2,r3
100034d0:	898d803a 	cmpltu	r6,r17,r6
100034d4:	118b883a 	add	r5,r2,r6
100034d8:	5021883a 	mov	r16,r10
100034dc:	003ed506 	br	10003034 <__alt_data_end+0xf8003034>
100034e0:	1984b03a 	or	r2,r3,r6
100034e4:	103e5926 	beq	r2,zero,10002e4c <__alt_data_end+0xf8002e4c>
100034e8:	8989c83a 	sub	r4,r17,r6
100034ec:	8911803a 	cmpltu	r8,r17,r4
100034f0:	28c5c83a 	sub	r2,r5,r3
100034f4:	1205c83a 	sub	r2,r2,r8
100034f8:	1200202c 	andhi	r8,r2,128
100034fc:	403ef926 	beq	r8,zero,100030e4 <__alt_data_end+0xf80030e4>
10003500:	3463c83a 	sub	r17,r6,r17
10003504:	194bc83a 	sub	r5,r3,r5
10003508:	344d803a 	cmpltu	r6,r6,r17
1000350c:	298bc83a 	sub	r5,r5,r6
10003510:	3825883a 	mov	r18,r7
10003514:	003e4d06 	br	10002e4c <__alt_data_end+0xf8002e4c>
10003518:	1984b03a 	or	r2,r3,r6
1000351c:	10002b26 	beq	r2,zero,100035cc <__subdf3+0x80c>
10003520:	2808d0fa 	srli	r4,r5,3
10003524:	8822d0fa 	srli	r17,r17,3
10003528:	280a977a 	slli	r5,r5,29
1000352c:	2080022c 	andhi	r2,r4,8
10003530:	2c62b03a 	or	r17,r5,r17
10003534:	10000826 	beq	r2,zero,10003558 <__subdf3+0x798>
10003538:	1810d0fa 	srli	r8,r3,3
1000353c:	4080022c 	andhi	r2,r8,8
10003540:	1000051e 	bne	r2,zero,10003558 <__subdf3+0x798>
10003544:	300cd0fa 	srli	r6,r6,3
10003548:	1804977a 	slli	r2,r3,29
1000354c:	4009883a 	mov	r4,r8
10003550:	3825883a 	mov	r18,r7
10003554:	11a2b03a 	or	r17,r2,r6
10003558:	880ad77a 	srli	r5,r17,29
1000355c:	200890fa 	slli	r4,r4,3
10003560:	882290fa 	slli	r17,r17,3
10003564:	0401ffc4 	movi	r16,2047
10003568:	290ab03a 	or	r5,r5,r4
1000356c:	003e3706 	br	10002e4c <__alt_data_end+0xf8002e4c>
10003570:	0101ffc4 	movi	r4,2047
10003574:	513fc71e 	bne	r10,r4,10003494 <__alt_data_end+0xf8003494>
10003578:	180b883a 	mov	r5,r3
1000357c:	3023883a 	mov	r17,r6
10003580:	5021883a 	mov	r16,r10
10003584:	003e3106 	br	10002e4c <__alt_data_end+0xf8002e4c>
10003588:	10002d26 	beq	r2,zero,10003640 <__subdf3+0x880>
1000358c:	1984b03a 	or	r2,r3,r6
10003590:	10000e26 	beq	r2,zero,100035cc <__subdf3+0x80c>
10003594:	2808d0fa 	srli	r4,r5,3
10003598:	8822d0fa 	srli	r17,r17,3
1000359c:	280a977a 	slli	r5,r5,29
100035a0:	2080022c 	andhi	r2,r4,8
100035a4:	2c62b03a 	or	r17,r5,r17
100035a8:	103feb26 	beq	r2,zero,10003558 <__alt_data_end+0xf8003558>
100035ac:	180ed0fa 	srli	r7,r3,3
100035b0:	3880022c 	andhi	r2,r7,8
100035b4:	103fe81e 	bne	r2,zero,10003558 <__alt_data_end+0xf8003558>
100035b8:	300cd0fa 	srli	r6,r6,3
100035bc:	1804977a 	slli	r2,r3,29
100035c0:	3809883a 	mov	r4,r7
100035c4:	11a2b03a 	or	r17,r2,r6
100035c8:	003fe306 	br	10003558 <__alt_data_end+0xf8003558>
100035cc:	0401ffc4 	movi	r16,2047
100035d0:	003e1e06 	br	10002e4c <__alt_data_end+0xf8002e4c>
100035d4:	0005883a 	mov	r2,zero
100035d8:	003f8306 	br	100033e8 <__alt_data_end+0xf80033e8>
100035dc:	113ff804 	addi	r4,r2,-32
100035e0:	02000804 	movi	r8,32
100035e4:	2908d83a 	srl	r4,r5,r4
100035e8:	12002526 	beq	r2,r8,10003680 <__subdf3+0x8c0>
100035ec:	02001004 	movi	r8,64
100035f0:	4085c83a 	sub	r2,r8,r2
100035f4:	288a983a 	sll	r5,r5,r2
100035f8:	2c62b03a 	or	r17,r5,r17
100035fc:	8822c03a 	cmpne	r17,r17,zero
10003600:	8922b03a 	or	r17,r17,r4
10003604:	0005883a 	mov	r2,zero
10003608:	003f2406 	br	1000329c <__alt_data_end+0xf800329c>
1000360c:	01402034 	movhi	r5,128
10003610:	0011883a 	mov	r8,zero
10003614:	297fffc4 	addi	r5,r5,-1
10003618:	047ffe04 	movi	r17,-8
1000361c:	0401ffc4 	movi	r16,2047
10003620:	003e6a06 	br	10002fcc <__alt_data_end+0xf8002fcc>
10003624:	2c62b03a 	or	r17,r5,r17
10003628:	8822c03a 	cmpne	r17,r17,zero
1000362c:	0005883a 	mov	r2,zero
10003630:	003fa506 	br	100034c8 <__alt_data_end+0xf80034c8>
10003634:	180b883a 	mov	r5,r3
10003638:	3023883a 	mov	r17,r6
1000363c:	003e0306 	br	10002e4c <__alt_data_end+0xf8002e4c>
10003640:	180b883a 	mov	r5,r3
10003644:	3023883a 	mov	r17,r6
10003648:	0401ffc4 	movi	r16,2047
1000364c:	003dff06 	br	10002e4c <__alt_data_end+0xf8002e4c>
10003650:	113ff804 	addi	r4,r2,-32
10003654:	01c00804 	movi	r7,32
10003658:	2908d83a 	srl	r4,r5,r4
1000365c:	11c00a26 	beq	r2,r7,10003688 <__subdf3+0x8c8>
10003660:	01c01004 	movi	r7,64
10003664:	3885c83a 	sub	r2,r7,r2
10003668:	288a983a 	sll	r5,r5,r2
1000366c:	2c62b03a 	or	r17,r5,r17
10003670:	8822c03a 	cmpne	r17,r17,zero
10003674:	8922b03a 	or	r17,r17,r4
10003678:	0005883a 	mov	r2,zero
1000367c:	003f9206 	br	100034c8 <__alt_data_end+0xf80034c8>
10003680:	000b883a 	mov	r5,zero
10003684:	003fdc06 	br	100035f8 <__alt_data_end+0xf80035f8>
10003688:	000b883a 	mov	r5,zero
1000368c:	003ff706 	br	1000366c <__alt_data_end+0xf800366c>

10003690 <__fixdfsi>:
10003690:	2806d53a 	srli	r3,r5,20
10003694:	00800434 	movhi	r2,16
10003698:	10bfffc4 	addi	r2,r2,-1
1000369c:	18c1ffcc 	andi	r3,r3,2047
100036a0:	0180ff84 	movi	r6,1022
100036a4:	2884703a 	and	r2,r5,r2
100036a8:	280ad7fa 	srli	r5,r5,31
100036ac:	30c0130e 	bge	r6,r3,100036fc <__fixdfsi+0x6c>
100036b0:	01810744 	movi	r6,1053
100036b4:	30c00d16 	blt	r6,r3,100036ec <__fixdfsi+0x5c>
100036b8:	01810cc4 	movi	r6,1075
100036bc:	30cdc83a 	sub	r6,r6,r3
100036c0:	01c007c4 	movi	r7,31
100036c4:	10800434 	orhi	r2,r2,16
100036c8:	39800e0e 	bge	r7,r6,10003704 <__fixdfsi+0x74>
100036cc:	010104c4 	movi	r4,1043
100036d0:	20c7c83a 	sub	r3,r4,r3
100036d4:	10c6d83a 	srl	r3,r2,r3
100036d8:	29403fcc 	andi	r5,r5,255
100036dc:	0145c83a 	sub	r2,zero,r5
100036e0:	1884f03a 	xor	r2,r3,r2
100036e4:	1145883a 	add	r2,r2,r5
100036e8:	f800283a 	ret
100036ec:	00a00034 	movhi	r2,32768
100036f0:	10bfffc4 	addi	r2,r2,-1
100036f4:	2885883a 	add	r2,r5,r2
100036f8:	f800283a 	ret
100036fc:	0005883a 	mov	r2,zero
10003700:	f800283a 	ret
10003704:	18fefb44 	addi	r3,r3,-1043
10003708:	2188d83a 	srl	r4,r4,r6
1000370c:	10c6983a 	sll	r3,r2,r3
10003710:	20c6b03a 	or	r3,r4,r3
10003714:	003ff006 	br	100036d8 <__alt_data_end+0xf80036d8>

10003718 <__floatsidf>:
10003718:	defffd04 	addi	sp,sp,-12
1000371c:	dc400115 	stw	r17,4(sp)
10003720:	dfc00215 	stw	ra,8(sp)
10003724:	dc000015 	stw	r16,0(sp)
10003728:	2023883a 	mov	r17,r4
1000372c:	20001426 	beq	r4,zero,10003780 <__floatsidf+0x68>
10003730:	2020d7fa 	srli	r16,r4,31
10003734:	80000126 	beq	r16,zero,1000373c <__floatsidf+0x24>
10003738:	0123c83a 	sub	r17,zero,r4
1000373c:	8809883a 	mov	r4,r17
10003740:	00037e80 	call	100037e8 <__clzsi2>
10003744:	01410784 	movi	r5,1054
10003748:	00c00284 	movi	r3,10
1000374c:	288bc83a 	sub	r5,r5,r2
10003750:	18801c16 	blt	r3,r2,100037c4 <__floatsidf+0xac>
10003754:	00c002c4 	movi	r3,11
10003758:	1887c83a 	sub	r3,r3,r2
1000375c:	88c8d83a 	srl	r4,r17,r3
10003760:	00c00434 	movhi	r3,16
10003764:	18ffffc4 	addi	r3,r3,-1
10003768:	10800544 	addi	r2,r2,21
1000376c:	20c8703a 	and	r4,r4,r3
10003770:	8884983a 	sll	r2,r17,r2
10003774:	28c1ffcc 	andi	r3,r5,2047
10003778:	800d883a 	mov	r6,r16
1000377c:	00000406 	br	10003790 <__floatsidf+0x78>
10003780:	000d883a 	mov	r6,zero
10003784:	0007883a 	mov	r3,zero
10003788:	0009883a 	mov	r4,zero
1000378c:	0005883a 	mov	r2,zero
10003790:	180a953a 	slli	r5,r3,20
10003794:	31803fcc 	andi	r6,r6,255
10003798:	00c00434 	movhi	r3,16
1000379c:	300c97fa 	slli	r6,r6,31
100037a0:	18ffffc4 	addi	r3,r3,-1
100037a4:	20c6703a 	and	r3,r4,r3
100037a8:	1946b03a 	or	r3,r3,r5
100037ac:	1986b03a 	or	r3,r3,r6
100037b0:	dfc00217 	ldw	ra,8(sp)
100037b4:	dc400117 	ldw	r17,4(sp)
100037b8:	dc000017 	ldw	r16,0(sp)
100037bc:	dec00304 	addi	sp,sp,12
100037c0:	f800283a 	ret
100037c4:	10fffd44 	addi	r3,r2,-11
100037c8:	88c8983a 	sll	r4,r17,r3
100037cc:	00800434 	movhi	r2,16
100037d0:	10bfffc4 	addi	r2,r2,-1
100037d4:	2088703a 	and	r4,r4,r2
100037d8:	28c1ffcc 	andi	r3,r5,2047
100037dc:	800d883a 	mov	r6,r16
100037e0:	0005883a 	mov	r2,zero
100037e4:	003fea06 	br	10003790 <__alt_data_end+0xf8003790>

100037e8 <__clzsi2>:
100037e8:	00bfffd4 	movui	r2,65535
100037ec:	11000b36 	bltu	r2,r4,1000381c <__clzsi2+0x34>
100037f0:	00803fc4 	movi	r2,255
100037f4:	1100122e 	bgeu	r2,r4,10003840 <__clzsi2+0x58>
100037f8:	00c00204 	movi	r3,8
100037fc:	01400604 	movi	r5,24
10003800:	20c8d83a 	srl	r4,r4,r3
10003804:	00840074 	movhi	r2,4097
10003808:	10824104 	addi	r2,r2,2308
1000380c:	1109883a 	add	r4,r2,r4
10003810:	20800003 	ldbu	r2,0(r4)
10003814:	2885c83a 	sub	r2,r5,r2
10003818:	f800283a 	ret
1000381c:	00804034 	movhi	r2,256
10003820:	10bfffc4 	addi	r2,r2,-1
10003824:	11000336 	bltu	r2,r4,10003834 <__clzsi2+0x4c>
10003828:	00c00404 	movi	r3,16
1000382c:	180b883a 	mov	r5,r3
10003830:	003ff306 	br	10003800 <__alt_data_end+0xf8003800>
10003834:	00c00604 	movi	r3,24
10003838:	01400204 	movi	r5,8
1000383c:	003ff006 	br	10003800 <__alt_data_end+0xf8003800>
10003840:	0007883a 	mov	r3,zero
10003844:	01400804 	movi	r5,32
10003848:	003fed06 	br	10003800 <__alt_data_end+0xf8003800>

1000384c <_printf_r>:
1000384c:	defffd04 	addi	sp,sp,-12
10003850:	dfc00015 	stw	ra,0(sp)
10003854:	d9800115 	stw	r6,4(sp)
10003858:	d9c00215 	stw	r7,8(sp)
1000385c:	280d883a 	mov	r6,r5
10003860:	21400217 	ldw	r5,8(r4)
10003864:	d9c00104 	addi	r7,sp,4
10003868:	00039300 	call	10003930 <___vfprintf_internal_r>
1000386c:	dfc00017 	ldw	ra,0(sp)
10003870:	dec00304 	addi	sp,sp,12
10003874:	f800283a 	ret

10003878 <printf>:
10003878:	defffc04 	addi	sp,sp,-16
1000387c:	dfc00015 	stw	ra,0(sp)
10003880:	d9400115 	stw	r5,4(sp)
10003884:	d9800215 	stw	r6,8(sp)
10003888:	d9c00315 	stw	r7,12(sp)
1000388c:	00840074 	movhi	r2,4097
10003890:	1089ac04 	addi	r2,r2,9904
10003894:	10800017 	ldw	r2,0(r2)
10003898:	200b883a 	mov	r5,r4
1000389c:	d9800104 	addi	r6,sp,4
100038a0:	11000217 	ldw	r4,8(r2)
100038a4:	0005a2c0 	call	10005a2c <__vfprintf_internal>
100038a8:	dfc00017 	ldw	ra,0(sp)
100038ac:	dec00404 	addi	sp,sp,16
100038b0:	f800283a 	ret

100038b4 <srand>:
100038b4:	00840074 	movhi	r2,4097
100038b8:	1089ac04 	addi	r2,r2,9904
100038bc:	10800017 	ldw	r2,0(r2)
100038c0:	11002915 	stw	r4,164(r2)
100038c4:	10002a15 	stw	zero,168(r2)
100038c8:	f800283a 	ret

100038cc <rand>:
100038cc:	00840074 	movhi	r2,4097
100038d0:	defffe04 	addi	sp,sp,-8
100038d4:	1089ac04 	addi	r2,r2,9904
100038d8:	dc000015 	stw	r16,0(sp)
100038dc:	14000017 	ldw	r16,0(r2)
100038e0:	dfc00115 	stw	ra,4(sp)
100038e4:	01932574 	movhi	r6,19605
100038e8:	81002917 	ldw	r4,164(r16)
100038ec:	81402a17 	ldw	r5,168(r16)
100038f0:	01d614b4 	movhi	r7,22610
100038f4:	319fcb44 	addi	r6,r6,32557
100038f8:	39fd0b44 	addi	r7,r7,-3027
100038fc:	000cbb40 	call	1000cbb4 <__muldi3>
10003900:	11000044 	addi	r4,r2,1
10003904:	2085803a 	cmpltu	r2,r4,r2
10003908:	10c7883a 	add	r3,r2,r3
1000390c:	00a00034 	movhi	r2,32768
10003910:	10bfffc4 	addi	r2,r2,-1
10003914:	1884703a 	and	r2,r3,r2
10003918:	81002915 	stw	r4,164(r16)
1000391c:	80c02a15 	stw	r3,168(r16)
10003920:	dfc00117 	ldw	ra,4(sp)
10003924:	dc000017 	ldw	r16,0(sp)
10003928:	dec00204 	addi	sp,sp,8
1000392c:	f800283a 	ret

10003930 <___vfprintf_internal_r>:
10003930:	defeb604 	addi	sp,sp,-1320
10003934:	dfc14915 	stw	ra,1316(sp)
10003938:	ddc14715 	stw	r23,1308(sp)
1000393c:	dd814615 	stw	r22,1304(sp)
10003940:	202f883a 	mov	r23,r4
10003944:	282d883a 	mov	r22,r5
10003948:	d9812a15 	stw	r6,1192(sp)
1000394c:	d9c12d15 	stw	r7,1204(sp)
10003950:	df014815 	stw	fp,1312(sp)
10003954:	dd414515 	stw	r21,1300(sp)
10003958:	dd014415 	stw	r20,1296(sp)
1000395c:	dcc14315 	stw	r19,1292(sp)
10003960:	dc814215 	stw	r18,1288(sp)
10003964:	dc414115 	stw	r17,1284(sp)
10003968:	dc014015 	stw	r16,1280(sp)
1000396c:	000810c0 	call	1000810c <_localeconv_r>
10003970:	10800017 	ldw	r2,0(r2)
10003974:	1009883a 	mov	r4,r2
10003978:	d8813515 	stw	r2,1236(sp)
1000397c:	000a0d40 	call	1000a0d4 <strlen>
10003980:	d8813815 	stw	r2,1248(sp)
10003984:	b8000226 	beq	r23,zero,10003990 <___vfprintf_internal_r+0x60>
10003988:	b8800e17 	ldw	r2,56(r23)
1000398c:	10010526 	beq	r2,zero,10003da4 <___vfprintf_internal_r+0x474>
10003990:	b0c0030b 	ldhu	r3,12(r22)
10003994:	1908000c 	andi	r4,r3,8192
10003998:	1805883a 	mov	r2,r3
1000399c:	2000071e 	bne	r4,zero,100039bc <___vfprintf_internal_r+0x8c>
100039a0:	b1001917 	ldw	r4,100(r22)
100039a4:	18880014 	ori	r2,r3,8192
100039a8:	00f7ffc4 	movi	r3,-8193
100039ac:	20c8703a 	and	r4,r4,r3
100039b0:	b080030d 	sth	r2,12(r22)
100039b4:	1007883a 	mov	r3,r2
100039b8:	b1001915 	stw	r4,100(r22)
100039bc:	1100020c 	andi	r4,r2,8
100039c0:	2000a826 	beq	r4,zero,10003c64 <___vfprintf_internal_r+0x334>
100039c4:	b1000417 	ldw	r4,16(r22)
100039c8:	2000a626 	beq	r4,zero,10003c64 <___vfprintf_internal_r+0x334>
100039cc:	1080068c 	andi	r2,r2,26
100039d0:	01000284 	movi	r4,10
100039d4:	1100ac26 	beq	r2,r4,10003c88 <___vfprintf_internal_r+0x358>
100039d8:	d8c10e04 	addi	r3,sp,1080
100039dc:	d9010dc4 	addi	r4,sp,1079
100039e0:	d9400404 	addi	r5,sp,16
100039e4:	05040074 	movhi	r20,4097
100039e8:	1905c83a 	sub	r2,r3,r4
100039ec:	a5029184 	addi	r20,r20,2630
100039f0:	d8c12815 	stw	r3,1184(sp)
100039f4:	d9012915 	stw	r4,1188(sp)
100039f8:	d9411e15 	stw	r5,1144(sp)
100039fc:	d8012015 	stw	zero,1152(sp)
10003a00:	d8011f15 	stw	zero,1148(sp)
10003a04:	d8013315 	stw	zero,1228(sp)
10003a08:	d8013715 	stw	zero,1244(sp)
10003a0c:	d8013915 	stw	zero,1252(sp)
10003a10:	d8013b15 	stw	zero,1260(sp)
10003a14:	d8013a15 	stw	zero,1256(sp)
10003a18:	d8012f15 	stw	zero,1212(sp)
10003a1c:	2811883a 	mov	r8,r5
10003a20:	d8813c15 	stw	r2,1264(sp)
10003a24:	d8c12a17 	ldw	r3,1192(sp)
10003a28:	18800007 	ldb	r2,0(r3)
10003a2c:	10021326 	beq	r2,zero,1000427c <___vfprintf_internal_r+0x94c>
10003a30:	00c00944 	movi	r3,37
10003a34:	dc012a17 	ldw	r16,1192(sp)
10003a38:	10c0021e 	bne	r2,r3,10003a44 <___vfprintf_internal_r+0x114>
10003a3c:	00001606 	br	10003a98 <___vfprintf_internal_r+0x168>
10003a40:	10c08526 	beq	r2,r3,10003c58 <___vfprintf_internal_r+0x328>
10003a44:	84000044 	addi	r16,r16,1
10003a48:	80800007 	ldb	r2,0(r16)
10003a4c:	103ffc1e 	bne	r2,zero,10003a40 <__alt_data_end+0xf8003a40>
10003a50:	d9012a17 	ldw	r4,1192(sp)
10003a54:	8123c83a 	sub	r17,r16,r4
10003a58:	88000f26 	beq	r17,zero,10003a98 <___vfprintf_internal_r+0x168>
10003a5c:	d8812a17 	ldw	r2,1192(sp)
10003a60:	d8c12017 	ldw	r3,1152(sp)
10003a64:	44400115 	stw	r17,4(r8)
10003a68:	40800015 	stw	r2,0(r8)
10003a6c:	d8811f17 	ldw	r2,1148(sp)
10003a70:	1c47883a 	add	r3,r3,r17
10003a74:	d8c12015 	stw	r3,1152(sp)
10003a78:	10800044 	addi	r2,r2,1
10003a7c:	d8811f15 	stw	r2,1148(sp)
10003a80:	00c001c4 	movi	r3,7
10003a84:	1880b516 	blt	r3,r2,10003d5c <___vfprintf_internal_r+0x42c>
10003a88:	42000204 	addi	r8,r8,8
10003a8c:	d8c12f17 	ldw	r3,1212(sp)
10003a90:	1c47883a 	add	r3,r3,r17
10003a94:	d8c12f15 	stw	r3,1212(sp)
10003a98:	80800007 	ldb	r2,0(r16)
10003a9c:	1000b626 	beq	r2,zero,10003d78 <___vfprintf_internal_r+0x448>
10003aa0:	80800044 	addi	r2,r16,1
10003aa4:	84000047 	ldb	r16,1(r16)
10003aa8:	0027883a 	mov	r19,zero
10003aac:	0039883a 	mov	fp,zero
10003ab0:	dcc12b05 	stb	r19,1196(sp)
10003ab4:	d8012785 	stb	zero,1182(sp)
10003ab8:	027fffc4 	movi	r9,-1
10003abc:	d8012e15 	stw	zero,1208(sp)
10003ac0:	04401604 	movi	r17,88
10003ac4:	04800244 	movi	r18,9
10003ac8:	da012a15 	stw	r8,1192(sp)
10003acc:	e027883a 	mov	r19,fp
10003ad0:	17000044 	addi	fp,r2,1
10003ad4:	80bff804 	addi	r2,r16,-32
10003ad8:	88831236 	bltu	r17,r2,10004724 <___vfprintf_internal_r+0xdf4>
10003adc:	100490ba 	slli	r2,r2,2
10003ae0:	01040034 	movhi	r4,4096
10003ae4:	210ebd04 	addi	r4,r4,15092
10003ae8:	1105883a 	add	r2,r2,r4
10003aec:	10800017 	ldw	r2,0(r2)
10003af0:	1000683a 	jmp	r2
10003af4:	10004640 	call	11000464 <_gp+0xfe5db8>
10003af8:	10004724 	muli	zero,r2,284
10003afc:	10004724 	muli	zero,r2,284
10003b00:	1000465c 	xori	zero,r2,281
10003b04:	10004724 	muli	zero,r2,284
10003b08:	10004724 	muli	zero,r2,284
10003b0c:	10004724 	muli	zero,r2,284
10003b10:	10004724 	muli	zero,r2,284
10003b14:	10004724 	muli	zero,r2,284
10003b18:	10004724 	muli	zero,r2,284
10003b1c:	1000466c 	andhi	zero,r2,281
10003b20:	10004694 	ori	zero,r2,282
10003b24:	10004724 	muli	zero,r2,284
10003b28:	10003db0 	cmpltui	zero,r2,246
10003b2c:	10003dc0 	call	110003dc <_gp+0xfe5d30>
10003b30:	10004724 	muli	zero,r2,284
10003b34:	10003e10 	cmplti	zero,r2,248
10003b38:	10003e20 	cmpeqi	zero,r2,248
10003b3c:	10003e20 	cmpeqi	zero,r2,248
10003b40:	10003e20 	cmpeqi	zero,r2,248
10003b44:	10003e20 	cmpeqi	zero,r2,248
10003b48:	10003e20 	cmpeqi	zero,r2,248
10003b4c:	10003e20 	cmpeqi	zero,r2,248
10003b50:	10003e20 	cmpeqi	zero,r2,248
10003b54:	10003e20 	cmpeqi	zero,r2,248
10003b58:	10003e20 	cmpeqi	zero,r2,248
10003b5c:	10004724 	muli	zero,r2,284
10003b60:	10004724 	muli	zero,r2,284
10003b64:	10004724 	muli	zero,r2,284
10003b68:	10004724 	muli	zero,r2,284
10003b6c:	10004724 	muli	zero,r2,284
10003b70:	10004724 	muli	zero,r2,284
10003b74:	10004724 	muli	zero,r2,284
10003b78:	10004724 	muli	zero,r2,284
10003b7c:	10004724 	muli	zero,r2,284
10003b80:	10004724 	muli	zero,r2,284
10003b84:	10003e64 	muli	zero,r2,249
10003b88:	10004284 	addi	zero,r2,266
10003b8c:	10004724 	muli	zero,r2,284
10003b90:	10004284 	addi	zero,r2,266
10003b94:	10004724 	muli	zero,r2,284
10003b98:	10004724 	muli	zero,r2,284
10003b9c:	10004724 	muli	zero,r2,284
10003ba0:	10004724 	muli	zero,r2,284
10003ba4:	1000432c 	andhi	zero,r2,268
10003ba8:	10004724 	muli	zero,r2,284
10003bac:	10004724 	muli	zero,r2,284
10003bb0:	1000433c 	xorhi	zero,r2,268
10003bb4:	10004724 	muli	zero,r2,284
10003bb8:	10004724 	muli	zero,r2,284
10003bbc:	10004724 	muli	zero,r2,284
10003bc0:	10004724 	muli	zero,r2,284
10003bc4:	10004724 	muli	zero,r2,284
10003bc8:	10004380 	call	11000438 <_gp+0xfe5d8c>
10003bcc:	10004724 	muli	zero,r2,284
10003bd0:	10004724 	muli	zero,r2,284
10003bd4:	100043b8 	rdprs	zero,r2,270
10003bd8:	10004724 	muli	zero,r2,284
10003bdc:	10004724 	muli	zero,r2,284
10003be0:	10004724 	muli	zero,r2,284
10003be4:	10004724 	muli	zero,r2,284
10003be8:	10004724 	muli	zero,r2,284
10003bec:	10004724 	muli	zero,r2,284
10003bf0:	10004724 	muli	zero,r2,284
10003bf4:	10004724 	muli	zero,r2,284
10003bf8:	10004724 	muli	zero,r2,284
10003bfc:	10004724 	muli	zero,r2,284
10003c00:	100045f4 	orhi	zero,r2,279
10003c04:	100045a0 	cmpeqi	zero,r2,278
10003c08:	10004284 	addi	zero,r2,266
10003c0c:	10004284 	addi	zero,r2,266
10003c10:	10004284 	addi	zero,r2,266
10003c14:	100045e4 	muli	zero,r2,279
10003c18:	100045a0 	cmpeqi	zero,r2,278
10003c1c:	10004724 	muli	zero,r2,284
10003c20:	10004724 	muli	zero,r2,284
10003c24:	100044bc 	xorhi	zero,r2,274
10003c28:	10004724 	muli	zero,r2,284
10003c2c:	100044d4 	ori	zero,r2,275
10003c30:	10004514 	ori	zero,r2,276
10003c34:	10004554 	ori	zero,r2,277
10003c38:	10004420 	cmpeqi	zero,r2,272
10003c3c:	10004724 	muli	zero,r2,284
10003c40:	100046a8 	cmpgeui	zero,r2,282
10003c44:	10004724 	muli	zero,r2,284
10003c48:	10004430 	cmpltui	zero,r2,272
10003c4c:	10004724 	muli	zero,r2,284
10003c50:	10004724 	muli	zero,r2,284
10003c54:	10004470 	cmpltui	zero,r2,273
10003c58:	d9412a17 	ldw	r5,1192(sp)
10003c5c:	8163c83a 	sub	r17,r16,r5
10003c60:	003f7d06 	br	10003a58 <__alt_data_end+0xf8003a58>
10003c64:	b809883a 	mov	r4,r23
10003c68:	b00b883a 	mov	r5,r22
10003c6c:	0005a500 	call	10005a50 <__swsetup_r>
10003c70:	10002d1e 	bne	r2,zero,10003d28 <___vfprintf_internal_r+0x3f8>
10003c74:	b0c0030b 	ldhu	r3,12(r22)
10003c78:	01000284 	movi	r4,10
10003c7c:	1805883a 	mov	r2,r3
10003c80:	1080068c 	andi	r2,r2,26
10003c84:	113f541e 	bne	r2,r4,100039d8 <__alt_data_end+0xf80039d8>
10003c88:	b080038b 	ldhu	r2,14(r22)
10003c8c:	113fffcc 	andi	r4,r2,65535
10003c90:	2120001c 	xori	r4,r4,32768
10003c94:	21200004 	addi	r4,r4,-32768
10003c98:	203f4f16 	blt	r4,zero,100039d8 <__alt_data_end+0xf80039d8>
10003c9c:	b2c01917 	ldw	r11,100(r22)
10003ca0:	b2800717 	ldw	r10,28(r22)
10003ca4:	b2400917 	ldw	r9,36(r22)
10003ca8:	d9812a17 	ldw	r6,1192(sp)
10003cac:	d9c12d17 	ldw	r7,1204(sp)
10003cb0:	02010004 	movi	r8,1024
10003cb4:	18ffff4c 	andi	r3,r3,65533
10003cb8:	d881078d 	sth	r2,1054(sp)
10003cbc:	b809883a 	mov	r4,r23
10003cc0:	d8800404 	addi	r2,sp,16
10003cc4:	d9410404 	addi	r5,sp,1040
10003cc8:	d8c1070d 	sth	r3,1052(sp)
10003ccc:	dac11d15 	stw	r11,1140(sp)
10003cd0:	da810b15 	stw	r10,1068(sp)
10003cd4:	da410d15 	stw	r9,1076(sp)
10003cd8:	d8810415 	stw	r2,1040(sp)
10003cdc:	d8810815 	stw	r2,1056(sp)
10003ce0:	da010615 	stw	r8,1048(sp)
10003ce4:	da010915 	stw	r8,1060(sp)
10003ce8:	d8010a15 	stw	zero,1064(sp)
10003cec:	00039300 	call	10003930 <___vfprintf_internal_r>
10003cf0:	1021883a 	mov	r16,r2
10003cf4:	10000416 	blt	r2,zero,10003d08 <___vfprintf_internal_r+0x3d8>
10003cf8:	b809883a 	mov	r4,r23
10003cfc:	d9410404 	addi	r5,sp,1040
10003d00:	00074d00 	call	100074d0 <_fflush_r>
10003d04:	1007301e 	bne	r2,zero,100059c8 <___vfprintf_internal_r+0x2098>
10003d08:	d881070b 	ldhu	r2,1052(sp)
10003d0c:	1080100c 	andi	r2,r2,64
10003d10:	10000326 	beq	r2,zero,10003d20 <___vfprintf_internal_r+0x3f0>
10003d14:	b080030b 	ldhu	r2,12(r22)
10003d18:	10801014 	ori	r2,r2,64
10003d1c:	b080030d 	sth	r2,12(r22)
10003d20:	8005883a 	mov	r2,r16
10003d24:	00000106 	br	10003d2c <___vfprintf_internal_r+0x3fc>
10003d28:	00bfffc4 	movi	r2,-1
10003d2c:	dfc14917 	ldw	ra,1316(sp)
10003d30:	df014817 	ldw	fp,1312(sp)
10003d34:	ddc14717 	ldw	r23,1308(sp)
10003d38:	dd814617 	ldw	r22,1304(sp)
10003d3c:	dd414517 	ldw	r21,1300(sp)
10003d40:	dd014417 	ldw	r20,1296(sp)
10003d44:	dcc14317 	ldw	r19,1292(sp)
10003d48:	dc814217 	ldw	r18,1288(sp)
10003d4c:	dc414117 	ldw	r17,1284(sp)
10003d50:	dc014017 	ldw	r16,1280(sp)
10003d54:	dec14a04 	addi	sp,sp,1320
10003d58:	f800283a 	ret
10003d5c:	b809883a 	mov	r4,r23
10003d60:	b00b883a 	mov	r5,r22
10003d64:	d9811e04 	addi	r6,sp,1144
10003d68:	000a2680 	call	1000a268 <__sprint_r>
10003d6c:	1000081e 	bne	r2,zero,10003d90 <___vfprintf_internal_r+0x460>
10003d70:	da000404 	addi	r8,sp,16
10003d74:	003f4506 	br	10003a8c <__alt_data_end+0xf8003a8c>
10003d78:	d8812017 	ldw	r2,1152(sp)
10003d7c:	10000426 	beq	r2,zero,10003d90 <___vfprintf_internal_r+0x460>
10003d80:	b809883a 	mov	r4,r23
10003d84:	b00b883a 	mov	r5,r22
10003d88:	d9811e04 	addi	r6,sp,1144
10003d8c:	000a2680 	call	1000a268 <__sprint_r>
10003d90:	b080030b 	ldhu	r2,12(r22)
10003d94:	1080100c 	andi	r2,r2,64
10003d98:	103fe31e 	bne	r2,zero,10003d28 <__alt_data_end+0xf8003d28>
10003d9c:	d8812f17 	ldw	r2,1212(sp)
10003da0:	003fe206 	br	10003d2c <__alt_data_end+0xf8003d2c>
10003da4:	b809883a 	mov	r4,r23
10003da8:	0007a8c0 	call	10007a8c <__sinit>
10003dac:	003ef806 	br	10003990 <__alt_data_end+0xf8003990>
10003db0:	e005883a 	mov	r2,fp
10003db4:	9cc00114 	ori	r19,r19,4
10003db8:	e4000007 	ldb	r16,0(fp)
10003dbc:	003f4406 	br	10003ad0 <__alt_data_end+0xf8003ad0>
10003dc0:	e4000007 	ldb	r16,0(fp)
10003dc4:	01000a84 	movi	r4,42
10003dc8:	e0800044 	addi	r2,fp,1
10003dcc:	8106f626 	beq	r16,r4,100059a8 <___vfprintf_internal_r+0x2078>
10003dd0:	857ff404 	addi	r21,r16,-48
10003dd4:	1039883a 	mov	fp,r2
10003dd8:	0013883a 	mov	r9,zero
10003ddc:	957f3d36 	bltu	r18,r21,10003ad4 <__alt_data_end+0xf8003ad4>
10003de0:	0009883a 	mov	r4,zero
10003de4:	01400284 	movi	r5,10
10003de8:	00024fc0 	call	100024fc <__mulsi3>
10003dec:	e4000007 	ldb	r16,0(fp)
10003df0:	a889883a 	add	r4,r21,r2
10003df4:	e7000044 	addi	fp,fp,1
10003df8:	857ff404 	addi	r21,r16,-48
10003dfc:	957ff92e 	bgeu	r18,r21,10003de4 <__alt_data_end+0xf8003de4>
10003e00:	2013883a 	mov	r9,r4
10003e04:	203f330e 	bge	r4,zero,10003ad4 <__alt_data_end+0xf8003ad4>
10003e08:	027fffc4 	movi	r9,-1
10003e0c:	003f3106 	br	10003ad4 <__alt_data_end+0xf8003ad4>
10003e10:	9cc02014 	ori	r19,r19,128
10003e14:	e005883a 	mov	r2,fp
10003e18:	e4000007 	ldb	r16,0(fp)
10003e1c:	003f2c06 	br	10003ad0 <__alt_data_end+0xf8003ad0>
10003e20:	857ff404 	addi	r21,r16,-48
10003e24:	d8012e15 	stw	zero,1208(sp)
10003e28:	e021883a 	mov	r16,fp
10003e2c:	0009883a 	mov	r4,zero
10003e30:	da412c15 	stw	r9,1200(sp)
10003e34:	01400284 	movi	r5,10
10003e38:	00024fc0 	call	100024fc <__mulsi3>
10003e3c:	81400007 	ldb	r5,0(r16)
10003e40:	1549883a 	add	r4,r2,r21
10003e44:	e7000044 	addi	fp,fp,1
10003e48:	2d7ff404 	addi	r21,r5,-48
10003e4c:	e021883a 	mov	r16,fp
10003e50:	957ff82e 	bgeu	r18,r21,10003e34 <__alt_data_end+0xf8003e34>
10003e54:	2821883a 	mov	r16,r5
10003e58:	d9012e15 	stw	r4,1208(sp)
10003e5c:	da412c17 	ldw	r9,1200(sp)
10003e60:	003f1c06 	br	10003ad4 <__alt_data_end+0xf8003ad4>
10003e64:	da012a17 	ldw	r8,1192(sp)
10003e68:	df012a15 	stw	fp,1192(sp)
10003e6c:	9839883a 	mov	fp,r19
10003e70:	dcc12b03 	ldbu	r19,1196(sp)
10003e74:	e7000414 	ori	fp,fp,16
10003e78:	e080080c 	andi	r2,fp,32
10003e7c:	dcc12785 	stb	r19,1182(sp)
10003e80:	d8c12d17 	ldw	r3,1204(sp)
10003e84:	1001ce26 	beq	r2,zero,100045c0 <___vfprintf_internal_r+0xc90>
10003e88:	d9012d17 	ldw	r4,1204(sp)
10003e8c:	18800117 	ldw	r2,4(r3)
10003e90:	1c800017 	ldw	r18,0(r3)
10003e94:	21000204 	addi	r4,r4,8
10003e98:	d9012d15 	stw	r4,1204(sp)
10003e9c:	102b883a 	mov	r21,r2
10003ea0:	10044916 	blt	r2,zero,10004fc8 <___vfprintf_internal_r+0x1698>
10003ea4:	dcc12783 	ldbu	r19,1182(sp)
10003ea8:	da413215 	stw	r9,1224(sp)
10003eac:	00800044 	movi	r2,1
10003eb0:	9546b03a 	or	r3,r18,r21
10003eb4:	48000216 	blt	r9,zero,10003ec0 <___vfprintf_internal_r+0x590>
10003eb8:	013fdfc4 	movi	r4,-129
10003ebc:	e138703a 	and	fp,fp,r4
10003ec0:	1802251e 	bne	r3,zero,10004758 <___vfprintf_internal_r+0xe28>
10003ec4:	48031726 	beq	r9,zero,10004b24 <___vfprintf_internal_r+0x11f4>
10003ec8:	10803fcc 	andi	r2,r2,255
10003ecc:	00c00044 	movi	r3,1
10003ed0:	10c24526 	beq	r2,r3,100047e8 <___vfprintf_internal_r+0xeb8>
10003ed4:	00c00084 	movi	r3,2
10003ed8:	10c33426 	beq	r2,r3,10004bac <___vfprintf_internal_r+0x127c>
10003edc:	d8c10e04 	addi	r3,sp,1080
10003ee0:	9008d0fa 	srli	r4,r18,3
10003ee4:	a80a977a 	slli	r5,r21,29
10003ee8:	a82ad0fa 	srli	r21,r21,3
10003eec:	948001cc 	andi	r18,r18,7
10003ef0:	90800c04 	addi	r2,r18,48
10003ef4:	18ffffc4 	addi	r3,r3,-1
10003ef8:	2924b03a 	or	r18,r5,r4
10003efc:	18800005 	stb	r2,0(r3)
10003f00:	9548b03a 	or	r4,r18,r21
10003f04:	203ff61e 	bne	r4,zero,10003ee0 <__alt_data_end+0xf8003ee0>
10003f08:	e100004c 	andi	r4,fp,1
10003f0c:	d8c13115 	stw	r3,1220(sp)
10003f10:	20039a1e 	bne	r4,zero,10004d7c <___vfprintf_internal_r+0x144c>
10003f14:	d8812817 	ldw	r2,1184(sp)
10003f18:	10e3c83a 	sub	r17,r2,r3
10003f1c:	8805883a 	mov	r2,r17
10003f20:	8a40010e 	bge	r17,r9,10003f28 <___vfprintf_internal_r+0x5f8>
10003f24:	4805883a 	mov	r2,r9
10003f28:	d8812b15 	stw	r2,1196(sp)
10003f2c:	d8013415 	stw	zero,1232(sp)
10003f30:	98803fcc 	andi	r2,r19,255
10003f34:	1080201c 	xori	r2,r2,128
10003f38:	10bfe004 	addi	r2,r2,-128
10003f3c:	10000326 	beq	r2,zero,10003f4c <___vfprintf_internal_r+0x61c>
10003f40:	d8c12b17 	ldw	r3,1196(sp)
10003f44:	18c00044 	addi	r3,r3,1
10003f48:	d8c12b15 	stw	r3,1196(sp)
10003f4c:	e0c0008c 	andi	r3,fp,2
10003f50:	d8c12c15 	stw	r3,1200(sp)
10003f54:	18000326 	beq	r3,zero,10003f64 <___vfprintf_internal_r+0x634>
10003f58:	d8c12b17 	ldw	r3,1196(sp)
10003f5c:	18c00084 	addi	r3,r3,2
10003f60:	d8c12b15 	stw	r3,1196(sp)
10003f64:	e0c0210c 	andi	r3,fp,132
10003f68:	d8c13015 	stw	r3,1216(sp)
10003f6c:	1801f81e 	bne	r3,zero,10004750 <___vfprintf_internal_r+0xe20>
10003f70:	d9012e17 	ldw	r4,1208(sp)
10003f74:	d8c12b17 	ldw	r3,1196(sp)
10003f78:	20ebc83a 	sub	r21,r4,r3
10003f7c:	0541f40e 	bge	zero,r21,10004750 <___vfprintf_internal_r+0xe20>
10003f80:	02400404 	movi	r9,16
10003f84:	d8c12017 	ldw	r3,1152(sp)
10003f88:	d8811f17 	ldw	r2,1148(sp)
10003f8c:	4d45750e 	bge	r9,r21,10005564 <___vfprintf_internal_r+0x1c34>
10003f90:	01440074 	movhi	r5,4097
10003f94:	29429584 	addi	r5,r5,2646
10003f98:	d9413615 	stw	r5,1240(sp)
10003f9c:	4827883a 	mov	r19,r9
10003fa0:	048001c4 	movi	r18,7
10003fa4:	00000306 	br	10003fb4 <___vfprintf_internal_r+0x684>
10003fa8:	ad7ffc04 	addi	r21,r21,-16
10003fac:	42000204 	addi	r8,r8,8
10003fb0:	9d40130e 	bge	r19,r21,10004000 <___vfprintf_internal_r+0x6d0>
10003fb4:	01040074 	movhi	r4,4097
10003fb8:	18c00404 	addi	r3,r3,16
10003fbc:	10800044 	addi	r2,r2,1
10003fc0:	21029584 	addi	r4,r4,2646
10003fc4:	41000015 	stw	r4,0(r8)
10003fc8:	44c00115 	stw	r19,4(r8)
10003fcc:	d8c12015 	stw	r3,1152(sp)
10003fd0:	d8811f15 	stw	r2,1148(sp)
10003fd4:	90bff40e 	bge	r18,r2,10003fa8 <__alt_data_end+0xf8003fa8>
10003fd8:	b809883a 	mov	r4,r23
10003fdc:	b00b883a 	mov	r5,r22
10003fe0:	d9811e04 	addi	r6,sp,1144
10003fe4:	000a2680 	call	1000a268 <__sprint_r>
10003fe8:	103f691e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
10003fec:	ad7ffc04 	addi	r21,r21,-16
10003ff0:	d8c12017 	ldw	r3,1152(sp)
10003ff4:	d8811f17 	ldw	r2,1148(sp)
10003ff8:	da000404 	addi	r8,sp,16
10003ffc:	9d7fed16 	blt	r19,r21,10003fb4 <__alt_data_end+0xf8003fb4>
10004000:	d9413617 	ldw	r5,1240(sp)
10004004:	a8c7883a 	add	r3,r21,r3
10004008:	10800044 	addi	r2,r2,1
1000400c:	41400015 	stw	r5,0(r8)
10004010:	45400115 	stw	r21,4(r8)
10004014:	d8c12015 	stw	r3,1152(sp)
10004018:	d8811f15 	stw	r2,1148(sp)
1000401c:	010001c4 	movi	r4,7
10004020:	20832b16 	blt	r4,r2,10004cd0 <___vfprintf_internal_r+0x13a0>
10004024:	d8812787 	ldb	r2,1182(sp)
10004028:	42000204 	addi	r8,r8,8
1000402c:	10000c26 	beq	r2,zero,10004060 <___vfprintf_internal_r+0x730>
10004030:	d8811f17 	ldw	r2,1148(sp)
10004034:	d9012784 	addi	r4,sp,1182
10004038:	18c00044 	addi	r3,r3,1
1000403c:	10800044 	addi	r2,r2,1
10004040:	41000015 	stw	r4,0(r8)
10004044:	01000044 	movi	r4,1
10004048:	41000115 	stw	r4,4(r8)
1000404c:	d8c12015 	stw	r3,1152(sp)
10004050:	d8811f15 	stw	r2,1148(sp)
10004054:	010001c4 	movi	r4,7
10004058:	2082c416 	blt	r4,r2,10004b6c <___vfprintf_internal_r+0x123c>
1000405c:	42000204 	addi	r8,r8,8
10004060:	d8812c17 	ldw	r2,1200(sp)
10004064:	10000c26 	beq	r2,zero,10004098 <___vfprintf_internal_r+0x768>
10004068:	d8811f17 	ldw	r2,1148(sp)
1000406c:	d9012704 	addi	r4,sp,1180
10004070:	18c00084 	addi	r3,r3,2
10004074:	10800044 	addi	r2,r2,1
10004078:	41000015 	stw	r4,0(r8)
1000407c:	01000084 	movi	r4,2
10004080:	41000115 	stw	r4,4(r8)
10004084:	d8c12015 	stw	r3,1152(sp)
10004088:	d8811f15 	stw	r2,1148(sp)
1000408c:	010001c4 	movi	r4,7
10004090:	2082be16 	blt	r4,r2,10004b8c <___vfprintf_internal_r+0x125c>
10004094:	42000204 	addi	r8,r8,8
10004098:	d9013017 	ldw	r4,1216(sp)
1000409c:	00802004 	movi	r2,128
100040a0:	20822026 	beq	r4,r2,10004924 <___vfprintf_internal_r+0xff4>
100040a4:	d9413217 	ldw	r5,1224(sp)
100040a8:	2c67c83a 	sub	r19,r5,r17
100040ac:	04c0260e 	bge	zero,r19,10004148 <___vfprintf_internal_r+0x818>
100040b0:	05400404 	movi	r21,16
100040b4:	d8811f17 	ldw	r2,1148(sp)
100040b8:	acc4720e 	bge	r21,r19,10005284 <___vfprintf_internal_r+0x1954>
100040bc:	01440074 	movhi	r5,4097
100040c0:	29429184 	addi	r5,r5,2630
100040c4:	d9412c15 	stw	r5,1200(sp)
100040c8:	048001c4 	movi	r18,7
100040cc:	00000306 	br	100040dc <___vfprintf_internal_r+0x7ac>
100040d0:	9cfffc04 	addi	r19,r19,-16
100040d4:	42000204 	addi	r8,r8,8
100040d8:	acc0110e 	bge	r21,r19,10004120 <___vfprintf_internal_r+0x7f0>
100040dc:	18c00404 	addi	r3,r3,16
100040e0:	10800044 	addi	r2,r2,1
100040e4:	45000015 	stw	r20,0(r8)
100040e8:	45400115 	stw	r21,4(r8)
100040ec:	d8c12015 	stw	r3,1152(sp)
100040f0:	d8811f15 	stw	r2,1148(sp)
100040f4:	90bff60e 	bge	r18,r2,100040d0 <__alt_data_end+0xf80040d0>
100040f8:	b809883a 	mov	r4,r23
100040fc:	b00b883a 	mov	r5,r22
10004100:	d9811e04 	addi	r6,sp,1144
10004104:	000a2680 	call	1000a268 <__sprint_r>
10004108:	103f211e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
1000410c:	9cfffc04 	addi	r19,r19,-16
10004110:	d8c12017 	ldw	r3,1152(sp)
10004114:	d8811f17 	ldw	r2,1148(sp)
10004118:	da000404 	addi	r8,sp,16
1000411c:	acffef16 	blt	r21,r19,100040dc <__alt_data_end+0xf80040dc>
10004120:	d9012c17 	ldw	r4,1200(sp)
10004124:	1cc7883a 	add	r3,r3,r19
10004128:	10800044 	addi	r2,r2,1
1000412c:	41000015 	stw	r4,0(r8)
10004130:	44c00115 	stw	r19,4(r8)
10004134:	d8c12015 	stw	r3,1152(sp)
10004138:	d8811f15 	stw	r2,1148(sp)
1000413c:	010001c4 	movi	r4,7
10004140:	20828216 	blt	r4,r2,10004b4c <___vfprintf_internal_r+0x121c>
10004144:	42000204 	addi	r8,r8,8
10004148:	e080400c 	andi	r2,fp,256
1000414c:	1001ac1e 	bne	r2,zero,10004800 <___vfprintf_internal_r+0xed0>
10004150:	d8811f17 	ldw	r2,1148(sp)
10004154:	d9413117 	ldw	r5,1220(sp)
10004158:	1c47883a 	add	r3,r3,r17
1000415c:	10800044 	addi	r2,r2,1
10004160:	41400015 	stw	r5,0(r8)
10004164:	44400115 	stw	r17,4(r8)
10004168:	d8c12015 	stw	r3,1152(sp)
1000416c:	d8811f15 	stw	r2,1148(sp)
10004170:	010001c4 	movi	r4,7
10004174:	20825d16 	blt	r4,r2,10004aec <___vfprintf_internal_r+0x11bc>
10004178:	42000204 	addi	r8,r8,8
1000417c:	e080010c 	andi	r2,fp,4
10004180:	10003126 	beq	r2,zero,10004248 <___vfprintf_internal_r+0x918>
10004184:	d8812e17 	ldw	r2,1208(sp)
10004188:	d9012b17 	ldw	r4,1196(sp)
1000418c:	1121c83a 	sub	r16,r2,r4
10004190:	04002d0e 	bge	zero,r16,10004248 <___vfprintf_internal_r+0x918>
10004194:	04400404 	movi	r17,16
10004198:	d8811f17 	ldw	r2,1148(sp)
1000419c:	8c05340e 	bge	r17,r16,10005670 <___vfprintf_internal_r+0x1d40>
100041a0:	01040074 	movhi	r4,4097
100041a4:	21029584 	addi	r4,r4,2646
100041a8:	d9013615 	stw	r4,1240(sp)
100041ac:	048001c4 	movi	r18,7
100041b0:	00000306 	br	100041c0 <___vfprintf_internal_r+0x890>
100041b4:	843ffc04 	addi	r16,r16,-16
100041b8:	42000204 	addi	r8,r8,8
100041bc:	8c00130e 	bge	r17,r16,1000420c <___vfprintf_internal_r+0x8dc>
100041c0:	01440074 	movhi	r5,4097
100041c4:	18c00404 	addi	r3,r3,16
100041c8:	10800044 	addi	r2,r2,1
100041cc:	29429584 	addi	r5,r5,2646
100041d0:	41400015 	stw	r5,0(r8)
100041d4:	44400115 	stw	r17,4(r8)
100041d8:	d8c12015 	stw	r3,1152(sp)
100041dc:	d8811f15 	stw	r2,1148(sp)
100041e0:	90bff40e 	bge	r18,r2,100041b4 <__alt_data_end+0xf80041b4>
100041e4:	b809883a 	mov	r4,r23
100041e8:	b00b883a 	mov	r5,r22
100041ec:	d9811e04 	addi	r6,sp,1144
100041f0:	000a2680 	call	1000a268 <__sprint_r>
100041f4:	103ee61e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
100041f8:	843ffc04 	addi	r16,r16,-16
100041fc:	d8c12017 	ldw	r3,1152(sp)
10004200:	d8811f17 	ldw	r2,1148(sp)
10004204:	da000404 	addi	r8,sp,16
10004208:	8c3fed16 	blt	r17,r16,100041c0 <__alt_data_end+0xf80041c0>
1000420c:	d9013617 	ldw	r4,1240(sp)
10004210:	1c07883a 	add	r3,r3,r16
10004214:	10800044 	addi	r2,r2,1
10004218:	41000015 	stw	r4,0(r8)
1000421c:	44000115 	stw	r16,4(r8)
10004220:	d8c12015 	stw	r3,1152(sp)
10004224:	d8811f15 	stw	r2,1148(sp)
10004228:	010001c4 	movi	r4,7
1000422c:	2080060e 	bge	r4,r2,10004248 <___vfprintf_internal_r+0x918>
10004230:	b809883a 	mov	r4,r23
10004234:	b00b883a 	mov	r5,r22
10004238:	d9811e04 	addi	r6,sp,1144
1000423c:	000a2680 	call	1000a268 <__sprint_r>
10004240:	103ed31e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
10004244:	d8c12017 	ldw	r3,1152(sp)
10004248:	df012b17 	ldw	fp,1196(sp)
1000424c:	d9412e17 	ldw	r5,1208(sp)
10004250:	e140010e 	bge	fp,r5,10004258 <___vfprintf_internal_r+0x928>
10004254:	2839883a 	mov	fp,r5
10004258:	d8812f17 	ldw	r2,1212(sp)
1000425c:	1705883a 	add	r2,r2,fp
10004260:	d8812f15 	stw	r2,1212(sp)
10004264:	1802291e 	bne	r3,zero,10004b0c <___vfprintf_internal_r+0x11dc>
10004268:	d8c12a17 	ldw	r3,1192(sp)
1000426c:	d8011f15 	stw	zero,1148(sp)
10004270:	da000404 	addi	r8,sp,16
10004274:	18800007 	ldb	r2,0(r3)
10004278:	103ded1e 	bne	r2,zero,10003a30 <__alt_data_end+0xf8003a30>
1000427c:	dc012a17 	ldw	r16,1192(sp)
10004280:	003e0506 	br	10003a98 <__alt_data_end+0xf8003a98>
10004284:	d9012d17 	ldw	r4,1204(sp)
10004288:	d9412d17 	ldw	r5,1204(sp)
1000428c:	da012a17 	ldw	r8,1192(sp)
10004290:	21000017 	ldw	r4,0(r4)
10004294:	29400117 	ldw	r5,4(r5)
10004298:	df012a15 	stw	fp,1192(sp)
1000429c:	9839883a 	mov	fp,r19
100042a0:	dcc12b03 	ldbu	r19,1196(sp)
100042a4:	d9013715 	stw	r4,1244(sp)
100042a8:	d9413915 	stw	r5,1252(sp)
100042ac:	da013f15 	stw	r8,1276(sp)
100042b0:	da413e15 	stw	r9,1272(sp)
100042b4:	dcc12785 	stb	r19,1182(sp)
100042b8:	0009e2c0 	call	10009e2c <__fpclassifyd>
100042bc:	d8c12d17 	ldw	r3,1204(sp)
100042c0:	04400044 	movi	r17,1
100042c4:	da013f17 	ldw	r8,1276(sp)
100042c8:	1c800204 	addi	r18,r3,8
100042cc:	da413e17 	ldw	r9,1272(sp)
100042d0:	d9013717 	ldw	r4,1244(sp)
100042d4:	d9413917 	ldw	r5,1252(sp)
100042d8:	1443451e 	bne	r2,r17,10004ff0 <___vfprintf_internal_r+0x16c0>
100042dc:	000d883a 	mov	r6,zero
100042e0:	000f883a 	mov	r7,zero
100042e4:	000d7a40 	call	1000d7a4 <__ledf2>
100042e8:	da013f17 	ldw	r8,1276(sp)
100042ec:	1004fe16 	blt	r2,zero,100056e8 <___vfprintf_internal_r+0x1db8>
100042f0:	dcc12783 	ldbu	r19,1182(sp)
100042f4:	008011c4 	movi	r2,71
100042f8:	14045d0e 	bge	r2,r16,10005470 <___vfprintf_internal_r+0x1b40>
100042fc:	01440074 	movhi	r5,4097
10004300:	29428204 	addi	r5,r5,2568
10004304:	d9413115 	stw	r5,1220(sp)
10004308:	00c000c4 	movi	r3,3
1000430c:	00bfdfc4 	movi	r2,-129
10004310:	d8c12b15 	stw	r3,1196(sp)
10004314:	e0b8703a 	and	fp,fp,r2
10004318:	dc812d15 	stw	r18,1204(sp)
1000431c:	1823883a 	mov	r17,r3
10004320:	d8013215 	stw	zero,1224(sp)
10004324:	d8013415 	stw	zero,1232(sp)
10004328:	003f0106 	br	10003f30 <__alt_data_end+0xf8003f30>
1000432c:	9cc00214 	ori	r19,r19,8
10004330:	e005883a 	mov	r2,fp
10004334:	e4000007 	ldb	r16,0(fp)
10004338:	003de506 	br	10003ad0 <__alt_data_end+0xf8003ad0>
1000433c:	da012a17 	ldw	r8,1192(sp)
10004340:	df012a15 	stw	fp,1192(sp)
10004344:	9f000414 	ori	fp,r19,16
10004348:	e0c0080c 	andi	r3,fp,32
1000434c:	d8812d17 	ldw	r2,1204(sp)
10004350:	18007626 	beq	r3,zero,1000452c <___vfprintf_internal_r+0xbfc>
10004354:	d9412d17 	ldw	r5,1204(sp)
10004358:	14800017 	ldw	r18,0(r2)
1000435c:	15400117 	ldw	r21,4(r2)
10004360:	29400204 	addi	r5,r5,8
10004364:	d9412d15 	stw	r5,1204(sp)
10004368:	0005883a 	mov	r2,zero
1000436c:	9546b03a 	or	r3,r18,r21
10004370:	d8012785 	stb	zero,1182(sp)
10004374:	da413215 	stw	r9,1224(sp)
10004378:	0027883a 	mov	r19,zero
1000437c:	003ecd06 	br	10003eb4 <__alt_data_end+0xf8003eb4>
10004380:	da012a17 	ldw	r8,1192(sp)
10004384:	df012a15 	stw	fp,1192(sp)
10004388:	9f000414 	ori	fp,r19,16
1000438c:	e0c0080c 	andi	r3,fp,32
10004390:	d8812d17 	ldw	r2,1204(sp)
10004394:	18002c26 	beq	r3,zero,10004448 <___vfprintf_internal_r+0xb18>
10004398:	d9012d17 	ldw	r4,1204(sp)
1000439c:	14800017 	ldw	r18,0(r2)
100043a0:	15400117 	ldw	r21,4(r2)
100043a4:	21000204 	addi	r4,r4,8
100043a8:	d9012d15 	stw	r4,1204(sp)
100043ac:	00800044 	movi	r2,1
100043b0:	9546b03a 	or	r3,r18,r21
100043b4:	003fee06 	br	10004370 <__alt_data_end+0xf8004370>
100043b8:	da012a17 	ldw	r8,1192(sp)
100043bc:	df012a15 	stw	fp,1192(sp)
100043c0:	9839883a 	mov	fp,r19
100043c4:	dcc12b03 	ldbu	r19,1196(sp)
100043c8:	01440074 	movhi	r5,4097
100043cc:	29428504 	addi	r5,r5,2580
100043d0:	dcc12785 	stb	r19,1182(sp)
100043d4:	d9413b15 	stw	r5,1260(sp)
100043d8:	e0c0080c 	andi	r3,fp,32
100043dc:	d8812d17 	ldw	r2,1204(sp)
100043e0:	18002e26 	beq	r3,zero,1000449c <___vfprintf_internal_r+0xb6c>
100043e4:	d9412d17 	ldw	r5,1204(sp)
100043e8:	14800017 	ldw	r18,0(r2)
100043ec:	15400117 	ldw	r21,4(r2)
100043f0:	29400204 	addi	r5,r5,8
100043f4:	d9412d15 	stw	r5,1204(sp)
100043f8:	e080004c 	andi	r2,fp,1
100043fc:	10025c26 	beq	r2,zero,10004d70 <___vfprintf_internal_r+0x1440>
10004400:	9546b03a 	or	r3,r18,r21
10004404:	18038f26 	beq	r3,zero,10005244 <___vfprintf_internal_r+0x1914>
10004408:	00800c04 	movi	r2,48
1000440c:	d8812705 	stb	r2,1180(sp)
10004410:	dc012745 	stb	r16,1181(sp)
10004414:	e7000094 	ori	fp,fp,2
10004418:	00800084 	movi	r2,2
1000441c:	003fd406 	br	10004370 <__alt_data_end+0xf8004370>
10004420:	9cc00814 	ori	r19,r19,32
10004424:	e005883a 	mov	r2,fp
10004428:	e4000007 	ldb	r16,0(fp)
1000442c:	003da806 	br	10003ad0 <__alt_data_end+0xf8003ad0>
10004430:	da012a17 	ldw	r8,1192(sp)
10004434:	df012a15 	stw	fp,1192(sp)
10004438:	9839883a 	mov	fp,r19
1000443c:	e0c0080c 	andi	r3,fp,32
10004440:	d8812d17 	ldw	r2,1204(sp)
10004444:	183fd41e 	bne	r3,zero,10004398 <__alt_data_end+0xf8004398>
10004448:	e0c0040c 	andi	r3,fp,16
1000444c:	18035f26 	beq	r3,zero,100051cc <___vfprintf_internal_r+0x189c>
10004450:	d9412d17 	ldw	r5,1204(sp)
10004454:	14800017 	ldw	r18,0(r2)
10004458:	002b883a 	mov	r21,zero
1000445c:	29400104 	addi	r5,r5,4
10004460:	d9412d15 	stw	r5,1204(sp)
10004464:	00800044 	movi	r2,1
10004468:	9007883a 	mov	r3,r18
1000446c:	003fc006 	br	10004370 <__alt_data_end+0xf8004370>
10004470:	da012a17 	ldw	r8,1192(sp)
10004474:	df012a15 	stw	fp,1192(sp)
10004478:	9839883a 	mov	fp,r19
1000447c:	dcc12b03 	ldbu	r19,1196(sp)
10004480:	01040074 	movhi	r4,4097
10004484:	21028a04 	addi	r4,r4,2600
10004488:	d9013b15 	stw	r4,1260(sp)
1000448c:	dcc12785 	stb	r19,1182(sp)
10004490:	e0c0080c 	andi	r3,fp,32
10004494:	d8812d17 	ldw	r2,1204(sp)
10004498:	183fd21e 	bne	r3,zero,100043e4 <__alt_data_end+0xf80043e4>
1000449c:	e0c0040c 	andi	r3,fp,16
100044a0:	18035426 	beq	r3,zero,100051f4 <___vfprintf_internal_r+0x18c4>
100044a4:	d8c12d17 	ldw	r3,1204(sp)
100044a8:	14800017 	ldw	r18,0(r2)
100044ac:	002b883a 	mov	r21,zero
100044b0:	18c00104 	addi	r3,r3,4
100044b4:	d8c12d15 	stw	r3,1204(sp)
100044b8:	003fcf06 	br	100043f8 <__alt_data_end+0xf80043f8>
100044bc:	e4000007 	ldb	r16,0(fp)
100044c0:	00801b04 	movi	r2,108
100044c4:	8083f726 	beq	r16,r2,100054a4 <___vfprintf_internal_r+0x1b74>
100044c8:	9cc00414 	ori	r19,r19,16
100044cc:	e005883a 	mov	r2,fp
100044d0:	003d7f06 	br	10003ad0 <__alt_data_end+0xf8003ad0>
100044d4:	da012a17 	ldw	r8,1192(sp)
100044d8:	df012a15 	stw	fp,1192(sp)
100044dc:	9839883a 	mov	fp,r19
100044e0:	dcc12b03 	ldbu	r19,1196(sp)
100044e4:	e080080c 	andi	r2,fp,32
100044e8:	dcc12785 	stb	r19,1182(sp)
100044ec:	10032226 	beq	r2,zero,10005178 <___vfprintf_internal_r+0x1848>
100044f0:	d9412d17 	ldw	r5,1204(sp)
100044f4:	d9012f17 	ldw	r4,1212(sp)
100044f8:	28800017 	ldw	r2,0(r5)
100044fc:	2007d7fa 	srai	r3,r4,31
10004500:	29400104 	addi	r5,r5,4
10004504:	d9412d15 	stw	r5,1204(sp)
10004508:	11000015 	stw	r4,0(r2)
1000450c:	10c00115 	stw	r3,4(r2)
10004510:	003d4406 	br	10003a24 <__alt_data_end+0xf8003a24>
10004514:	da012a17 	ldw	r8,1192(sp)
10004518:	df012a15 	stw	fp,1192(sp)
1000451c:	9839883a 	mov	fp,r19
10004520:	e0c0080c 	andi	r3,fp,32
10004524:	d8812d17 	ldw	r2,1204(sp)
10004528:	183f8a1e 	bne	r3,zero,10004354 <__alt_data_end+0xf8004354>
1000452c:	e0c0040c 	andi	r3,fp,16
10004530:	18031c26 	beq	r3,zero,100051a4 <___vfprintf_internal_r+0x1874>
10004534:	14800017 	ldw	r18,0(r2)
10004538:	d8812d17 	ldw	r2,1204(sp)
1000453c:	002b883a 	mov	r21,zero
10004540:	9007883a 	mov	r3,r18
10004544:	10800104 	addi	r2,r2,4
10004548:	d8812d15 	stw	r2,1204(sp)
1000454c:	0005883a 	mov	r2,zero
10004550:	003f8706 	br	10004370 <__alt_data_end+0xf8004370>
10004554:	d9412d17 	ldw	r5,1204(sp)
10004558:	00800c04 	movi	r2,48
1000455c:	d8812705 	stb	r2,1180(sp)
10004560:	2c800017 	ldw	r18,0(r5)
10004564:	00801e04 	movi	r2,120
10004568:	d8812745 	stb	r2,1181(sp)
1000456c:	00840074 	movhi	r2,4097
10004570:	10828a04 	addi	r2,r2,2600
10004574:	29400104 	addi	r5,r5,4
10004578:	da012a17 	ldw	r8,1192(sp)
1000457c:	d8813b15 	stw	r2,1260(sp)
10004580:	df012a15 	stw	fp,1192(sp)
10004584:	002b883a 	mov	r21,zero
10004588:	9f000094 	ori	fp,r19,2
1000458c:	d9412d15 	stw	r5,1204(sp)
10004590:	00800084 	movi	r2,2
10004594:	04001e04 	movi	r16,120
10004598:	9007883a 	mov	r3,r18
1000459c:	003f7406 	br	10004370 <__alt_data_end+0xf8004370>
100045a0:	da012a17 	ldw	r8,1192(sp)
100045a4:	df012a15 	stw	fp,1192(sp)
100045a8:	9839883a 	mov	fp,r19
100045ac:	dcc12b03 	ldbu	r19,1196(sp)
100045b0:	e080080c 	andi	r2,fp,32
100045b4:	d8c12d17 	ldw	r3,1204(sp)
100045b8:	dcc12785 	stb	r19,1182(sp)
100045bc:	103e321e 	bne	r2,zero,10003e88 <__alt_data_end+0xf8003e88>
100045c0:	e080040c 	andi	r2,fp,16
100045c4:	10031326 	beq	r2,zero,10005214 <___vfprintf_internal_r+0x18e4>
100045c8:	1c800017 	ldw	r18,0(r3)
100045cc:	d9412d17 	ldw	r5,1204(sp)
100045d0:	902bd7fa 	srai	r21,r18,31
100045d4:	29400104 	addi	r5,r5,4
100045d8:	d9412d15 	stw	r5,1204(sp)
100045dc:	a805883a 	mov	r2,r21
100045e0:	003e2f06 	br	10003ea0 <__alt_data_end+0xf8003ea0>
100045e4:	9cc01014 	ori	r19,r19,64
100045e8:	e005883a 	mov	r2,fp
100045ec:	e4000007 	ldb	r16,0(fp)
100045f0:	003d3706 	br	10003ad0 <__alt_data_end+0xf8003ad0>
100045f4:	d8c12d17 	ldw	r3,1204(sp)
100045f8:	d9012d17 	ldw	r4,1204(sp)
100045fc:	da012a17 	ldw	r8,1192(sp)
10004600:	18800017 	ldw	r2,0(r3)
10004604:	21000104 	addi	r4,r4,4
10004608:	00c00044 	movi	r3,1
1000460c:	df012a15 	stw	fp,1192(sp)
10004610:	d8c12b15 	stw	r3,1196(sp)
10004614:	9839883a 	mov	fp,r19
10004618:	d8012785 	stb	zero,1182(sp)
1000461c:	d8810405 	stb	r2,1040(sp)
10004620:	d9012d15 	stw	r4,1204(sp)
10004624:	1823883a 	mov	r17,r3
10004628:	d8c10404 	addi	r3,sp,1040
1000462c:	d8013215 	stw	zero,1224(sp)
10004630:	d8013415 	stw	zero,1232(sp)
10004634:	d8c13115 	stw	r3,1220(sp)
10004638:	0005883a 	mov	r2,zero
1000463c:	003e4306 	br	10003f4c <__alt_data_end+0xf8003f4c>
10004640:	d8812b07 	ldb	r2,1196(sp)
10004644:	1002fc1e 	bne	r2,zero,10005238 <___vfprintf_internal_r+0x1908>
10004648:	00c00804 	movi	r3,32
1000464c:	d8c12b05 	stb	r3,1196(sp)
10004650:	e005883a 	mov	r2,fp
10004654:	e4000007 	ldb	r16,0(fp)
10004658:	003d1d06 	br	10003ad0 <__alt_data_end+0xf8003ad0>
1000465c:	9cc00054 	ori	r19,r19,1
10004660:	e005883a 	mov	r2,fp
10004664:	e4000007 	ldb	r16,0(fp)
10004668:	003d1906 	br	10003ad0 <__alt_data_end+0xf8003ad0>
1000466c:	d9012d17 	ldw	r4,1204(sp)
10004670:	d9412d17 	ldw	r5,1204(sp)
10004674:	21000017 	ldw	r4,0(r4)
10004678:	28c00104 	addi	r3,r5,4
1000467c:	d9012e15 	stw	r4,1208(sp)
10004680:	20038c16 	blt	r4,zero,100054b4 <___vfprintf_internal_r+0x1b84>
10004684:	d8c12d15 	stw	r3,1204(sp)
10004688:	e005883a 	mov	r2,fp
1000468c:	e4000007 	ldb	r16,0(fp)
10004690:	003d0f06 	br	10003ad0 <__alt_data_end+0xf8003ad0>
10004694:	00c00ac4 	movi	r3,43
10004698:	d8c12b05 	stb	r3,1196(sp)
1000469c:	e005883a 	mov	r2,fp
100046a0:	e4000007 	ldb	r16,0(fp)
100046a4:	003d0a06 	br	10003ad0 <__alt_data_end+0xf8003ad0>
100046a8:	d8c12d17 	ldw	r3,1204(sp)
100046ac:	d9012d17 	ldw	r4,1204(sp)
100046b0:	da012a17 	ldw	r8,1192(sp)
100046b4:	18c00017 	ldw	r3,0(r3)
100046b8:	df012a15 	stw	fp,1192(sp)
100046bc:	d8012785 	stb	zero,1182(sp)
100046c0:	d8c13115 	stw	r3,1220(sp)
100046c4:	9839883a 	mov	fp,r19
100046c8:	24800104 	addi	r18,r4,4
100046cc:	1803f726 	beq	r3,zero,100056ac <___vfprintf_internal_r+0x1d7c>
100046d0:	d9013117 	ldw	r4,1220(sp)
100046d4:	48038916 	blt	r9,zero,100054fc <___vfprintf_internal_r+0x1bcc>
100046d8:	480d883a 	mov	r6,r9
100046dc:	000b883a 	mov	r5,zero
100046e0:	da013f15 	stw	r8,1276(sp)
100046e4:	da413e15 	stw	r9,1272(sp)
100046e8:	0008aa00 	call	10008aa0 <memchr>
100046ec:	da013f17 	ldw	r8,1276(sp)
100046f0:	da413e17 	ldw	r9,1272(sp)
100046f4:	10045926 	beq	r2,zero,1000585c <___vfprintf_internal_r+0x1f2c>
100046f8:	d8c13117 	ldw	r3,1220(sp)
100046fc:	10e3c83a 	sub	r17,r2,r3
10004700:	4c433516 	blt	r9,r17,100053d8 <___vfprintf_internal_r+0x1aa8>
10004704:	8805883a 	mov	r2,r17
10004708:	88038116 	blt	r17,zero,10005510 <___vfprintf_internal_r+0x1be0>
1000470c:	dcc12783 	ldbu	r19,1182(sp)
10004710:	d8812b15 	stw	r2,1196(sp)
10004714:	dc812d15 	stw	r18,1204(sp)
10004718:	d8013215 	stw	zero,1224(sp)
1000471c:	d8013415 	stw	zero,1232(sp)
10004720:	003e0306 	br	10003f30 <__alt_data_end+0xf8003f30>
10004724:	da012a17 	ldw	r8,1192(sp)
10004728:	df012a15 	stw	fp,1192(sp)
1000472c:	9839883a 	mov	fp,r19
10004730:	dcc12b03 	ldbu	r19,1196(sp)
10004734:	dcc12785 	stb	r19,1182(sp)
10004738:	803d8f26 	beq	r16,zero,10003d78 <__alt_data_end+0xf8003d78>
1000473c:	00c00044 	movi	r3,1
10004740:	d8c12b15 	stw	r3,1196(sp)
10004744:	dc010405 	stb	r16,1040(sp)
10004748:	d8012785 	stb	zero,1182(sp)
1000474c:	003fb506 	br	10004624 <__alt_data_end+0xf8004624>
10004750:	d8c12017 	ldw	r3,1152(sp)
10004754:	003e3506 	br	1000402c <__alt_data_end+0xf800402c>
10004758:	10803fcc 	andi	r2,r2,255
1000475c:	00c00044 	movi	r3,1
10004760:	10fddc1e 	bne	r2,r3,10003ed4 <__alt_data_end+0xf8003ed4>
10004764:	a800021e 	bne	r21,zero,10004770 <___vfprintf_internal_r+0xe40>
10004768:	00800244 	movi	r2,9
1000476c:	14801e2e 	bgeu	r2,r18,100047e8 <___vfprintf_internal_r+0xeb8>
10004770:	dc012b15 	stw	r16,1196(sp)
10004774:	dc410e04 	addi	r17,sp,1080
10004778:	9021883a 	mov	r16,r18
1000477c:	da012c15 	stw	r8,1200(sp)
10004780:	a825883a 	mov	r18,r21
10004784:	482b883a 	mov	r21,r9
10004788:	8009883a 	mov	r4,r16
1000478c:	900b883a 	mov	r5,r18
10004790:	01800284 	movi	r6,10
10004794:	000f883a 	mov	r7,zero
10004798:	0001db40 	call	10001db4 <__umoddi3>
1000479c:	10800c04 	addi	r2,r2,48
100047a0:	8c7fffc4 	addi	r17,r17,-1
100047a4:	8009883a 	mov	r4,r16
100047a8:	900b883a 	mov	r5,r18
100047ac:	01800284 	movi	r6,10
100047b0:	000f883a 	mov	r7,zero
100047b4:	88800005 	stb	r2,0(r17)
100047b8:	00017740 	call	10001774 <__udivdi3>
100047bc:	1021883a 	mov	r16,r2
100047c0:	10c4b03a 	or	r2,r2,r3
100047c4:	1825883a 	mov	r18,r3
100047c8:	103fef1e 	bne	r2,zero,10004788 <__alt_data_end+0xf8004788>
100047cc:	d9012817 	ldw	r4,1184(sp)
100047d0:	dc413115 	stw	r17,1220(sp)
100047d4:	dc012b17 	ldw	r16,1196(sp)
100047d8:	da012c17 	ldw	r8,1200(sp)
100047dc:	a813883a 	mov	r9,r21
100047e0:	2463c83a 	sub	r17,r4,r17
100047e4:	003dcd06 	br	10003f1c <__alt_data_end+0xf8003f1c>
100047e8:	94800c04 	addi	r18,r18,48
100047ec:	d8c10dc4 	addi	r3,sp,1079
100047f0:	dc810dc5 	stb	r18,1079(sp)
100047f4:	dc413c17 	ldw	r17,1264(sp)
100047f8:	d8c13115 	stw	r3,1220(sp)
100047fc:	003dc706 	br	10003f1c <__alt_data_end+0xf8003f1c>
10004800:	00801944 	movi	r2,101
10004804:	1400720e 	bge	r2,r16,100049d0 <___vfprintf_internal_r+0x10a0>
10004808:	d9013717 	ldw	r4,1244(sp)
1000480c:	d9413917 	ldw	r5,1252(sp)
10004810:	000d883a 	mov	r6,zero
10004814:	000f883a 	mov	r7,zero
10004818:	d8c13d15 	stw	r3,1268(sp)
1000481c:	da013f15 	stw	r8,1276(sp)
10004820:	000d6400 	call	1000d640 <__eqdf2>
10004824:	d8c13d17 	ldw	r3,1268(sp)
10004828:	da013f17 	ldw	r8,1276(sp)
1000482c:	1000f41e 	bne	r2,zero,10004c00 <___vfprintf_internal_r+0x12d0>
10004830:	d8811f17 	ldw	r2,1148(sp)
10004834:	01040074 	movhi	r4,4097
10004838:	21029104 	addi	r4,r4,2628
1000483c:	18c00044 	addi	r3,r3,1
10004840:	10800044 	addi	r2,r2,1
10004844:	41000015 	stw	r4,0(r8)
10004848:	01000044 	movi	r4,1
1000484c:	41000115 	stw	r4,4(r8)
10004850:	d8c12015 	stw	r3,1152(sp)
10004854:	d8811f15 	stw	r2,1148(sp)
10004858:	010001c4 	movi	r4,7
1000485c:	20828d16 	blt	r4,r2,10005294 <___vfprintf_internal_r+0x1964>
10004860:	42000204 	addi	r8,r8,8
10004864:	d8812617 	ldw	r2,1176(sp)
10004868:	d9413317 	ldw	r5,1228(sp)
1000486c:	11400216 	blt	r2,r5,10004878 <___vfprintf_internal_r+0xf48>
10004870:	e080004c 	andi	r2,fp,1
10004874:	103e4126 	beq	r2,zero,1000417c <__alt_data_end+0xf800417c>
10004878:	d8813817 	ldw	r2,1248(sp)
1000487c:	d9013517 	ldw	r4,1236(sp)
10004880:	d9413817 	ldw	r5,1248(sp)
10004884:	1887883a 	add	r3,r3,r2
10004888:	d8811f17 	ldw	r2,1148(sp)
1000488c:	41000015 	stw	r4,0(r8)
10004890:	41400115 	stw	r5,4(r8)
10004894:	10800044 	addi	r2,r2,1
10004898:	d8c12015 	stw	r3,1152(sp)
1000489c:	d8811f15 	stw	r2,1148(sp)
100048a0:	010001c4 	movi	r4,7
100048a4:	20830916 	blt	r4,r2,100054cc <___vfprintf_internal_r+0x1b9c>
100048a8:	42000204 	addi	r8,r8,8
100048ac:	d8813317 	ldw	r2,1228(sp)
100048b0:	143fffc4 	addi	r16,r2,-1
100048b4:	043e310e 	bge	zero,r16,1000417c <__alt_data_end+0xf800417c>
100048b8:	04400404 	movi	r17,16
100048bc:	d8811f17 	ldw	r2,1148(sp)
100048c0:	8c007e0e 	bge	r17,r16,10004abc <___vfprintf_internal_r+0x118c>
100048c4:	01440074 	movhi	r5,4097
100048c8:	29429184 	addi	r5,r5,2630
100048cc:	d9412c15 	stw	r5,1200(sp)
100048d0:	04c001c4 	movi	r19,7
100048d4:	00000306 	br	100048e4 <___vfprintf_internal_r+0xfb4>
100048d8:	42000204 	addi	r8,r8,8
100048dc:	843ffc04 	addi	r16,r16,-16
100048e0:	8c00790e 	bge	r17,r16,10004ac8 <___vfprintf_internal_r+0x1198>
100048e4:	18c00404 	addi	r3,r3,16
100048e8:	10800044 	addi	r2,r2,1
100048ec:	45000015 	stw	r20,0(r8)
100048f0:	44400115 	stw	r17,4(r8)
100048f4:	d8c12015 	stw	r3,1152(sp)
100048f8:	d8811f15 	stw	r2,1148(sp)
100048fc:	98bff60e 	bge	r19,r2,100048d8 <__alt_data_end+0xf80048d8>
10004900:	b809883a 	mov	r4,r23
10004904:	b00b883a 	mov	r5,r22
10004908:	d9811e04 	addi	r6,sp,1144
1000490c:	000a2680 	call	1000a268 <__sprint_r>
10004910:	103d1f1e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
10004914:	d8c12017 	ldw	r3,1152(sp)
10004918:	d8811f17 	ldw	r2,1148(sp)
1000491c:	da000404 	addi	r8,sp,16
10004920:	003fee06 	br	100048dc <__alt_data_end+0xf80048dc>
10004924:	d9412e17 	ldw	r5,1208(sp)
10004928:	d8812b17 	ldw	r2,1196(sp)
1000492c:	28a7c83a 	sub	r19,r5,r2
10004930:	04fddc0e 	bge	zero,r19,100040a4 <__alt_data_end+0xf80040a4>
10004934:	05400404 	movi	r21,16
10004938:	d8811f17 	ldw	r2,1148(sp)
1000493c:	acc3870e 	bge	r21,r19,1000575c <___vfprintf_internal_r+0x1e2c>
10004940:	01440074 	movhi	r5,4097
10004944:	29429184 	addi	r5,r5,2630
10004948:	d9412c15 	stw	r5,1200(sp)
1000494c:	048001c4 	movi	r18,7
10004950:	00000306 	br	10004960 <___vfprintf_internal_r+0x1030>
10004954:	9cfffc04 	addi	r19,r19,-16
10004958:	42000204 	addi	r8,r8,8
1000495c:	acc0110e 	bge	r21,r19,100049a4 <___vfprintf_internal_r+0x1074>
10004960:	18c00404 	addi	r3,r3,16
10004964:	10800044 	addi	r2,r2,1
10004968:	45000015 	stw	r20,0(r8)
1000496c:	45400115 	stw	r21,4(r8)
10004970:	d8c12015 	stw	r3,1152(sp)
10004974:	d8811f15 	stw	r2,1148(sp)
10004978:	90bff60e 	bge	r18,r2,10004954 <__alt_data_end+0xf8004954>
1000497c:	b809883a 	mov	r4,r23
10004980:	b00b883a 	mov	r5,r22
10004984:	d9811e04 	addi	r6,sp,1144
10004988:	000a2680 	call	1000a268 <__sprint_r>
1000498c:	103d001e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
10004990:	9cfffc04 	addi	r19,r19,-16
10004994:	d8c12017 	ldw	r3,1152(sp)
10004998:	d8811f17 	ldw	r2,1148(sp)
1000499c:	da000404 	addi	r8,sp,16
100049a0:	acffef16 	blt	r21,r19,10004960 <__alt_data_end+0xf8004960>
100049a4:	d9012c17 	ldw	r4,1200(sp)
100049a8:	1cc7883a 	add	r3,r3,r19
100049ac:	10800044 	addi	r2,r2,1
100049b0:	41000015 	stw	r4,0(r8)
100049b4:	44c00115 	stw	r19,4(r8)
100049b8:	d8c12015 	stw	r3,1152(sp)
100049bc:	d8811f15 	stw	r2,1148(sp)
100049c0:	010001c4 	movi	r4,7
100049c4:	20817816 	blt	r4,r2,10004fa8 <___vfprintf_internal_r+0x1678>
100049c8:	42000204 	addi	r8,r8,8
100049cc:	003db506 	br	100040a4 <__alt_data_end+0xf80040a4>
100049d0:	d9413317 	ldw	r5,1228(sp)
100049d4:	00800044 	movi	r2,1
100049d8:	18c00044 	addi	r3,r3,1
100049dc:	11413e0e 	bge	r2,r5,10004ed8 <___vfprintf_internal_r+0x15a8>
100049e0:	dc011f17 	ldw	r16,1148(sp)
100049e4:	d8813117 	ldw	r2,1220(sp)
100049e8:	d8c12015 	stw	r3,1152(sp)
100049ec:	84000044 	addi	r16,r16,1
100049f0:	40800015 	stw	r2,0(r8)
100049f4:	00800044 	movi	r2,1
100049f8:	40800115 	stw	r2,4(r8)
100049fc:	dc011f15 	stw	r16,1148(sp)
10004a00:	008001c4 	movi	r2,7
10004a04:	14015616 	blt	r2,r16,10004f60 <___vfprintf_internal_r+0x1630>
10004a08:	42000204 	addi	r8,r8,8
10004a0c:	d9013817 	ldw	r4,1248(sp)
10004a10:	d9413517 	ldw	r5,1236(sp)
10004a14:	84000044 	addi	r16,r16,1
10004a18:	1907883a 	add	r3,r3,r4
10004a1c:	41400015 	stw	r5,0(r8)
10004a20:	41000115 	stw	r4,4(r8)
10004a24:	d8c12015 	stw	r3,1152(sp)
10004a28:	dc011f15 	stw	r16,1148(sp)
10004a2c:	008001c4 	movi	r2,7
10004a30:	14015416 	blt	r2,r16,10004f84 <___vfprintf_internal_r+0x1654>
10004a34:	44400204 	addi	r17,r8,8
10004a38:	d9013717 	ldw	r4,1244(sp)
10004a3c:	d9413917 	ldw	r5,1252(sp)
10004a40:	000d883a 	mov	r6,zero
10004a44:	000f883a 	mov	r7,zero
10004a48:	d8c13d15 	stw	r3,1268(sp)
10004a4c:	000d6400 	call	1000d640 <__eqdf2>
10004a50:	d8c13d17 	ldw	r3,1268(sp)
10004a54:	1000a726 	beq	r2,zero,10004cf4 <___vfprintf_internal_r+0x13c4>
10004a58:	d9013317 	ldw	r4,1228(sp)
10004a5c:	d9413117 	ldw	r5,1220(sp)
10004a60:	84000044 	addi	r16,r16,1
10004a64:	20bfffc4 	addi	r2,r4,-1
10004a68:	1887883a 	add	r3,r3,r2
10004a6c:	29000044 	addi	r4,r5,1
10004a70:	88800115 	stw	r2,4(r17)
10004a74:	89000015 	stw	r4,0(r17)
10004a78:	d8c12015 	stw	r3,1152(sp)
10004a7c:	dc011f15 	stw	r16,1148(sp)
10004a80:	008001c4 	movi	r2,7
10004a84:	14012d16 	blt	r2,r16,10004f3c <___vfprintf_internal_r+0x160c>
10004a88:	8c400204 	addi	r17,r17,8
10004a8c:	d9413a17 	ldw	r5,1256(sp)
10004a90:	dcc122c4 	addi	r19,sp,1163
10004a94:	84000044 	addi	r16,r16,1
10004a98:	28c7883a 	add	r3,r5,r3
10004a9c:	8cc00015 	stw	r19,0(r17)
10004aa0:	89400115 	stw	r5,4(r17)
10004aa4:	d8c12015 	stw	r3,1152(sp)
10004aa8:	dc011f15 	stw	r16,1148(sp)
10004aac:	008001c4 	movi	r2,7
10004ab0:	14000e16 	blt	r2,r16,10004aec <___vfprintf_internal_r+0x11bc>
10004ab4:	8a000204 	addi	r8,r17,8
10004ab8:	003db006 	br	1000417c <__alt_data_end+0xf800417c>
10004abc:	01040074 	movhi	r4,4097
10004ac0:	21029184 	addi	r4,r4,2630
10004ac4:	d9012c15 	stw	r4,1200(sp)
10004ac8:	d9012c17 	ldw	r4,1200(sp)
10004acc:	1c07883a 	add	r3,r3,r16
10004ad0:	44000115 	stw	r16,4(r8)
10004ad4:	41000015 	stw	r4,0(r8)
10004ad8:	10800044 	addi	r2,r2,1
10004adc:	d8c12015 	stw	r3,1152(sp)
10004ae0:	d8811f15 	stw	r2,1148(sp)
10004ae4:	010001c4 	movi	r4,7
10004ae8:	20bda30e 	bge	r4,r2,10004178 <__alt_data_end+0xf8004178>
10004aec:	b809883a 	mov	r4,r23
10004af0:	b00b883a 	mov	r5,r22
10004af4:	d9811e04 	addi	r6,sp,1144
10004af8:	000a2680 	call	1000a268 <__sprint_r>
10004afc:	103ca41e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
10004b00:	d8c12017 	ldw	r3,1152(sp)
10004b04:	da000404 	addi	r8,sp,16
10004b08:	003d9c06 	br	1000417c <__alt_data_end+0xf800417c>
10004b0c:	b809883a 	mov	r4,r23
10004b10:	b00b883a 	mov	r5,r22
10004b14:	d9811e04 	addi	r6,sp,1144
10004b18:	000a2680 	call	1000a268 <__sprint_r>
10004b1c:	103dd226 	beq	r2,zero,10004268 <__alt_data_end+0xf8004268>
10004b20:	003c9b06 	br	10003d90 <__alt_data_end+0xf8003d90>
10004b24:	10803fcc 	andi	r2,r2,255
10004b28:	1000311e 	bne	r2,zero,10004bf0 <___vfprintf_internal_r+0x12c0>
10004b2c:	e080004c 	andi	r2,fp,1
10004b30:	10002f26 	beq	r2,zero,10004bf0 <___vfprintf_internal_r+0x12c0>
10004b34:	00800c04 	movi	r2,48
10004b38:	d8c10dc4 	addi	r3,sp,1079
10004b3c:	d8810dc5 	stb	r2,1079(sp)
10004b40:	dc413c17 	ldw	r17,1264(sp)
10004b44:	d8c13115 	stw	r3,1220(sp)
10004b48:	003cf406 	br	10003f1c <__alt_data_end+0xf8003f1c>
10004b4c:	b809883a 	mov	r4,r23
10004b50:	b00b883a 	mov	r5,r22
10004b54:	d9811e04 	addi	r6,sp,1144
10004b58:	000a2680 	call	1000a268 <__sprint_r>
10004b5c:	103c8c1e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
10004b60:	d8c12017 	ldw	r3,1152(sp)
10004b64:	da000404 	addi	r8,sp,16
10004b68:	003d7706 	br	10004148 <__alt_data_end+0xf8004148>
10004b6c:	b809883a 	mov	r4,r23
10004b70:	b00b883a 	mov	r5,r22
10004b74:	d9811e04 	addi	r6,sp,1144
10004b78:	000a2680 	call	1000a268 <__sprint_r>
10004b7c:	103c841e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
10004b80:	d8c12017 	ldw	r3,1152(sp)
10004b84:	da000404 	addi	r8,sp,16
10004b88:	003d3506 	br	10004060 <__alt_data_end+0xf8004060>
10004b8c:	b809883a 	mov	r4,r23
10004b90:	b00b883a 	mov	r5,r22
10004b94:	d9811e04 	addi	r6,sp,1144
10004b98:	000a2680 	call	1000a268 <__sprint_r>
10004b9c:	103c7c1e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
10004ba0:	d8c12017 	ldw	r3,1152(sp)
10004ba4:	da000404 	addi	r8,sp,16
10004ba8:	003d3b06 	br	10004098 <__alt_data_end+0xf8004098>
10004bac:	d9413b17 	ldw	r5,1260(sp)
10004bb0:	d8c10e04 	addi	r3,sp,1080
10004bb4:	908003cc 	andi	r2,r18,15
10004bb8:	a808973a 	slli	r4,r21,28
10004bbc:	2885883a 	add	r2,r5,r2
10004bc0:	9024d13a 	srli	r18,r18,4
10004bc4:	10800003 	ldbu	r2,0(r2)
10004bc8:	a82ad13a 	srli	r21,r21,4
10004bcc:	18ffffc4 	addi	r3,r3,-1
10004bd0:	24a4b03a 	or	r18,r4,r18
10004bd4:	18800005 	stb	r2,0(r3)
10004bd8:	9544b03a 	or	r2,r18,r21
10004bdc:	103ff51e 	bne	r2,zero,10004bb4 <__alt_data_end+0xf8004bb4>
10004be0:	d9412817 	ldw	r5,1184(sp)
10004be4:	d8c13115 	stw	r3,1220(sp)
10004be8:	28e3c83a 	sub	r17,r5,r3
10004bec:	003ccb06 	br	10003f1c <__alt_data_end+0xf8003f1c>
10004bf0:	d8c10e04 	addi	r3,sp,1080
10004bf4:	0023883a 	mov	r17,zero
10004bf8:	d8c13115 	stw	r3,1220(sp)
10004bfc:	003cc706 	br	10003f1c <__alt_data_end+0xf8003f1c>
10004c00:	dc012617 	ldw	r16,1176(sp)
10004c04:	0401ab0e 	bge	zero,r16,100052b4 <___vfprintf_internal_r+0x1984>
10004c08:	d8813317 	ldw	r2,1228(sp)
10004c0c:	d9413117 	ldw	r5,1220(sp)
10004c10:	d9013417 	ldw	r4,1232(sp)
10004c14:	1023883a 	mov	r17,r2
10004c18:	28a1883a 	add	r16,r5,r2
10004c1c:	2080010e 	bge	r4,r2,10004c24 <___vfprintf_internal_r+0x12f4>
10004c20:	2023883a 	mov	r17,r4
10004c24:	04400b0e 	bge	zero,r17,10004c54 <___vfprintf_internal_r+0x1324>
10004c28:	d8811f17 	ldw	r2,1148(sp)
10004c2c:	d9413117 	ldw	r5,1220(sp)
10004c30:	1c47883a 	add	r3,r3,r17
10004c34:	10800044 	addi	r2,r2,1
10004c38:	41400015 	stw	r5,0(r8)
10004c3c:	44400115 	stw	r17,4(r8)
10004c40:	d8c12015 	stw	r3,1152(sp)
10004c44:	d8811f15 	stw	r2,1148(sp)
10004c48:	010001c4 	movi	r4,7
10004c4c:	20826716 	blt	r4,r2,100055ec <___vfprintf_internal_r+0x1cbc>
10004c50:	42000204 	addi	r8,r8,8
10004c54:	88026316 	blt	r17,zero,100055e4 <___vfprintf_internal_r+0x1cb4>
10004c58:	d8813417 	ldw	r2,1232(sp)
10004c5c:	1463c83a 	sub	r17,r2,r17
10004c60:	0440590e 	bge	zero,r17,10004dc8 <___vfprintf_internal_r+0x1498>
10004c64:	04c00404 	movi	r19,16
10004c68:	d8811f17 	ldw	r2,1148(sp)
10004c6c:	9c41770e 	bge	r19,r17,1000524c <___vfprintf_internal_r+0x191c>
10004c70:	01440074 	movhi	r5,4097
10004c74:	29429184 	addi	r5,r5,2630
10004c78:	d9412c15 	stw	r5,1200(sp)
10004c7c:	054001c4 	movi	r21,7
10004c80:	00000306 	br	10004c90 <___vfprintf_internal_r+0x1360>
10004c84:	42000204 	addi	r8,r8,8
10004c88:	8c7ffc04 	addi	r17,r17,-16
10004c8c:	9c41720e 	bge	r19,r17,10005258 <___vfprintf_internal_r+0x1928>
10004c90:	18c00404 	addi	r3,r3,16
10004c94:	10800044 	addi	r2,r2,1
10004c98:	45000015 	stw	r20,0(r8)
10004c9c:	44c00115 	stw	r19,4(r8)
10004ca0:	d8c12015 	stw	r3,1152(sp)
10004ca4:	d8811f15 	stw	r2,1148(sp)
10004ca8:	a8bff60e 	bge	r21,r2,10004c84 <__alt_data_end+0xf8004c84>
10004cac:	b809883a 	mov	r4,r23
10004cb0:	b00b883a 	mov	r5,r22
10004cb4:	d9811e04 	addi	r6,sp,1144
10004cb8:	000a2680 	call	1000a268 <__sprint_r>
10004cbc:	103c341e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
10004cc0:	d8c12017 	ldw	r3,1152(sp)
10004cc4:	d8811f17 	ldw	r2,1148(sp)
10004cc8:	da000404 	addi	r8,sp,16
10004ccc:	003fee06 	br	10004c88 <__alt_data_end+0xf8004c88>
10004cd0:	b809883a 	mov	r4,r23
10004cd4:	b00b883a 	mov	r5,r22
10004cd8:	d9811e04 	addi	r6,sp,1144
10004cdc:	000a2680 	call	1000a268 <__sprint_r>
10004ce0:	103c2b1e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
10004ce4:	d8c12017 	ldw	r3,1152(sp)
10004ce8:	d8812787 	ldb	r2,1182(sp)
10004cec:	da000404 	addi	r8,sp,16
10004cf0:	003cce06 	br	1000402c <__alt_data_end+0xf800402c>
10004cf4:	d8813317 	ldw	r2,1228(sp)
10004cf8:	14ffffc4 	addi	r19,r2,-1
10004cfc:	04ff630e 	bge	zero,r19,10004a8c <__alt_data_end+0xf8004a8c>
10004d00:	05400404 	movi	r21,16
10004d04:	acc0810e 	bge	r21,r19,10004f0c <___vfprintf_internal_r+0x15dc>
10004d08:	01440074 	movhi	r5,4097
10004d0c:	29429184 	addi	r5,r5,2630
10004d10:	d9412c15 	stw	r5,1200(sp)
10004d14:	01c001c4 	movi	r7,7
10004d18:	00000306 	br	10004d28 <___vfprintf_internal_r+0x13f8>
10004d1c:	8c400204 	addi	r17,r17,8
10004d20:	9cfffc04 	addi	r19,r19,-16
10004d24:	acc07c0e 	bge	r21,r19,10004f18 <___vfprintf_internal_r+0x15e8>
10004d28:	18c00404 	addi	r3,r3,16
10004d2c:	84000044 	addi	r16,r16,1
10004d30:	8d000015 	stw	r20,0(r17)
10004d34:	8d400115 	stw	r21,4(r17)
10004d38:	d8c12015 	stw	r3,1152(sp)
10004d3c:	dc011f15 	stw	r16,1148(sp)
10004d40:	3c3ff60e 	bge	r7,r16,10004d1c <__alt_data_end+0xf8004d1c>
10004d44:	b809883a 	mov	r4,r23
10004d48:	b00b883a 	mov	r5,r22
10004d4c:	d9811e04 	addi	r6,sp,1144
10004d50:	d9c13d15 	stw	r7,1268(sp)
10004d54:	000a2680 	call	1000a268 <__sprint_r>
10004d58:	d9c13d17 	ldw	r7,1268(sp)
10004d5c:	103c0c1e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
10004d60:	d8c12017 	ldw	r3,1152(sp)
10004d64:	dc011f17 	ldw	r16,1148(sp)
10004d68:	dc400404 	addi	r17,sp,16
10004d6c:	003fec06 	br	10004d20 <__alt_data_end+0xf8004d20>
10004d70:	00800084 	movi	r2,2
10004d74:	9546b03a 	or	r3,r18,r21
10004d78:	003d7d06 	br	10004370 <__alt_data_end+0xf8004370>
10004d7c:	10803fcc 	andi	r2,r2,255
10004d80:	1080201c 	xori	r2,r2,128
10004d84:	10bfe004 	addi	r2,r2,-128
10004d88:	01000c04 	movi	r4,48
10004d8c:	1101d726 	beq	r2,r4,100054ec <___vfprintf_internal_r+0x1bbc>
10004d90:	d9413117 	ldw	r5,1220(sp)
10004d94:	d8812817 	ldw	r2,1184(sp)
10004d98:	193fffc5 	stb	r4,-1(r3)
10004d9c:	297fffc4 	addi	r5,r5,-1
10004da0:	d9413115 	stw	r5,1220(sp)
10004da4:	1163c83a 	sub	r17,r2,r5
10004da8:	003c5c06 	br	10003f1c <__alt_data_end+0xf8003f1c>
10004dac:	b809883a 	mov	r4,r23
10004db0:	b00b883a 	mov	r5,r22
10004db4:	d9811e04 	addi	r6,sp,1144
10004db8:	000a2680 	call	1000a268 <__sprint_r>
10004dbc:	103bf41e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
10004dc0:	d8c12017 	ldw	r3,1152(sp)
10004dc4:	da000404 	addi	r8,sp,16
10004dc8:	d9413117 	ldw	r5,1220(sp)
10004dcc:	d9013417 	ldw	r4,1232(sp)
10004dd0:	d8812617 	ldw	r2,1176(sp)
10004dd4:	2923883a 	add	r17,r5,r4
10004dd8:	d9413317 	ldw	r5,1228(sp)
10004ddc:	11400216 	blt	r2,r5,10004de8 <___vfprintf_internal_r+0x14b8>
10004de0:	e100004c 	andi	r4,fp,1
10004de4:	20000d26 	beq	r4,zero,10004e1c <___vfprintf_internal_r+0x14ec>
10004de8:	d9013817 	ldw	r4,1248(sp)
10004dec:	d9413517 	ldw	r5,1236(sp)
10004df0:	1907883a 	add	r3,r3,r4
10004df4:	d9011f17 	ldw	r4,1148(sp)
10004df8:	41400015 	stw	r5,0(r8)
10004dfc:	d9413817 	ldw	r5,1248(sp)
10004e00:	21000044 	addi	r4,r4,1
10004e04:	d8c12015 	stw	r3,1152(sp)
10004e08:	41400115 	stw	r5,4(r8)
10004e0c:	d9011f15 	stw	r4,1148(sp)
10004e10:	014001c4 	movi	r5,7
10004e14:	2901fd16 	blt	r5,r4,1000560c <___vfprintf_internal_r+0x1cdc>
10004e18:	42000204 	addi	r8,r8,8
10004e1c:	d9013317 	ldw	r4,1228(sp)
10004e20:	2085c83a 	sub	r2,r4,r2
10004e24:	8449c83a 	sub	r4,r16,r17
10004e28:	1021883a 	mov	r16,r2
10004e2c:	2080010e 	bge	r4,r2,10004e34 <___vfprintf_internal_r+0x1504>
10004e30:	2021883a 	mov	r16,r4
10004e34:	04000a0e 	bge	zero,r16,10004e60 <___vfprintf_internal_r+0x1530>
10004e38:	d9011f17 	ldw	r4,1148(sp)
10004e3c:	1c07883a 	add	r3,r3,r16
10004e40:	44400015 	stw	r17,0(r8)
10004e44:	21000044 	addi	r4,r4,1
10004e48:	44000115 	stw	r16,4(r8)
10004e4c:	d8c12015 	stw	r3,1152(sp)
10004e50:	d9011f15 	stw	r4,1148(sp)
10004e54:	014001c4 	movi	r5,7
10004e58:	29020916 	blt	r5,r4,10005680 <___vfprintf_internal_r+0x1d50>
10004e5c:	42000204 	addi	r8,r8,8
10004e60:	80020116 	blt	r16,zero,10005668 <___vfprintf_internal_r+0x1d38>
10004e64:	1421c83a 	sub	r16,r2,r16
10004e68:	043cc40e 	bge	zero,r16,1000417c <__alt_data_end+0xf800417c>
10004e6c:	04400404 	movi	r17,16
10004e70:	d8811f17 	ldw	r2,1148(sp)
10004e74:	8c3f110e 	bge	r17,r16,10004abc <__alt_data_end+0xf8004abc>
10004e78:	01440074 	movhi	r5,4097
10004e7c:	29429184 	addi	r5,r5,2630
10004e80:	d9412c15 	stw	r5,1200(sp)
10004e84:	04c001c4 	movi	r19,7
10004e88:	00000306 	br	10004e98 <___vfprintf_internal_r+0x1568>
10004e8c:	42000204 	addi	r8,r8,8
10004e90:	843ffc04 	addi	r16,r16,-16
10004e94:	8c3f0c0e 	bge	r17,r16,10004ac8 <__alt_data_end+0xf8004ac8>
10004e98:	18c00404 	addi	r3,r3,16
10004e9c:	10800044 	addi	r2,r2,1
10004ea0:	45000015 	stw	r20,0(r8)
10004ea4:	44400115 	stw	r17,4(r8)
10004ea8:	d8c12015 	stw	r3,1152(sp)
10004eac:	d8811f15 	stw	r2,1148(sp)
10004eb0:	98bff60e 	bge	r19,r2,10004e8c <__alt_data_end+0xf8004e8c>
10004eb4:	b809883a 	mov	r4,r23
10004eb8:	b00b883a 	mov	r5,r22
10004ebc:	d9811e04 	addi	r6,sp,1144
10004ec0:	000a2680 	call	1000a268 <__sprint_r>
10004ec4:	103bb21e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
10004ec8:	d8c12017 	ldw	r3,1152(sp)
10004ecc:	d8811f17 	ldw	r2,1148(sp)
10004ed0:	da000404 	addi	r8,sp,16
10004ed4:	003fee06 	br	10004e90 <__alt_data_end+0xf8004e90>
10004ed8:	e088703a 	and	r4,fp,r2
10004edc:	203ec01e 	bne	r4,zero,100049e0 <__alt_data_end+0xf80049e0>
10004ee0:	dc011f17 	ldw	r16,1148(sp)
10004ee4:	d9013117 	ldw	r4,1220(sp)
10004ee8:	40800115 	stw	r2,4(r8)
10004eec:	84000044 	addi	r16,r16,1
10004ef0:	41000015 	stw	r4,0(r8)
10004ef4:	d8c12015 	stw	r3,1152(sp)
10004ef8:	dc011f15 	stw	r16,1148(sp)
10004efc:	008001c4 	movi	r2,7
10004f00:	14000e16 	blt	r2,r16,10004f3c <___vfprintf_internal_r+0x160c>
10004f04:	44400204 	addi	r17,r8,8
10004f08:	003ee006 	br	10004a8c <__alt_data_end+0xf8004a8c>
10004f0c:	01040074 	movhi	r4,4097
10004f10:	21029184 	addi	r4,r4,2630
10004f14:	d9012c15 	stw	r4,1200(sp)
10004f18:	d8812c17 	ldw	r2,1200(sp)
10004f1c:	1cc7883a 	add	r3,r3,r19
10004f20:	84000044 	addi	r16,r16,1
10004f24:	88800015 	stw	r2,0(r17)
10004f28:	8cc00115 	stw	r19,4(r17)
10004f2c:	d8c12015 	stw	r3,1152(sp)
10004f30:	dc011f15 	stw	r16,1148(sp)
10004f34:	008001c4 	movi	r2,7
10004f38:	143ed30e 	bge	r2,r16,10004a88 <__alt_data_end+0xf8004a88>
10004f3c:	b809883a 	mov	r4,r23
10004f40:	b00b883a 	mov	r5,r22
10004f44:	d9811e04 	addi	r6,sp,1144
10004f48:	000a2680 	call	1000a268 <__sprint_r>
10004f4c:	103b901e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
10004f50:	d8c12017 	ldw	r3,1152(sp)
10004f54:	dc011f17 	ldw	r16,1148(sp)
10004f58:	dc400404 	addi	r17,sp,16
10004f5c:	003ecb06 	br	10004a8c <__alt_data_end+0xf8004a8c>
10004f60:	b809883a 	mov	r4,r23
10004f64:	b00b883a 	mov	r5,r22
10004f68:	d9811e04 	addi	r6,sp,1144
10004f6c:	000a2680 	call	1000a268 <__sprint_r>
10004f70:	103b871e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
10004f74:	d8c12017 	ldw	r3,1152(sp)
10004f78:	dc011f17 	ldw	r16,1148(sp)
10004f7c:	da000404 	addi	r8,sp,16
10004f80:	003ea206 	br	10004a0c <__alt_data_end+0xf8004a0c>
10004f84:	b809883a 	mov	r4,r23
10004f88:	b00b883a 	mov	r5,r22
10004f8c:	d9811e04 	addi	r6,sp,1144
10004f90:	000a2680 	call	1000a268 <__sprint_r>
10004f94:	103b7e1e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
10004f98:	d8c12017 	ldw	r3,1152(sp)
10004f9c:	dc011f17 	ldw	r16,1148(sp)
10004fa0:	dc400404 	addi	r17,sp,16
10004fa4:	003ea406 	br	10004a38 <__alt_data_end+0xf8004a38>
10004fa8:	b809883a 	mov	r4,r23
10004fac:	b00b883a 	mov	r5,r22
10004fb0:	d9811e04 	addi	r6,sp,1144
10004fb4:	000a2680 	call	1000a268 <__sprint_r>
10004fb8:	103b751e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
10004fbc:	d8c12017 	ldw	r3,1152(sp)
10004fc0:	da000404 	addi	r8,sp,16
10004fc4:	003c3706 	br	100040a4 <__alt_data_end+0xf80040a4>
10004fc8:	04a5c83a 	sub	r18,zero,r18
10004fcc:	9004c03a 	cmpne	r2,r18,zero
10004fd0:	056bc83a 	sub	r21,zero,r21
10004fd4:	a8abc83a 	sub	r21,r21,r2
10004fd8:	04c00b44 	movi	r19,45
10004fdc:	dcc12785 	stb	r19,1182(sp)
10004fe0:	da413215 	stw	r9,1224(sp)
10004fe4:	00800044 	movi	r2,1
10004fe8:	9546b03a 	or	r3,r18,r21
10004fec:	003bb106 	br	10003eb4 <__alt_data_end+0xf8003eb4>
10004ff0:	da013f15 	stw	r8,1276(sp)
10004ff4:	da413e15 	stw	r9,1272(sp)
10004ff8:	0009e2c0 	call	10009e2c <__fpclassifyd>
10004ffc:	da013f17 	ldw	r8,1276(sp)
10005000:	da413e17 	ldw	r9,1272(sp)
10005004:	1000e526 	beq	r2,zero,1000539c <___vfprintf_internal_r+0x1a6c>
10005008:	04fff7c4 	movi	r19,-33
1000500c:	00bfffc4 	movi	r2,-1
10005010:	84e6703a 	and	r19,r16,r19
10005014:	48822926 	beq	r9,r2,100058bc <___vfprintf_internal_r+0x1f8c>
10005018:	008011c4 	movi	r2,71
1000501c:	98821626 	beq	r19,r2,10005878 <___vfprintf_internal_r+0x1f48>
10005020:	d9013917 	ldw	r4,1252(sp)
10005024:	e0c04014 	ori	r3,fp,256
10005028:	d8c12d15 	stw	r3,1204(sp)
1000502c:	20021f16 	blt	r4,zero,100058ac <___vfprintf_internal_r+0x1f7c>
10005030:	dc413917 	ldw	r17,1252(sp)
10005034:	d8012b05 	stb	zero,1196(sp)
10005038:	00801984 	movi	r2,102
1000503c:	80814d26 	beq	r16,r2,10005574 <___vfprintf_internal_r+0x1c44>
10005040:	00801184 	movi	r2,70
10005044:	80814b26 	beq	r16,r2,10005574 <___vfprintf_internal_r+0x1c44>
10005048:	00801144 	movi	r2,69
1000504c:	98821d26 	beq	r19,r2,100058c4 <___vfprintf_internal_r+0x1f94>
10005050:	482b883a 	mov	r21,r9
10005054:	d8812604 	addi	r2,sp,1176
10005058:	d8800115 	stw	r2,4(sp)
1000505c:	d9413717 	ldw	r5,1244(sp)
10005060:	d8812504 	addi	r2,sp,1172
10005064:	d8800215 	stw	r2,8(sp)
10005068:	d8812104 	addi	r2,sp,1156
1000506c:	dd400015 	stw	r21,0(sp)
10005070:	d8800315 	stw	r2,12(sp)
10005074:	b809883a 	mov	r4,r23
10005078:	880d883a 	mov	r6,r17
1000507c:	01c00084 	movi	r7,2
10005080:	da013f15 	stw	r8,1276(sp)
10005084:	da413e15 	stw	r9,1272(sp)
10005088:	0005da80 	call	10005da8 <_dtoa_r>
1000508c:	d8813115 	stw	r2,1220(sp)
10005090:	008019c4 	movi	r2,103
10005094:	da013f17 	ldw	r8,1276(sp)
10005098:	da413e17 	ldw	r9,1272(sp)
1000509c:	80800226 	beq	r16,r2,100050a8 <___vfprintf_internal_r+0x1778>
100050a0:	008011c4 	movi	r2,71
100050a4:	8081451e 	bne	r16,r2,100055bc <___vfprintf_internal_r+0x1c8c>
100050a8:	e080004c 	andi	r2,fp,1
100050ac:	10021e26 	beq	r2,zero,10005928 <___vfprintf_internal_r+0x1ff8>
100050b0:	d8c13117 	ldw	r3,1220(sp)
100050b4:	1d55883a 	add	r10,r3,r21
100050b8:	d9013717 	ldw	r4,1244(sp)
100050bc:	880b883a 	mov	r5,r17
100050c0:	000d883a 	mov	r6,zero
100050c4:	000f883a 	mov	r7,zero
100050c8:	da013f15 	stw	r8,1276(sp)
100050cc:	da413e15 	stw	r9,1272(sp)
100050d0:	da813d15 	stw	r10,1268(sp)
100050d4:	000d6400 	call	1000d640 <__eqdf2>
100050d8:	da013f17 	ldw	r8,1276(sp)
100050dc:	da413e17 	ldw	r9,1272(sp)
100050e0:	da813d17 	ldw	r10,1268(sp)
100050e4:	1001a126 	beq	r2,zero,1000576c <___vfprintf_internal_r+0x1e3c>
100050e8:	d8812117 	ldw	r2,1156(sp)
100050ec:	1280062e 	bgeu	r2,r10,10005108 <___vfprintf_internal_r+0x17d8>
100050f0:	01000c04 	movi	r4,48
100050f4:	10c00044 	addi	r3,r2,1
100050f8:	d8c12115 	stw	r3,1156(sp)
100050fc:	11000005 	stb	r4,0(r2)
10005100:	d8812117 	ldw	r2,1156(sp)
10005104:	12bffb36 	bltu	r2,r10,100050f4 <__alt_data_end+0xf80050f4>
10005108:	d8c13117 	ldw	r3,1220(sp)
1000510c:	10c5c83a 	sub	r2,r2,r3
10005110:	d8813315 	stw	r2,1228(sp)
10005114:	008011c4 	movi	r2,71
10005118:	98818926 	beq	r19,r2,10005740 <___vfprintf_internal_r+0x1e10>
1000511c:	00801944 	movi	r2,101
10005120:	14023c0e 	bge	r2,r16,10005a14 <___vfprintf_internal_r+0x20e4>
10005124:	d8c12617 	ldw	r3,1176(sp)
10005128:	00801984 	movi	r2,102
1000512c:	d8c13415 	stw	r3,1232(sp)
10005130:	8081ef26 	beq	r16,r2,100058f0 <___vfprintf_internal_r+0x1fc0>
10005134:	d8c13417 	ldw	r3,1232(sp)
10005138:	d9013317 	ldw	r4,1228(sp)
1000513c:	1901e316 	blt	r3,r4,100058cc <___vfprintf_internal_r+0x1f9c>
10005140:	e080004c 	andi	r2,fp,1
10005144:	1001f426 	beq	r2,zero,10005918 <___vfprintf_internal_r+0x1fe8>
10005148:	d8c13417 	ldw	r3,1232(sp)
1000514c:	1c400044 	addi	r17,r3,1
10005150:	8839883a 	mov	fp,r17
10005154:	8801e416 	blt	r17,zero,100058e8 <___vfprintf_internal_r+0x1fb8>
10005158:	dd412b07 	ldb	r21,1196(sp)
1000515c:	a801701e 	bne	r21,zero,10005720 <___vfprintf_internal_r+0x1df0>
10005160:	df012b15 	stw	fp,1196(sp)
10005164:	dcc12783 	ldbu	r19,1182(sp)
10005168:	df012d17 	ldw	fp,1204(sp)
1000516c:	d8013215 	stw	zero,1224(sp)
10005170:	dc812d15 	stw	r18,1204(sp)
10005174:	003b6e06 	br	10003f30 <__alt_data_end+0xf8003f30>
10005178:	e080040c 	andi	r2,fp,16
1000517c:	1000b51e 	bne	r2,zero,10005454 <___vfprintf_internal_r+0x1b24>
10005180:	e080100c 	andi	r2,fp,64
10005184:	10015b26 	beq	r2,zero,100056f4 <___vfprintf_internal_r+0x1dc4>
10005188:	d9012d17 	ldw	r4,1204(sp)
1000518c:	d9412f17 	ldw	r5,1212(sp)
10005190:	20800017 	ldw	r2,0(r4)
10005194:	21000104 	addi	r4,r4,4
10005198:	d9012d15 	stw	r4,1204(sp)
1000519c:	1140000d 	sth	r5,0(r2)
100051a0:	003a2006 	br	10003a24 <__alt_data_end+0xf8003a24>
100051a4:	e0c0100c 	andi	r3,fp,64
100051a8:	1800a226 	beq	r3,zero,10005434 <___vfprintf_internal_r+0x1b04>
100051ac:	d8c12d17 	ldw	r3,1204(sp)
100051b0:	1480000b 	ldhu	r18,0(r2)
100051b4:	002b883a 	mov	r21,zero
100051b8:	18c00104 	addi	r3,r3,4
100051bc:	d8c12d15 	stw	r3,1204(sp)
100051c0:	0005883a 	mov	r2,zero
100051c4:	9007883a 	mov	r3,r18
100051c8:	003c6906 	br	10004370 <__alt_data_end+0xf8004370>
100051cc:	e0c0100c 	andi	r3,fp,64
100051d0:	18009026 	beq	r3,zero,10005414 <___vfprintf_internal_r+0x1ae4>
100051d4:	1480000b 	ldhu	r18,0(r2)
100051d8:	d8812d17 	ldw	r2,1204(sp)
100051dc:	002b883a 	mov	r21,zero
100051e0:	9007883a 	mov	r3,r18
100051e4:	10800104 	addi	r2,r2,4
100051e8:	d8812d15 	stw	r2,1204(sp)
100051ec:	00800044 	movi	r2,1
100051f0:	003c5f06 	br	10004370 <__alt_data_end+0xf8004370>
100051f4:	e0c0100c 	andi	r3,fp,64
100051f8:	18008026 	beq	r3,zero,100053fc <___vfprintf_internal_r+0x1acc>
100051fc:	d9012d17 	ldw	r4,1204(sp)
10005200:	1480000b 	ldhu	r18,0(r2)
10005204:	002b883a 	mov	r21,zero
10005208:	21000104 	addi	r4,r4,4
1000520c:	d9012d15 	stw	r4,1204(sp)
10005210:	003c7906 	br	100043f8 <__alt_data_end+0xf80043f8>
10005214:	e080100c 	andi	r2,fp,64
10005218:	10007126 	beq	r2,zero,100053e0 <___vfprintf_internal_r+0x1ab0>
1000521c:	1c80000f 	ldh	r18,0(r3)
10005220:	d8812d17 	ldw	r2,1204(sp)
10005224:	902bd7fa 	srai	r21,r18,31
10005228:	10800104 	addi	r2,r2,4
1000522c:	d8812d15 	stw	r2,1204(sp)
10005230:	a805883a 	mov	r2,r21
10005234:	003b1a06 	br	10003ea0 <__alt_data_end+0xf8003ea0>
10005238:	e4000007 	ldb	r16,0(fp)
1000523c:	e005883a 	mov	r2,fp
10005240:	003a2306 	br	10003ad0 <__alt_data_end+0xf8003ad0>
10005244:	00800084 	movi	r2,2
10005248:	003c4906 	br	10004370 <__alt_data_end+0xf8004370>
1000524c:	01040074 	movhi	r4,4097
10005250:	21029184 	addi	r4,r4,2630
10005254:	d9012c15 	stw	r4,1200(sp)
10005258:	d9012c17 	ldw	r4,1200(sp)
1000525c:	1c47883a 	add	r3,r3,r17
10005260:	10800044 	addi	r2,r2,1
10005264:	41000015 	stw	r4,0(r8)
10005268:	44400115 	stw	r17,4(r8)
1000526c:	d8c12015 	stw	r3,1152(sp)
10005270:	d8811f15 	stw	r2,1148(sp)
10005274:	010001c4 	movi	r4,7
10005278:	20becc16 	blt	r4,r2,10004dac <__alt_data_end+0xf8004dac>
1000527c:	42000204 	addi	r8,r8,8
10005280:	003ed106 	br	10004dc8 <__alt_data_end+0xf8004dc8>
10005284:	01040074 	movhi	r4,4097
10005288:	21029184 	addi	r4,r4,2630
1000528c:	d9012c15 	stw	r4,1200(sp)
10005290:	003ba306 	br	10004120 <__alt_data_end+0xf8004120>
10005294:	b809883a 	mov	r4,r23
10005298:	b00b883a 	mov	r5,r22
1000529c:	d9811e04 	addi	r6,sp,1144
100052a0:	000a2680 	call	1000a268 <__sprint_r>
100052a4:	103aba1e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
100052a8:	d8c12017 	ldw	r3,1152(sp)
100052ac:	da000404 	addi	r8,sp,16
100052b0:	003d6c06 	br	10004864 <__alt_data_end+0xf8004864>
100052b4:	d8811f17 	ldw	r2,1148(sp)
100052b8:	01440074 	movhi	r5,4097
100052bc:	01000044 	movi	r4,1
100052c0:	18c00044 	addi	r3,r3,1
100052c4:	10800044 	addi	r2,r2,1
100052c8:	29429104 	addi	r5,r5,2628
100052cc:	41000115 	stw	r4,4(r8)
100052d0:	41400015 	stw	r5,0(r8)
100052d4:	d8c12015 	stw	r3,1152(sp)
100052d8:	d8811f15 	stw	r2,1148(sp)
100052dc:	010001c4 	movi	r4,7
100052e0:	20806716 	blt	r4,r2,10005480 <___vfprintf_internal_r+0x1b50>
100052e4:	42000204 	addi	r8,r8,8
100052e8:	8000041e 	bne	r16,zero,100052fc <___vfprintf_internal_r+0x19cc>
100052ec:	d8813317 	ldw	r2,1228(sp)
100052f0:	1000021e 	bne	r2,zero,100052fc <___vfprintf_internal_r+0x19cc>
100052f4:	e080004c 	andi	r2,fp,1
100052f8:	103ba026 	beq	r2,zero,1000417c <__alt_data_end+0xf800417c>
100052fc:	d9013817 	ldw	r4,1248(sp)
10005300:	d8811f17 	ldw	r2,1148(sp)
10005304:	d9413517 	ldw	r5,1236(sp)
10005308:	1907883a 	add	r3,r3,r4
1000530c:	10800044 	addi	r2,r2,1
10005310:	41000115 	stw	r4,4(r8)
10005314:	41400015 	stw	r5,0(r8)
10005318:	d8c12015 	stw	r3,1152(sp)
1000531c:	d8811f15 	stw	r2,1148(sp)
10005320:	010001c4 	movi	r4,7
10005324:	20815716 	blt	r4,r2,10005884 <___vfprintf_internal_r+0x1f54>
10005328:	42000204 	addi	r8,r8,8
1000532c:	0421c83a 	sub	r16,zero,r16
10005330:	0400810e 	bge	zero,r16,10005538 <___vfprintf_internal_r+0x1c08>
10005334:	04400404 	movi	r17,16
10005338:	8c00bd0e 	bge	r17,r16,10005630 <___vfprintf_internal_r+0x1d00>
1000533c:	01440074 	movhi	r5,4097
10005340:	29429184 	addi	r5,r5,2630
10005344:	d9412c15 	stw	r5,1200(sp)
10005348:	04c001c4 	movi	r19,7
1000534c:	00000306 	br	1000535c <___vfprintf_internal_r+0x1a2c>
10005350:	42000204 	addi	r8,r8,8
10005354:	843ffc04 	addi	r16,r16,-16
10005358:	8c00b80e 	bge	r17,r16,1000563c <___vfprintf_internal_r+0x1d0c>
1000535c:	18c00404 	addi	r3,r3,16
10005360:	10800044 	addi	r2,r2,1
10005364:	45000015 	stw	r20,0(r8)
10005368:	44400115 	stw	r17,4(r8)
1000536c:	d8c12015 	stw	r3,1152(sp)
10005370:	d8811f15 	stw	r2,1148(sp)
10005374:	98bff60e 	bge	r19,r2,10005350 <__alt_data_end+0xf8005350>
10005378:	b809883a 	mov	r4,r23
1000537c:	b00b883a 	mov	r5,r22
10005380:	d9811e04 	addi	r6,sp,1144
10005384:	000a2680 	call	1000a268 <__sprint_r>
10005388:	103a811e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
1000538c:	d8c12017 	ldw	r3,1152(sp)
10005390:	d8811f17 	ldw	r2,1148(sp)
10005394:	da000404 	addi	r8,sp,16
10005398:	003fee06 	br	10005354 <__alt_data_end+0xf8005354>
1000539c:	008011c4 	movi	r2,71
100053a0:	1400db16 	blt	r2,r16,10005710 <___vfprintf_internal_r+0x1de0>
100053a4:	01040074 	movhi	r4,4097
100053a8:	21028304 	addi	r4,r4,2572
100053ac:	d9013115 	stw	r4,1220(sp)
100053b0:	00c000c4 	movi	r3,3
100053b4:	00bfdfc4 	movi	r2,-129
100053b8:	d8c12b15 	stw	r3,1196(sp)
100053bc:	e0b8703a 	and	fp,fp,r2
100053c0:	dcc12783 	ldbu	r19,1182(sp)
100053c4:	dc812d15 	stw	r18,1204(sp)
100053c8:	1823883a 	mov	r17,r3
100053cc:	d8013215 	stw	zero,1224(sp)
100053d0:	d8013415 	stw	zero,1232(sp)
100053d4:	003ad606 	br	10003f30 <__alt_data_end+0xf8003f30>
100053d8:	4823883a 	mov	r17,r9
100053dc:	003cc906 	br	10004704 <__alt_data_end+0xf8004704>
100053e0:	1c800017 	ldw	r18,0(r3)
100053e4:	d8c12d17 	ldw	r3,1204(sp)
100053e8:	902bd7fa 	srai	r21,r18,31
100053ec:	18c00104 	addi	r3,r3,4
100053f0:	d8c12d15 	stw	r3,1204(sp)
100053f4:	a805883a 	mov	r2,r21
100053f8:	003aa906 	br	10003ea0 <__alt_data_end+0xf8003ea0>
100053fc:	d9412d17 	ldw	r5,1204(sp)
10005400:	14800017 	ldw	r18,0(r2)
10005404:	002b883a 	mov	r21,zero
10005408:	29400104 	addi	r5,r5,4
1000540c:	d9412d15 	stw	r5,1204(sp)
10005410:	003bf906 	br	100043f8 <__alt_data_end+0xf80043f8>
10005414:	d8c12d17 	ldw	r3,1204(sp)
10005418:	14800017 	ldw	r18,0(r2)
1000541c:	002b883a 	mov	r21,zero
10005420:	18c00104 	addi	r3,r3,4
10005424:	d8c12d15 	stw	r3,1204(sp)
10005428:	00800044 	movi	r2,1
1000542c:	9007883a 	mov	r3,r18
10005430:	003bcf06 	br	10004370 <__alt_data_end+0xf8004370>
10005434:	d9012d17 	ldw	r4,1204(sp)
10005438:	14800017 	ldw	r18,0(r2)
1000543c:	002b883a 	mov	r21,zero
10005440:	21000104 	addi	r4,r4,4
10005444:	d9012d15 	stw	r4,1204(sp)
10005448:	0005883a 	mov	r2,zero
1000544c:	9007883a 	mov	r3,r18
10005450:	003bc706 	br	10004370 <__alt_data_end+0xf8004370>
10005454:	d9412d17 	ldw	r5,1204(sp)
10005458:	d8c12f17 	ldw	r3,1212(sp)
1000545c:	28800017 	ldw	r2,0(r5)
10005460:	29400104 	addi	r5,r5,4
10005464:	d9412d15 	stw	r5,1204(sp)
10005468:	10c00015 	stw	r3,0(r2)
1000546c:	00396d06 	br	10003a24 <__alt_data_end+0xf8003a24>
10005470:	01040074 	movhi	r4,4097
10005474:	21028104 	addi	r4,r4,2564
10005478:	d9013115 	stw	r4,1220(sp)
1000547c:	003ba206 	br	10004308 <__alt_data_end+0xf8004308>
10005480:	b809883a 	mov	r4,r23
10005484:	b00b883a 	mov	r5,r22
10005488:	d9811e04 	addi	r6,sp,1144
1000548c:	000a2680 	call	1000a268 <__sprint_r>
10005490:	103a3f1e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
10005494:	dc012617 	ldw	r16,1176(sp)
10005498:	d8c12017 	ldw	r3,1152(sp)
1000549c:	da000404 	addi	r8,sp,16
100054a0:	003f9106 	br	100052e8 <__alt_data_end+0xf80052e8>
100054a4:	e0800044 	addi	r2,fp,1
100054a8:	9cc00814 	ori	r19,r19,32
100054ac:	e4000047 	ldb	r16,1(fp)
100054b0:	00398706 	br	10003ad0 <__alt_data_end+0xf8003ad0>
100054b4:	d8812e17 	ldw	r2,1208(sp)
100054b8:	d8c12d15 	stw	r3,1204(sp)
100054bc:	0085c83a 	sub	r2,zero,r2
100054c0:	d8812e15 	stw	r2,1208(sp)
100054c4:	e005883a 	mov	r2,fp
100054c8:	003a3a06 	br	10003db4 <__alt_data_end+0xf8003db4>
100054cc:	b809883a 	mov	r4,r23
100054d0:	b00b883a 	mov	r5,r22
100054d4:	d9811e04 	addi	r6,sp,1144
100054d8:	000a2680 	call	1000a268 <__sprint_r>
100054dc:	103a2c1e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
100054e0:	d8c12017 	ldw	r3,1152(sp)
100054e4:	da000404 	addi	r8,sp,16
100054e8:	003cf006 	br	100048ac <__alt_data_end+0xf80048ac>
100054ec:	d8c12817 	ldw	r3,1184(sp)
100054f0:	d9013117 	ldw	r4,1220(sp)
100054f4:	1923c83a 	sub	r17,r3,r4
100054f8:	003a8806 	br	10003f1c <__alt_data_end+0xf8003f1c>
100054fc:	da013f15 	stw	r8,1276(sp)
10005500:	000a0d40 	call	1000a0d4 <strlen>
10005504:	1023883a 	mov	r17,r2
10005508:	da013f17 	ldw	r8,1276(sp)
1000550c:	883c7f0e 	bge	r17,zero,1000470c <__alt_data_end+0xf800470c>
10005510:	0005883a 	mov	r2,zero
10005514:	003c7d06 	br	1000470c <__alt_data_end+0xf800470c>
10005518:	b809883a 	mov	r4,r23
1000551c:	b00b883a 	mov	r5,r22
10005520:	d9811e04 	addi	r6,sp,1144
10005524:	000a2680 	call	1000a268 <__sprint_r>
10005528:	103a191e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
1000552c:	d8c12017 	ldw	r3,1152(sp)
10005530:	d8811f17 	ldw	r2,1148(sp)
10005534:	da000404 	addi	r8,sp,16
10005538:	d9413317 	ldw	r5,1228(sp)
1000553c:	d9013117 	ldw	r4,1220(sp)
10005540:	10800044 	addi	r2,r2,1
10005544:	28c7883a 	add	r3,r5,r3
10005548:	41000015 	stw	r4,0(r8)
1000554c:	41400115 	stw	r5,4(r8)
10005550:	d8c12015 	stw	r3,1152(sp)
10005554:	d8811f15 	stw	r2,1148(sp)
10005558:	010001c4 	movi	r4,7
1000555c:	20bb060e 	bge	r4,r2,10004178 <__alt_data_end+0xf8004178>
10005560:	003d6206 	br	10004aec <__alt_data_end+0xf8004aec>
10005564:	01040074 	movhi	r4,4097
10005568:	21029584 	addi	r4,r4,2646
1000556c:	d9013615 	stw	r4,1240(sp)
10005570:	003aa306 	br	10004000 <__alt_data_end+0xf8004000>
10005574:	d8812604 	addi	r2,sp,1176
10005578:	d8800115 	stw	r2,4(sp)
1000557c:	d9413717 	ldw	r5,1244(sp)
10005580:	d8812504 	addi	r2,sp,1172
10005584:	d8800215 	stw	r2,8(sp)
10005588:	d8812104 	addi	r2,sp,1156
1000558c:	da400015 	stw	r9,0(sp)
10005590:	d8800315 	stw	r2,12(sp)
10005594:	b809883a 	mov	r4,r23
10005598:	880d883a 	mov	r6,r17
1000559c:	01c000c4 	movi	r7,3
100055a0:	da013f15 	stw	r8,1276(sp)
100055a4:	da413e15 	stw	r9,1272(sp)
100055a8:	0005da80 	call	10005da8 <_dtoa_r>
100055ac:	da413e17 	ldw	r9,1272(sp)
100055b0:	da013f17 	ldw	r8,1276(sp)
100055b4:	d8813115 	stw	r2,1220(sp)
100055b8:	482b883a 	mov	r21,r9
100055bc:	d8c13117 	ldw	r3,1220(sp)
100055c0:	00801184 	movi	r2,70
100055c4:	1d55883a 	add	r10,r3,r21
100055c8:	98bebb1e 	bne	r19,r2,100050b8 <__alt_data_end+0xf80050b8>
100055cc:	19000007 	ldb	r4,0(r3)
100055d0:	00800c04 	movi	r2,48
100055d4:	2080dd26 	beq	r4,r2,1000594c <___vfprintf_internal_r+0x201c>
100055d8:	d8c12617 	ldw	r3,1176(sp)
100055dc:	50d5883a 	add	r10,r10,r3
100055e0:	003eb506 	br	100050b8 <__alt_data_end+0xf80050b8>
100055e4:	0023883a 	mov	r17,zero
100055e8:	003d9b06 	br	10004c58 <__alt_data_end+0xf8004c58>
100055ec:	b809883a 	mov	r4,r23
100055f0:	b00b883a 	mov	r5,r22
100055f4:	d9811e04 	addi	r6,sp,1144
100055f8:	000a2680 	call	1000a268 <__sprint_r>
100055fc:	1039e41e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
10005600:	d8c12017 	ldw	r3,1152(sp)
10005604:	da000404 	addi	r8,sp,16
10005608:	003d9206 	br	10004c54 <__alt_data_end+0xf8004c54>
1000560c:	b809883a 	mov	r4,r23
10005610:	b00b883a 	mov	r5,r22
10005614:	d9811e04 	addi	r6,sp,1144
10005618:	000a2680 	call	1000a268 <__sprint_r>
1000561c:	1039dc1e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
10005620:	d8812617 	ldw	r2,1176(sp)
10005624:	d8c12017 	ldw	r3,1152(sp)
10005628:	da000404 	addi	r8,sp,16
1000562c:	003dfb06 	br	10004e1c <__alt_data_end+0xf8004e1c>
10005630:	01040074 	movhi	r4,4097
10005634:	21029184 	addi	r4,r4,2630
10005638:	d9012c15 	stw	r4,1200(sp)
1000563c:	d9012c17 	ldw	r4,1200(sp)
10005640:	1c07883a 	add	r3,r3,r16
10005644:	10800044 	addi	r2,r2,1
10005648:	41000015 	stw	r4,0(r8)
1000564c:	44000115 	stw	r16,4(r8)
10005650:	d8c12015 	stw	r3,1152(sp)
10005654:	d8811f15 	stw	r2,1148(sp)
10005658:	010001c4 	movi	r4,7
1000565c:	20bfae16 	blt	r4,r2,10005518 <__alt_data_end+0xf8005518>
10005660:	42000204 	addi	r8,r8,8
10005664:	003fb406 	br	10005538 <__alt_data_end+0xf8005538>
10005668:	0021883a 	mov	r16,zero
1000566c:	003dfd06 	br	10004e64 <__alt_data_end+0xf8004e64>
10005670:	01440074 	movhi	r5,4097
10005674:	29429584 	addi	r5,r5,2646
10005678:	d9413615 	stw	r5,1240(sp)
1000567c:	003ae306 	br	1000420c <__alt_data_end+0xf800420c>
10005680:	b809883a 	mov	r4,r23
10005684:	b00b883a 	mov	r5,r22
10005688:	d9811e04 	addi	r6,sp,1144
1000568c:	000a2680 	call	1000a268 <__sprint_r>
10005690:	1039bf1e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
10005694:	d8812617 	ldw	r2,1176(sp)
10005698:	d9413317 	ldw	r5,1228(sp)
1000569c:	d8c12017 	ldw	r3,1152(sp)
100056a0:	da000404 	addi	r8,sp,16
100056a4:	2885c83a 	sub	r2,r5,r2
100056a8:	003ded06 	br	10004e60 <__alt_data_end+0xf8004e60>
100056ac:	00800184 	movi	r2,6
100056b0:	1240012e 	bgeu	r2,r9,100056b8 <___vfprintf_internal_r+0x1d88>
100056b4:	1013883a 	mov	r9,r2
100056b8:	4823883a 	mov	r17,r9
100056bc:	4805883a 	mov	r2,r9
100056c0:	4800b216 	blt	r9,zero,1000598c <___vfprintf_internal_r+0x205c>
100056c4:	01440074 	movhi	r5,4097
100056c8:	29428f04 	addi	r5,r5,2620
100056cc:	d8812b15 	stw	r2,1196(sp)
100056d0:	dc812d15 	stw	r18,1204(sp)
100056d4:	d8013215 	stw	zero,1224(sp)
100056d8:	d8013415 	stw	zero,1232(sp)
100056dc:	d9413115 	stw	r5,1220(sp)
100056e0:	0005883a 	mov	r2,zero
100056e4:	003a1906 	br	10003f4c <__alt_data_end+0xf8003f4c>
100056e8:	04c00b44 	movi	r19,45
100056ec:	dcc12785 	stb	r19,1182(sp)
100056f0:	003b0006 	br	100042f4 <__alt_data_end+0xf80042f4>
100056f4:	d8c12d17 	ldw	r3,1204(sp)
100056f8:	d9012f17 	ldw	r4,1212(sp)
100056fc:	18800017 	ldw	r2,0(r3)
10005700:	18c00104 	addi	r3,r3,4
10005704:	d8c12d15 	stw	r3,1204(sp)
10005708:	11000015 	stw	r4,0(r2)
1000570c:	0038c506 	br	10003a24 <__alt_data_end+0xf8003a24>
10005710:	01440074 	movhi	r5,4097
10005714:	29428404 	addi	r5,r5,2576
10005718:	d9413115 	stw	r5,1220(sp)
1000571c:	003f2406 	br	100053b0 <__alt_data_end+0xf80053b0>
10005720:	00800b44 	movi	r2,45
10005724:	d8812785 	stb	r2,1182(sp)
10005728:	df012b15 	stw	fp,1196(sp)
1000572c:	d8013215 	stw	zero,1224(sp)
10005730:	df012d17 	ldw	fp,1204(sp)
10005734:	00800b44 	movi	r2,45
10005738:	dc812d15 	stw	r18,1204(sp)
1000573c:	003a0006 	br	10003f40 <__alt_data_end+0xf8003f40>
10005740:	d8c12617 	ldw	r3,1176(sp)
10005744:	00bfff44 	movi	r2,-3
10005748:	18800a16 	blt	r3,r2,10005774 <___vfprintf_internal_r+0x1e44>
1000574c:	48c00916 	blt	r9,r3,10005774 <___vfprintf_internal_r+0x1e44>
10005750:	d8c13415 	stw	r3,1232(sp)
10005754:	040019c4 	movi	r16,103
10005758:	003e7606 	br	10005134 <__alt_data_end+0xf8005134>
1000575c:	01040074 	movhi	r4,4097
10005760:	21029184 	addi	r4,r4,2630
10005764:	d9012c15 	stw	r4,1200(sp)
10005768:	003c8e06 	br	100049a4 <__alt_data_end+0xf80049a4>
1000576c:	5005883a 	mov	r2,r10
10005770:	003e6506 	br	10005108 <__alt_data_end+0xf8005108>
10005774:	843fff84 	addi	r16,r16,-2
10005778:	1d7fffc4 	addi	r21,r3,-1
1000577c:	dd412615 	stw	r21,1176(sp)
10005780:	dc0122c5 	stb	r16,1163(sp)
10005784:	a8009216 	blt	r21,zero,100059d0 <___vfprintf_internal_r+0x20a0>
10005788:	00800ac4 	movi	r2,43
1000578c:	d8812305 	stb	r2,1164(sp)
10005790:	00800244 	movi	r2,9
10005794:	1540660e 	bge	r2,r21,10005930 <___vfprintf_internal_r+0x2000>
10005798:	dcc122c4 	addi	r19,sp,1163
1000579c:	dc012c15 	stw	r16,1200(sp)
100057a0:	4023883a 	mov	r17,r8
100057a4:	9821883a 	mov	r16,r19
100057a8:	a809883a 	mov	r4,r21
100057ac:	01400284 	movi	r5,10
100057b0:	00024900 	call	10002490 <__modsi3>
100057b4:	10800c04 	addi	r2,r2,48
100057b8:	843fffc4 	addi	r16,r16,-1
100057bc:	a809883a 	mov	r4,r21
100057c0:	01400284 	movi	r5,10
100057c4:	80800005 	stb	r2,0(r16)
100057c8:	000243c0 	call	1000243c <__divsi3>
100057cc:	01000244 	movi	r4,9
100057d0:	102b883a 	mov	r21,r2
100057d4:	20bff416 	blt	r4,r2,100057a8 <__alt_data_end+0xf80057a8>
100057d8:	8811883a 	mov	r8,r17
100057dc:	10800c04 	addi	r2,r2,48
100057e0:	8023883a 	mov	r17,r16
100057e4:	897fffc4 	addi	r5,r17,-1
100057e8:	88bfffc5 	stb	r2,-1(r17)
100057ec:	dc012c17 	ldw	r16,1200(sp)
100057f0:	2cc08a2e 	bgeu	r5,r19,10005a1c <___vfprintf_internal_r+0x20ec>
100057f4:	d9812384 	addi	r6,sp,1166
100057f8:	344dc83a 	sub	r6,r6,r17
100057fc:	d9012344 	addi	r4,sp,1165
10005800:	998d883a 	add	r6,r19,r6
10005804:	00000106 	br	1000580c <___vfprintf_internal_r+0x1edc>
10005808:	28800003 	ldbu	r2,0(r5)
1000580c:	20800005 	stb	r2,0(r4)
10005810:	21000044 	addi	r4,r4,1
10005814:	29400044 	addi	r5,r5,1
10005818:	21bffb1e 	bne	r4,r6,10005808 <__alt_data_end+0xf8005808>
1000581c:	d8812304 	addi	r2,sp,1164
10005820:	1445c83a 	sub	r2,r2,r17
10005824:	d9412344 	addi	r5,sp,1165
10005828:	2885883a 	add	r2,r5,r2
1000582c:	14e7c83a 	sub	r19,r2,r19
10005830:	d8813317 	ldw	r2,1228(sp)
10005834:	d8c13317 	ldw	r3,1228(sp)
10005838:	dcc13a15 	stw	r19,1256(sp)
1000583c:	14e3883a 	add	r17,r2,r19
10005840:	00800044 	movi	r2,1
10005844:	10c0550e 	bge	r2,r3,1000599c <___vfprintf_internal_r+0x206c>
10005848:	8c400044 	addi	r17,r17,1
1000584c:	8839883a 	mov	fp,r17
10005850:	88005016 	blt	r17,zero,10005994 <___vfprintf_internal_r+0x2064>
10005854:	d8013415 	stw	zero,1232(sp)
10005858:	003e3f06 	br	10005158 <__alt_data_end+0xf8005158>
1000585c:	da412b15 	stw	r9,1196(sp)
10005860:	dcc12783 	ldbu	r19,1182(sp)
10005864:	4823883a 	mov	r17,r9
10005868:	dc812d15 	stw	r18,1204(sp)
1000586c:	d8013215 	stw	zero,1224(sp)
10005870:	d8013415 	stw	zero,1232(sp)
10005874:	0039ae06 	br	10003f30 <__alt_data_end+0xf8003f30>
10005878:	483de91e 	bne	r9,zero,10005020 <__alt_data_end+0xf8005020>
1000587c:	8813883a 	mov	r9,r17
10005880:	003de706 	br	10005020 <__alt_data_end+0xf8005020>
10005884:	b809883a 	mov	r4,r23
10005888:	b00b883a 	mov	r5,r22
1000588c:	d9811e04 	addi	r6,sp,1144
10005890:	000a2680 	call	1000a268 <__sprint_r>
10005894:	10393e1e 	bne	r2,zero,10003d90 <__alt_data_end+0xf8003d90>
10005898:	dc012617 	ldw	r16,1176(sp)
1000589c:	d8c12017 	ldw	r3,1152(sp)
100058a0:	d8811f17 	ldw	r2,1148(sp)
100058a4:	da000404 	addi	r8,sp,16
100058a8:	003ea006 	br	1000532c <__alt_data_end+0xf800532c>
100058ac:	00c00b44 	movi	r3,45
100058b0:	2460003c 	xorhi	r17,r4,32768
100058b4:	d8c12b05 	stb	r3,1196(sp)
100058b8:	003ddf06 	br	10005038 <__alt_data_end+0xf8005038>
100058bc:	02400184 	movi	r9,6
100058c0:	003dd706 	br	10005020 <__alt_data_end+0xf8005020>
100058c4:	4d400044 	addi	r21,r9,1
100058c8:	003de206 	br	10005054 <__alt_data_end+0xf8005054>
100058cc:	d8c13417 	ldw	r3,1232(sp)
100058d0:	00c0490e 	bge	zero,r3,100059f8 <___vfprintf_internal_r+0x20c8>
100058d4:	04400044 	movi	r17,1
100058d8:	d9013317 	ldw	r4,1228(sp)
100058dc:	8923883a 	add	r17,r17,r4
100058e0:	8839883a 	mov	fp,r17
100058e4:	883e1c0e 	bge	r17,zero,10005158 <__alt_data_end+0xf8005158>
100058e8:	0039883a 	mov	fp,zero
100058ec:	003e1a06 	br	10005158 <__alt_data_end+0xf8005158>
100058f0:	00c03b0e 	bge	zero,r3,100059e0 <___vfprintf_internal_r+0x20b0>
100058f4:	4800021e 	bne	r9,zero,10005900 <___vfprintf_internal_r+0x1fd0>
100058f8:	e080004c 	andi	r2,fp,1
100058fc:	10000626 	beq	r2,zero,10005918 <___vfprintf_internal_r+0x1fe8>
10005900:	d8c13417 	ldw	r3,1232(sp)
10005904:	4a400044 	addi	r9,r9,1
10005908:	1a63883a 	add	r17,r3,r9
1000590c:	8839883a 	mov	fp,r17
10005910:	883e110e 	bge	r17,zero,10005158 <__alt_data_end+0xf8005158>
10005914:	003ff406 	br	100058e8 <__alt_data_end+0xf80058e8>
10005918:	1839883a 	mov	fp,r3
1000591c:	18004116 	blt	r3,zero,10005a24 <___vfprintf_internal_r+0x20f4>
10005920:	dc413417 	ldw	r17,1232(sp)
10005924:	003e0c06 	br	10005158 <__alt_data_end+0xf8005158>
10005928:	d8812117 	ldw	r2,1156(sp)
1000592c:	003df606 	br	10005108 <__alt_data_end+0xf8005108>
10005930:	00800c04 	movi	r2,48
10005934:	a8c00c04 	addi	r3,r21,48
10005938:	d8812345 	stb	r2,1165(sp)
1000593c:	d8c12385 	stb	r3,1166(sp)
10005940:	d88123c4 	addi	r2,sp,1167
10005944:	dcc122c4 	addi	r19,sp,1163
10005948:	003fb806 	br	1000582c <__alt_data_end+0xf800582c>
1000594c:	d9013717 	ldw	r4,1244(sp)
10005950:	880b883a 	mov	r5,r17
10005954:	000d883a 	mov	r6,zero
10005958:	000f883a 	mov	r7,zero
1000595c:	da013f15 	stw	r8,1276(sp)
10005960:	da413e15 	stw	r9,1272(sp)
10005964:	da813d15 	stw	r10,1268(sp)
10005968:	000d6400 	call	1000d640 <__eqdf2>
1000596c:	da013f17 	ldw	r8,1276(sp)
10005970:	da413e17 	ldw	r9,1272(sp)
10005974:	da813d17 	ldw	r10,1268(sp)
10005978:	103f1726 	beq	r2,zero,100055d8 <__alt_data_end+0xf80055d8>
1000597c:	00800044 	movi	r2,1
10005980:	1547c83a 	sub	r3,r2,r21
10005984:	d8c12615 	stw	r3,1176(sp)
10005988:	003f1406 	br	100055dc <__alt_data_end+0xf80055dc>
1000598c:	0005883a 	mov	r2,zero
10005990:	003f4c06 	br	100056c4 <__alt_data_end+0xf80056c4>
10005994:	0039883a 	mov	fp,zero
10005998:	003fae06 	br	10005854 <__alt_data_end+0xf8005854>
1000599c:	e084703a 	and	r2,fp,r2
100059a0:	103faa26 	beq	r2,zero,1000584c <__alt_data_end+0xf800584c>
100059a4:	003fa806 	br	10005848 <__alt_data_end+0xf8005848>
100059a8:	d9412d17 	ldw	r5,1204(sp)
100059ac:	2a400017 	ldw	r9,0(r5)
100059b0:	28c00104 	addi	r3,r5,4
100059b4:	d8c12d15 	stw	r3,1204(sp)
100059b8:	483ebc0e 	bge	r9,zero,100054ac <__alt_data_end+0xf80054ac>
100059bc:	027fffc4 	movi	r9,-1
100059c0:	e4000047 	ldb	r16,1(fp)
100059c4:	00384206 	br	10003ad0 <__alt_data_end+0xf8003ad0>
100059c8:	043fffc4 	movi	r16,-1
100059cc:	0038ce06 	br	10003d08 <__alt_data_end+0xf8003d08>
100059d0:	00800b44 	movi	r2,45
100059d4:	056bc83a 	sub	r21,zero,r21
100059d8:	d8812305 	stb	r2,1164(sp)
100059dc:	003f6c06 	br	10005790 <__alt_data_end+0xf8005790>
100059e0:	4800081e 	bne	r9,zero,10005a04 <___vfprintf_internal_r+0x20d4>
100059e4:	e080004c 	andi	r2,fp,1
100059e8:	1000061e 	bne	r2,zero,10005a04 <___vfprintf_internal_r+0x20d4>
100059ec:	07000044 	movi	fp,1
100059f0:	e023883a 	mov	r17,fp
100059f4:	003dd806 	br	10005158 <__alt_data_end+0xf8005158>
100059f8:	04400084 	movi	r17,2
100059fc:	88e3c83a 	sub	r17,r17,r3
10005a00:	003fb506 	br	100058d8 <__alt_data_end+0xf80058d8>
10005a04:	4c400084 	addi	r17,r9,2
10005a08:	8839883a 	mov	fp,r17
10005a0c:	883dd20e 	bge	r17,zero,10005158 <__alt_data_end+0xf8005158>
10005a10:	003fb506 	br	100058e8 <__alt_data_end+0xf80058e8>
10005a14:	d8c12617 	ldw	r3,1176(sp)
10005a18:	003f5706 	br	10005778 <__alt_data_end+0xf8005778>
10005a1c:	d8812344 	addi	r2,sp,1165
10005a20:	003f8206 	br	1000582c <__alt_data_end+0xf800582c>
10005a24:	0039883a 	mov	fp,zero
10005a28:	003fbd06 	br	10005920 <__alt_data_end+0xf8005920>

10005a2c <__vfprintf_internal>:
10005a2c:	2007883a 	mov	r3,r4
10005a30:	01040074 	movhi	r4,4097
10005a34:	2109ac04 	addi	r4,r4,9904
10005a38:	21000017 	ldw	r4,0(r4)
10005a3c:	2805883a 	mov	r2,r5
10005a40:	300f883a 	mov	r7,r6
10005a44:	180b883a 	mov	r5,r3
10005a48:	100d883a 	mov	r6,r2
10005a4c:	00039301 	jmpi	10003930 <___vfprintf_internal_r>

10005a50 <__swsetup_r>:
10005a50:	00840074 	movhi	r2,4097
10005a54:	defffd04 	addi	sp,sp,-12
10005a58:	1089ac04 	addi	r2,r2,9904
10005a5c:	dc400115 	stw	r17,4(sp)
10005a60:	2023883a 	mov	r17,r4
10005a64:	11000017 	ldw	r4,0(r2)
10005a68:	dc000015 	stw	r16,0(sp)
10005a6c:	dfc00215 	stw	ra,8(sp)
10005a70:	2821883a 	mov	r16,r5
10005a74:	20000226 	beq	r4,zero,10005a80 <__swsetup_r+0x30>
10005a78:	20c00e17 	ldw	r3,56(r4)
10005a7c:	18002e26 	beq	r3,zero,10005b38 <__swsetup_r+0xe8>
10005a80:	8080030b 	ldhu	r2,12(r16)
10005a84:	10c0020c 	andi	r3,r2,8
10005a88:	100d883a 	mov	r6,r2
10005a8c:	18000f26 	beq	r3,zero,10005acc <__swsetup_r+0x7c>
10005a90:	80c00417 	ldw	r3,16(r16)
10005a94:	18001526 	beq	r3,zero,10005aec <__swsetup_r+0x9c>
10005a98:	1100004c 	andi	r4,r2,1
10005a9c:	20001c1e 	bne	r4,zero,10005b10 <__swsetup_r+0xc0>
10005aa0:	1080008c 	andi	r2,r2,2
10005aa4:	1000261e 	bne	r2,zero,10005b40 <__swsetup_r+0xf0>
10005aa8:	80800517 	ldw	r2,20(r16)
10005aac:	80800215 	stw	r2,8(r16)
10005ab0:	18001c26 	beq	r3,zero,10005b24 <__swsetup_r+0xd4>
10005ab4:	0005883a 	mov	r2,zero
10005ab8:	dfc00217 	ldw	ra,8(sp)
10005abc:	dc400117 	ldw	r17,4(sp)
10005ac0:	dc000017 	ldw	r16,0(sp)
10005ac4:	dec00304 	addi	sp,sp,12
10005ac8:	f800283a 	ret
10005acc:	3080040c 	andi	r2,r6,16
10005ad0:	10001726 	beq	r2,zero,10005b30 <__swsetup_r+0xe0>
10005ad4:	3080010c 	andi	r2,r6,4
10005ad8:	10001b1e 	bne	r2,zero,10005b48 <__swsetup_r+0xf8>
10005adc:	80c00417 	ldw	r3,16(r16)
10005ae0:	30800214 	ori	r2,r6,8
10005ae4:	8080030d 	sth	r2,12(r16)
10005ae8:	183feb1e 	bne	r3,zero,10005a98 <__alt_data_end+0xf8005a98>
10005aec:	1140a00c 	andi	r5,r2,640
10005af0:	01008004 	movi	r4,512
10005af4:	293fe826 	beq	r5,r4,10005a98 <__alt_data_end+0xf8005a98>
10005af8:	8809883a 	mov	r4,r17
10005afc:	800b883a 	mov	r5,r16
10005b00:	00081400 	call	10008140 <__smakebuf_r>
10005b04:	8080030b 	ldhu	r2,12(r16)
10005b08:	80c00417 	ldw	r3,16(r16)
10005b0c:	003fe206 	br	10005a98 <__alt_data_end+0xf8005a98>
10005b10:	80800517 	ldw	r2,20(r16)
10005b14:	80000215 	stw	zero,8(r16)
10005b18:	0085c83a 	sub	r2,zero,r2
10005b1c:	80800615 	stw	r2,24(r16)
10005b20:	183fe41e 	bne	r3,zero,10005ab4 <__alt_data_end+0xf8005ab4>
10005b24:	8080030b 	ldhu	r2,12(r16)
10005b28:	1080200c 	andi	r2,r2,128
10005b2c:	103fe226 	beq	r2,zero,10005ab8 <__alt_data_end+0xf8005ab8>
10005b30:	00bfffc4 	movi	r2,-1
10005b34:	003fe006 	br	10005ab8 <__alt_data_end+0xf8005ab8>
10005b38:	0007a8c0 	call	10007a8c <__sinit>
10005b3c:	003fd006 	br	10005a80 <__alt_data_end+0xf8005a80>
10005b40:	0005883a 	mov	r2,zero
10005b44:	003fd906 	br	10005aac <__alt_data_end+0xf8005aac>
10005b48:	81400c17 	ldw	r5,48(r16)
10005b4c:	28000626 	beq	r5,zero,10005b68 <__swsetup_r+0x118>
10005b50:	80801004 	addi	r2,r16,64
10005b54:	28800326 	beq	r5,r2,10005b64 <__swsetup_r+0x114>
10005b58:	8809883a 	mov	r4,r17
10005b5c:	0007c000 	call	10007c00 <_free_r>
10005b60:	8180030b 	ldhu	r6,12(r16)
10005b64:	80000c15 	stw	zero,48(r16)
10005b68:	80c00417 	ldw	r3,16(r16)
10005b6c:	00bff6c4 	movi	r2,-37
10005b70:	118c703a 	and	r6,r2,r6
10005b74:	80000115 	stw	zero,4(r16)
10005b78:	80c00015 	stw	r3,0(r16)
10005b7c:	003fd806 	br	10005ae0 <__alt_data_end+0xf8005ae0>

10005b80 <quorem>:
10005b80:	defff204 	addi	sp,sp,-56
10005b84:	ddc00b15 	stw	r23,44(sp)
10005b88:	20800417 	ldw	r2,16(r4)
10005b8c:	2dc00417 	ldw	r23,16(r5)
10005b90:	dfc00d15 	stw	ra,52(sp)
10005b94:	df000c15 	stw	fp,48(sp)
10005b98:	dd800a15 	stw	r22,40(sp)
10005b9c:	dd400915 	stw	r21,36(sp)
10005ba0:	dd000815 	stw	r20,32(sp)
10005ba4:	dcc00715 	stw	r19,28(sp)
10005ba8:	dc800615 	stw	r18,24(sp)
10005bac:	dc400515 	stw	r17,20(sp)
10005bb0:	dc000415 	stw	r16,16(sp)
10005bb4:	15c07a16 	blt	r2,r23,10005da0 <quorem+0x220>
10005bb8:	bdffffc4 	addi	r23,r23,-1
10005bbc:	bde9883a 	add	r20,r23,r23
10005bc0:	28c00504 	addi	r3,r5,20
10005bc4:	a529883a 	add	r20,r20,r20
10005bc8:	1d39883a 	add	fp,r3,r20
10005bcc:	24c00504 	addi	r19,r4,20
10005bd0:	d9400215 	stw	r5,8(sp)
10005bd4:	9d29883a 	add	r20,r19,r20
10005bd8:	e1400017 	ldw	r5,0(fp)
10005bdc:	d9000015 	stw	r4,0(sp)
10005be0:	a1000017 	ldw	r4,0(r20)
10005be4:	29400044 	addi	r5,r5,1
10005be8:	d8c00115 	stw	r3,4(sp)
10005bec:	dd000315 	stw	r20,12(sp)
10005bf0:	00024ec0 	call	100024ec <__udivsi3>
10005bf4:	1025883a 	mov	r18,r2
10005bf8:	10003026 	beq	r2,zero,10005cbc <quorem+0x13c>
10005bfc:	dc400117 	ldw	r17,4(sp)
10005c00:	9829883a 	mov	r20,r19
10005c04:	002d883a 	mov	r22,zero
10005c08:	0021883a 	mov	r16,zero
10005c0c:	8d400017 	ldw	r21,0(r17)
10005c10:	900b883a 	mov	r5,r18
10005c14:	8c400104 	addi	r17,r17,4
10005c18:	a93fffcc 	andi	r4,r21,65535
10005c1c:	00024fc0 	call	100024fc <__mulsi3>
10005c20:	a808d43a 	srli	r4,r21,16
10005c24:	900b883a 	mov	r5,r18
10005c28:	b0ad883a 	add	r22,r22,r2
10005c2c:	00024fc0 	call	100024fc <__mulsi3>
10005c30:	a1000017 	ldw	r4,0(r20)
10005c34:	b00cd43a 	srli	r6,r22,16
10005c38:	b0ffffcc 	andi	r3,r22,65535
10005c3c:	217fffcc 	andi	r5,r4,65535
10005c40:	2c21883a 	add	r16,r5,r16
10005c44:	80c7c83a 	sub	r3,r16,r3
10005c48:	2008d43a 	srli	r4,r4,16
10005c4c:	3085883a 	add	r2,r6,r2
10005c50:	1821d43a 	srai	r16,r3,16
10005c54:	117fffcc 	andi	r5,r2,65535
10005c58:	2149c83a 	sub	r4,r4,r5
10005c5c:	2421883a 	add	r16,r4,r16
10005c60:	8008943a 	slli	r4,r16,16
10005c64:	18ffffcc 	andi	r3,r3,65535
10005c68:	102cd43a 	srli	r22,r2,16
10005c6c:	20c8b03a 	or	r4,r4,r3
10005c70:	a1000015 	stw	r4,0(r20)
10005c74:	8021d43a 	srai	r16,r16,16
10005c78:	a5000104 	addi	r20,r20,4
10005c7c:	e47fe32e 	bgeu	fp,r17,10005c0c <__alt_data_end+0xf8005c0c>
10005c80:	d8c00317 	ldw	r3,12(sp)
10005c84:	18800017 	ldw	r2,0(r3)
10005c88:	10000c1e 	bne	r2,zero,10005cbc <quorem+0x13c>
10005c8c:	18bfff04 	addi	r2,r3,-4
10005c90:	9880082e 	bgeu	r19,r2,10005cb4 <quorem+0x134>
10005c94:	18ffff17 	ldw	r3,-4(r3)
10005c98:	18000326 	beq	r3,zero,10005ca8 <quorem+0x128>
10005c9c:	00000506 	br	10005cb4 <quorem+0x134>
10005ca0:	10c00017 	ldw	r3,0(r2)
10005ca4:	1800031e 	bne	r3,zero,10005cb4 <quorem+0x134>
10005ca8:	10bfff04 	addi	r2,r2,-4
10005cac:	bdffffc4 	addi	r23,r23,-1
10005cb0:	98bffb36 	bltu	r19,r2,10005ca0 <__alt_data_end+0xf8005ca0>
10005cb4:	d8c00017 	ldw	r3,0(sp)
10005cb8:	1dc00415 	stw	r23,16(r3)
10005cbc:	d9000017 	ldw	r4,0(sp)
10005cc0:	d9400217 	ldw	r5,8(sp)
10005cc4:	00097600 	call	10009760 <__mcmp>
10005cc8:	10002816 	blt	r2,zero,10005d6c <quorem+0x1ec>
10005ccc:	dc400117 	ldw	r17,4(sp)
10005cd0:	94800044 	addi	r18,r18,1
10005cd4:	980d883a 	mov	r6,r19
10005cd8:	0007883a 	mov	r3,zero
10005cdc:	31000017 	ldw	r4,0(r6)
10005ce0:	89400017 	ldw	r5,0(r17)
10005ce4:	31800104 	addi	r6,r6,4
10005ce8:	20bfffcc 	andi	r2,r4,65535
10005cec:	10c7883a 	add	r3,r2,r3
10005cf0:	28bfffcc 	andi	r2,r5,65535
10005cf4:	1885c83a 	sub	r2,r3,r2
10005cf8:	280ad43a 	srli	r5,r5,16
10005cfc:	2008d43a 	srli	r4,r4,16
10005d00:	1007d43a 	srai	r3,r2,16
10005d04:	10bfffcc 	andi	r2,r2,65535
10005d08:	2149c83a 	sub	r4,r4,r5
10005d0c:	20c9883a 	add	r4,r4,r3
10005d10:	200a943a 	slli	r5,r4,16
10005d14:	8c400104 	addi	r17,r17,4
10005d18:	2007d43a 	srai	r3,r4,16
10005d1c:	2884b03a 	or	r2,r5,r2
10005d20:	30bfff15 	stw	r2,-4(r6)
10005d24:	e47fed2e 	bgeu	fp,r17,10005cdc <__alt_data_end+0xf8005cdc>
10005d28:	bdc5883a 	add	r2,r23,r23
10005d2c:	1085883a 	add	r2,r2,r2
10005d30:	9887883a 	add	r3,r19,r2
10005d34:	18800017 	ldw	r2,0(r3)
10005d38:	10000c1e 	bne	r2,zero,10005d6c <quorem+0x1ec>
10005d3c:	18bfff04 	addi	r2,r3,-4
10005d40:	9880082e 	bgeu	r19,r2,10005d64 <quorem+0x1e4>
10005d44:	18ffff17 	ldw	r3,-4(r3)
10005d48:	18000326 	beq	r3,zero,10005d58 <quorem+0x1d8>
10005d4c:	00000506 	br	10005d64 <quorem+0x1e4>
10005d50:	10c00017 	ldw	r3,0(r2)
10005d54:	1800031e 	bne	r3,zero,10005d64 <quorem+0x1e4>
10005d58:	10bfff04 	addi	r2,r2,-4
10005d5c:	bdffffc4 	addi	r23,r23,-1
10005d60:	98bffb36 	bltu	r19,r2,10005d50 <__alt_data_end+0xf8005d50>
10005d64:	d8c00017 	ldw	r3,0(sp)
10005d68:	1dc00415 	stw	r23,16(r3)
10005d6c:	9005883a 	mov	r2,r18
10005d70:	dfc00d17 	ldw	ra,52(sp)
10005d74:	df000c17 	ldw	fp,48(sp)
10005d78:	ddc00b17 	ldw	r23,44(sp)
10005d7c:	dd800a17 	ldw	r22,40(sp)
10005d80:	dd400917 	ldw	r21,36(sp)
10005d84:	dd000817 	ldw	r20,32(sp)
10005d88:	dcc00717 	ldw	r19,28(sp)
10005d8c:	dc800617 	ldw	r18,24(sp)
10005d90:	dc400517 	ldw	r17,20(sp)
10005d94:	dc000417 	ldw	r16,16(sp)
10005d98:	dec00e04 	addi	sp,sp,56
10005d9c:	f800283a 	ret
10005da0:	0005883a 	mov	r2,zero
10005da4:	003ff206 	br	10005d70 <__alt_data_end+0xf8005d70>

10005da8 <_dtoa_r>:
10005da8:	20801017 	ldw	r2,64(r4)
10005dac:	deffde04 	addi	sp,sp,-136
10005db0:	dd401d15 	stw	r21,116(sp)
10005db4:	dcc01b15 	stw	r19,108(sp)
10005db8:	dc801a15 	stw	r18,104(sp)
10005dbc:	dc401915 	stw	r17,100(sp)
10005dc0:	dc001815 	stw	r16,96(sp)
10005dc4:	dfc02115 	stw	ra,132(sp)
10005dc8:	df002015 	stw	fp,128(sp)
10005dcc:	ddc01f15 	stw	r23,124(sp)
10005dd0:	dd801e15 	stw	r22,120(sp)
10005dd4:	dd001c15 	stw	r20,112(sp)
10005dd8:	d9c00315 	stw	r7,12(sp)
10005ddc:	2021883a 	mov	r16,r4
10005de0:	302b883a 	mov	r21,r6
10005de4:	2825883a 	mov	r18,r5
10005de8:	dc402417 	ldw	r17,144(sp)
10005dec:	3027883a 	mov	r19,r6
10005df0:	10000826 	beq	r2,zero,10005e14 <_dtoa_r+0x6c>
10005df4:	21801117 	ldw	r6,68(r4)
10005df8:	00c00044 	movi	r3,1
10005dfc:	100b883a 	mov	r5,r2
10005e00:	1986983a 	sll	r3,r3,r6
10005e04:	11800115 	stw	r6,4(r2)
10005e08:	10c00215 	stw	r3,8(r2)
10005e0c:	0008e8c0 	call	10008e8c <_Bfree>
10005e10:	80001015 	stw	zero,64(r16)
10005e14:	a8002d16 	blt	r21,zero,10005ecc <_dtoa_r+0x124>
10005e18:	88000015 	stw	zero,0(r17)
10005e1c:	a8dffc2c 	andhi	r3,r21,32752
10005e20:	009ffc34 	movhi	r2,32752
10005e24:	18801b26 	beq	r3,r2,10005e94 <_dtoa_r+0xec>
10005e28:	9009883a 	mov	r4,r18
10005e2c:	980b883a 	mov	r5,r19
10005e30:	000d883a 	mov	r6,zero
10005e34:	000f883a 	mov	r7,zero
10005e38:	000d6400 	call	1000d640 <__eqdf2>
10005e3c:	10002a1e 	bne	r2,zero,10005ee8 <_dtoa_r+0x140>
10005e40:	d8c02317 	ldw	r3,140(sp)
10005e44:	d9002517 	ldw	r4,148(sp)
10005e48:	00800044 	movi	r2,1
10005e4c:	18800015 	stw	r2,0(r3)
10005e50:	2001a226 	beq	r4,zero,100064dc <_dtoa_r+0x734>
10005e54:	00840074 	movhi	r2,4097
10005e58:	10829144 	addi	r2,r2,2629
10005e5c:	20800015 	stw	r2,0(r4)
10005e60:	10bfffc4 	addi	r2,r2,-1
10005e64:	dfc02117 	ldw	ra,132(sp)
10005e68:	df002017 	ldw	fp,128(sp)
10005e6c:	ddc01f17 	ldw	r23,124(sp)
10005e70:	dd801e17 	ldw	r22,120(sp)
10005e74:	dd401d17 	ldw	r21,116(sp)
10005e78:	dd001c17 	ldw	r20,112(sp)
10005e7c:	dcc01b17 	ldw	r19,108(sp)
10005e80:	dc801a17 	ldw	r18,104(sp)
10005e84:	dc401917 	ldw	r17,100(sp)
10005e88:	dc001817 	ldw	r16,96(sp)
10005e8c:	dec02204 	addi	sp,sp,136
10005e90:	f800283a 	ret
10005e94:	d8c02317 	ldw	r3,140(sp)
10005e98:	0089c3c4 	movi	r2,9999
10005e9c:	18800015 	stw	r2,0(r3)
10005ea0:	90017c26 	beq	r18,zero,10006494 <_dtoa_r+0x6ec>
10005ea4:	00840074 	movhi	r2,4097
10005ea8:	10829d04 	addi	r2,r2,2676
10005eac:	d9002517 	ldw	r4,148(sp)
10005eb0:	203fec26 	beq	r4,zero,10005e64 <__alt_data_end+0xf8005e64>
10005eb4:	10c000c7 	ldb	r3,3(r2)
10005eb8:	18017d1e 	bne	r3,zero,100064b0 <_dtoa_r+0x708>
10005ebc:	10c000c4 	addi	r3,r2,3
10005ec0:	d9802517 	ldw	r6,148(sp)
10005ec4:	30c00015 	stw	r3,0(r6)
10005ec8:	003fe606 	br	10005e64 <__alt_data_end+0xf8005e64>
10005ecc:	04e00034 	movhi	r19,32768
10005ed0:	9cffffc4 	addi	r19,r19,-1
10005ed4:	00800044 	movi	r2,1
10005ed8:	ace6703a 	and	r19,r21,r19
10005edc:	88800015 	stw	r2,0(r17)
10005ee0:	982b883a 	mov	r21,r19
10005ee4:	003fcd06 	br	10005e1c <__alt_data_end+0xf8005e1c>
10005ee8:	d8800204 	addi	r2,sp,8
10005eec:	a822d53a 	srli	r17,r21,20
10005ef0:	d8800015 	stw	r2,0(sp)
10005ef4:	8009883a 	mov	r4,r16
10005ef8:	900b883a 	mov	r5,r18
10005efc:	980d883a 	mov	r6,r19
10005f00:	d9c00104 	addi	r7,sp,4
10005f04:	0009ad40 	call	10009ad4 <__d2b>
10005f08:	1039883a 	mov	fp,r2
10005f0c:	88016a1e 	bne	r17,zero,100064b8 <_dtoa_r+0x710>
10005f10:	dd000217 	ldw	r20,8(sp)
10005f14:	dc400117 	ldw	r17,4(sp)
10005f18:	00befbc4 	movi	r2,-1041
10005f1c:	a463883a 	add	r17,r20,r17
10005f20:	8882ea16 	blt	r17,r2,10006acc <_dtoa_r+0xd24>
10005f24:	00bf0384 	movi	r2,-1010
10005f28:	1445c83a 	sub	r2,r2,r17
10005f2c:	89010484 	addi	r4,r17,1042
10005f30:	a8aa983a 	sll	r21,r21,r2
10005f34:	9108d83a 	srl	r4,r18,r4
10005f38:	a908b03a 	or	r4,r21,r4
10005f3c:	000e0f00 	call	1000e0f0 <__floatunsidf>
10005f40:	017f8434 	movhi	r5,65040
10005f44:	01800044 	movi	r6,1
10005f48:	1009883a 	mov	r4,r2
10005f4c:	194b883a 	add	r5,r3,r5
10005f50:	8c7fffc4 	addi	r17,r17,-1
10005f54:	d9800f15 	stw	r6,60(sp)
10005f58:	000d883a 	mov	r6,zero
10005f5c:	01cffe34 	movhi	r7,16376
10005f60:	0002dc00 	call	10002dc0 <__subdf3>
10005f64:	0198dbf4 	movhi	r6,25455
10005f68:	01cff4f4 	movhi	r7,16339
10005f6c:	1009883a 	mov	r4,r2
10005f70:	180b883a 	mov	r5,r3
10005f74:	3190d844 	addi	r6,r6,17249
10005f78:	39e1e9c4 	addi	r7,r7,-30809
10005f7c:	000d8840 	call	1000d884 <__muldf3>
10005f80:	01a2d874 	movhi	r6,35681
10005f84:	01cff1f4 	movhi	r7,16327
10005f88:	180b883a 	mov	r5,r3
10005f8c:	31b22cc4 	addi	r6,r6,-14157
10005f90:	39e28a04 	addi	r7,r7,-30168
10005f94:	1009883a 	mov	r4,r2
10005f98:	00025240 	call	10002524 <__adddf3>
10005f9c:	8809883a 	mov	r4,r17
10005fa0:	102d883a 	mov	r22,r2
10005fa4:	182b883a 	mov	r21,r3
10005fa8:	00037180 	call	10003718 <__floatsidf>
10005fac:	019427f4 	movhi	r6,20639
10005fb0:	01cff4f4 	movhi	r7,16339
10005fb4:	1009883a 	mov	r4,r2
10005fb8:	180b883a 	mov	r5,r3
10005fbc:	319e7ec4 	addi	r6,r6,31227
10005fc0:	39d104c4 	addi	r7,r7,17427
10005fc4:	000d8840 	call	1000d884 <__muldf3>
10005fc8:	b009883a 	mov	r4,r22
10005fcc:	a80b883a 	mov	r5,r21
10005fd0:	100d883a 	mov	r6,r2
10005fd4:	180f883a 	mov	r7,r3
10005fd8:	00025240 	call	10002524 <__adddf3>
10005fdc:	1009883a 	mov	r4,r2
10005fe0:	180b883a 	mov	r5,r3
10005fe4:	102d883a 	mov	r22,r2
10005fe8:	182b883a 	mov	r21,r3
10005fec:	00036900 	call	10003690 <__fixdfsi>
10005ff0:	b009883a 	mov	r4,r22
10005ff4:	a80b883a 	mov	r5,r21
10005ff8:	000d883a 	mov	r6,zero
10005ffc:	000f883a 	mov	r7,zero
10006000:	d8800515 	stw	r2,20(sp)
10006004:	000d7a40 	call	1000d7a4 <__ledf2>
10006008:	10023116 	blt	r2,zero,100068d0 <_dtoa_r+0xb28>
1000600c:	d8c00517 	ldw	r3,20(sp)
10006010:	00800584 	movi	r2,22
10006014:	10c21f36 	bltu	r2,r3,10006894 <_dtoa_r+0xaec>
10006018:	180490fa 	slli	r2,r3,3
1000601c:	00c40074 	movhi	r3,4097
10006020:	18c2b904 	addi	r3,r3,2788
10006024:	1885883a 	add	r2,r3,r2
10006028:	11000017 	ldw	r4,0(r2)
1000602c:	11400117 	ldw	r5,4(r2)
10006030:	900d883a 	mov	r6,r18
10006034:	980f883a 	mov	r7,r19
10006038:	000d6c40 	call	1000d6c4 <__gedf2>
1000603c:	0082a70e 	bge	zero,r2,10006adc <_dtoa_r+0xd34>
10006040:	d9000517 	ldw	r4,20(sp)
10006044:	d8000c15 	stw	zero,48(sp)
10006048:	213fffc4 	addi	r4,r4,-1
1000604c:	d9000515 	stw	r4,20(sp)
10006050:	a463c83a 	sub	r17,r20,r17
10006054:	8dbfffc4 	addi	r22,r17,-1
10006058:	b0021916 	blt	r22,zero,100068c0 <_dtoa_r+0xb18>
1000605c:	d8000815 	stw	zero,32(sp)
10006060:	d8800517 	ldw	r2,20(sp)
10006064:	10020e16 	blt	r2,zero,100068a0 <_dtoa_r+0xaf8>
10006068:	b0ad883a 	add	r22,r22,r2
1000606c:	d8800a15 	stw	r2,40(sp)
10006070:	d8000915 	stw	zero,36(sp)
10006074:	d8c00317 	ldw	r3,12(sp)
10006078:	00800244 	movi	r2,9
1000607c:	10c11a36 	bltu	r2,r3,100064e8 <_dtoa_r+0x740>
10006080:	00800144 	movi	r2,5
10006084:	10c4fc0e 	bge	r2,r3,10007478 <_dtoa_r+0x16d0>
10006088:	18ffff04 	addi	r3,r3,-4
1000608c:	d8c00315 	stw	r3,12(sp)
10006090:	0029883a 	mov	r20,zero
10006094:	d9800317 	ldw	r6,12(sp)
10006098:	008000c4 	movi	r2,3
1000609c:	3083bd26 	beq	r6,r2,10006f94 <_dtoa_r+0x11ec>
100060a0:	1183670e 	bge	r2,r6,10006e40 <_dtoa_r+0x1098>
100060a4:	d8c00317 	ldw	r3,12(sp)
100060a8:	00800104 	movi	r2,4
100060ac:	1882e726 	beq	r3,r2,10006c4c <_dtoa_r+0xea4>
100060b0:	00800144 	movi	r2,5
100060b4:	1884f21e 	bne	r3,r2,10007480 <_dtoa_r+0x16d8>
100060b8:	00800044 	movi	r2,1
100060bc:	d8800b15 	stw	r2,44(sp)
100060c0:	d8c02217 	ldw	r3,136(sp)
100060c4:	d9000517 	ldw	r4,20(sp)
100060c8:	1907883a 	add	r3,r3,r4
100060cc:	19800044 	addi	r6,r3,1
100060d0:	d8c00d15 	stw	r3,52(sp)
100060d4:	d9800615 	stw	r6,24(sp)
100060d8:	0183c30e 	bge	zero,r6,10006fe8 <_dtoa_r+0x1240>
100060dc:	d9800617 	ldw	r6,24(sp)
100060e0:	3023883a 	mov	r17,r6
100060e4:	80001115 	stw	zero,68(r16)
100060e8:	008005c4 	movi	r2,23
100060ec:	1184f62e 	bgeu	r2,r6,100074c8 <_dtoa_r+0x1720>
100060f0:	00c00044 	movi	r3,1
100060f4:	00800104 	movi	r2,4
100060f8:	1085883a 	add	r2,r2,r2
100060fc:	11000504 	addi	r4,r2,20
10006100:	180b883a 	mov	r5,r3
10006104:	18c00044 	addi	r3,r3,1
10006108:	313ffb2e 	bgeu	r6,r4,100060f8 <__alt_data_end+0xf80060f8>
1000610c:	81401115 	stw	r5,68(r16)
10006110:	8009883a 	mov	r4,r16
10006114:	0008de40 	call	10008de4 <_Balloc>
10006118:	d8800715 	stw	r2,28(sp)
1000611c:	80801015 	stw	r2,64(r16)
10006120:	00800384 	movi	r2,14
10006124:	1440fd36 	bltu	r2,r17,1000651c <_dtoa_r+0x774>
10006128:	a000fc26 	beq	r20,zero,1000651c <_dtoa_r+0x774>
1000612c:	d8800517 	ldw	r2,20(sp)
10006130:	0083b90e 	bge	zero,r2,10007018 <_dtoa_r+0x1270>
10006134:	d8c00517 	ldw	r3,20(sp)
10006138:	108003cc 	andi	r2,r2,15
1000613c:	100490fa 	slli	r2,r2,3
10006140:	182fd13a 	srai	r23,r3,4
10006144:	00c40074 	movhi	r3,4097
10006148:	18c2b904 	addi	r3,r3,2788
1000614c:	1885883a 	add	r2,r3,r2
10006150:	b8c0040c 	andi	r3,r23,16
10006154:	12c00017 	ldw	r11,0(r2)
10006158:	12800117 	ldw	r10,4(r2)
1000615c:	18039726 	beq	r3,zero,10006fbc <_dtoa_r+0x1214>
10006160:	00840074 	movhi	r2,4097
10006164:	1082af04 	addi	r2,r2,2748
10006168:	11800817 	ldw	r6,32(r2)
1000616c:	11c00917 	ldw	r7,36(r2)
10006170:	9009883a 	mov	r4,r18
10006174:	980b883a 	mov	r5,r19
10006178:	da801615 	stw	r10,88(sp)
1000617c:	dac01515 	stw	r11,84(sp)
10006180:	000ccc00 	call	1000ccc0 <__divdf3>
10006184:	da801617 	ldw	r10,88(sp)
10006188:	dac01517 	ldw	r11,84(sp)
1000618c:	bdc003cc 	andi	r23,r23,15
10006190:	044000c4 	movi	r17,3
10006194:	d8800e15 	stw	r2,56(sp)
10006198:	182b883a 	mov	r21,r3
1000619c:	b8001126 	beq	r23,zero,100061e4 <_dtoa_r+0x43c>
100061a0:	05040074 	movhi	r20,4097
100061a4:	a502af04 	addi	r20,r20,2748
100061a8:	5805883a 	mov	r2,r11
100061ac:	5007883a 	mov	r3,r10
100061b0:	b980004c 	andi	r6,r23,1
100061b4:	1009883a 	mov	r4,r2
100061b8:	b82fd07a 	srai	r23,r23,1
100061bc:	180b883a 	mov	r5,r3
100061c0:	30000426 	beq	r6,zero,100061d4 <_dtoa_r+0x42c>
100061c4:	a1800017 	ldw	r6,0(r20)
100061c8:	a1c00117 	ldw	r7,4(r20)
100061cc:	8c400044 	addi	r17,r17,1
100061d0:	000d8840 	call	1000d884 <__muldf3>
100061d4:	a5000204 	addi	r20,r20,8
100061d8:	b83ff51e 	bne	r23,zero,100061b0 <__alt_data_end+0xf80061b0>
100061dc:	1017883a 	mov	r11,r2
100061e0:	1815883a 	mov	r10,r3
100061e4:	d9000e17 	ldw	r4,56(sp)
100061e8:	a80b883a 	mov	r5,r21
100061ec:	580d883a 	mov	r6,r11
100061f0:	500f883a 	mov	r7,r10
100061f4:	000ccc00 	call	1000ccc0 <__divdf3>
100061f8:	1029883a 	mov	r20,r2
100061fc:	182b883a 	mov	r21,r3
10006200:	d9800c17 	ldw	r6,48(sp)
10006204:	30000626 	beq	r6,zero,10006220 <_dtoa_r+0x478>
10006208:	a009883a 	mov	r4,r20
1000620c:	a80b883a 	mov	r5,r21
10006210:	000d883a 	mov	r6,zero
10006214:	01cffc34 	movhi	r7,16368
10006218:	000d7a40 	call	1000d7a4 <__ledf2>
1000621c:	10043216 	blt	r2,zero,100072e8 <_dtoa_r+0x1540>
10006220:	8809883a 	mov	r4,r17
10006224:	00037180 	call	10003718 <__floatsidf>
10006228:	1009883a 	mov	r4,r2
1000622c:	180b883a 	mov	r5,r3
10006230:	a00d883a 	mov	r6,r20
10006234:	a80f883a 	mov	r7,r21
10006238:	000d8840 	call	1000d884 <__muldf3>
1000623c:	000d883a 	mov	r6,zero
10006240:	1009883a 	mov	r4,r2
10006244:	180b883a 	mov	r5,r3
10006248:	01d00734 	movhi	r7,16412
1000624c:	00025240 	call	10002524 <__adddf3>
10006250:	1023883a 	mov	r17,r2
10006254:	d9800617 	ldw	r6,24(sp)
10006258:	00bf3034 	movhi	r2,64704
1000625c:	1885883a 	add	r2,r3,r2
10006260:	d8800e15 	stw	r2,56(sp)
10006264:	30032e26 	beq	r6,zero,10006f20 <_dtoa_r+0x1178>
10006268:	d8c00517 	ldw	r3,20(sp)
1000626c:	da800617 	ldw	r10,24(sp)
10006270:	d8c01215 	stw	r3,72(sp)
10006274:	d9000b17 	ldw	r4,44(sp)
10006278:	2003b026 	beq	r4,zero,1000713c <_dtoa_r+0x1394>
1000627c:	50bfffc4 	addi	r2,r10,-1
10006280:	100490fa 	slli	r2,r2,3
10006284:	00c40074 	movhi	r3,4097
10006288:	18c2b904 	addi	r3,r3,2788
1000628c:	1885883a 	add	r2,r3,r2
10006290:	11800017 	ldw	r6,0(r2)
10006294:	11c00117 	ldw	r7,4(r2)
10006298:	d8800717 	ldw	r2,28(sp)
1000629c:	0009883a 	mov	r4,zero
100062a0:	014ff834 	movhi	r5,16352
100062a4:	da801615 	stw	r10,88(sp)
100062a8:	15c00044 	addi	r23,r2,1
100062ac:	000ccc00 	call	1000ccc0 <__divdf3>
100062b0:	d9c00e17 	ldw	r7,56(sp)
100062b4:	880d883a 	mov	r6,r17
100062b8:	1009883a 	mov	r4,r2
100062bc:	180b883a 	mov	r5,r3
100062c0:	0002dc00 	call	10002dc0 <__subdf3>
100062c4:	a80b883a 	mov	r5,r21
100062c8:	a009883a 	mov	r4,r20
100062cc:	d8c01015 	stw	r3,64(sp)
100062d0:	d8800e15 	stw	r2,56(sp)
100062d4:	00036900 	call	10003690 <__fixdfsi>
100062d8:	1009883a 	mov	r4,r2
100062dc:	d8801715 	stw	r2,92(sp)
100062e0:	00037180 	call	10003718 <__floatsidf>
100062e4:	a009883a 	mov	r4,r20
100062e8:	a80b883a 	mov	r5,r21
100062ec:	100d883a 	mov	r6,r2
100062f0:	180f883a 	mov	r7,r3
100062f4:	0002dc00 	call	10002dc0 <__subdf3>
100062f8:	da001717 	ldw	r8,92(sp)
100062fc:	1829883a 	mov	r20,r3
10006300:	d8c00717 	ldw	r3,28(sp)
10006304:	d9000e17 	ldw	r4,56(sp)
10006308:	d9401017 	ldw	r5,64(sp)
1000630c:	42000c04 	addi	r8,r8,48
10006310:	1023883a 	mov	r17,r2
10006314:	1a000005 	stb	r8,0(r3)
10006318:	880d883a 	mov	r6,r17
1000631c:	a00f883a 	mov	r7,r20
10006320:	402b883a 	mov	r21,r8
10006324:	000d6c40 	call	1000d6c4 <__gedf2>
10006328:	00844516 	blt	zero,r2,10007440 <_dtoa_r+0x1698>
1000632c:	0009883a 	mov	r4,zero
10006330:	014ffc34 	movhi	r5,16368
10006334:	880d883a 	mov	r6,r17
10006338:	a00f883a 	mov	r7,r20
1000633c:	0002dc00 	call	10002dc0 <__subdf3>
10006340:	d9000e17 	ldw	r4,56(sp)
10006344:	d9401017 	ldw	r5,64(sp)
10006348:	100d883a 	mov	r6,r2
1000634c:	180f883a 	mov	r7,r3
10006350:	000d6c40 	call	1000d6c4 <__gedf2>
10006354:	da801617 	ldw	r10,88(sp)
10006358:	00843616 	blt	zero,r2,10007434 <_dtoa_r+0x168c>
1000635c:	00800044 	movi	r2,1
10006360:	12806e0e 	bge	r2,r10,1000651c <_dtoa_r+0x774>
10006364:	d9000717 	ldw	r4,28(sp)
10006368:	dd801315 	stw	r22,76(sp)
1000636c:	dc001115 	stw	r16,68(sp)
10006370:	2295883a 	add	r10,r4,r10
10006374:	dcc01415 	stw	r19,80(sp)
10006378:	502d883a 	mov	r22,r10
1000637c:	dcc01017 	ldw	r19,64(sp)
10006380:	b821883a 	mov	r16,r23
10006384:	dc801015 	stw	r18,64(sp)
10006388:	dc800e17 	ldw	r18,56(sp)
1000638c:	00000906 	br	100063b4 <_dtoa_r+0x60c>
10006390:	0002dc00 	call	10002dc0 <__subdf3>
10006394:	1009883a 	mov	r4,r2
10006398:	180b883a 	mov	r5,r3
1000639c:	900d883a 	mov	r6,r18
100063a0:	980f883a 	mov	r7,r19
100063a4:	000d7a40 	call	1000d7a4 <__ledf2>
100063a8:	10040e16 	blt	r2,zero,100073e4 <_dtoa_r+0x163c>
100063ac:	b821883a 	mov	r16,r23
100063b0:	bd841026 	beq	r23,r22,100073f4 <_dtoa_r+0x164c>
100063b4:	9009883a 	mov	r4,r18
100063b8:	980b883a 	mov	r5,r19
100063bc:	000d883a 	mov	r6,zero
100063c0:	01d00934 	movhi	r7,16420
100063c4:	000d8840 	call	1000d884 <__muldf3>
100063c8:	000d883a 	mov	r6,zero
100063cc:	01d00934 	movhi	r7,16420
100063d0:	8809883a 	mov	r4,r17
100063d4:	a00b883a 	mov	r5,r20
100063d8:	1025883a 	mov	r18,r2
100063dc:	1827883a 	mov	r19,r3
100063e0:	000d8840 	call	1000d884 <__muldf3>
100063e4:	180b883a 	mov	r5,r3
100063e8:	1009883a 	mov	r4,r2
100063ec:	1823883a 	mov	r17,r3
100063f0:	1029883a 	mov	r20,r2
100063f4:	00036900 	call	10003690 <__fixdfsi>
100063f8:	1009883a 	mov	r4,r2
100063fc:	102b883a 	mov	r21,r2
10006400:	00037180 	call	10003718 <__floatsidf>
10006404:	a009883a 	mov	r4,r20
10006408:	880b883a 	mov	r5,r17
1000640c:	100d883a 	mov	r6,r2
10006410:	180f883a 	mov	r7,r3
10006414:	0002dc00 	call	10002dc0 <__subdf3>
10006418:	ad400c04 	addi	r21,r21,48
1000641c:	1009883a 	mov	r4,r2
10006420:	180b883a 	mov	r5,r3
10006424:	900d883a 	mov	r6,r18
10006428:	980f883a 	mov	r7,r19
1000642c:	85400005 	stb	r21,0(r16)
10006430:	1023883a 	mov	r17,r2
10006434:	1829883a 	mov	r20,r3
10006438:	000d7a40 	call	1000d7a4 <__ledf2>
1000643c:	bdc00044 	addi	r23,r23,1
10006440:	0009883a 	mov	r4,zero
10006444:	014ffc34 	movhi	r5,16368
10006448:	880d883a 	mov	r6,r17
1000644c:	a00f883a 	mov	r7,r20
10006450:	103fcf0e 	bge	r2,zero,10006390 <__alt_data_end+0xf8006390>
10006454:	d9801217 	ldw	r6,72(sp)
10006458:	dc001117 	ldw	r16,68(sp)
1000645c:	d9800515 	stw	r6,20(sp)
10006460:	8009883a 	mov	r4,r16
10006464:	e00b883a 	mov	r5,fp
10006468:	0008e8c0 	call	10008e8c <_Bfree>
1000646c:	d8c00517 	ldw	r3,20(sp)
10006470:	d9002317 	ldw	r4,140(sp)
10006474:	d9802517 	ldw	r6,148(sp)
10006478:	b8000005 	stb	zero,0(r23)
1000647c:	18800044 	addi	r2,r3,1
10006480:	20800015 	stw	r2,0(r4)
10006484:	30027226 	beq	r6,zero,10006e50 <_dtoa_r+0x10a8>
10006488:	35c00015 	stw	r23,0(r6)
1000648c:	d8800717 	ldw	r2,28(sp)
10006490:	003e7406 	br	10005e64 <__alt_data_end+0xf8005e64>
10006494:	00800434 	movhi	r2,16
10006498:	10bfffc4 	addi	r2,r2,-1
1000649c:	a8aa703a 	and	r21,r21,r2
100064a0:	a83e801e 	bne	r21,zero,10005ea4 <__alt_data_end+0xf8005ea4>
100064a4:	00840074 	movhi	r2,4097
100064a8:	10829a04 	addi	r2,r2,2664
100064ac:	003e7f06 	br	10005eac <__alt_data_end+0xf8005eac>
100064b0:	10c00204 	addi	r3,r2,8
100064b4:	003e8206 	br	10005ec0 <__alt_data_end+0xf8005ec0>
100064b8:	01400434 	movhi	r5,16
100064bc:	297fffc4 	addi	r5,r5,-1
100064c0:	994a703a 	and	r5,r19,r5
100064c4:	9009883a 	mov	r4,r18
100064c8:	8c7f0044 	addi	r17,r17,-1023
100064cc:	294ffc34 	orhi	r5,r5,16368
100064d0:	dd000217 	ldw	r20,8(sp)
100064d4:	d8000f15 	stw	zero,60(sp)
100064d8:	003e9f06 	br	10005f58 <__alt_data_end+0xf8005f58>
100064dc:	00840074 	movhi	r2,4097
100064e0:	10829104 	addi	r2,r2,2628
100064e4:	003e5f06 	br	10005e64 <__alt_data_end+0xf8005e64>
100064e8:	80001115 	stw	zero,68(r16)
100064ec:	8009883a 	mov	r4,r16
100064f0:	000b883a 	mov	r5,zero
100064f4:	0008de40 	call	10008de4 <_Balloc>
100064f8:	01bfffc4 	movi	r6,-1
100064fc:	d8800715 	stw	r2,28(sp)
10006500:	80801015 	stw	r2,64(r16)
10006504:	00800044 	movi	r2,1
10006508:	d9800615 	stw	r6,24(sp)
1000650c:	d8800b15 	stw	r2,44(sp)
10006510:	d8002215 	stw	zero,136(sp)
10006514:	d9800d15 	stw	r6,52(sp)
10006518:	d8000315 	stw	zero,12(sp)
1000651c:	d8800117 	ldw	r2,4(sp)
10006520:	10008e16 	blt	r2,zero,1000675c <_dtoa_r+0x9b4>
10006524:	d9000517 	ldw	r4,20(sp)
10006528:	00c00384 	movi	r3,14
1000652c:	19008b16 	blt	r3,r4,1000675c <_dtoa_r+0x9b4>
10006530:	200490fa 	slli	r2,r4,3
10006534:	00c40074 	movhi	r3,4097
10006538:	d9802217 	ldw	r6,136(sp)
1000653c:	18c2b904 	addi	r3,r3,2788
10006540:	1885883a 	add	r2,r3,r2
10006544:	14400017 	ldw	r17,0(r2)
10006548:	15000117 	ldw	r20,4(r2)
1000654c:	3001c716 	blt	r6,zero,10006c6c <_dtoa_r+0xec4>
10006550:	880d883a 	mov	r6,r17
10006554:	a00f883a 	mov	r7,r20
10006558:	9009883a 	mov	r4,r18
1000655c:	980b883a 	mov	r5,r19
10006560:	000ccc00 	call	1000ccc0 <__divdf3>
10006564:	180b883a 	mov	r5,r3
10006568:	1009883a 	mov	r4,r2
1000656c:	00036900 	call	10003690 <__fixdfsi>
10006570:	1009883a 	mov	r4,r2
10006574:	102d883a 	mov	r22,r2
10006578:	00037180 	call	10003718 <__floatsidf>
1000657c:	1009883a 	mov	r4,r2
10006580:	180b883a 	mov	r5,r3
10006584:	880d883a 	mov	r6,r17
10006588:	a00f883a 	mov	r7,r20
1000658c:	000d8840 	call	1000d884 <__muldf3>
10006590:	9009883a 	mov	r4,r18
10006594:	980b883a 	mov	r5,r19
10006598:	100d883a 	mov	r6,r2
1000659c:	180f883a 	mov	r7,r3
100065a0:	0002dc00 	call	10002dc0 <__subdf3>
100065a4:	d9000717 	ldw	r4,28(sp)
100065a8:	d9800617 	ldw	r6,24(sp)
100065ac:	180b883a 	mov	r5,r3
100065b0:	b0c00c04 	addi	r3,r22,48
100065b4:	20c00005 	stb	r3,0(r4)
100065b8:	25c00044 	addi	r23,r4,1
100065bc:	01000044 	movi	r4,1
100065c0:	1011883a 	mov	r8,r2
100065c4:	2807883a 	mov	r3,r5
100065c8:	31003d26 	beq	r6,r4,100066c0 <_dtoa_r+0x918>
100065cc:	000d883a 	mov	r6,zero
100065d0:	01d00934 	movhi	r7,16420
100065d4:	1009883a 	mov	r4,r2
100065d8:	000d8840 	call	1000d884 <__muldf3>
100065dc:	1009883a 	mov	r4,r2
100065e0:	180b883a 	mov	r5,r3
100065e4:	000d883a 	mov	r6,zero
100065e8:	000f883a 	mov	r7,zero
100065ec:	1027883a 	mov	r19,r2
100065f0:	182b883a 	mov	r21,r3
100065f4:	000d6400 	call	1000d640 <__eqdf2>
100065f8:	103f9926 	beq	r2,zero,10006460 <__alt_data_end+0xf8006460>
100065fc:	d8c00617 	ldw	r3,24(sp)
10006600:	d9000717 	ldw	r4,28(sp)
10006604:	b825883a 	mov	r18,r23
10006608:	18bfffc4 	addi	r2,r3,-1
1000660c:	20ad883a 	add	r22,r4,r2
10006610:	dc000315 	stw	r16,12(sp)
10006614:	00000a06 	br	10006640 <_dtoa_r+0x898>
10006618:	000d8840 	call	1000d884 <__muldf3>
1000661c:	1009883a 	mov	r4,r2
10006620:	180b883a 	mov	r5,r3
10006624:	000d883a 	mov	r6,zero
10006628:	000f883a 	mov	r7,zero
1000662c:	1027883a 	mov	r19,r2
10006630:	182b883a 	mov	r21,r3
10006634:	b825883a 	mov	r18,r23
10006638:	000d6400 	call	1000d640 <__eqdf2>
1000663c:	10022626 	beq	r2,zero,10006ed8 <_dtoa_r+0x1130>
10006640:	880d883a 	mov	r6,r17
10006644:	a00f883a 	mov	r7,r20
10006648:	9809883a 	mov	r4,r19
1000664c:	a80b883a 	mov	r5,r21
10006650:	000ccc00 	call	1000ccc0 <__divdf3>
10006654:	180b883a 	mov	r5,r3
10006658:	1009883a 	mov	r4,r2
1000665c:	00036900 	call	10003690 <__fixdfsi>
10006660:	1009883a 	mov	r4,r2
10006664:	1021883a 	mov	r16,r2
10006668:	00037180 	call	10003718 <__floatsidf>
1000666c:	1009883a 	mov	r4,r2
10006670:	180b883a 	mov	r5,r3
10006674:	880d883a 	mov	r6,r17
10006678:	a00f883a 	mov	r7,r20
1000667c:	000d8840 	call	1000d884 <__muldf3>
10006680:	9809883a 	mov	r4,r19
10006684:	a80b883a 	mov	r5,r21
10006688:	100d883a 	mov	r6,r2
1000668c:	180f883a 	mov	r7,r3
10006690:	0002dc00 	call	10002dc0 <__subdf3>
10006694:	82000c04 	addi	r8,r16,48
10006698:	92000005 	stb	r8,0(r18)
1000669c:	1009883a 	mov	r4,r2
100066a0:	180b883a 	mov	r5,r3
100066a4:	000d883a 	mov	r6,zero
100066a8:	01d00934 	movhi	r7,16420
100066ac:	1011883a 	mov	r8,r2
100066b0:	bdc00044 	addi	r23,r23,1
100066b4:	95bfd81e 	bne	r18,r22,10006618 <__alt_data_end+0xf8006618>
100066b8:	802d883a 	mov	r22,r16
100066bc:	dc000317 	ldw	r16,12(sp)
100066c0:	4009883a 	mov	r4,r8
100066c4:	180b883a 	mov	r5,r3
100066c8:	400d883a 	mov	r6,r8
100066cc:	180f883a 	mov	r7,r3
100066d0:	00025240 	call	10002524 <__adddf3>
100066d4:	8809883a 	mov	r4,r17
100066d8:	a00b883a 	mov	r5,r20
100066dc:	100d883a 	mov	r6,r2
100066e0:	180f883a 	mov	r7,r3
100066e4:	1027883a 	mov	r19,r2
100066e8:	1825883a 	mov	r18,r3
100066ec:	000d7a40 	call	1000d7a4 <__ledf2>
100066f0:	10000816 	blt	r2,zero,10006714 <_dtoa_r+0x96c>
100066f4:	8809883a 	mov	r4,r17
100066f8:	a00b883a 	mov	r5,r20
100066fc:	980d883a 	mov	r6,r19
10006700:	900f883a 	mov	r7,r18
10006704:	000d6400 	call	1000d640 <__eqdf2>
10006708:	103f551e 	bne	r2,zero,10006460 <__alt_data_end+0xf8006460>
1000670c:	b580004c 	andi	r22,r22,1
10006710:	b03f5326 	beq	r22,zero,10006460 <__alt_data_end+0xf8006460>
10006714:	bd7fffc3 	ldbu	r21,-1(r23)
10006718:	b8bfffc4 	addi	r2,r23,-1
1000671c:	1007883a 	mov	r3,r2
10006720:	01400e44 	movi	r5,57
10006724:	d9800717 	ldw	r6,28(sp)
10006728:	00000506 	br	10006740 <_dtoa_r+0x998>
1000672c:	18ffffc4 	addi	r3,r3,-1
10006730:	30825e26 	beq	r6,r2,100070ac <_dtoa_r+0x1304>
10006734:	1d400003 	ldbu	r21,0(r3)
10006738:	102f883a 	mov	r23,r2
1000673c:	10bfffc4 	addi	r2,r2,-1
10006740:	a9003fcc 	andi	r4,r21,255
10006744:	2100201c 	xori	r4,r4,128
10006748:	213fe004 	addi	r4,r4,-128
1000674c:	217ff726 	beq	r4,r5,1000672c <__alt_data_end+0xf800672c>
10006750:	aa000044 	addi	r8,r21,1
10006754:	12000005 	stb	r8,0(r2)
10006758:	003f4106 	br	10006460 <__alt_data_end+0xf8006460>
1000675c:	d8c00b17 	ldw	r3,44(sp)
10006760:	18006726 	beq	r3,zero,10006900 <_dtoa_r+0xb58>
10006764:	d9000317 	ldw	r4,12(sp)
10006768:	00c00044 	movi	r3,1
1000676c:	19016a0e 	bge	r3,r4,10006d18 <_dtoa_r+0xf70>
10006770:	d8800617 	ldw	r2,24(sp)
10006774:	d8c00917 	ldw	r3,36(sp)
10006778:	157fffc4 	addi	r21,r2,-1
1000677c:	1d420716 	blt	r3,r21,10006f9c <_dtoa_r+0x11f4>
10006780:	1d6bc83a 	sub	r21,r3,r21
10006784:	d8800617 	ldw	r2,24(sp)
10006788:	1002c716 	blt	r2,zero,100072a8 <_dtoa_r+0x1500>
1000678c:	dd000817 	ldw	r20,32(sp)
10006790:	d8800617 	ldw	r2,24(sp)
10006794:	d9800817 	ldw	r6,32(sp)
10006798:	8009883a 	mov	r4,r16
1000679c:	01400044 	movi	r5,1
100067a0:	308d883a 	add	r6,r6,r2
100067a4:	d9800815 	stw	r6,32(sp)
100067a8:	b0ad883a 	add	r22,r22,r2
100067ac:	000920c0 	call	1000920c <__i2b>
100067b0:	1023883a 	mov	r17,r2
100067b4:	a0000826 	beq	r20,zero,100067d8 <_dtoa_r+0xa30>
100067b8:	0580070e 	bge	zero,r22,100067d8 <_dtoa_r+0xa30>
100067bc:	b005883a 	mov	r2,r22
100067c0:	a5812016 	blt	r20,r22,10006c44 <_dtoa_r+0xe9c>
100067c4:	d8c00817 	ldw	r3,32(sp)
100067c8:	a0a9c83a 	sub	r20,r20,r2
100067cc:	b0adc83a 	sub	r22,r22,r2
100067d0:	1887c83a 	sub	r3,r3,r2
100067d4:	d8c00815 	stw	r3,32(sp)
100067d8:	d9000917 	ldw	r4,36(sp)
100067dc:	0100140e 	bge	zero,r4,10006830 <_dtoa_r+0xa88>
100067e0:	d9800b17 	ldw	r6,44(sp)
100067e4:	3001e526 	beq	r6,zero,10006f7c <_dtoa_r+0x11d4>
100067e8:	05400e0e 	bge	zero,r21,10006824 <_dtoa_r+0xa7c>
100067ec:	880b883a 	mov	r5,r17
100067f0:	8009883a 	mov	r4,r16
100067f4:	a80d883a 	mov	r6,r21
100067f8:	00094d80 	call	100094d8 <__pow5mult>
100067fc:	e00d883a 	mov	r6,fp
10006800:	8009883a 	mov	r4,r16
10006804:	100b883a 	mov	r5,r2
10006808:	1023883a 	mov	r17,r2
1000680c:	00092480 	call	10009248 <__multiply>
10006810:	102f883a 	mov	r23,r2
10006814:	e00b883a 	mov	r5,fp
10006818:	8009883a 	mov	r4,r16
1000681c:	0008e8c0 	call	10008e8c <_Bfree>
10006820:	b839883a 	mov	fp,r23
10006824:	d8800917 	ldw	r2,36(sp)
10006828:	154dc83a 	sub	r6,r2,r21
1000682c:	3001281e 	bne	r6,zero,10006cd0 <_dtoa_r+0xf28>
10006830:	05c00044 	movi	r23,1
10006834:	8009883a 	mov	r4,r16
10006838:	b80b883a 	mov	r5,r23
1000683c:	000920c0 	call	1000920c <__i2b>
10006840:	d8c00a17 	ldw	r3,40(sp)
10006844:	102b883a 	mov	r21,r2
10006848:	00c0310e 	bge	zero,r3,10006910 <_dtoa_r+0xb68>
1000684c:	8009883a 	mov	r4,r16
10006850:	100b883a 	mov	r5,r2
10006854:	180d883a 	mov	r6,r3
10006858:	00094d80 	call	100094d8 <__pow5mult>
1000685c:	d9000317 	ldw	r4,12(sp)
10006860:	102b883a 	mov	r21,r2
10006864:	b9011f0e 	bge	r23,r4,10006ce4 <_dtoa_r+0xf3c>
10006868:	0027883a 	mov	r19,zero
1000686c:	a8800417 	ldw	r2,16(r21)
10006870:	10800104 	addi	r2,r2,4
10006874:	1085883a 	add	r2,r2,r2
10006878:	1085883a 	add	r2,r2,r2
1000687c:	a885883a 	add	r2,r21,r2
10006880:	11000017 	ldw	r4,0(r2)
10006884:	00090f40 	call	100090f4 <__hi0bits>
10006888:	00c00804 	movi	r3,32
1000688c:	1885c83a 	sub	r2,r3,r2
10006890:	00002506 	br	10006928 <_dtoa_r+0xb80>
10006894:	01800044 	movi	r6,1
10006898:	d9800c15 	stw	r6,48(sp)
1000689c:	003dec06 	br	10006050 <__alt_data_end+0xf8006050>
100068a0:	d8c00817 	ldw	r3,32(sp)
100068a4:	d9000517 	ldw	r4,20(sp)
100068a8:	d8000a15 	stw	zero,40(sp)
100068ac:	1907c83a 	sub	r3,r3,r4
100068b0:	010dc83a 	sub	r6,zero,r4
100068b4:	d8c00815 	stw	r3,32(sp)
100068b8:	d9800915 	stw	r6,36(sp)
100068bc:	003ded06 	br	10006074 <__alt_data_end+0xf8006074>
100068c0:	05adc83a 	sub	r22,zero,r22
100068c4:	dd800815 	stw	r22,32(sp)
100068c8:	002d883a 	mov	r22,zero
100068cc:	003de406 	br	10006060 <__alt_data_end+0xf8006060>
100068d0:	d9000517 	ldw	r4,20(sp)
100068d4:	00037180 	call	10003718 <__floatsidf>
100068d8:	1009883a 	mov	r4,r2
100068dc:	180b883a 	mov	r5,r3
100068e0:	b00d883a 	mov	r6,r22
100068e4:	a80f883a 	mov	r7,r21
100068e8:	000d6400 	call	1000d640 <__eqdf2>
100068ec:	103dc726 	beq	r2,zero,1000600c <__alt_data_end+0xf800600c>
100068f0:	d8800517 	ldw	r2,20(sp)
100068f4:	10bfffc4 	addi	r2,r2,-1
100068f8:	d8800515 	stw	r2,20(sp)
100068fc:	003dc306 	br	1000600c <__alt_data_end+0xf800600c>
10006900:	dd400917 	ldw	r21,36(sp)
10006904:	dd000817 	ldw	r20,32(sp)
10006908:	0023883a 	mov	r17,zero
1000690c:	003fa906 	br	100067b4 <__alt_data_end+0xf80067b4>
10006910:	d9800317 	ldw	r6,12(sp)
10006914:	b981670e 	bge	r23,r6,10006eb4 <_dtoa_r+0x110c>
10006918:	0027883a 	mov	r19,zero
1000691c:	d8c00a17 	ldw	r3,40(sp)
10006920:	183fd21e 	bne	r3,zero,1000686c <__alt_data_end+0xf800686c>
10006924:	00800044 	movi	r2,1
10006928:	1585883a 	add	r2,r2,r22
1000692c:	108007cc 	andi	r2,r2,31
10006930:	10005f26 	beq	r2,zero,10006ab0 <_dtoa_r+0xd08>
10006934:	00c00804 	movi	r3,32
10006938:	1887c83a 	sub	r3,r3,r2
1000693c:	01000104 	movi	r4,4
10006940:	20c2dd0e 	bge	r4,r3,100074b8 <_dtoa_r+0x1710>
10006944:	d9000817 	ldw	r4,32(sp)
10006948:	00c00704 	movi	r3,28
1000694c:	1885c83a 	sub	r2,r3,r2
10006950:	2089883a 	add	r4,r4,r2
10006954:	d9000815 	stw	r4,32(sp)
10006958:	a0a9883a 	add	r20,r20,r2
1000695c:	b0ad883a 	add	r22,r22,r2
10006960:	d8800817 	ldw	r2,32(sp)
10006964:	0080050e 	bge	zero,r2,1000697c <_dtoa_r+0xbd4>
10006968:	e00b883a 	mov	r5,fp
1000696c:	8009883a 	mov	r4,r16
10006970:	100d883a 	mov	r6,r2
10006974:	00096180 	call	10009618 <__lshift>
10006978:	1039883a 	mov	fp,r2
1000697c:	0580050e 	bge	zero,r22,10006994 <_dtoa_r+0xbec>
10006980:	a80b883a 	mov	r5,r21
10006984:	8009883a 	mov	r4,r16
10006988:	b00d883a 	mov	r6,r22
1000698c:	00096180 	call	10009618 <__lshift>
10006990:	102b883a 	mov	r21,r2
10006994:	d8c00c17 	ldw	r3,48(sp)
10006998:	1801161e 	bne	r3,zero,10006df4 <_dtoa_r+0x104c>
1000699c:	d8c00617 	ldw	r3,24(sp)
100069a0:	00c12d0e 	bge	zero,r3,10006e58 <_dtoa_r+0x10b0>
100069a4:	d8c00b17 	ldw	r3,44(sp)
100069a8:	1800571e 	bne	r3,zero,10006b08 <_dtoa_r+0xd60>
100069ac:	dc800717 	ldw	r18,28(sp)
100069b0:	dcc00617 	ldw	r19,24(sp)
100069b4:	9029883a 	mov	r20,r18
100069b8:	00000206 	br	100069c4 <_dtoa_r+0xc1c>
100069bc:	0008eb40 	call	10008eb4 <__multadd>
100069c0:	1039883a 	mov	fp,r2
100069c4:	e009883a 	mov	r4,fp
100069c8:	a80b883a 	mov	r5,r21
100069cc:	0005b800 	call	10005b80 <quorem>
100069d0:	10800c04 	addi	r2,r2,48
100069d4:	90800005 	stb	r2,0(r18)
100069d8:	94800044 	addi	r18,r18,1
100069dc:	9507c83a 	sub	r3,r18,r20
100069e0:	8009883a 	mov	r4,r16
100069e4:	e00b883a 	mov	r5,fp
100069e8:	01800284 	movi	r6,10
100069ec:	000f883a 	mov	r7,zero
100069f0:	1cfff216 	blt	r3,r19,100069bc <__alt_data_end+0xf80069bc>
100069f4:	1011883a 	mov	r8,r2
100069f8:	d8800617 	ldw	r2,24(sp)
100069fc:	00822e0e 	bge	zero,r2,100072b8 <_dtoa_r+0x1510>
10006a00:	d9000717 	ldw	r4,28(sp)
10006a04:	0025883a 	mov	r18,zero
10006a08:	20af883a 	add	r23,r4,r2
10006a0c:	e00b883a 	mov	r5,fp
10006a10:	01800044 	movi	r6,1
10006a14:	8009883a 	mov	r4,r16
10006a18:	da001715 	stw	r8,92(sp)
10006a1c:	00096180 	call	10009618 <__lshift>
10006a20:	1009883a 	mov	r4,r2
10006a24:	a80b883a 	mov	r5,r21
10006a28:	1039883a 	mov	fp,r2
10006a2c:	00097600 	call	10009760 <__mcmp>
10006a30:	da001717 	ldw	r8,92(sp)
10006a34:	00816e0e 	bge	zero,r2,10006ff0 <_dtoa_r+0x1248>
10006a38:	b93fffc3 	ldbu	r4,-1(r23)
10006a3c:	b8bfffc4 	addi	r2,r23,-1
10006a40:	1007883a 	mov	r3,r2
10006a44:	01800e44 	movi	r6,57
10006a48:	d9c00717 	ldw	r7,28(sp)
10006a4c:	00000506 	br	10006a64 <_dtoa_r+0xcbc>
10006a50:	18ffffc4 	addi	r3,r3,-1
10006a54:	38811926 	beq	r7,r2,10006ebc <_dtoa_r+0x1114>
10006a58:	19000003 	ldbu	r4,0(r3)
10006a5c:	102f883a 	mov	r23,r2
10006a60:	10bfffc4 	addi	r2,r2,-1
10006a64:	21403fcc 	andi	r5,r4,255
10006a68:	2940201c 	xori	r5,r5,128
10006a6c:	297fe004 	addi	r5,r5,-128
10006a70:	29bff726 	beq	r5,r6,10006a50 <__alt_data_end+0xf8006a50>
10006a74:	21000044 	addi	r4,r4,1
10006a78:	11000005 	stb	r4,0(r2)
10006a7c:	8009883a 	mov	r4,r16
10006a80:	a80b883a 	mov	r5,r21
10006a84:	0008e8c0 	call	10008e8c <_Bfree>
10006a88:	883e7526 	beq	r17,zero,10006460 <__alt_data_end+0xf8006460>
10006a8c:	90000426 	beq	r18,zero,10006aa0 <_dtoa_r+0xcf8>
10006a90:	94400326 	beq	r18,r17,10006aa0 <_dtoa_r+0xcf8>
10006a94:	8009883a 	mov	r4,r16
10006a98:	900b883a 	mov	r5,r18
10006a9c:	0008e8c0 	call	10008e8c <_Bfree>
10006aa0:	8009883a 	mov	r4,r16
10006aa4:	880b883a 	mov	r5,r17
10006aa8:	0008e8c0 	call	10008e8c <_Bfree>
10006aac:	003e6c06 	br	10006460 <__alt_data_end+0xf8006460>
10006ab0:	00800704 	movi	r2,28
10006ab4:	d9800817 	ldw	r6,32(sp)
10006ab8:	a0a9883a 	add	r20,r20,r2
10006abc:	b0ad883a 	add	r22,r22,r2
10006ac0:	308d883a 	add	r6,r6,r2
10006ac4:	d9800815 	stw	r6,32(sp)
10006ac8:	003fa506 	br	10006960 <__alt_data_end+0xf8006960>
10006acc:	013efb84 	movi	r4,-1042
10006ad0:	246bc83a 	sub	r21,r4,r17
10006ad4:	9548983a 	sll	r4,r18,r21
10006ad8:	003d1806 	br	10005f3c <__alt_data_end+0xf8005f3c>
10006adc:	d8000c15 	stw	zero,48(sp)
10006ae0:	003d5b06 	br	10006050 <__alt_data_end+0xf8006050>
10006ae4:	880b883a 	mov	r5,r17
10006ae8:	8009883a 	mov	r4,r16
10006aec:	01800284 	movi	r6,10
10006af0:	000f883a 	mov	r7,zero
10006af4:	0008eb40 	call	10008eb4 <__multadd>
10006af8:	1023883a 	mov	r17,r2
10006afc:	d8800d17 	ldw	r2,52(sp)
10006b00:	0082550e 	bge	zero,r2,10007458 <_dtoa_r+0x16b0>
10006b04:	d8800615 	stw	r2,24(sp)
10006b08:	0500050e 	bge	zero,r20,10006b20 <_dtoa_r+0xd78>
10006b0c:	880b883a 	mov	r5,r17
10006b10:	8009883a 	mov	r4,r16
10006b14:	a00d883a 	mov	r6,r20
10006b18:	00096180 	call	10009618 <__lshift>
10006b1c:	1023883a 	mov	r17,r2
10006b20:	98016a1e 	bne	r19,zero,100070cc <_dtoa_r+0x1324>
10006b24:	8829883a 	mov	r20,r17
10006b28:	d9000617 	ldw	r4,24(sp)
10006b2c:	dcc00717 	ldw	r19,28(sp)
10006b30:	9480004c 	andi	r18,r18,1
10006b34:	20bfffc4 	addi	r2,r4,-1
10006b38:	9885883a 	add	r2,r19,r2
10006b3c:	d8800415 	stw	r2,16(sp)
10006b40:	dc800615 	stw	r18,24(sp)
10006b44:	e009883a 	mov	r4,fp
10006b48:	a80b883a 	mov	r5,r21
10006b4c:	0005b800 	call	10005b80 <quorem>
10006b50:	e009883a 	mov	r4,fp
10006b54:	880b883a 	mov	r5,r17
10006b58:	102f883a 	mov	r23,r2
10006b5c:	00097600 	call	10009760 <__mcmp>
10006b60:	8009883a 	mov	r4,r16
10006b64:	a80b883a 	mov	r5,r21
10006b68:	a00d883a 	mov	r6,r20
10006b6c:	102d883a 	mov	r22,r2
10006b70:	00097c00 	call	100097c0 <__mdiff>
10006b74:	1007883a 	mov	r3,r2
10006b78:	10800317 	ldw	r2,12(r2)
10006b7c:	bc800c04 	addi	r18,r23,48
10006b80:	1000971e 	bne	r2,zero,10006de0 <_dtoa_r+0x1038>
10006b84:	180b883a 	mov	r5,r3
10006b88:	e009883a 	mov	r4,fp
10006b8c:	d8c01515 	stw	r3,84(sp)
10006b90:	00097600 	call	10009760 <__mcmp>
10006b94:	d8c01517 	ldw	r3,84(sp)
10006b98:	8009883a 	mov	r4,r16
10006b9c:	d8801515 	stw	r2,84(sp)
10006ba0:	180b883a 	mov	r5,r3
10006ba4:	0008e8c0 	call	10008e8c <_Bfree>
10006ba8:	d8801517 	ldw	r2,84(sp)
10006bac:	1000041e 	bne	r2,zero,10006bc0 <_dtoa_r+0xe18>
10006bb0:	d9800317 	ldw	r6,12(sp)
10006bb4:	3000021e 	bne	r6,zero,10006bc0 <_dtoa_r+0xe18>
10006bb8:	d8c00617 	ldw	r3,24(sp)
10006bbc:	18007626 	beq	r3,zero,10006d98 <_dtoa_r+0xff0>
10006bc0:	b0005b16 	blt	r22,zero,10006d30 <_dtoa_r+0xf88>
10006bc4:	b000041e 	bne	r22,zero,10006bd8 <_dtoa_r+0xe30>
10006bc8:	d9000317 	ldw	r4,12(sp)
10006bcc:	2000021e 	bne	r4,zero,10006bd8 <_dtoa_r+0xe30>
10006bd0:	d8c00617 	ldw	r3,24(sp)
10006bd4:	18005626 	beq	r3,zero,10006d30 <_dtoa_r+0xf88>
10006bd8:	00814d16 	blt	zero,r2,10007110 <_dtoa_r+0x1368>
10006bdc:	d8c00417 	ldw	r3,16(sp)
10006be0:	9d800044 	addi	r22,r19,1
10006be4:	9c800005 	stb	r18,0(r19)
10006be8:	b02f883a 	mov	r23,r22
10006bec:	98c14c26 	beq	r19,r3,10007120 <_dtoa_r+0x1378>
10006bf0:	e00b883a 	mov	r5,fp
10006bf4:	8009883a 	mov	r4,r16
10006bf8:	01800284 	movi	r6,10
10006bfc:	000f883a 	mov	r7,zero
10006c00:	0008eb40 	call	10008eb4 <__multadd>
10006c04:	1039883a 	mov	fp,r2
10006c08:	8d006d26 	beq	r17,r20,10006dc0 <_dtoa_r+0x1018>
10006c0c:	880b883a 	mov	r5,r17
10006c10:	01800284 	movi	r6,10
10006c14:	000f883a 	mov	r7,zero
10006c18:	8009883a 	mov	r4,r16
10006c1c:	0008eb40 	call	10008eb4 <__multadd>
10006c20:	a00b883a 	mov	r5,r20
10006c24:	8009883a 	mov	r4,r16
10006c28:	01800284 	movi	r6,10
10006c2c:	000f883a 	mov	r7,zero
10006c30:	1023883a 	mov	r17,r2
10006c34:	0008eb40 	call	10008eb4 <__multadd>
10006c38:	1029883a 	mov	r20,r2
10006c3c:	b027883a 	mov	r19,r22
10006c40:	003fc006 	br	10006b44 <__alt_data_end+0xf8006b44>
10006c44:	a005883a 	mov	r2,r20
10006c48:	003ede06 	br	100067c4 <__alt_data_end+0xf80067c4>
10006c4c:	01000044 	movi	r4,1
10006c50:	d9000b15 	stw	r4,44(sp)
10006c54:	d9802217 	ldw	r6,136(sp)
10006c58:	0180dc0e 	bge	zero,r6,10006fcc <_dtoa_r+0x1224>
10006c5c:	3023883a 	mov	r17,r6
10006c60:	d9800d15 	stw	r6,52(sp)
10006c64:	d9800615 	stw	r6,24(sp)
10006c68:	003d1e06 	br	100060e4 <__alt_data_end+0xf80060e4>
10006c6c:	d8800617 	ldw	r2,24(sp)
10006c70:	00be3716 	blt	zero,r2,10006550 <__alt_data_end+0xf8006550>
10006c74:	1000be1e 	bne	r2,zero,10006f70 <_dtoa_r+0x11c8>
10006c78:	8809883a 	mov	r4,r17
10006c7c:	a00b883a 	mov	r5,r20
10006c80:	000d883a 	mov	r6,zero
10006c84:	01d00534 	movhi	r7,16404
10006c88:	000d8840 	call	1000d884 <__muldf3>
10006c8c:	1009883a 	mov	r4,r2
10006c90:	180b883a 	mov	r5,r3
10006c94:	900d883a 	mov	r6,r18
10006c98:	980f883a 	mov	r7,r19
10006c9c:	000d6c40 	call	1000d6c4 <__gedf2>
10006ca0:	002b883a 	mov	r21,zero
10006ca4:	0023883a 	mov	r17,zero
10006ca8:	10007a16 	blt	r2,zero,10006e94 <_dtoa_r+0x10ec>
10006cac:	d9002217 	ldw	r4,136(sp)
10006cb0:	ddc00717 	ldw	r23,28(sp)
10006cb4:	0108303a 	nor	r4,zero,r4
10006cb8:	d9000515 	stw	r4,20(sp)
10006cbc:	8009883a 	mov	r4,r16
10006cc0:	a80b883a 	mov	r5,r21
10006cc4:	0008e8c0 	call	10008e8c <_Bfree>
10006cc8:	883f751e 	bne	r17,zero,10006aa0 <__alt_data_end+0xf8006aa0>
10006ccc:	003de406 	br	10006460 <__alt_data_end+0xf8006460>
10006cd0:	e00b883a 	mov	r5,fp
10006cd4:	8009883a 	mov	r4,r16
10006cd8:	00094d80 	call	100094d8 <__pow5mult>
10006cdc:	1039883a 	mov	fp,r2
10006ce0:	003ed306 	br	10006830 <__alt_data_end+0xf8006830>
10006ce4:	903ee01e 	bne	r18,zero,10006868 <__alt_data_end+0xf8006868>
10006ce8:	00800434 	movhi	r2,16
10006cec:	10bfffc4 	addi	r2,r2,-1
10006cf0:	9884703a 	and	r2,r19,r2
10006cf4:	103f081e 	bne	r2,zero,10006918 <__alt_data_end+0xf8006918>
10006cf8:	9cdffc2c 	andhi	r19,r19,32752
10006cfc:	983f0626 	beq	r19,zero,10006918 <__alt_data_end+0xf8006918>
10006d00:	d8800817 	ldw	r2,32(sp)
10006d04:	b5800044 	addi	r22,r22,1
10006d08:	04c00044 	movi	r19,1
10006d0c:	10800044 	addi	r2,r2,1
10006d10:	d8800815 	stw	r2,32(sp)
10006d14:	003f0106 	br	1000691c <__alt_data_end+0xf800691c>
10006d18:	d9800f17 	ldw	r6,60(sp)
10006d1c:	30016826 	beq	r6,zero,100072c0 <_dtoa_r+0x1518>
10006d20:	10810cc4 	addi	r2,r2,1075
10006d24:	dd400917 	ldw	r21,36(sp)
10006d28:	dd000817 	ldw	r20,32(sp)
10006d2c:	003e9906 	br	10006794 <__alt_data_end+0xf8006794>
10006d30:	9011883a 	mov	r8,r18
10006d34:	4007883a 	mov	r3,r8
10006d38:	e02d883a 	mov	r22,fp
10006d3c:	0080100e 	bge	zero,r2,10006d80 <_dtoa_r+0xfd8>
10006d40:	01800044 	movi	r6,1
10006d44:	8009883a 	mov	r4,r16
10006d48:	e00b883a 	mov	r5,fp
10006d4c:	da001515 	stw	r8,84(sp)
10006d50:	da001715 	stw	r8,92(sp)
10006d54:	00096180 	call	10009618 <__lshift>
10006d58:	1009883a 	mov	r4,r2
10006d5c:	a80b883a 	mov	r5,r21
10006d60:	102d883a 	mov	r22,r2
10006d64:	00097600 	call	10009760 <__mcmp>
10006d68:	d8c01517 	ldw	r3,84(sp)
10006d6c:	da001717 	ldw	r8,92(sp)
10006d70:	0081a50e 	bge	zero,r2,10007408 <_dtoa_r+0x1660>
10006d74:	00800e44 	movi	r2,57
10006d78:	40817b26 	beq	r8,r2,10007368 <_dtoa_r+0x15c0>
10006d7c:	40c00044 	addi	r3,r8,1
10006d80:	8825883a 	mov	r18,r17
10006d84:	9dc00044 	addi	r23,r19,1
10006d88:	98c00005 	stb	r3,0(r19)
10006d8c:	a023883a 	mov	r17,r20
10006d90:	b039883a 	mov	fp,r22
10006d94:	003f3906 	br	10006a7c <__alt_data_end+0xf8006a7c>
10006d98:	00800e44 	movi	r2,57
10006d9c:	9011883a 	mov	r8,r18
10006da0:	90817226 	beq	r18,r2,1000736c <_dtoa_r+0x15c4>
10006da4:	0580010e 	bge	zero,r22,10006dac <_dtoa_r+0x1004>
10006da8:	ba000c44 	addi	r8,r23,49
10006dac:	8825883a 	mov	r18,r17
10006db0:	9dc00044 	addi	r23,r19,1
10006db4:	9a000005 	stb	r8,0(r19)
10006db8:	a023883a 	mov	r17,r20
10006dbc:	003f2f06 	br	10006a7c <__alt_data_end+0xf8006a7c>
10006dc0:	880b883a 	mov	r5,r17
10006dc4:	8009883a 	mov	r4,r16
10006dc8:	01800284 	movi	r6,10
10006dcc:	000f883a 	mov	r7,zero
10006dd0:	0008eb40 	call	10008eb4 <__multadd>
10006dd4:	1023883a 	mov	r17,r2
10006dd8:	1029883a 	mov	r20,r2
10006ddc:	003f9706 	br	10006c3c <__alt_data_end+0xf8006c3c>
10006de0:	8009883a 	mov	r4,r16
10006de4:	180b883a 	mov	r5,r3
10006de8:	0008e8c0 	call	10008e8c <_Bfree>
10006dec:	00800044 	movi	r2,1
10006df0:	003f7306 	br	10006bc0 <__alt_data_end+0xf8006bc0>
10006df4:	e009883a 	mov	r4,fp
10006df8:	a80b883a 	mov	r5,r21
10006dfc:	00097600 	call	10009760 <__mcmp>
10006e00:	103ee60e 	bge	r2,zero,1000699c <__alt_data_end+0xf800699c>
10006e04:	8009883a 	mov	r4,r16
10006e08:	e00b883a 	mov	r5,fp
10006e0c:	01800284 	movi	r6,10
10006e10:	000f883a 	mov	r7,zero
10006e14:	0008eb40 	call	10008eb4 <__multadd>
10006e18:	d9000517 	ldw	r4,20(sp)
10006e1c:	d9800b17 	ldw	r6,44(sp)
10006e20:	1039883a 	mov	fp,r2
10006e24:	213fffc4 	addi	r4,r4,-1
10006e28:	d9000515 	stw	r4,20(sp)
10006e2c:	303f2d1e 	bne	r6,zero,10006ae4 <__alt_data_end+0xf8006ae4>
10006e30:	d9000d17 	ldw	r4,52(sp)
10006e34:	0101780e 	bge	zero,r4,10007418 <_dtoa_r+0x1670>
10006e38:	d9000615 	stw	r4,24(sp)
10006e3c:	003edb06 	br	100069ac <__alt_data_end+0xf80069ac>
10006e40:	00800084 	movi	r2,2
10006e44:	30818e1e 	bne	r6,r2,10007480 <_dtoa_r+0x16d8>
10006e48:	d8000b15 	stw	zero,44(sp)
10006e4c:	003f8106 	br	10006c54 <__alt_data_end+0xf8006c54>
10006e50:	d8800717 	ldw	r2,28(sp)
10006e54:	003c0306 	br	10005e64 <__alt_data_end+0xf8005e64>
10006e58:	d9000317 	ldw	r4,12(sp)
10006e5c:	00800084 	movi	r2,2
10006e60:	113ed00e 	bge	r2,r4,100069a4 <__alt_data_end+0xf80069a4>
10006e64:	d8c00617 	ldw	r3,24(sp)
10006e68:	183f901e 	bne	r3,zero,10006cac <__alt_data_end+0xf8006cac>
10006e6c:	a80b883a 	mov	r5,r21
10006e70:	8009883a 	mov	r4,r16
10006e74:	01800144 	movi	r6,5
10006e78:	000f883a 	mov	r7,zero
10006e7c:	0008eb40 	call	10008eb4 <__multadd>
10006e80:	e009883a 	mov	r4,fp
10006e84:	100b883a 	mov	r5,r2
10006e88:	102b883a 	mov	r21,r2
10006e8c:	00097600 	call	10009760 <__mcmp>
10006e90:	00bf860e 	bge	zero,r2,10006cac <__alt_data_end+0xf8006cac>
10006e94:	d9800717 	ldw	r6,28(sp)
10006e98:	00800c44 	movi	r2,49
10006e9c:	30800005 	stb	r2,0(r6)
10006ea0:	d8800517 	ldw	r2,20(sp)
10006ea4:	35c00044 	addi	r23,r6,1
10006ea8:	10800044 	addi	r2,r2,1
10006eac:	d8800515 	stw	r2,20(sp)
10006eb0:	003f8206 	br	10006cbc <__alt_data_end+0xf8006cbc>
10006eb4:	903e981e 	bne	r18,zero,10006918 <__alt_data_end+0xf8006918>
10006eb8:	003f8b06 	br	10006ce8 <__alt_data_end+0xf8006ce8>
10006ebc:	d9800517 	ldw	r6,20(sp)
10006ec0:	d8c00717 	ldw	r3,28(sp)
10006ec4:	00800c44 	movi	r2,49
10006ec8:	31800044 	addi	r6,r6,1
10006ecc:	d9800515 	stw	r6,20(sp)
10006ed0:	18800005 	stb	r2,0(r3)
10006ed4:	003ee906 	br	10006a7c <__alt_data_end+0xf8006a7c>
10006ed8:	dc000317 	ldw	r16,12(sp)
10006edc:	003d6006 	br	10006460 <__alt_data_end+0xf8006460>
10006ee0:	8809883a 	mov	r4,r17
10006ee4:	00037180 	call	10003718 <__floatsidf>
10006ee8:	a009883a 	mov	r4,r20
10006eec:	a80b883a 	mov	r5,r21
10006ef0:	100d883a 	mov	r6,r2
10006ef4:	180f883a 	mov	r7,r3
10006ef8:	000d8840 	call	1000d884 <__muldf3>
10006efc:	1009883a 	mov	r4,r2
10006f00:	180b883a 	mov	r5,r3
10006f04:	000d883a 	mov	r6,zero
10006f08:	01d00734 	movhi	r7,16412
10006f0c:	00025240 	call	10002524 <__adddf3>
10006f10:	1023883a 	mov	r17,r2
10006f14:	00bf3034 	movhi	r2,64704
10006f18:	1885883a 	add	r2,r3,r2
10006f1c:	d8800e15 	stw	r2,56(sp)
10006f20:	a009883a 	mov	r4,r20
10006f24:	a80b883a 	mov	r5,r21
10006f28:	000d883a 	mov	r6,zero
10006f2c:	01d00534 	movhi	r7,16404
10006f30:	0002dc00 	call	10002dc0 <__subdf3>
10006f34:	d9c00e17 	ldw	r7,56(sp)
10006f38:	1009883a 	mov	r4,r2
10006f3c:	180b883a 	mov	r5,r3
10006f40:	880d883a 	mov	r6,r17
10006f44:	102b883a 	mov	r21,r2
10006f48:	1829883a 	mov	r20,r3
10006f4c:	000d6c40 	call	1000d6c4 <__gedf2>
10006f50:	00807716 	blt	zero,r2,10007130 <_dtoa_r+0x1388>
10006f54:	d8800e17 	ldw	r2,56(sp)
10006f58:	a809883a 	mov	r4,r21
10006f5c:	a00b883a 	mov	r5,r20
10006f60:	11e0003c 	xorhi	r7,r2,32768
10006f64:	880d883a 	mov	r6,r17
10006f68:	000d7a40 	call	1000d7a4 <__ledf2>
10006f6c:	103d6b0e 	bge	r2,zero,1000651c <__alt_data_end+0xf800651c>
10006f70:	002b883a 	mov	r21,zero
10006f74:	0023883a 	mov	r17,zero
10006f78:	003f4c06 	br	10006cac <__alt_data_end+0xf8006cac>
10006f7c:	d9800917 	ldw	r6,36(sp)
10006f80:	e00b883a 	mov	r5,fp
10006f84:	8009883a 	mov	r4,r16
10006f88:	00094d80 	call	100094d8 <__pow5mult>
10006f8c:	1039883a 	mov	fp,r2
10006f90:	003e2706 	br	10006830 <__alt_data_end+0xf8006830>
10006f94:	d8000b15 	stw	zero,44(sp)
10006f98:	003c4906 	br	100060c0 <__alt_data_end+0xf80060c0>
10006f9c:	d9000917 	ldw	r4,36(sp)
10006fa0:	d9800a17 	ldw	r6,40(sp)
10006fa4:	dd400915 	stw	r21,36(sp)
10006fa8:	a905c83a 	sub	r2,r21,r4
10006fac:	308d883a 	add	r6,r6,r2
10006fb0:	d9800a15 	stw	r6,40(sp)
10006fb4:	002b883a 	mov	r21,zero
10006fb8:	003df206 	br	10006784 <__alt_data_end+0xf8006784>
10006fbc:	dc800e15 	stw	r18,56(sp)
10006fc0:	982b883a 	mov	r21,r19
10006fc4:	04400084 	movi	r17,2
10006fc8:	003c7406 	br	1000619c <__alt_data_end+0xf800619c>
10006fcc:	04400044 	movi	r17,1
10006fd0:	dc400d15 	stw	r17,52(sp)
10006fd4:	dc400615 	stw	r17,24(sp)
10006fd8:	dc402215 	stw	r17,136(sp)
10006fdc:	80001115 	stw	zero,68(r16)
10006fe0:	000b883a 	mov	r5,zero
10006fe4:	003c4a06 	br	10006110 <__alt_data_end+0xf8006110>
10006fe8:	3023883a 	mov	r17,r6
10006fec:	003ffb06 	br	10006fdc <__alt_data_end+0xf8006fdc>
10006ff0:	1000021e 	bne	r2,zero,10006ffc <_dtoa_r+0x1254>
10006ff4:	4200004c 	andi	r8,r8,1
10006ff8:	403e8f1e 	bne	r8,zero,10006a38 <__alt_data_end+0xf8006a38>
10006ffc:	01000c04 	movi	r4,48
10007000:	00000106 	br	10007008 <_dtoa_r+0x1260>
10007004:	102f883a 	mov	r23,r2
10007008:	b8bfffc4 	addi	r2,r23,-1
1000700c:	10c00007 	ldb	r3,0(r2)
10007010:	193ffc26 	beq	r3,r4,10007004 <__alt_data_end+0xf8007004>
10007014:	003e9906 	br	10006a7c <__alt_data_end+0xf8006a7c>
10007018:	d9000517 	ldw	r4,20(sp)
1000701c:	012fc83a 	sub	r23,zero,r4
10007020:	b800ad26 	beq	r23,zero,100072d8 <_dtoa_r+0x1530>
10007024:	b88003cc 	andi	r2,r23,15
10007028:	100490fa 	slli	r2,r2,3
1000702c:	00c40074 	movhi	r3,4097
10007030:	18c2b904 	addi	r3,r3,2788
10007034:	1885883a 	add	r2,r3,r2
10007038:	11800017 	ldw	r6,0(r2)
1000703c:	11c00117 	ldw	r7,4(r2)
10007040:	b82fd13a 	srai	r23,r23,4
10007044:	9009883a 	mov	r4,r18
10007048:	980b883a 	mov	r5,r19
1000704c:	000d8840 	call	1000d884 <__muldf3>
10007050:	1029883a 	mov	r20,r2
10007054:	182b883a 	mov	r21,r3
10007058:	b800f426 	beq	r23,zero,1000742c <_dtoa_r+0x1684>
1000705c:	02040074 	movhi	r8,4097
10007060:	4202af04 	addi	r8,r8,2748
10007064:	8029883a 	mov	r20,r16
10007068:	04400084 	movi	r17,2
1000706c:	4021883a 	mov	r16,r8
10007070:	b980004c 	andi	r6,r23,1
10007074:	1009883a 	mov	r4,r2
10007078:	b82fd07a 	srai	r23,r23,1
1000707c:	180b883a 	mov	r5,r3
10007080:	30000426 	beq	r6,zero,10007094 <_dtoa_r+0x12ec>
10007084:	81800017 	ldw	r6,0(r16)
10007088:	81c00117 	ldw	r7,4(r16)
1000708c:	8c400044 	addi	r17,r17,1
10007090:	000d8840 	call	1000d884 <__muldf3>
10007094:	84000204 	addi	r16,r16,8
10007098:	b83ff51e 	bne	r23,zero,10007070 <__alt_data_end+0xf8007070>
1000709c:	a021883a 	mov	r16,r20
100070a0:	182b883a 	mov	r21,r3
100070a4:	1029883a 	mov	r20,r2
100070a8:	003c5506 	br	10006200 <__alt_data_end+0xf8006200>
100070ac:	d9800517 	ldw	r6,20(sp)
100070b0:	d9000717 	ldw	r4,28(sp)
100070b4:	00c00c04 	movi	r3,48
100070b8:	31800044 	addi	r6,r6,1
100070bc:	d9800515 	stw	r6,20(sp)
100070c0:	20c00005 	stb	r3,0(r4)
100070c4:	02000c44 	movi	r8,49
100070c8:	003da206 	br	10006754 <__alt_data_end+0xf8006754>
100070cc:	89400117 	ldw	r5,4(r17)
100070d0:	8009883a 	mov	r4,r16
100070d4:	0008de40 	call	10008de4 <_Balloc>
100070d8:	89800417 	ldw	r6,16(r17)
100070dc:	11000304 	addi	r4,r2,12
100070e0:	89400304 	addi	r5,r17,12
100070e4:	31800084 	addi	r6,r6,2
100070e8:	318d883a 	add	r6,r6,r6
100070ec:	318d883a 	add	r6,r6,r6
100070f0:	1027883a 	mov	r19,r2
100070f4:	0008b880 	call	10008b88 <memcpy>
100070f8:	8009883a 	mov	r4,r16
100070fc:	980b883a 	mov	r5,r19
10007100:	01800044 	movi	r6,1
10007104:	00096180 	call	10009618 <__lshift>
10007108:	1029883a 	mov	r20,r2
1000710c:	003e8606 	br	10006b28 <__alt_data_end+0xf8006b28>
10007110:	00800e44 	movi	r2,57
10007114:	90809526 	beq	r18,r2,1000736c <_dtoa_r+0x15c4>
10007118:	92000044 	addi	r8,r18,1
1000711c:	003f2306 	br	10006dac <__alt_data_end+0xf8006dac>
10007120:	9011883a 	mov	r8,r18
10007124:	8825883a 	mov	r18,r17
10007128:	a023883a 	mov	r17,r20
1000712c:	003e3706 	br	10006a0c <__alt_data_end+0xf8006a0c>
10007130:	002b883a 	mov	r21,zero
10007134:	0023883a 	mov	r17,zero
10007138:	003f5606 	br	10006e94 <__alt_data_end+0xf8006e94>
1000713c:	51bfffc4 	addi	r6,r10,-1
10007140:	300490fa 	slli	r2,r6,3
10007144:	00c40074 	movhi	r3,4097
10007148:	18c2b904 	addi	r3,r3,2788
1000714c:	1885883a 	add	r2,r3,r2
10007150:	d9c00e17 	ldw	r7,56(sp)
10007154:	11000017 	ldw	r4,0(r2)
10007158:	11400117 	ldw	r5,4(r2)
1000715c:	d8800717 	ldw	r2,28(sp)
10007160:	d9801015 	stw	r6,64(sp)
10007164:	880d883a 	mov	r6,r17
10007168:	da801615 	stw	r10,88(sp)
1000716c:	15c00044 	addi	r23,r2,1
10007170:	000d8840 	call	1000d884 <__muldf3>
10007174:	a80b883a 	mov	r5,r21
10007178:	a009883a 	mov	r4,r20
1000717c:	d8c01115 	stw	r3,68(sp)
10007180:	d8800e15 	stw	r2,56(sp)
10007184:	00036900 	call	10003690 <__fixdfsi>
10007188:	1009883a 	mov	r4,r2
1000718c:	1023883a 	mov	r17,r2
10007190:	00037180 	call	10003718 <__floatsidf>
10007194:	a009883a 	mov	r4,r20
10007198:	a80b883a 	mov	r5,r21
1000719c:	100d883a 	mov	r6,r2
100071a0:	180f883a 	mov	r7,r3
100071a4:	0002dc00 	call	10002dc0 <__subdf3>
100071a8:	1813883a 	mov	r9,r3
100071ac:	d8c00717 	ldw	r3,28(sp)
100071b0:	8c400c04 	addi	r17,r17,48
100071b4:	1011883a 	mov	r8,r2
100071b8:	1c400005 	stb	r17,0(r3)
100071bc:	da801617 	ldw	r10,88(sp)
100071c0:	00800044 	movi	r2,1
100071c4:	50802326 	beq	r10,r2,10007254 <_dtoa_r+0x14ac>
100071c8:	d8800717 	ldw	r2,28(sp)
100071cc:	b82b883a 	mov	r21,r23
100071d0:	dc001315 	stw	r16,76(sp)
100071d4:	12a9883a 	add	r20,r2,r10
100071d8:	4807883a 	mov	r3,r9
100071dc:	4005883a 	mov	r2,r8
100071e0:	dc801415 	stw	r18,80(sp)
100071e4:	000d883a 	mov	r6,zero
100071e8:	01d00934 	movhi	r7,16420
100071ec:	1009883a 	mov	r4,r2
100071f0:	180b883a 	mov	r5,r3
100071f4:	000d8840 	call	1000d884 <__muldf3>
100071f8:	180b883a 	mov	r5,r3
100071fc:	1009883a 	mov	r4,r2
10007200:	1821883a 	mov	r16,r3
10007204:	1025883a 	mov	r18,r2
10007208:	00036900 	call	10003690 <__fixdfsi>
1000720c:	1009883a 	mov	r4,r2
10007210:	1023883a 	mov	r17,r2
10007214:	00037180 	call	10003718 <__floatsidf>
10007218:	9009883a 	mov	r4,r18
1000721c:	800b883a 	mov	r5,r16
10007220:	100d883a 	mov	r6,r2
10007224:	180f883a 	mov	r7,r3
10007228:	8c400c04 	addi	r17,r17,48
1000722c:	0002dc00 	call	10002dc0 <__subdf3>
10007230:	ad400044 	addi	r21,r21,1
10007234:	ac7fffc5 	stb	r17,-1(r21)
10007238:	ad3fea1e 	bne	r21,r20,100071e4 <__alt_data_end+0xf80071e4>
1000723c:	1813883a 	mov	r9,r3
10007240:	d8c01017 	ldw	r3,64(sp)
10007244:	dc001317 	ldw	r16,76(sp)
10007248:	dc801417 	ldw	r18,80(sp)
1000724c:	1011883a 	mov	r8,r2
10007250:	b8ef883a 	add	r23,r23,r3
10007254:	d9000e17 	ldw	r4,56(sp)
10007258:	d9401117 	ldw	r5,68(sp)
1000725c:	000d883a 	mov	r6,zero
10007260:	01cff834 	movhi	r7,16352
10007264:	da001715 	stw	r8,92(sp)
10007268:	da401515 	stw	r9,84(sp)
1000726c:	00025240 	call	10002524 <__adddf3>
10007270:	da001717 	ldw	r8,92(sp)
10007274:	da401517 	ldw	r9,84(sp)
10007278:	1009883a 	mov	r4,r2
1000727c:	400d883a 	mov	r6,r8
10007280:	480f883a 	mov	r7,r9
10007284:	180b883a 	mov	r5,r3
10007288:	000d7a40 	call	1000d7a4 <__ledf2>
1000728c:	da001717 	ldw	r8,92(sp)
10007290:	da401517 	ldw	r9,84(sp)
10007294:	10003b0e 	bge	r2,zero,10007384 <_dtoa_r+0x15dc>
10007298:	d9001217 	ldw	r4,72(sp)
1000729c:	bd7fffc3 	ldbu	r21,-1(r23)
100072a0:	d9000515 	stw	r4,20(sp)
100072a4:	003d1c06 	br	10006718 <__alt_data_end+0xf8006718>
100072a8:	d8c00817 	ldw	r3,32(sp)
100072ac:	18a9c83a 	sub	r20,r3,r2
100072b0:	0005883a 	mov	r2,zero
100072b4:	003d3706 	br	10006794 <__alt_data_end+0xf8006794>
100072b8:	00800044 	movi	r2,1
100072bc:	003dd006 	br	10006a00 <__alt_data_end+0xf8006a00>
100072c0:	d8c00217 	ldw	r3,8(sp)
100072c4:	00800d84 	movi	r2,54
100072c8:	dd400917 	ldw	r21,36(sp)
100072cc:	10c5c83a 	sub	r2,r2,r3
100072d0:	dd000817 	ldw	r20,32(sp)
100072d4:	003d2f06 	br	10006794 <__alt_data_end+0xf8006794>
100072d8:	9029883a 	mov	r20,r18
100072dc:	982b883a 	mov	r21,r19
100072e0:	04400084 	movi	r17,2
100072e4:	003bc606 	br	10006200 <__alt_data_end+0xf8006200>
100072e8:	d8800617 	ldw	r2,24(sp)
100072ec:	103efc26 	beq	r2,zero,10006ee0 <__alt_data_end+0xf8006ee0>
100072f0:	d8c00d17 	ldw	r3,52(sp)
100072f4:	00fc890e 	bge	zero,r3,1000651c <__alt_data_end+0xf800651c>
100072f8:	a80b883a 	mov	r5,r21
100072fc:	a009883a 	mov	r4,r20
10007300:	000d883a 	mov	r6,zero
10007304:	01d00934 	movhi	r7,16420
10007308:	000d8840 	call	1000d884 <__muldf3>
1000730c:	89000044 	addi	r4,r17,1
10007310:	1029883a 	mov	r20,r2
10007314:	182b883a 	mov	r21,r3
10007318:	00037180 	call	10003718 <__floatsidf>
1000731c:	a009883a 	mov	r4,r20
10007320:	a80b883a 	mov	r5,r21
10007324:	100d883a 	mov	r6,r2
10007328:	180f883a 	mov	r7,r3
1000732c:	000d8840 	call	1000d884 <__muldf3>
10007330:	1009883a 	mov	r4,r2
10007334:	180b883a 	mov	r5,r3
10007338:	000d883a 	mov	r6,zero
1000733c:	01d00734 	movhi	r7,16412
10007340:	00025240 	call	10002524 <__adddf3>
10007344:	d9000517 	ldw	r4,20(sp)
10007348:	1023883a 	mov	r17,r2
1000734c:	00bf3034 	movhi	r2,64704
10007350:	213fffc4 	addi	r4,r4,-1
10007354:	1885883a 	add	r2,r3,r2
10007358:	d9001215 	stw	r4,72(sp)
1000735c:	d8800e15 	stw	r2,56(sp)
10007360:	da800d17 	ldw	r10,52(sp)
10007364:	003bc306 	br	10006274 <__alt_data_end+0xf8006274>
10007368:	b039883a 	mov	fp,r22
1000736c:	01000e44 	movi	r4,57
10007370:	8825883a 	mov	r18,r17
10007374:	9dc00044 	addi	r23,r19,1
10007378:	99000005 	stb	r4,0(r19)
1000737c:	a023883a 	mov	r17,r20
10007380:	003dae06 	br	10006a3c <__alt_data_end+0xf8006a3c>
10007384:	d9800e17 	ldw	r6,56(sp)
10007388:	d9c01117 	ldw	r7,68(sp)
1000738c:	0009883a 	mov	r4,zero
10007390:	014ff834 	movhi	r5,16352
10007394:	da001715 	stw	r8,92(sp)
10007398:	da401515 	stw	r9,84(sp)
1000739c:	0002dc00 	call	10002dc0 <__subdf3>
100073a0:	da001717 	ldw	r8,92(sp)
100073a4:	da401517 	ldw	r9,84(sp)
100073a8:	1009883a 	mov	r4,r2
100073ac:	180b883a 	mov	r5,r3
100073b0:	400d883a 	mov	r6,r8
100073b4:	480f883a 	mov	r7,r9
100073b8:	000d6c40 	call	1000d6c4 <__gedf2>
100073bc:	00bc570e 	bge	zero,r2,1000651c <__alt_data_end+0xf800651c>
100073c0:	01000c04 	movi	r4,48
100073c4:	00000106 	br	100073cc <_dtoa_r+0x1624>
100073c8:	102f883a 	mov	r23,r2
100073cc:	b8bfffc4 	addi	r2,r23,-1
100073d0:	10c00007 	ldb	r3,0(r2)
100073d4:	193ffc26 	beq	r3,r4,100073c8 <__alt_data_end+0xf80073c8>
100073d8:	d9801217 	ldw	r6,72(sp)
100073dc:	d9800515 	stw	r6,20(sp)
100073e0:	003c1f06 	br	10006460 <__alt_data_end+0xf8006460>
100073e4:	d8801217 	ldw	r2,72(sp)
100073e8:	dc001117 	ldw	r16,68(sp)
100073ec:	d8800515 	stw	r2,20(sp)
100073f0:	003cc906 	br	10006718 <__alt_data_end+0xf8006718>
100073f4:	dd801317 	ldw	r22,76(sp)
100073f8:	dc001117 	ldw	r16,68(sp)
100073fc:	dcc01417 	ldw	r19,80(sp)
10007400:	dc801017 	ldw	r18,64(sp)
10007404:	003c4506 	br	1000651c <__alt_data_end+0xf800651c>
10007408:	103e5d1e 	bne	r2,zero,10006d80 <__alt_data_end+0xf8006d80>
1000740c:	4080004c 	andi	r2,r8,1
10007410:	103e5b26 	beq	r2,zero,10006d80 <__alt_data_end+0xf8006d80>
10007414:	003e5706 	br	10006d74 <__alt_data_end+0xf8006d74>
10007418:	d8c00317 	ldw	r3,12(sp)
1000741c:	00800084 	movi	r2,2
10007420:	10c00a16 	blt	r2,r3,1000744c <_dtoa_r+0x16a4>
10007424:	d9000d17 	ldw	r4,52(sp)
10007428:	003e8306 	br	10006e38 <__alt_data_end+0xf8006e38>
1000742c:	04400084 	movi	r17,2
10007430:	003b7306 	br	10006200 <__alt_data_end+0xf8006200>
10007434:	d9801217 	ldw	r6,72(sp)
10007438:	d9800515 	stw	r6,20(sp)
1000743c:	003cb606 	br	10006718 <__alt_data_end+0xf8006718>
10007440:	d9001217 	ldw	r4,72(sp)
10007444:	d9000515 	stw	r4,20(sp)
10007448:	003c0506 	br	10006460 <__alt_data_end+0xf8006460>
1000744c:	d9800d17 	ldw	r6,52(sp)
10007450:	d9800615 	stw	r6,24(sp)
10007454:	003e8306 	br	10006e64 <__alt_data_end+0xf8006e64>
10007458:	d9800317 	ldw	r6,12(sp)
1000745c:	00800084 	movi	r2,2
10007460:	11800216 	blt	r2,r6,1000746c <_dtoa_r+0x16c4>
10007464:	d8800d17 	ldw	r2,52(sp)
10007468:	003da606 	br	10006b04 <__alt_data_end+0xf8006b04>
1000746c:	d8800d17 	ldw	r2,52(sp)
10007470:	d8800615 	stw	r2,24(sp)
10007474:	003e7b06 	br	10006e64 <__alt_data_end+0xf8006e64>
10007478:	05000044 	movi	r20,1
1000747c:	003b0506 	br	10006094 <__alt_data_end+0xf8006094>
10007480:	8009883a 	mov	r4,r16
10007484:	80001115 	stw	zero,68(r16)
10007488:	000b883a 	mov	r5,zero
1000748c:	0008de40 	call	10008de4 <_Balloc>
10007490:	d8800715 	stw	r2,28(sp)
10007494:	d8c00717 	ldw	r3,28(sp)
10007498:	00bfffc4 	movi	r2,-1
1000749c:	01000044 	movi	r4,1
100074a0:	d8800615 	stw	r2,24(sp)
100074a4:	80c01015 	stw	r3,64(r16)
100074a8:	d9000b15 	stw	r4,44(sp)
100074ac:	d8002215 	stw	zero,136(sp)
100074b0:	d8800d15 	stw	r2,52(sp)
100074b4:	003c1906 	br	1000651c <__alt_data_end+0xf800651c>
100074b8:	193d2926 	beq	r3,r4,10006960 <__alt_data_end+0xf8006960>
100074bc:	00c00f04 	movi	r3,60
100074c0:	1885c83a 	sub	r2,r3,r2
100074c4:	003d7b06 	br	10006ab4 <__alt_data_end+0xf8006ab4>
100074c8:	000b883a 	mov	r5,zero
100074cc:	003b1006 	br	10006110 <__alt_data_end+0xf8006110>

100074d0 <_fflush_r>:
100074d0:	defffb04 	addi	sp,sp,-20
100074d4:	dcc00315 	stw	r19,12(sp)
100074d8:	dc000015 	stw	r16,0(sp)
100074dc:	dfc00415 	stw	ra,16(sp)
100074e0:	dc800215 	stw	r18,8(sp)
100074e4:	dc400115 	stw	r17,4(sp)
100074e8:	2027883a 	mov	r19,r4
100074ec:	2821883a 	mov	r16,r5
100074f0:	20000226 	beq	r4,zero,100074fc <_fflush_r+0x2c>
100074f4:	20800e17 	ldw	r2,56(r4)
100074f8:	10005326 	beq	r2,zero,10007648 <_fflush_r+0x178>
100074fc:	8080030b 	ldhu	r2,12(r16)
10007500:	10ffffcc 	andi	r3,r2,65535
10007504:	18e0001c 	xori	r3,r3,32768
10007508:	18e00004 	addi	r3,r3,-32768
1000750c:	18002c26 	beq	r3,zero,100075c0 <_fflush_r+0xf0>
10007510:	10c0020c 	andi	r3,r2,8
10007514:	1800321e 	bne	r3,zero,100075e0 <_fflush_r+0x110>
10007518:	80c00117 	ldw	r3,4(r16)
1000751c:	10820014 	ori	r2,r2,2048
10007520:	8080030d 	sth	r2,12(r16)
10007524:	00c0570e 	bge	zero,r3,10007684 <_fflush_r+0x1b4>
10007528:	82000a17 	ldw	r8,40(r16)
1000752c:	40002426 	beq	r8,zero,100075c0 <_fflush_r+0xf0>
10007530:	9c400017 	ldw	r17,0(r19)
10007534:	10c4000c 	andi	r3,r2,4096
10007538:	98000015 	stw	zero,0(r19)
1000753c:	18004626 	beq	r3,zero,10007658 <_fflush_r+0x188>
10007540:	81801417 	ldw	r6,80(r16)
10007544:	10c0010c 	andi	r3,r2,4
10007548:	18000626 	beq	r3,zero,10007564 <_fflush_r+0x94>
1000754c:	80c00117 	ldw	r3,4(r16)
10007550:	80800c17 	ldw	r2,48(r16)
10007554:	30cdc83a 	sub	r6,r6,r3
10007558:	10000226 	beq	r2,zero,10007564 <_fflush_r+0x94>
1000755c:	80800f17 	ldw	r2,60(r16)
10007560:	308dc83a 	sub	r6,r6,r2
10007564:	81400717 	ldw	r5,28(r16)
10007568:	9809883a 	mov	r4,r19
1000756c:	000f883a 	mov	r7,zero
10007570:	403ee83a 	callr	r8
10007574:	00ffffc4 	movi	r3,-1
10007578:	10c04526 	beq	r2,r3,10007690 <_fflush_r+0x1c0>
1000757c:	80c0030b 	ldhu	r3,12(r16)
10007580:	81000417 	ldw	r4,16(r16)
10007584:	80000115 	stw	zero,4(r16)
10007588:	197dffcc 	andi	r5,r3,63487
1000758c:	8140030d 	sth	r5,12(r16)
10007590:	81000015 	stw	r4,0(r16)
10007594:	18c4000c 	andi	r3,r3,4096
10007598:	18000126 	beq	r3,zero,100075a0 <_fflush_r+0xd0>
1000759c:	80801415 	stw	r2,80(r16)
100075a0:	81400c17 	ldw	r5,48(r16)
100075a4:	9c400015 	stw	r17,0(r19)
100075a8:	28000526 	beq	r5,zero,100075c0 <_fflush_r+0xf0>
100075ac:	80801004 	addi	r2,r16,64
100075b0:	28800226 	beq	r5,r2,100075bc <_fflush_r+0xec>
100075b4:	9809883a 	mov	r4,r19
100075b8:	0007c000 	call	10007c00 <_free_r>
100075bc:	80000c15 	stw	zero,48(r16)
100075c0:	0005883a 	mov	r2,zero
100075c4:	dfc00417 	ldw	ra,16(sp)
100075c8:	dcc00317 	ldw	r19,12(sp)
100075cc:	dc800217 	ldw	r18,8(sp)
100075d0:	dc400117 	ldw	r17,4(sp)
100075d4:	dc000017 	ldw	r16,0(sp)
100075d8:	dec00504 	addi	sp,sp,20
100075dc:	f800283a 	ret
100075e0:	84800417 	ldw	r18,16(r16)
100075e4:	903ff626 	beq	r18,zero,100075c0 <__alt_data_end+0xf80075c0>
100075e8:	84400017 	ldw	r17,0(r16)
100075ec:	108000cc 	andi	r2,r2,3
100075f0:	84800015 	stw	r18,0(r16)
100075f4:	8ca3c83a 	sub	r17,r17,r18
100075f8:	10001526 	beq	r2,zero,10007650 <_fflush_r+0x180>
100075fc:	0005883a 	mov	r2,zero
10007600:	80800215 	stw	r2,8(r16)
10007604:	04400316 	blt	zero,r17,10007614 <_fflush_r+0x144>
10007608:	003fed06 	br	100075c0 <__alt_data_end+0xf80075c0>
1000760c:	90a5883a 	add	r18,r18,r2
10007610:	047feb0e 	bge	zero,r17,100075c0 <__alt_data_end+0xf80075c0>
10007614:	80800917 	ldw	r2,36(r16)
10007618:	81400717 	ldw	r5,28(r16)
1000761c:	880f883a 	mov	r7,r17
10007620:	900d883a 	mov	r6,r18
10007624:	9809883a 	mov	r4,r19
10007628:	103ee83a 	callr	r2
1000762c:	88a3c83a 	sub	r17,r17,r2
10007630:	00bff616 	blt	zero,r2,1000760c <__alt_data_end+0xf800760c>
10007634:	80c0030b 	ldhu	r3,12(r16)
10007638:	00bfffc4 	movi	r2,-1
1000763c:	18c01014 	ori	r3,r3,64
10007640:	80c0030d 	sth	r3,12(r16)
10007644:	003fdf06 	br	100075c4 <__alt_data_end+0xf80075c4>
10007648:	0007a8c0 	call	10007a8c <__sinit>
1000764c:	003fab06 	br	100074fc <__alt_data_end+0xf80074fc>
10007650:	80800517 	ldw	r2,20(r16)
10007654:	003fea06 	br	10007600 <__alt_data_end+0xf8007600>
10007658:	81400717 	ldw	r5,28(r16)
1000765c:	000d883a 	mov	r6,zero
10007660:	9809883a 	mov	r4,r19
10007664:	01c00044 	movi	r7,1
10007668:	403ee83a 	callr	r8
1000766c:	100d883a 	mov	r6,r2
10007670:	00bfffc4 	movi	r2,-1
10007674:	30801326 	beq	r6,r2,100076c4 <_fflush_r+0x1f4>
10007678:	8080030b 	ldhu	r2,12(r16)
1000767c:	82000a17 	ldw	r8,40(r16)
10007680:	003fb006 	br	10007544 <__alt_data_end+0xf8007544>
10007684:	80c00f17 	ldw	r3,60(r16)
10007688:	00ffa716 	blt	zero,r3,10007528 <__alt_data_end+0xf8007528>
1000768c:	003fcc06 	br	100075c0 <__alt_data_end+0xf80075c0>
10007690:	98c00017 	ldw	r3,0(r19)
10007694:	183fb926 	beq	r3,zero,1000757c <__alt_data_end+0xf800757c>
10007698:	01000744 	movi	r4,29
1000769c:	19000226 	beq	r3,r4,100076a8 <_fflush_r+0x1d8>
100076a0:	01000584 	movi	r4,22
100076a4:	1900101e 	bne	r3,r4,100076e8 <_fflush_r+0x218>
100076a8:	8080030b 	ldhu	r2,12(r16)
100076ac:	80c00417 	ldw	r3,16(r16)
100076b0:	80000115 	stw	zero,4(r16)
100076b4:	10bdffcc 	andi	r2,r2,63487
100076b8:	8080030d 	sth	r2,12(r16)
100076bc:	80c00015 	stw	r3,0(r16)
100076c0:	003fb706 	br	100075a0 <__alt_data_end+0xf80075a0>
100076c4:	98800017 	ldw	r2,0(r19)
100076c8:	103feb26 	beq	r2,zero,10007678 <__alt_data_end+0xf8007678>
100076cc:	00c00744 	movi	r3,29
100076d0:	10c00226 	beq	r2,r3,100076dc <_fflush_r+0x20c>
100076d4:	00c00584 	movi	r3,22
100076d8:	10ffd61e 	bne	r2,r3,10007634 <__alt_data_end+0xf8007634>
100076dc:	9c400015 	stw	r17,0(r19)
100076e0:	0005883a 	mov	r2,zero
100076e4:	003fb706 	br	100075c4 <__alt_data_end+0xf80075c4>
100076e8:	80c0030b 	ldhu	r3,12(r16)
100076ec:	18c01014 	ori	r3,r3,64
100076f0:	80c0030d 	sth	r3,12(r16)
100076f4:	003fb306 	br	100075c4 <__alt_data_end+0xf80075c4>

100076f8 <fflush>:
100076f8:	20000526 	beq	r4,zero,10007710 <fflush+0x18>
100076fc:	00840074 	movhi	r2,4097
10007700:	1089ac04 	addi	r2,r2,9904
10007704:	200b883a 	mov	r5,r4
10007708:	11000017 	ldw	r4,0(r2)
1000770c:	00074d01 	jmpi	100074d0 <_fflush_r>
10007710:	00840074 	movhi	r2,4097
10007714:	1089ab04 	addi	r2,r2,9900
10007718:	11000017 	ldw	r4,0(r2)
1000771c:	01440034 	movhi	r5,4096
10007720:	295d3404 	addi	r5,r5,29904
10007724:	0007fa81 	jmpi	10007fa8 <_fwalk_reent>

10007728 <__fp_lock>:
10007728:	0005883a 	mov	r2,zero
1000772c:	f800283a 	ret

10007730 <__fp_unlock>:
10007730:	0005883a 	mov	r2,zero
10007734:	f800283a 	ret

10007738 <_cleanup_r>:
10007738:	01440074 	movhi	r5,4097
1000773c:	296e5404 	addi	r5,r5,-18096
10007740:	0007ef01 	jmpi	10007ef0 <_fwalk>

10007744 <__sinit.part.1>:
10007744:	defff604 	addi	sp,sp,-40
10007748:	00c40034 	movhi	r3,4096
1000774c:	dfc00915 	stw	ra,36(sp)
10007750:	df000815 	stw	fp,32(sp)
10007754:	ddc00715 	stw	r23,28(sp)
10007758:	dd800615 	stw	r22,24(sp)
1000775c:	dd400515 	stw	r21,20(sp)
10007760:	dd000415 	stw	r20,16(sp)
10007764:	dcc00315 	stw	r19,12(sp)
10007768:	dc800215 	stw	r18,8(sp)
1000776c:	dc400115 	stw	r17,4(sp)
10007770:	dc000015 	stw	r16,0(sp)
10007774:	18ddce04 	addi	r3,r3,30520
10007778:	24000117 	ldw	r16,4(r4)
1000777c:	20c00f15 	stw	r3,60(r4)
10007780:	07000044 	movi	fp,1
10007784:	00c000c4 	movi	r3,3
10007788:	2080bb04 	addi	r2,r4,748
1000778c:	20c0b915 	stw	r3,740(r4)
10007790:	27000e15 	stw	fp,56(r4)
10007794:	2080ba15 	stw	r2,744(r4)
10007798:	2000b815 	stw	zero,736(r4)
1000779c:	05c00204 	movi	r23,8
100077a0:	00800104 	movi	r2,4
100077a4:	2025883a 	mov	r18,r4
100077a8:	b80d883a 	mov	r6,r23
100077ac:	81001704 	addi	r4,r16,92
100077b0:	000b883a 	mov	r5,zero
100077b4:	80000015 	stw	zero,0(r16)
100077b8:	80000115 	stw	zero,4(r16)
100077bc:	80000215 	stw	zero,8(r16)
100077c0:	8080030d 	sth	r2,12(r16)
100077c4:	80001915 	stw	zero,100(r16)
100077c8:	8000038d 	sth	zero,14(r16)
100077cc:	80000415 	stw	zero,16(r16)
100077d0:	80000515 	stw	zero,20(r16)
100077d4:	80000615 	stw	zero,24(r16)
100077d8:	0008cc00 	call	10008cc0 <memset>
100077dc:	05840074 	movhi	r22,4097
100077e0:	94400217 	ldw	r17,8(r18)
100077e4:	05440074 	movhi	r21,4097
100077e8:	05040074 	movhi	r20,4097
100077ec:	04c40074 	movhi	r19,4097
100077f0:	b5a7bd04 	addi	r22,r22,-24844
100077f4:	ad67d404 	addi	r21,r21,-24752
100077f8:	a527f304 	addi	r20,r20,-24628
100077fc:	9ce80a04 	addi	r19,r19,-24536
10007800:	85800815 	stw	r22,32(r16)
10007804:	85400915 	stw	r21,36(r16)
10007808:	85000a15 	stw	r20,40(r16)
1000780c:	84c00b15 	stw	r19,44(r16)
10007810:	84000715 	stw	r16,28(r16)
10007814:	00800284 	movi	r2,10
10007818:	89001704 	addi	r4,r17,92
1000781c:	b80d883a 	mov	r6,r23
10007820:	000b883a 	mov	r5,zero
10007824:	88000015 	stw	zero,0(r17)
10007828:	88000115 	stw	zero,4(r17)
1000782c:	88000215 	stw	zero,8(r17)
10007830:	8880030d 	sth	r2,12(r17)
10007834:	88001915 	stw	zero,100(r17)
10007838:	8f00038d 	sth	fp,14(r17)
1000783c:	88000415 	stw	zero,16(r17)
10007840:	88000515 	stw	zero,20(r17)
10007844:	88000615 	stw	zero,24(r17)
10007848:	0008cc00 	call	10008cc0 <memset>
1000784c:	94000317 	ldw	r16,12(r18)
10007850:	00800484 	movi	r2,18
10007854:	8c400715 	stw	r17,28(r17)
10007858:	8d800815 	stw	r22,32(r17)
1000785c:	8d400915 	stw	r21,36(r17)
10007860:	8d000a15 	stw	r20,40(r17)
10007864:	8cc00b15 	stw	r19,44(r17)
10007868:	8080030d 	sth	r2,12(r16)
1000786c:	00800084 	movi	r2,2
10007870:	80000015 	stw	zero,0(r16)
10007874:	80000115 	stw	zero,4(r16)
10007878:	80000215 	stw	zero,8(r16)
1000787c:	80001915 	stw	zero,100(r16)
10007880:	8080038d 	sth	r2,14(r16)
10007884:	80000415 	stw	zero,16(r16)
10007888:	80000515 	stw	zero,20(r16)
1000788c:	80000615 	stw	zero,24(r16)
10007890:	81001704 	addi	r4,r16,92
10007894:	000b883a 	mov	r5,zero
10007898:	b80d883a 	mov	r6,r23
1000789c:	0008cc00 	call	10008cc0 <memset>
100078a0:	84000715 	stw	r16,28(r16)
100078a4:	85800815 	stw	r22,32(r16)
100078a8:	85400915 	stw	r21,36(r16)
100078ac:	85000a15 	stw	r20,40(r16)
100078b0:	84c00b15 	stw	r19,44(r16)
100078b4:	dfc00917 	ldw	ra,36(sp)
100078b8:	df000817 	ldw	fp,32(sp)
100078bc:	ddc00717 	ldw	r23,28(sp)
100078c0:	dd800617 	ldw	r22,24(sp)
100078c4:	dd400517 	ldw	r21,20(sp)
100078c8:	dd000417 	ldw	r20,16(sp)
100078cc:	dcc00317 	ldw	r19,12(sp)
100078d0:	dc800217 	ldw	r18,8(sp)
100078d4:	dc400117 	ldw	r17,4(sp)
100078d8:	dc000017 	ldw	r16,0(sp)
100078dc:	dec00a04 	addi	sp,sp,40
100078e0:	f800283a 	ret

100078e4 <__sfmoreglue>:
100078e4:	defffc04 	addi	sp,sp,-16
100078e8:	dc800215 	stw	r18,8(sp)
100078ec:	2825883a 	mov	r18,r5
100078f0:	dc000015 	stw	r16,0(sp)
100078f4:	01401a04 	movi	r5,104
100078f8:	2021883a 	mov	r16,r4
100078fc:	9009883a 	mov	r4,r18
10007900:	dfc00315 	stw	ra,12(sp)
10007904:	dc400115 	stw	r17,4(sp)
10007908:	00024fc0 	call	100024fc <__mulsi3>
1000790c:	8009883a 	mov	r4,r16
10007910:	11400304 	addi	r5,r2,12
10007914:	1023883a 	mov	r17,r2
10007918:	00082f80 	call	100082f8 <_malloc_r>
1000791c:	1021883a 	mov	r16,r2
10007920:	10000726 	beq	r2,zero,10007940 <__sfmoreglue+0x5c>
10007924:	11000304 	addi	r4,r2,12
10007928:	10000015 	stw	zero,0(r2)
1000792c:	14800115 	stw	r18,4(r2)
10007930:	11000215 	stw	r4,8(r2)
10007934:	000b883a 	mov	r5,zero
10007938:	880d883a 	mov	r6,r17
1000793c:	0008cc00 	call	10008cc0 <memset>
10007940:	8005883a 	mov	r2,r16
10007944:	dfc00317 	ldw	ra,12(sp)
10007948:	dc800217 	ldw	r18,8(sp)
1000794c:	dc400117 	ldw	r17,4(sp)
10007950:	dc000017 	ldw	r16,0(sp)
10007954:	dec00404 	addi	sp,sp,16
10007958:	f800283a 	ret

1000795c <__sfp>:
1000795c:	00840074 	movhi	r2,4097
10007960:	defffb04 	addi	sp,sp,-20
10007964:	1089ab04 	addi	r2,r2,9900
10007968:	dc800215 	stw	r18,8(sp)
1000796c:	14800017 	ldw	r18,0(r2)
10007970:	dcc00315 	stw	r19,12(sp)
10007974:	dfc00415 	stw	ra,16(sp)
10007978:	90800e17 	ldw	r2,56(r18)
1000797c:	dc400115 	stw	r17,4(sp)
10007980:	dc000015 	stw	r16,0(sp)
10007984:	2027883a 	mov	r19,r4
10007988:	1000021e 	bne	r2,zero,10007994 <__sfp+0x38>
1000798c:	9009883a 	mov	r4,r18
10007990:	00077440 	call	10007744 <__sinit.part.1>
10007994:	9480b804 	addi	r18,r18,736
10007998:	047fffc4 	movi	r17,-1
1000799c:	91400117 	ldw	r5,4(r18)
100079a0:	94000217 	ldw	r16,8(r18)
100079a4:	297fffc4 	addi	r5,r5,-1
100079a8:	28000a16 	blt	r5,zero,100079d4 <__sfp+0x78>
100079ac:	8080030f 	ldh	r2,12(r16)
100079b0:	10000c26 	beq	r2,zero,100079e4 <__sfp+0x88>
100079b4:	80c01d04 	addi	r3,r16,116
100079b8:	00000206 	br	100079c4 <__sfp+0x68>
100079bc:	18bfe60f 	ldh	r2,-104(r3)
100079c0:	10000826 	beq	r2,zero,100079e4 <__sfp+0x88>
100079c4:	297fffc4 	addi	r5,r5,-1
100079c8:	1c3ffd04 	addi	r16,r3,-12
100079cc:	18c01a04 	addi	r3,r3,104
100079d0:	2c7ffa1e 	bne	r5,r17,100079bc <__alt_data_end+0xf80079bc>
100079d4:	90800017 	ldw	r2,0(r18)
100079d8:	10001d26 	beq	r2,zero,10007a50 <__sfp+0xf4>
100079dc:	1025883a 	mov	r18,r2
100079e0:	003fee06 	br	1000799c <__alt_data_end+0xf800799c>
100079e4:	00bfffc4 	movi	r2,-1
100079e8:	8080038d 	sth	r2,14(r16)
100079ec:	00800044 	movi	r2,1
100079f0:	8080030d 	sth	r2,12(r16)
100079f4:	80001915 	stw	zero,100(r16)
100079f8:	80000015 	stw	zero,0(r16)
100079fc:	80000215 	stw	zero,8(r16)
10007a00:	80000115 	stw	zero,4(r16)
10007a04:	80000415 	stw	zero,16(r16)
10007a08:	80000515 	stw	zero,20(r16)
10007a0c:	80000615 	stw	zero,24(r16)
10007a10:	81001704 	addi	r4,r16,92
10007a14:	000b883a 	mov	r5,zero
10007a18:	01800204 	movi	r6,8
10007a1c:	0008cc00 	call	10008cc0 <memset>
10007a20:	8005883a 	mov	r2,r16
10007a24:	80000c15 	stw	zero,48(r16)
10007a28:	80000d15 	stw	zero,52(r16)
10007a2c:	80001115 	stw	zero,68(r16)
10007a30:	80001215 	stw	zero,72(r16)
10007a34:	dfc00417 	ldw	ra,16(sp)
10007a38:	dcc00317 	ldw	r19,12(sp)
10007a3c:	dc800217 	ldw	r18,8(sp)
10007a40:	dc400117 	ldw	r17,4(sp)
10007a44:	dc000017 	ldw	r16,0(sp)
10007a48:	dec00504 	addi	sp,sp,20
10007a4c:	f800283a 	ret
10007a50:	9809883a 	mov	r4,r19
10007a54:	01400104 	movi	r5,4
10007a58:	00078e40 	call	100078e4 <__sfmoreglue>
10007a5c:	90800015 	stw	r2,0(r18)
10007a60:	103fde1e 	bne	r2,zero,100079dc <__alt_data_end+0xf80079dc>
10007a64:	00800304 	movi	r2,12
10007a68:	98800015 	stw	r2,0(r19)
10007a6c:	0005883a 	mov	r2,zero
10007a70:	003ff006 	br	10007a34 <__alt_data_end+0xf8007a34>

10007a74 <_cleanup>:
10007a74:	00840074 	movhi	r2,4097
10007a78:	1089ab04 	addi	r2,r2,9900
10007a7c:	11000017 	ldw	r4,0(r2)
10007a80:	01440074 	movhi	r5,4097
10007a84:	296e5404 	addi	r5,r5,-18096
10007a88:	0007ef01 	jmpi	10007ef0 <_fwalk>

10007a8c <__sinit>:
10007a8c:	20800e17 	ldw	r2,56(r4)
10007a90:	10000126 	beq	r2,zero,10007a98 <__sinit+0xc>
10007a94:	f800283a 	ret
10007a98:	00077441 	jmpi	10007744 <__sinit.part.1>

10007a9c <__sfp_lock_acquire>:
10007a9c:	f800283a 	ret

10007aa0 <__sfp_lock_release>:
10007aa0:	f800283a 	ret

10007aa4 <__sinit_lock_acquire>:
10007aa4:	f800283a 	ret

10007aa8 <__sinit_lock_release>:
10007aa8:	f800283a 	ret

10007aac <__fp_lock_all>:
10007aac:	00840074 	movhi	r2,4097
10007ab0:	1089ac04 	addi	r2,r2,9904
10007ab4:	11000017 	ldw	r4,0(r2)
10007ab8:	01440034 	movhi	r5,4096
10007abc:	295dca04 	addi	r5,r5,30504
10007ac0:	0007ef01 	jmpi	10007ef0 <_fwalk>

10007ac4 <__fp_unlock_all>:
10007ac4:	00840074 	movhi	r2,4097
10007ac8:	1089ac04 	addi	r2,r2,9904
10007acc:	11000017 	ldw	r4,0(r2)
10007ad0:	01440034 	movhi	r5,4096
10007ad4:	295dcc04 	addi	r5,r5,30512
10007ad8:	0007ef01 	jmpi	10007ef0 <_fwalk>

10007adc <_malloc_trim_r>:
10007adc:	defffb04 	addi	sp,sp,-20
10007ae0:	dcc00315 	stw	r19,12(sp)
10007ae4:	04c40074 	movhi	r19,4097
10007ae8:	dc800215 	stw	r18,8(sp)
10007aec:	dc400115 	stw	r17,4(sp)
10007af0:	dc000015 	stw	r16,0(sp)
10007af4:	dfc00415 	stw	ra,16(sp)
10007af8:	2821883a 	mov	r16,r5
10007afc:	9cc42704 	addi	r19,r19,4252
10007b00:	2025883a 	mov	r18,r4
10007b04:	000e7740 	call	1000e774 <__malloc_lock>
10007b08:	98800217 	ldw	r2,8(r19)
10007b0c:	14400117 	ldw	r17,4(r2)
10007b10:	00bfff04 	movi	r2,-4
10007b14:	88a2703a 	and	r17,r17,r2
10007b18:	8c21c83a 	sub	r16,r17,r16
10007b1c:	8403fbc4 	addi	r16,r16,4079
10007b20:	8020d33a 	srli	r16,r16,12
10007b24:	0083ffc4 	movi	r2,4095
10007b28:	843fffc4 	addi	r16,r16,-1
10007b2c:	8020933a 	slli	r16,r16,12
10007b30:	1400060e 	bge	r2,r16,10007b4c <_malloc_trim_r+0x70>
10007b34:	9009883a 	mov	r4,r18
10007b38:	000b883a 	mov	r5,zero
10007b3c:	0009ea00 	call	10009ea0 <_sbrk_r>
10007b40:	98c00217 	ldw	r3,8(r19)
10007b44:	1c47883a 	add	r3,r3,r17
10007b48:	10c00a26 	beq	r2,r3,10007b74 <_malloc_trim_r+0x98>
10007b4c:	9009883a 	mov	r4,r18
10007b50:	000e7940 	call	1000e794 <__malloc_unlock>
10007b54:	0005883a 	mov	r2,zero
10007b58:	dfc00417 	ldw	ra,16(sp)
10007b5c:	dcc00317 	ldw	r19,12(sp)
10007b60:	dc800217 	ldw	r18,8(sp)
10007b64:	dc400117 	ldw	r17,4(sp)
10007b68:	dc000017 	ldw	r16,0(sp)
10007b6c:	dec00504 	addi	sp,sp,20
10007b70:	f800283a 	ret
10007b74:	9009883a 	mov	r4,r18
10007b78:	040bc83a 	sub	r5,zero,r16
10007b7c:	0009ea00 	call	10009ea0 <_sbrk_r>
10007b80:	00ffffc4 	movi	r3,-1
10007b84:	10c00d26 	beq	r2,r3,10007bbc <_malloc_trim_r+0xe0>
10007b88:	00c40074 	movhi	r3,4097
10007b8c:	18d08b04 	addi	r3,r3,16940
10007b90:	18800017 	ldw	r2,0(r3)
10007b94:	99000217 	ldw	r4,8(r19)
10007b98:	8c23c83a 	sub	r17,r17,r16
10007b9c:	8c400054 	ori	r17,r17,1
10007ba0:	1421c83a 	sub	r16,r2,r16
10007ba4:	24400115 	stw	r17,4(r4)
10007ba8:	9009883a 	mov	r4,r18
10007bac:	1c000015 	stw	r16,0(r3)
10007bb0:	000e7940 	call	1000e794 <__malloc_unlock>
10007bb4:	00800044 	movi	r2,1
10007bb8:	003fe706 	br	10007b58 <__alt_data_end+0xf8007b58>
10007bbc:	9009883a 	mov	r4,r18
10007bc0:	000b883a 	mov	r5,zero
10007bc4:	0009ea00 	call	10009ea0 <_sbrk_r>
10007bc8:	99000217 	ldw	r4,8(r19)
10007bcc:	014003c4 	movi	r5,15
10007bd0:	1107c83a 	sub	r3,r2,r4
10007bd4:	28ffdd0e 	bge	r5,r3,10007b4c <__alt_data_end+0xf8007b4c>
10007bd8:	01440074 	movhi	r5,4097
10007bdc:	2949ae04 	addi	r5,r5,9912
10007be0:	29400017 	ldw	r5,0(r5)
10007be4:	18c00054 	ori	r3,r3,1
10007be8:	20c00115 	stw	r3,4(r4)
10007bec:	00c40074 	movhi	r3,4097
10007bf0:	1145c83a 	sub	r2,r2,r5
10007bf4:	18d08b04 	addi	r3,r3,16940
10007bf8:	18800015 	stw	r2,0(r3)
10007bfc:	003fd306 	br	10007b4c <__alt_data_end+0xf8007b4c>

10007c00 <_free_r>:
10007c00:	28004c26 	beq	r5,zero,10007d34 <_free_r+0x134>
10007c04:	defffd04 	addi	sp,sp,-12
10007c08:	dc400115 	stw	r17,4(sp)
10007c0c:	dc000015 	stw	r16,0(sp)
10007c10:	2023883a 	mov	r17,r4
10007c14:	2821883a 	mov	r16,r5
10007c18:	dfc00215 	stw	ra,8(sp)
10007c1c:	000e7740 	call	1000e774 <__malloc_lock>
10007c20:	813fff17 	ldw	r4,-4(r16)
10007c24:	00bfff84 	movi	r2,-2
10007c28:	02440074 	movhi	r9,4097
10007c2c:	81bffe04 	addi	r6,r16,-8
10007c30:	2084703a 	and	r2,r4,r2
10007c34:	4a442704 	addi	r9,r9,4252
10007c38:	308b883a 	add	r5,r6,r2
10007c3c:	2a000117 	ldw	r8,4(r5)
10007c40:	49c00217 	ldw	r7,8(r9)
10007c44:	00ffff04 	movi	r3,-4
10007c48:	40c6703a 	and	r3,r8,r3
10007c4c:	39405326 	beq	r7,r5,10007d9c <_free_r+0x19c>
10007c50:	28c00115 	stw	r3,4(r5)
10007c54:	2100004c 	andi	r4,r4,1
10007c58:	2000091e 	bne	r4,zero,10007c80 <_free_r+0x80>
10007c5c:	81fffe17 	ldw	r7,-8(r16)
10007c60:	4a000204 	addi	r8,r9,8
10007c64:	31cdc83a 	sub	r6,r6,r7
10007c68:	31000217 	ldw	r4,8(r6)
10007c6c:	11c5883a 	add	r2,r2,r7
10007c70:	22006126 	beq	r4,r8,10007df8 <_free_r+0x1f8>
10007c74:	31c00317 	ldw	r7,12(r6)
10007c78:	21c00315 	stw	r7,12(r4)
10007c7c:	39000215 	stw	r4,8(r7)
10007c80:	28c9883a 	add	r4,r5,r3
10007c84:	21c00117 	ldw	r7,4(r4)
10007c88:	39c0004c 	andi	r7,r7,1
10007c8c:	38000d1e 	bne	r7,zero,10007cc4 <_free_r+0xc4>
10007c90:	29000217 	ldw	r4,8(r5)
10007c94:	10c5883a 	add	r2,r2,r3
10007c98:	00c40074 	movhi	r3,4097
10007c9c:	18c42904 	addi	r3,r3,4260
10007ca0:	20c07526 	beq	r4,r3,10007e78 <_free_r+0x278>
10007ca4:	29c00317 	ldw	r7,12(r5)
10007ca8:	11400054 	ori	r5,r2,1
10007cac:	3087883a 	add	r3,r6,r2
10007cb0:	21c00315 	stw	r7,12(r4)
10007cb4:	39000215 	stw	r4,8(r7)
10007cb8:	31400115 	stw	r5,4(r6)
10007cbc:	18800015 	stw	r2,0(r3)
10007cc0:	00000406 	br	10007cd4 <_free_r+0xd4>
10007cc4:	10c00054 	ori	r3,r2,1
10007cc8:	30c00115 	stw	r3,4(r6)
10007ccc:	3087883a 	add	r3,r6,r2
10007cd0:	18800015 	stw	r2,0(r3)
10007cd4:	00c07fc4 	movi	r3,511
10007cd8:	18801736 	bltu	r3,r2,10007d38 <_free_r+0x138>
10007cdc:	1004d0fa 	srli	r2,r2,3
10007ce0:	01400044 	movi	r5,1
10007ce4:	49000117 	ldw	r4,4(r9)
10007ce8:	1087883a 	add	r3,r2,r2
10007cec:	18c7883a 	add	r3,r3,r3
10007cf0:	1005d0ba 	srai	r2,r2,2
10007cf4:	18c7883a 	add	r3,r3,r3
10007cf8:	1a47883a 	add	r3,r3,r9
10007cfc:	19c00217 	ldw	r7,8(r3)
10007d00:	2884983a 	sll	r2,r5,r2
10007d04:	30c00315 	stw	r3,12(r6)
10007d08:	31c00215 	stw	r7,8(r6)
10007d0c:	1104b03a 	or	r2,r2,r4
10007d10:	19800215 	stw	r6,8(r3)
10007d14:	48800115 	stw	r2,4(r9)
10007d18:	39800315 	stw	r6,12(r7)
10007d1c:	8809883a 	mov	r4,r17
10007d20:	dfc00217 	ldw	ra,8(sp)
10007d24:	dc400117 	ldw	r17,4(sp)
10007d28:	dc000017 	ldw	r16,0(sp)
10007d2c:	dec00304 	addi	sp,sp,12
10007d30:	000e7941 	jmpi	1000e794 <__malloc_unlock>
10007d34:	f800283a 	ret
10007d38:	1006d27a 	srli	r3,r2,9
10007d3c:	01000104 	movi	r4,4
10007d40:	20c04036 	bltu	r4,r3,10007e44 <_free_r+0x244>
10007d44:	1006d1ba 	srli	r3,r2,6
10007d48:	19400e04 	addi	r5,r3,56
10007d4c:	2947883a 	add	r3,r5,r5
10007d50:	18c7883a 	add	r3,r3,r3
10007d54:	18c7883a 	add	r3,r3,r3
10007d58:	1a49883a 	add	r4,r3,r9
10007d5c:	20c00217 	ldw	r3,8(r4)
10007d60:	01c40074 	movhi	r7,4097
10007d64:	39c42704 	addi	r7,r7,4252
10007d68:	19003b26 	beq	r3,r4,10007e58 <_free_r+0x258>
10007d6c:	01ffff04 	movi	r7,-4
10007d70:	19400117 	ldw	r5,4(r3)
10007d74:	29ca703a 	and	r5,r5,r7
10007d78:	1140022e 	bgeu	r2,r5,10007d84 <_free_r+0x184>
10007d7c:	18c00217 	ldw	r3,8(r3)
10007d80:	20fffb1e 	bne	r4,r3,10007d70 <__alt_data_end+0xf8007d70>
10007d84:	18800317 	ldw	r2,12(r3)
10007d88:	30800315 	stw	r2,12(r6)
10007d8c:	30c00215 	stw	r3,8(r6)
10007d90:	11800215 	stw	r6,8(r2)
10007d94:	19800315 	stw	r6,12(r3)
10007d98:	003fe006 	br	10007d1c <__alt_data_end+0xf8007d1c>
10007d9c:	2100004c 	andi	r4,r4,1
10007da0:	1885883a 	add	r2,r3,r2
10007da4:	2000071e 	bne	r4,zero,10007dc4 <_free_r+0x1c4>
10007da8:	817ffe17 	ldw	r5,-8(r16)
10007dac:	314dc83a 	sub	r6,r6,r5
10007db0:	30c00317 	ldw	r3,12(r6)
10007db4:	31000217 	ldw	r4,8(r6)
10007db8:	1145883a 	add	r2,r2,r5
10007dbc:	20c00315 	stw	r3,12(r4)
10007dc0:	19000215 	stw	r4,8(r3)
10007dc4:	10c00054 	ori	r3,r2,1
10007dc8:	30c00115 	stw	r3,4(r6)
10007dcc:	00c40074 	movhi	r3,4097
10007dd0:	18c9af04 	addi	r3,r3,9916
10007dd4:	18c00017 	ldw	r3,0(r3)
10007dd8:	49800215 	stw	r6,8(r9)
10007ddc:	10ffcf36 	bltu	r2,r3,10007d1c <__alt_data_end+0xf8007d1c>
10007de0:	00840074 	movhi	r2,4097
10007de4:	10908204 	addi	r2,r2,16904
10007de8:	11400017 	ldw	r5,0(r2)
10007dec:	8809883a 	mov	r4,r17
10007df0:	0007adc0 	call	10007adc <_malloc_trim_r>
10007df4:	003fc906 	br	10007d1c <__alt_data_end+0xf8007d1c>
10007df8:	28c9883a 	add	r4,r5,r3
10007dfc:	21000117 	ldw	r4,4(r4)
10007e00:	2100004c 	andi	r4,r4,1
10007e04:	20000a1e 	bne	r4,zero,10007e30 <_free_r+0x230>
10007e08:	29000317 	ldw	r4,12(r5)
10007e0c:	29400217 	ldw	r5,8(r5)
10007e10:	10c5883a 	add	r2,r2,r3
10007e14:	10c00054 	ori	r3,r2,1
10007e18:	29000315 	stw	r4,12(r5)
10007e1c:	21400215 	stw	r5,8(r4)
10007e20:	30c00115 	stw	r3,4(r6)
10007e24:	308d883a 	add	r6,r6,r2
10007e28:	30800015 	stw	r2,0(r6)
10007e2c:	003fbb06 	br	10007d1c <__alt_data_end+0xf8007d1c>
10007e30:	10c00054 	ori	r3,r2,1
10007e34:	30c00115 	stw	r3,4(r6)
10007e38:	308d883a 	add	r6,r6,r2
10007e3c:	30800015 	stw	r2,0(r6)
10007e40:	003fb606 	br	10007d1c <__alt_data_end+0xf8007d1c>
10007e44:	01000504 	movi	r4,20
10007e48:	20c01436 	bltu	r4,r3,10007e9c <_free_r+0x29c>
10007e4c:	194016c4 	addi	r5,r3,91
10007e50:	2947883a 	add	r3,r5,r5
10007e54:	003fbe06 	br	10007d50 <__alt_data_end+0xf8007d50>
10007e58:	280bd0ba 	srai	r5,r5,2
10007e5c:	00800044 	movi	r2,1
10007e60:	39000117 	ldw	r4,4(r7)
10007e64:	114a983a 	sll	r5,r2,r5
10007e68:	1805883a 	mov	r2,r3
10007e6c:	2908b03a 	or	r4,r5,r4
10007e70:	39000115 	stw	r4,4(r7)
10007e74:	003fc406 	br	10007d88 <__alt_data_end+0xf8007d88>
10007e78:	49800515 	stw	r6,20(r9)
10007e7c:	49800415 	stw	r6,16(r9)
10007e80:	10c00054 	ori	r3,r2,1
10007e84:	31000315 	stw	r4,12(r6)
10007e88:	31000215 	stw	r4,8(r6)
10007e8c:	30c00115 	stw	r3,4(r6)
10007e90:	308d883a 	add	r6,r6,r2
10007e94:	30800015 	stw	r2,0(r6)
10007e98:	003fa006 	br	10007d1c <__alt_data_end+0xf8007d1c>
10007e9c:	01001504 	movi	r4,84
10007ea0:	20c00436 	bltu	r4,r3,10007eb4 <_free_r+0x2b4>
10007ea4:	1006d33a 	srli	r3,r2,12
10007ea8:	19401b84 	addi	r5,r3,110
10007eac:	2947883a 	add	r3,r5,r5
10007eb0:	003fa706 	br	10007d50 <__alt_data_end+0xf8007d50>
10007eb4:	01005504 	movi	r4,340
10007eb8:	20c00436 	bltu	r4,r3,10007ecc <_free_r+0x2cc>
10007ebc:	1006d3fa 	srli	r3,r2,15
10007ec0:	19401dc4 	addi	r5,r3,119
10007ec4:	2947883a 	add	r3,r5,r5
10007ec8:	003fa106 	br	10007d50 <__alt_data_end+0xf8007d50>
10007ecc:	01015504 	movi	r4,1364
10007ed0:	20c00436 	bltu	r4,r3,10007ee4 <_free_r+0x2e4>
10007ed4:	1006d4ba 	srli	r3,r2,18
10007ed8:	19401f04 	addi	r5,r3,124
10007edc:	2947883a 	add	r3,r5,r5
10007ee0:	003f9b06 	br	10007d50 <__alt_data_end+0xf8007d50>
10007ee4:	00c03f04 	movi	r3,252
10007ee8:	01401f84 	movi	r5,126
10007eec:	003f9806 	br	10007d50 <__alt_data_end+0xf8007d50>

10007ef0 <_fwalk>:
10007ef0:	defff804 	addi	sp,sp,-32
10007ef4:	dd400515 	stw	r21,20(sp)
10007ef8:	2540b804 	addi	r21,r4,736
10007efc:	dd800615 	stw	r22,24(sp)
10007f00:	dd000415 	stw	r20,16(sp)
10007f04:	dfc00715 	stw	ra,28(sp)
10007f08:	dcc00315 	stw	r19,12(sp)
10007f0c:	dc800215 	stw	r18,8(sp)
10007f10:	dc400115 	stw	r17,4(sp)
10007f14:	dc000015 	stw	r16,0(sp)
10007f18:	2829883a 	mov	r20,r5
10007f1c:	002d883a 	mov	r22,zero
10007f20:	0007a9c0 	call	10007a9c <__sfp_lock_acquire>
10007f24:	a8001426 	beq	r21,zero,10007f78 <_fwalk+0x88>
10007f28:	04ffffc4 	movi	r19,-1
10007f2c:	ac400117 	ldw	r17,4(r21)
10007f30:	ac800217 	ldw	r18,8(r21)
10007f34:	8c7fffc4 	addi	r17,r17,-1
10007f38:	88000d16 	blt	r17,zero,10007f70 <_fwalk+0x80>
10007f3c:	94000304 	addi	r16,r18,12
10007f40:	94800384 	addi	r18,r18,14
10007f44:	80c0000f 	ldh	r3,0(r16)
10007f48:	8c7fffc4 	addi	r17,r17,-1
10007f4c:	813ffd04 	addi	r4,r16,-12
10007f50:	18000426 	beq	r3,zero,10007f64 <_fwalk+0x74>
10007f54:	90c0000f 	ldh	r3,0(r18)
10007f58:	1cc00226 	beq	r3,r19,10007f64 <_fwalk+0x74>
10007f5c:	a03ee83a 	callr	r20
10007f60:	b0acb03a 	or	r22,r22,r2
10007f64:	84001a04 	addi	r16,r16,104
10007f68:	94801a04 	addi	r18,r18,104
10007f6c:	8cfff51e 	bne	r17,r19,10007f44 <__alt_data_end+0xf8007f44>
10007f70:	ad400017 	ldw	r21,0(r21)
10007f74:	a83fed1e 	bne	r21,zero,10007f2c <__alt_data_end+0xf8007f2c>
10007f78:	0007aa00 	call	10007aa0 <__sfp_lock_release>
10007f7c:	b005883a 	mov	r2,r22
10007f80:	dfc00717 	ldw	ra,28(sp)
10007f84:	dd800617 	ldw	r22,24(sp)
10007f88:	dd400517 	ldw	r21,20(sp)
10007f8c:	dd000417 	ldw	r20,16(sp)
10007f90:	dcc00317 	ldw	r19,12(sp)
10007f94:	dc800217 	ldw	r18,8(sp)
10007f98:	dc400117 	ldw	r17,4(sp)
10007f9c:	dc000017 	ldw	r16,0(sp)
10007fa0:	dec00804 	addi	sp,sp,32
10007fa4:	f800283a 	ret

10007fa8 <_fwalk_reent>:
10007fa8:	defff804 	addi	sp,sp,-32
10007fac:	dd400515 	stw	r21,20(sp)
10007fb0:	2540b804 	addi	r21,r4,736
10007fb4:	dd800615 	stw	r22,24(sp)
10007fb8:	dd000415 	stw	r20,16(sp)
10007fbc:	dcc00315 	stw	r19,12(sp)
10007fc0:	dfc00715 	stw	ra,28(sp)
10007fc4:	dc800215 	stw	r18,8(sp)
10007fc8:	dc400115 	stw	r17,4(sp)
10007fcc:	dc000015 	stw	r16,0(sp)
10007fd0:	2027883a 	mov	r19,r4
10007fd4:	2829883a 	mov	r20,r5
10007fd8:	002d883a 	mov	r22,zero
10007fdc:	0007a9c0 	call	10007a9c <__sfp_lock_acquire>
10007fe0:	a8001326 	beq	r21,zero,10008030 <_fwalk_reent+0x88>
10007fe4:	04bfffc4 	movi	r18,-1
10007fe8:	ac400117 	ldw	r17,4(r21)
10007fec:	ac000217 	ldw	r16,8(r21)
10007ff0:	8c7fffc4 	addi	r17,r17,-1
10007ff4:	88000c16 	blt	r17,zero,10008028 <_fwalk_reent+0x80>
10007ff8:	84000304 	addi	r16,r16,12
10007ffc:	80c0000f 	ldh	r3,0(r16)
10008000:	8c7fffc4 	addi	r17,r17,-1
10008004:	817ffd04 	addi	r5,r16,-12
10008008:	18000526 	beq	r3,zero,10008020 <_fwalk_reent+0x78>
1000800c:	80c0008f 	ldh	r3,2(r16)
10008010:	9809883a 	mov	r4,r19
10008014:	1c800226 	beq	r3,r18,10008020 <_fwalk_reent+0x78>
10008018:	a03ee83a 	callr	r20
1000801c:	b0acb03a 	or	r22,r22,r2
10008020:	84001a04 	addi	r16,r16,104
10008024:	8cbff51e 	bne	r17,r18,10007ffc <__alt_data_end+0xf8007ffc>
10008028:	ad400017 	ldw	r21,0(r21)
1000802c:	a83fee1e 	bne	r21,zero,10007fe8 <__alt_data_end+0xf8007fe8>
10008030:	0007aa00 	call	10007aa0 <__sfp_lock_release>
10008034:	b005883a 	mov	r2,r22
10008038:	dfc00717 	ldw	ra,28(sp)
1000803c:	dd800617 	ldw	r22,24(sp)
10008040:	dd400517 	ldw	r21,20(sp)
10008044:	dd000417 	ldw	r20,16(sp)
10008048:	dcc00317 	ldw	r19,12(sp)
1000804c:	dc800217 	ldw	r18,8(sp)
10008050:	dc400117 	ldw	r17,4(sp)
10008054:	dc000017 	ldw	r16,0(sp)
10008058:	dec00804 	addi	sp,sp,32
1000805c:	f800283a 	ret

10008060 <_setlocale_r>:
10008060:	30001b26 	beq	r6,zero,100080d0 <_setlocale_r+0x70>
10008064:	01440074 	movhi	r5,4097
10008068:	defffe04 	addi	sp,sp,-8
1000806c:	29429f04 	addi	r5,r5,2684
10008070:	3009883a 	mov	r4,r6
10008074:	dc000015 	stw	r16,0(sp)
10008078:	dfc00115 	stw	ra,4(sp)
1000807c:	3021883a 	mov	r16,r6
10008080:	000a0300 	call	1000a030 <strcmp>
10008084:	1000061e 	bne	r2,zero,100080a0 <_setlocale_r+0x40>
10008088:	00840074 	movhi	r2,4097
1000808c:	10829e04 	addi	r2,r2,2680
10008090:	dfc00117 	ldw	ra,4(sp)
10008094:	dc000017 	ldw	r16,0(sp)
10008098:	dec00204 	addi	sp,sp,8
1000809c:	f800283a 	ret
100080a0:	01440074 	movhi	r5,4097
100080a4:	29429e04 	addi	r5,r5,2680
100080a8:	8009883a 	mov	r4,r16
100080ac:	000a0300 	call	1000a030 <strcmp>
100080b0:	103ff526 	beq	r2,zero,10008088 <__alt_data_end+0xf8008088>
100080b4:	01440074 	movhi	r5,4097
100080b8:	29428904 	addi	r5,r5,2596
100080bc:	8009883a 	mov	r4,r16
100080c0:	000a0300 	call	1000a030 <strcmp>
100080c4:	103ff026 	beq	r2,zero,10008088 <__alt_data_end+0xf8008088>
100080c8:	0005883a 	mov	r2,zero
100080cc:	003ff006 	br	10008090 <__alt_data_end+0xf8008090>
100080d0:	00840074 	movhi	r2,4097
100080d4:	10829e04 	addi	r2,r2,2680
100080d8:	f800283a 	ret

100080dc <__locale_charset>:
100080dc:	00840074 	movhi	r2,4097
100080e0:	10841104 	addi	r2,r2,4164
100080e4:	f800283a 	ret

100080e8 <__locale_mb_cur_max>:
100080e8:	00840074 	movhi	r2,4097
100080ec:	1089ad04 	addi	r2,r2,9908
100080f0:	10800017 	ldw	r2,0(r2)
100080f4:	f800283a 	ret

100080f8 <__locale_msgcharset>:
100080f8:	00840074 	movhi	r2,4097
100080fc:	10840904 	addi	r2,r2,4132
10008100:	f800283a 	ret

10008104 <__locale_cjk_lang>:
10008104:	0005883a 	mov	r2,zero
10008108:	f800283a 	ret

1000810c <_localeconv_r>:
1000810c:	00840074 	movhi	r2,4097
10008110:	10841904 	addi	r2,r2,4196
10008114:	f800283a 	ret

10008118 <setlocale>:
10008118:	00c40074 	movhi	r3,4097
1000811c:	18c9ac04 	addi	r3,r3,9904
10008120:	2005883a 	mov	r2,r4
10008124:	19000017 	ldw	r4,0(r3)
10008128:	280d883a 	mov	r6,r5
1000812c:	100b883a 	mov	r5,r2
10008130:	00080601 	jmpi	10008060 <_setlocale_r>

10008134 <localeconv>:
10008134:	00840074 	movhi	r2,4097
10008138:	10841904 	addi	r2,r2,4196
1000813c:	f800283a 	ret

10008140 <__smakebuf_r>:
10008140:	2880030b 	ldhu	r2,12(r5)
10008144:	10c0008c 	andi	r3,r2,2
10008148:	1800401e 	bne	r3,zero,1000824c <__smakebuf_r+0x10c>
1000814c:	deffec04 	addi	sp,sp,-80
10008150:	dc000f15 	stw	r16,60(sp)
10008154:	2821883a 	mov	r16,r5
10008158:	2940038f 	ldh	r5,14(r5)
1000815c:	dc401015 	stw	r17,64(sp)
10008160:	dfc01315 	stw	ra,76(sp)
10008164:	dcc01215 	stw	r19,72(sp)
10008168:	dc801115 	stw	r18,68(sp)
1000816c:	2023883a 	mov	r17,r4
10008170:	28001b16 	blt	r5,zero,100081e0 <__smakebuf_r+0xa0>
10008174:	d80d883a 	mov	r6,sp
10008178:	000bb400 	call	1000bb40 <_fstat_r>
1000817c:	10001716 	blt	r2,zero,100081dc <__smakebuf_r+0x9c>
10008180:	d8800117 	ldw	r2,4(sp)
10008184:	00e00014 	movui	r3,32768
10008188:	10bc000c 	andi	r2,r2,61440
1000818c:	10c03726 	beq	r2,r3,1000826c <__smakebuf_r+0x12c>
10008190:	80c0030b 	ldhu	r3,12(r16)
10008194:	18c20014 	ori	r3,r3,2048
10008198:	80c0030d 	sth	r3,12(r16)
1000819c:	00c80004 	movi	r3,8192
100081a0:	10c03c1e 	bne	r2,r3,10008294 <__smakebuf_r+0x154>
100081a4:	8140038f 	ldh	r5,14(r16)
100081a8:	8809883a 	mov	r4,r17
100081ac:	000c03c0 	call	1000c03c <_isatty_r>
100081b0:	10004e26 	beq	r2,zero,100082ec <__smakebuf_r+0x1ac>
100081b4:	8080030b 	ldhu	r2,12(r16)
100081b8:	04c00044 	movi	r19,1
100081bc:	80c010c4 	addi	r3,r16,67
100081c0:	14c4b03a 	or	r2,r2,r19
100081c4:	8080030d 	sth	r2,12(r16)
100081c8:	80c00015 	stw	r3,0(r16)
100081cc:	80c00415 	stw	r3,16(r16)
100081d0:	84c00515 	stw	r19,20(r16)
100081d4:	04810004 	movi	r18,1024
100081d8:	00000706 	br	100081f8 <__smakebuf_r+0xb8>
100081dc:	8080030b 	ldhu	r2,12(r16)
100081e0:	10c0200c 	andi	r3,r2,128
100081e4:	18001f1e 	bne	r3,zero,10008264 <__smakebuf_r+0x124>
100081e8:	04810004 	movi	r18,1024
100081ec:	10820014 	ori	r2,r2,2048
100081f0:	8080030d 	sth	r2,12(r16)
100081f4:	0027883a 	mov	r19,zero
100081f8:	8809883a 	mov	r4,r17
100081fc:	900b883a 	mov	r5,r18
10008200:	00082f80 	call	100082f8 <_malloc_r>
10008204:	10002e26 	beq	r2,zero,100082c0 <__smakebuf_r+0x180>
10008208:	80c0030b 	ldhu	r3,12(r16)
1000820c:	01040034 	movhi	r4,4096
10008210:	211dce04 	addi	r4,r4,30520
10008214:	89000f15 	stw	r4,60(r17)
10008218:	18c02014 	ori	r3,r3,128
1000821c:	80c0030d 	sth	r3,12(r16)
10008220:	80800015 	stw	r2,0(r16)
10008224:	80800415 	stw	r2,16(r16)
10008228:	84800515 	stw	r18,20(r16)
1000822c:	98001c1e 	bne	r19,zero,100082a0 <__smakebuf_r+0x160>
10008230:	dfc01317 	ldw	ra,76(sp)
10008234:	dcc01217 	ldw	r19,72(sp)
10008238:	dc801117 	ldw	r18,68(sp)
1000823c:	dc401017 	ldw	r17,64(sp)
10008240:	dc000f17 	ldw	r16,60(sp)
10008244:	dec01404 	addi	sp,sp,80
10008248:	f800283a 	ret
1000824c:	288010c4 	addi	r2,r5,67
10008250:	28800015 	stw	r2,0(r5)
10008254:	28800415 	stw	r2,16(r5)
10008258:	00800044 	movi	r2,1
1000825c:	28800515 	stw	r2,20(r5)
10008260:	f800283a 	ret
10008264:	04801004 	movi	r18,64
10008268:	003fe006 	br	100081ec <__alt_data_end+0xf80081ec>
1000826c:	81000a17 	ldw	r4,40(r16)
10008270:	00c40074 	movhi	r3,4097
10008274:	18e7f304 	addi	r3,r3,-24628
10008278:	20ffc51e 	bne	r4,r3,10008190 <__alt_data_end+0xf8008190>
1000827c:	80c0030b 	ldhu	r3,12(r16)
10008280:	01010004 	movi	r4,1024
10008284:	81001315 	stw	r4,76(r16)
10008288:	1906b03a 	or	r3,r3,r4
1000828c:	80c0030d 	sth	r3,12(r16)
10008290:	003fc206 	br	1000819c <__alt_data_end+0xf800819c>
10008294:	0027883a 	mov	r19,zero
10008298:	04810004 	movi	r18,1024
1000829c:	003fd606 	br	100081f8 <__alt_data_end+0xf80081f8>
100082a0:	8140038f 	ldh	r5,14(r16)
100082a4:	8809883a 	mov	r4,r17
100082a8:	000c03c0 	call	1000c03c <_isatty_r>
100082ac:	103fe026 	beq	r2,zero,10008230 <__alt_data_end+0xf8008230>
100082b0:	8080030b 	ldhu	r2,12(r16)
100082b4:	10800054 	ori	r2,r2,1
100082b8:	8080030d 	sth	r2,12(r16)
100082bc:	003fdc06 	br	10008230 <__alt_data_end+0xf8008230>
100082c0:	8080030b 	ldhu	r2,12(r16)
100082c4:	10c0800c 	andi	r3,r2,512
100082c8:	183fd91e 	bne	r3,zero,10008230 <__alt_data_end+0xf8008230>
100082cc:	10800094 	ori	r2,r2,2
100082d0:	80c010c4 	addi	r3,r16,67
100082d4:	8080030d 	sth	r2,12(r16)
100082d8:	00800044 	movi	r2,1
100082dc:	80c00015 	stw	r3,0(r16)
100082e0:	80c00415 	stw	r3,16(r16)
100082e4:	80800515 	stw	r2,20(r16)
100082e8:	003fd106 	br	10008230 <__alt_data_end+0xf8008230>
100082ec:	04c00044 	movi	r19,1
100082f0:	04810004 	movi	r18,1024
100082f4:	003fc006 	br	100081f8 <__alt_data_end+0xf80081f8>

100082f8 <_malloc_r>:
100082f8:	defff504 	addi	sp,sp,-44
100082fc:	dc800315 	stw	r18,12(sp)
10008300:	dfc00a15 	stw	ra,40(sp)
10008304:	df000915 	stw	fp,36(sp)
10008308:	ddc00815 	stw	r23,32(sp)
1000830c:	dd800715 	stw	r22,28(sp)
10008310:	dd400615 	stw	r21,24(sp)
10008314:	dd000515 	stw	r20,20(sp)
10008318:	dcc00415 	stw	r19,16(sp)
1000831c:	dc400215 	stw	r17,8(sp)
10008320:	dc000115 	stw	r16,4(sp)
10008324:	288002c4 	addi	r2,r5,11
10008328:	00c00584 	movi	r3,22
1000832c:	2025883a 	mov	r18,r4
10008330:	18802a2e 	bgeu	r3,r2,100083dc <_malloc_r+0xe4>
10008334:	047ffe04 	movi	r17,-8
10008338:	1462703a 	and	r17,r2,r17
1000833c:	88009e16 	blt	r17,zero,100085b8 <_malloc_r+0x2c0>
10008340:	89409d36 	bltu	r17,r5,100085b8 <_malloc_r+0x2c0>
10008344:	000e7740 	call	1000e774 <__malloc_lock>
10008348:	00807dc4 	movi	r2,503
1000834c:	14402736 	bltu	r2,r17,100083ec <_malloc_r+0xf4>
10008350:	8806d0fa 	srli	r3,r17,3
10008354:	04c40074 	movhi	r19,4097
10008358:	9cc42704 	addi	r19,r19,4252
1000835c:	18c5883a 	add	r2,r3,r3
10008360:	1085883a 	add	r2,r2,r2
10008364:	1085883a 	add	r2,r2,r2
10008368:	9885883a 	add	r2,r19,r2
1000836c:	14000317 	ldw	r16,12(r2)
10008370:	80814a26 	beq	r16,r2,1000889c <_malloc_r+0x5a4>
10008374:	80c00117 	ldw	r3,4(r16)
10008378:	81000317 	ldw	r4,12(r16)
1000837c:	00bfff04 	movi	r2,-4
10008380:	1884703a 	and	r2,r3,r2
10008384:	81400217 	ldw	r5,8(r16)
10008388:	8085883a 	add	r2,r16,r2
1000838c:	10c00117 	ldw	r3,4(r2)
10008390:	29000315 	stw	r4,12(r5)
10008394:	21400215 	stw	r5,8(r4)
10008398:	18c00054 	ori	r3,r3,1
1000839c:	10c00115 	stw	r3,4(r2)
100083a0:	9009883a 	mov	r4,r18
100083a4:	000e7940 	call	1000e794 <__malloc_unlock>
100083a8:	80800204 	addi	r2,r16,8
100083ac:	dfc00a17 	ldw	ra,40(sp)
100083b0:	df000917 	ldw	fp,36(sp)
100083b4:	ddc00817 	ldw	r23,32(sp)
100083b8:	dd800717 	ldw	r22,28(sp)
100083bc:	dd400617 	ldw	r21,24(sp)
100083c0:	dd000517 	ldw	r20,20(sp)
100083c4:	dcc00417 	ldw	r19,16(sp)
100083c8:	dc800317 	ldw	r18,12(sp)
100083cc:	dc400217 	ldw	r17,8(sp)
100083d0:	dc000117 	ldw	r16,4(sp)
100083d4:	dec00b04 	addi	sp,sp,44
100083d8:	f800283a 	ret
100083dc:	04400404 	movi	r17,16
100083e0:	89407536 	bltu	r17,r5,100085b8 <_malloc_r+0x2c0>
100083e4:	000e7740 	call	1000e774 <__malloc_lock>
100083e8:	003fd906 	br	10008350 <__alt_data_end+0xf8008350>
100083ec:	8806d27a 	srli	r3,r17,9
100083f0:	18007526 	beq	r3,zero,100085c8 <_malloc_r+0x2d0>
100083f4:	00800104 	movi	r2,4
100083f8:	10c0ef36 	bltu	r2,r3,100087b8 <_malloc_r+0x4c0>
100083fc:	8806d1ba 	srli	r3,r17,6
10008400:	19c00e04 	addi	r7,r3,56
10008404:	39cb883a 	add	r5,r7,r7
10008408:	04c40074 	movhi	r19,4097
1000840c:	294b883a 	add	r5,r5,r5
10008410:	9cc42704 	addi	r19,r19,4252
10008414:	294b883a 	add	r5,r5,r5
10008418:	994b883a 	add	r5,r19,r5
1000841c:	2c000317 	ldw	r16,12(r5)
10008420:	2c000e26 	beq	r5,r16,1000845c <_malloc_r+0x164>
10008424:	80800117 	ldw	r2,4(r16)
10008428:	01bfff04 	movi	r6,-4
1000842c:	010003c4 	movi	r4,15
10008430:	1184703a 	and	r2,r2,r6
10008434:	1447c83a 	sub	r3,r2,r17
10008438:	20c00716 	blt	r4,r3,10008458 <_malloc_r+0x160>
1000843c:	1800650e 	bge	r3,zero,100085d4 <_malloc_r+0x2dc>
10008440:	84000317 	ldw	r16,12(r16)
10008444:	2c000526 	beq	r5,r16,1000845c <_malloc_r+0x164>
10008448:	80800117 	ldw	r2,4(r16)
1000844c:	1184703a 	and	r2,r2,r6
10008450:	1447c83a 	sub	r3,r2,r17
10008454:	20fff90e 	bge	r4,r3,1000843c <__alt_data_end+0xf800843c>
10008458:	39ffffc4 	addi	r7,r7,-1
1000845c:	38c00044 	addi	r3,r7,1
10008460:	01840074 	movhi	r6,4097
10008464:	9c000417 	ldw	r16,16(r19)
10008468:	31842704 	addi	r6,r6,4252
1000846c:	32400204 	addi	r9,r6,8
10008470:	82410326 	beq	r16,r9,10008880 <_malloc_r+0x588>
10008474:	81000117 	ldw	r4,4(r16)
10008478:	00bfff04 	movi	r2,-4
1000847c:	208e703a 	and	r7,r4,r2
10008480:	3c45c83a 	sub	r2,r7,r17
10008484:	010003c4 	movi	r4,15
10008488:	2080ee16 	blt	r4,r2,10008844 <_malloc_r+0x54c>
1000848c:	32400515 	stw	r9,20(r6)
10008490:	32400415 	stw	r9,16(r6)
10008494:	1000510e 	bge	r2,zero,100085dc <_malloc_r+0x2e4>
10008498:	00807fc4 	movi	r2,511
1000849c:	11c0ce36 	bltu	r2,r7,100087d8 <_malloc_r+0x4e0>
100084a0:	3808d0fa 	srli	r4,r7,3
100084a4:	01c00044 	movi	r7,1
100084a8:	30800117 	ldw	r2,4(r6)
100084ac:	210b883a 	add	r5,r4,r4
100084b0:	294b883a 	add	r5,r5,r5
100084b4:	2009d0ba 	srai	r4,r4,2
100084b8:	294b883a 	add	r5,r5,r5
100084bc:	298b883a 	add	r5,r5,r6
100084c0:	2a000217 	ldw	r8,8(r5)
100084c4:	3908983a 	sll	r4,r7,r4
100084c8:	81400315 	stw	r5,12(r16)
100084cc:	82000215 	stw	r8,8(r16)
100084d0:	2088b03a 	or	r4,r4,r2
100084d4:	2c000215 	stw	r16,8(r5)
100084d8:	31000115 	stw	r4,4(r6)
100084dc:	44000315 	stw	r16,12(r8)
100084e0:	1805d0ba 	srai	r2,r3,2
100084e4:	01400044 	movi	r5,1
100084e8:	288a983a 	sll	r5,r5,r2
100084ec:	21404336 	bltu	r4,r5,100085fc <_malloc_r+0x304>
100084f0:	2144703a 	and	r2,r4,r5
100084f4:	10000a1e 	bne	r2,zero,10008520 <_malloc_r+0x228>
100084f8:	00bfff04 	movi	r2,-4
100084fc:	294b883a 	add	r5,r5,r5
10008500:	1886703a 	and	r3,r3,r2
10008504:	2144703a 	and	r2,r4,r5
10008508:	18c00104 	addi	r3,r3,4
1000850c:	1000041e 	bne	r2,zero,10008520 <_malloc_r+0x228>
10008510:	294b883a 	add	r5,r5,r5
10008514:	2144703a 	and	r2,r4,r5
10008518:	18c00104 	addi	r3,r3,4
1000851c:	103ffc26 	beq	r2,zero,10008510 <__alt_data_end+0xf8008510>
10008520:	023fff04 	movi	r8,-4
10008524:	01c003c4 	movi	r7,15
10008528:	18c5883a 	add	r2,r3,r3
1000852c:	1085883a 	add	r2,r2,r2
10008530:	1085883a 	add	r2,r2,r2
10008534:	9895883a 	add	r10,r19,r2
10008538:	52c00304 	addi	r11,r10,12
1000853c:	1819883a 	mov	r12,r3
10008540:	5c000017 	ldw	r16,0(r11)
10008544:	59bffd04 	addi	r6,r11,-12
10008548:	8180041e 	bne	r16,r6,1000855c <_malloc_r+0x264>
1000854c:	0000ce06 	br	10008888 <_malloc_r+0x590>
10008550:	2000d70e 	bge	r4,zero,100088b0 <_malloc_r+0x5b8>
10008554:	84000317 	ldw	r16,12(r16)
10008558:	8180cb26 	beq	r16,r6,10008888 <_malloc_r+0x590>
1000855c:	80800117 	ldw	r2,4(r16)
10008560:	1204703a 	and	r2,r2,r8
10008564:	1449c83a 	sub	r4,r2,r17
10008568:	393ff90e 	bge	r7,r4,10008550 <__alt_data_end+0xf8008550>
1000856c:	80800317 	ldw	r2,12(r16)
10008570:	80c00217 	ldw	r3,8(r16)
10008574:	89400054 	ori	r5,r17,1
10008578:	81400115 	stw	r5,4(r16)
1000857c:	18800315 	stw	r2,12(r3)
10008580:	10c00215 	stw	r3,8(r2)
10008584:	8463883a 	add	r17,r16,r17
10008588:	9c400515 	stw	r17,20(r19)
1000858c:	9c400415 	stw	r17,16(r19)
10008590:	20800054 	ori	r2,r4,1
10008594:	88800115 	stw	r2,4(r17)
10008598:	8a400315 	stw	r9,12(r17)
1000859c:	8a400215 	stw	r9,8(r17)
100085a0:	8923883a 	add	r17,r17,r4
100085a4:	89000015 	stw	r4,0(r17)
100085a8:	9009883a 	mov	r4,r18
100085ac:	000e7940 	call	1000e794 <__malloc_unlock>
100085b0:	80800204 	addi	r2,r16,8
100085b4:	003f7d06 	br	100083ac <__alt_data_end+0xf80083ac>
100085b8:	00800304 	movi	r2,12
100085bc:	90800015 	stw	r2,0(r18)
100085c0:	0005883a 	mov	r2,zero
100085c4:	003f7906 	br	100083ac <__alt_data_end+0xf80083ac>
100085c8:	01401f84 	movi	r5,126
100085cc:	01c00fc4 	movi	r7,63
100085d0:	003f8d06 	br	10008408 <__alt_data_end+0xf8008408>
100085d4:	81000317 	ldw	r4,12(r16)
100085d8:	003f6a06 	br	10008384 <__alt_data_end+0xf8008384>
100085dc:	81c5883a 	add	r2,r16,r7
100085e0:	10c00117 	ldw	r3,4(r2)
100085e4:	9009883a 	mov	r4,r18
100085e8:	18c00054 	ori	r3,r3,1
100085ec:	10c00115 	stw	r3,4(r2)
100085f0:	000e7940 	call	1000e794 <__malloc_unlock>
100085f4:	80800204 	addi	r2,r16,8
100085f8:	003f6c06 	br	100083ac <__alt_data_end+0xf80083ac>
100085fc:	9c000217 	ldw	r16,8(r19)
10008600:	00bfff04 	movi	r2,-4
10008604:	85800117 	ldw	r22,4(r16)
10008608:	b0ac703a 	and	r22,r22,r2
1000860c:	b4400336 	bltu	r22,r17,1000861c <_malloc_r+0x324>
10008610:	b445c83a 	sub	r2,r22,r17
10008614:	00c003c4 	movi	r3,15
10008618:	18805d16 	blt	r3,r2,10008790 <_malloc_r+0x498>
1000861c:	05c40074 	movhi	r23,4097
10008620:	00840074 	movhi	r2,4097
10008624:	bdc9ae04 	addi	r23,r23,9912
10008628:	10908204 	addi	r2,r2,16904
1000862c:	15400017 	ldw	r21,0(r2)
10008630:	b9000017 	ldw	r4,0(r23)
10008634:	00ffffc4 	movi	r3,-1
10008638:	858d883a 	add	r6,r16,r22
1000863c:	8d6b883a 	add	r21,r17,r21
10008640:	20c0e426 	beq	r4,r3,100089d4 <_malloc_r+0x6dc>
10008644:	ad4403c4 	addi	r21,r21,4111
10008648:	00fc0004 	movi	r3,-4096
1000864c:	a8ea703a 	and	r21,r21,r3
10008650:	9009883a 	mov	r4,r18
10008654:	a80b883a 	mov	r5,r21
10008658:	d9800015 	stw	r6,0(sp)
1000865c:	0009ea00 	call	10009ea0 <_sbrk_r>
10008660:	00ffffc4 	movi	r3,-1
10008664:	1029883a 	mov	r20,r2
10008668:	d9800017 	ldw	r6,0(sp)
1000866c:	10c0a426 	beq	r2,r3,10008900 <_malloc_r+0x608>
10008670:	1180a236 	bltu	r2,r6,100088fc <_malloc_r+0x604>
10008674:	07040074 	movhi	fp,4097
10008678:	e7108b04 	addi	fp,fp,16940
1000867c:	e0c00017 	ldw	r3,0(fp)
10008680:	a8c7883a 	add	r3,r21,r3
10008684:	e0c00015 	stw	r3,0(fp)
10008688:	3500da26 	beq	r6,r20,100089f4 <_malloc_r+0x6fc>
1000868c:	b9000017 	ldw	r4,0(r23)
10008690:	00bfffc4 	movi	r2,-1
10008694:	2080e426 	beq	r4,r2,10008a28 <_malloc_r+0x730>
10008698:	a185c83a 	sub	r2,r20,r6
1000869c:	1885883a 	add	r2,r3,r2
100086a0:	e0800015 	stw	r2,0(fp)
100086a4:	a0c001cc 	andi	r3,r20,7
100086a8:	1800b526 	beq	r3,zero,10008980 <_malloc_r+0x688>
100086ac:	a0e9c83a 	sub	r20,r20,r3
100086b0:	00840204 	movi	r2,4104
100086b4:	a5000204 	addi	r20,r20,8
100086b8:	10c7c83a 	sub	r3,r2,r3
100086bc:	a545883a 	add	r2,r20,r21
100086c0:	1083ffcc 	andi	r2,r2,4095
100086c4:	18abc83a 	sub	r21,r3,r2
100086c8:	9009883a 	mov	r4,r18
100086cc:	a80b883a 	mov	r5,r21
100086d0:	0009ea00 	call	10009ea0 <_sbrk_r>
100086d4:	00ffffc4 	movi	r3,-1
100086d8:	10c0d026 	beq	r2,r3,10008a1c <_malloc_r+0x724>
100086dc:	1507c83a 	sub	r3,r2,r20
100086e0:	a8c7883a 	add	r3,r21,r3
100086e4:	18c00054 	ori	r3,r3,1
100086e8:	e0800017 	ldw	r2,0(fp)
100086ec:	9d000215 	stw	r20,8(r19)
100086f0:	a0c00115 	stw	r3,4(r20)
100086f4:	a887883a 	add	r3,r21,r2
100086f8:	e0c00015 	stw	r3,0(fp)
100086fc:	84c00e26 	beq	r16,r19,10008738 <_malloc_r+0x440>
10008700:	018003c4 	movi	r6,15
10008704:	3580a02e 	bgeu	r6,r22,10008988 <_malloc_r+0x690>
10008708:	81400117 	ldw	r5,4(r16)
1000870c:	013ffe04 	movi	r4,-8
10008710:	b0bffd04 	addi	r2,r22,-12
10008714:	1104703a 	and	r2,r2,r4
10008718:	2900004c 	andi	r4,r5,1
1000871c:	1108b03a 	or	r4,r2,r4
10008720:	81000115 	stw	r4,4(r16)
10008724:	01400144 	movi	r5,5
10008728:	8089883a 	add	r4,r16,r2
1000872c:	21400115 	stw	r5,4(r4)
10008730:	21400215 	stw	r5,8(r4)
10008734:	3080c036 	bltu	r6,r2,10008a38 <_malloc_r+0x740>
10008738:	00840074 	movhi	r2,4097
1000873c:	10908104 	addi	r2,r2,16900
10008740:	11000017 	ldw	r4,0(r2)
10008744:	20c0012e 	bgeu	r4,r3,1000874c <_malloc_r+0x454>
10008748:	10c00015 	stw	r3,0(r2)
1000874c:	00840074 	movhi	r2,4097
10008750:	10908004 	addi	r2,r2,16896
10008754:	11000017 	ldw	r4,0(r2)
10008758:	9c000217 	ldw	r16,8(r19)
1000875c:	20c0012e 	bgeu	r4,r3,10008764 <_malloc_r+0x46c>
10008760:	10c00015 	stw	r3,0(r2)
10008764:	80c00117 	ldw	r3,4(r16)
10008768:	00bfff04 	movi	r2,-4
1000876c:	1886703a 	and	r3,r3,r2
10008770:	1c45c83a 	sub	r2,r3,r17
10008774:	1c400236 	bltu	r3,r17,10008780 <_malloc_r+0x488>
10008778:	00c003c4 	movi	r3,15
1000877c:	18800416 	blt	r3,r2,10008790 <_malloc_r+0x498>
10008780:	9009883a 	mov	r4,r18
10008784:	000e7940 	call	1000e794 <__malloc_unlock>
10008788:	0005883a 	mov	r2,zero
1000878c:	003f0706 	br	100083ac <__alt_data_end+0xf80083ac>
10008790:	88c00054 	ori	r3,r17,1
10008794:	80c00115 	stw	r3,4(r16)
10008798:	8463883a 	add	r17,r16,r17
1000879c:	10800054 	ori	r2,r2,1
100087a0:	9c400215 	stw	r17,8(r19)
100087a4:	88800115 	stw	r2,4(r17)
100087a8:	9009883a 	mov	r4,r18
100087ac:	000e7940 	call	1000e794 <__malloc_unlock>
100087b0:	80800204 	addi	r2,r16,8
100087b4:	003efd06 	br	100083ac <__alt_data_end+0xf80083ac>
100087b8:	00800504 	movi	r2,20
100087bc:	10c0482e 	bgeu	r2,r3,100088e0 <_malloc_r+0x5e8>
100087c0:	00801504 	movi	r2,84
100087c4:	10c06836 	bltu	r2,r3,10008968 <_malloc_r+0x670>
100087c8:	8806d33a 	srli	r3,r17,12
100087cc:	19c01b84 	addi	r7,r3,110
100087d0:	39cb883a 	add	r5,r7,r7
100087d4:	003f0c06 	br	10008408 <__alt_data_end+0xf8008408>
100087d8:	3804d27a 	srli	r2,r7,9
100087dc:	01000104 	movi	r4,4
100087e0:	2080422e 	bgeu	r4,r2,100088ec <_malloc_r+0x5f4>
100087e4:	01000504 	movi	r4,20
100087e8:	20807c36 	bltu	r4,r2,100089dc <_malloc_r+0x6e4>
100087ec:	110016c4 	addi	r4,r2,91
100087f0:	210b883a 	add	r5,r4,r4
100087f4:	294b883a 	add	r5,r5,r5
100087f8:	294b883a 	add	r5,r5,r5
100087fc:	994b883a 	add	r5,r19,r5
10008800:	28800217 	ldw	r2,8(r5)
10008804:	02040074 	movhi	r8,4097
10008808:	42042704 	addi	r8,r8,4252
1000880c:	11406326 	beq	r2,r5,1000899c <_malloc_r+0x6a4>
10008810:	01bfff04 	movi	r6,-4
10008814:	11000117 	ldw	r4,4(r2)
10008818:	2188703a 	and	r4,r4,r6
1000881c:	3900022e 	bgeu	r7,r4,10008828 <_malloc_r+0x530>
10008820:	10800217 	ldw	r2,8(r2)
10008824:	28bffb1e 	bne	r5,r2,10008814 <__alt_data_end+0xf8008814>
10008828:	11800317 	ldw	r6,12(r2)
1000882c:	99000117 	ldw	r4,4(r19)
10008830:	81800315 	stw	r6,12(r16)
10008834:	80800215 	stw	r2,8(r16)
10008838:	34000215 	stw	r16,8(r6)
1000883c:	14000315 	stw	r16,12(r2)
10008840:	003f2706 	br	100084e0 <__alt_data_end+0xf80084e0>
10008844:	88c00054 	ori	r3,r17,1
10008848:	80c00115 	stw	r3,4(r16)
1000884c:	8463883a 	add	r17,r16,r17
10008850:	34400515 	stw	r17,20(r6)
10008854:	34400415 	stw	r17,16(r6)
10008858:	10c00054 	ori	r3,r2,1
1000885c:	8a400315 	stw	r9,12(r17)
10008860:	8a400215 	stw	r9,8(r17)
10008864:	88c00115 	stw	r3,4(r17)
10008868:	88a3883a 	add	r17,r17,r2
1000886c:	88800015 	stw	r2,0(r17)
10008870:	9009883a 	mov	r4,r18
10008874:	000e7940 	call	1000e794 <__malloc_unlock>
10008878:	80800204 	addi	r2,r16,8
1000887c:	003ecb06 	br	100083ac <__alt_data_end+0xf80083ac>
10008880:	31000117 	ldw	r4,4(r6)
10008884:	003f1606 	br	100084e0 <__alt_data_end+0xf80084e0>
10008888:	63000044 	addi	r12,r12,1
1000888c:	608000cc 	andi	r2,r12,3
10008890:	5ac00204 	addi	r11,r11,8
10008894:	103f2a1e 	bne	r2,zero,10008540 <__alt_data_end+0xf8008540>
10008898:	00002106 	br	10008920 <_malloc_r+0x628>
1000889c:	80800204 	addi	r2,r16,8
100088a0:	84000517 	ldw	r16,20(r16)
100088a4:	143eb31e 	bne	r2,r16,10008374 <__alt_data_end+0xf8008374>
100088a8:	18c00084 	addi	r3,r3,2
100088ac:	003eec06 	br	10008460 <__alt_data_end+0xf8008460>
100088b0:	8085883a 	add	r2,r16,r2
100088b4:	10c00117 	ldw	r3,4(r2)
100088b8:	81000317 	ldw	r4,12(r16)
100088bc:	81400217 	ldw	r5,8(r16)
100088c0:	18c00054 	ori	r3,r3,1
100088c4:	10c00115 	stw	r3,4(r2)
100088c8:	29000315 	stw	r4,12(r5)
100088cc:	21400215 	stw	r5,8(r4)
100088d0:	9009883a 	mov	r4,r18
100088d4:	000e7940 	call	1000e794 <__malloc_unlock>
100088d8:	80800204 	addi	r2,r16,8
100088dc:	003eb306 	br	100083ac <__alt_data_end+0xf80083ac>
100088e0:	19c016c4 	addi	r7,r3,91
100088e4:	39cb883a 	add	r5,r7,r7
100088e8:	003ec706 	br	10008408 <__alt_data_end+0xf8008408>
100088ec:	3804d1ba 	srli	r2,r7,6
100088f0:	11000e04 	addi	r4,r2,56
100088f4:	210b883a 	add	r5,r4,r4
100088f8:	003fbe06 	br	100087f4 <__alt_data_end+0xf80087f4>
100088fc:	84ff5d26 	beq	r16,r19,10008674 <__alt_data_end+0xf8008674>
10008900:	9c000217 	ldw	r16,8(r19)
10008904:	00bfff04 	movi	r2,-4
10008908:	80c00117 	ldw	r3,4(r16)
1000890c:	1886703a 	and	r3,r3,r2
10008910:	003f9706 	br	10008770 <__alt_data_end+0xf8008770>
10008914:	52800017 	ldw	r10,0(r10)
10008918:	18ffffc4 	addi	r3,r3,-1
1000891c:	50805c1e 	bne	r10,r2,10008a90 <_malloc_r+0x798>
10008920:	190000cc 	andi	r4,r3,3
10008924:	50bffe04 	addi	r2,r10,-8
10008928:	203ffa1e 	bne	r4,zero,10008914 <__alt_data_end+0xf8008914>
1000892c:	98800117 	ldw	r2,4(r19)
10008930:	0146303a 	nor	r3,zero,r5
10008934:	1884703a 	and	r2,r3,r2
10008938:	98800115 	stw	r2,4(r19)
1000893c:	294b883a 	add	r5,r5,r5
10008940:	117f2e36 	bltu	r2,r5,100085fc <__alt_data_end+0xf80085fc>
10008944:	283f2d26 	beq	r5,zero,100085fc <__alt_data_end+0xf80085fc>
10008948:	1146703a 	and	r3,r2,r5
1000894c:	1800521e 	bne	r3,zero,10008a98 <_malloc_r+0x7a0>
10008950:	6007883a 	mov	r3,r12
10008954:	294b883a 	add	r5,r5,r5
10008958:	1148703a 	and	r4,r2,r5
1000895c:	18c00104 	addi	r3,r3,4
10008960:	203ffc26 	beq	r4,zero,10008954 <__alt_data_end+0xf8008954>
10008964:	003ef006 	br	10008528 <__alt_data_end+0xf8008528>
10008968:	00805504 	movi	r2,340
1000896c:	10c01336 	bltu	r2,r3,100089bc <_malloc_r+0x6c4>
10008970:	8806d3fa 	srli	r3,r17,15
10008974:	19c01dc4 	addi	r7,r3,119
10008978:	39cb883a 	add	r5,r7,r7
1000897c:	003ea206 	br	10008408 <__alt_data_end+0xf8008408>
10008980:	00c40004 	movi	r3,4096
10008984:	003f4d06 	br	100086bc <__alt_data_end+0xf80086bc>
10008988:	00800044 	movi	r2,1
1000898c:	a0800115 	stw	r2,4(r20)
10008990:	a021883a 	mov	r16,r20
10008994:	0007883a 	mov	r3,zero
10008998:	003f7506 	br	10008770 <__alt_data_end+0xf8008770>
1000899c:	200bd0ba 	srai	r5,r4,2
100089a0:	01800044 	movi	r6,1
100089a4:	41000117 	ldw	r4,4(r8)
100089a8:	314a983a 	sll	r5,r6,r5
100089ac:	100d883a 	mov	r6,r2
100089b0:	2908b03a 	or	r4,r5,r4
100089b4:	41000115 	stw	r4,4(r8)
100089b8:	003f9d06 	br	10008830 <__alt_data_end+0xf8008830>
100089bc:	00815504 	movi	r2,1364
100089c0:	10c01336 	bltu	r2,r3,10008a10 <_malloc_r+0x718>
100089c4:	8806d4ba 	srli	r3,r17,18
100089c8:	19c01f04 	addi	r7,r3,124
100089cc:	39cb883a 	add	r5,r7,r7
100089d0:	003e8d06 	br	10008408 <__alt_data_end+0xf8008408>
100089d4:	ad400404 	addi	r21,r21,16
100089d8:	003f1d06 	br	10008650 <__alt_data_end+0xf8008650>
100089dc:	01001504 	movi	r4,84
100089e0:	20801c36 	bltu	r4,r2,10008a54 <_malloc_r+0x75c>
100089e4:	3804d33a 	srli	r2,r7,12
100089e8:	11001b84 	addi	r4,r2,110
100089ec:	210b883a 	add	r5,r4,r4
100089f0:	003f8006 	br	100087f4 <__alt_data_end+0xf80087f4>
100089f4:	3083ffcc 	andi	r2,r6,4095
100089f8:	103f241e 	bne	r2,zero,1000868c <__alt_data_end+0xf800868c>
100089fc:	99000217 	ldw	r4,8(r19)
10008a00:	ad85883a 	add	r2,r21,r22
10008a04:	10800054 	ori	r2,r2,1
10008a08:	20800115 	stw	r2,4(r4)
10008a0c:	003f4a06 	br	10008738 <__alt_data_end+0xf8008738>
10008a10:	01403f04 	movi	r5,252
10008a14:	01c01f84 	movi	r7,126
10008a18:	003e7b06 	br	10008408 <__alt_data_end+0xf8008408>
10008a1c:	00c00044 	movi	r3,1
10008a20:	002b883a 	mov	r21,zero
10008a24:	003f3006 	br	100086e8 <__alt_data_end+0xf80086e8>
10008a28:	00840074 	movhi	r2,4097
10008a2c:	1089ae04 	addi	r2,r2,9912
10008a30:	15000015 	stw	r20,0(r2)
10008a34:	003f1b06 	br	100086a4 <__alt_data_end+0xf80086a4>
10008a38:	9009883a 	mov	r4,r18
10008a3c:	81400204 	addi	r5,r16,8
10008a40:	0007c000 	call	10007c00 <_free_r>
10008a44:	00840074 	movhi	r2,4097
10008a48:	10908b04 	addi	r2,r2,16940
10008a4c:	10c00017 	ldw	r3,0(r2)
10008a50:	003f3906 	br	10008738 <__alt_data_end+0xf8008738>
10008a54:	01005504 	movi	r4,340
10008a58:	20800436 	bltu	r4,r2,10008a6c <_malloc_r+0x774>
10008a5c:	3804d3fa 	srli	r2,r7,15
10008a60:	11001dc4 	addi	r4,r2,119
10008a64:	210b883a 	add	r5,r4,r4
10008a68:	003f6206 	br	100087f4 <__alt_data_end+0xf80087f4>
10008a6c:	01015504 	movi	r4,1364
10008a70:	20800436 	bltu	r4,r2,10008a84 <_malloc_r+0x78c>
10008a74:	3804d4ba 	srli	r2,r7,18
10008a78:	11001f04 	addi	r4,r2,124
10008a7c:	210b883a 	add	r5,r4,r4
10008a80:	003f5c06 	br	100087f4 <__alt_data_end+0xf80087f4>
10008a84:	01403f04 	movi	r5,252
10008a88:	01001f84 	movi	r4,126
10008a8c:	003f5906 	br	100087f4 <__alt_data_end+0xf80087f4>
10008a90:	98800117 	ldw	r2,4(r19)
10008a94:	003fa906 	br	1000893c <__alt_data_end+0xf800893c>
10008a98:	6007883a 	mov	r3,r12
10008a9c:	003ea206 	br	10008528 <__alt_data_end+0xf8008528>

10008aa0 <memchr>:
10008aa0:	208000cc 	andi	r2,r4,3
10008aa4:	280f883a 	mov	r7,r5
10008aa8:	10003526 	beq	r2,zero,10008b80 <memchr+0xe0>
10008aac:	30bfffc4 	addi	r2,r6,-1
10008ab0:	30001b26 	beq	r6,zero,10008b20 <memchr+0x80>
10008ab4:	21800003 	ldbu	r6,0(r4)
10008ab8:	28c03fcc 	andi	r3,r5,255
10008abc:	30c01a26 	beq	r6,r3,10008b28 <memchr+0x88>
10008ac0:	180d883a 	mov	r6,r3
10008ac4:	00000406 	br	10008ad8 <memchr+0x38>
10008ac8:	10001526 	beq	r2,zero,10008b20 <memchr+0x80>
10008acc:	20c00003 	ldbu	r3,0(r4)
10008ad0:	10bfffc4 	addi	r2,r2,-1
10008ad4:	19801426 	beq	r3,r6,10008b28 <memchr+0x88>
10008ad8:	21000044 	addi	r4,r4,1
10008adc:	20c000cc 	andi	r3,r4,3
10008ae0:	183ff91e 	bne	r3,zero,10008ac8 <__alt_data_end+0xf8008ac8>
10008ae4:	024000c4 	movi	r9,3
10008ae8:	48801136 	bltu	r9,r2,10008b30 <memchr+0x90>
10008aec:	10000c26 	beq	r2,zero,10008b20 <memchr+0x80>
10008af0:	20c00003 	ldbu	r3,0(r4)
10008af4:	29403fcc 	andi	r5,r5,255
10008af8:	19400b26 	beq	r3,r5,10008b28 <memchr+0x88>
10008afc:	20c00044 	addi	r3,r4,1
10008b00:	2085883a 	add	r2,r4,r2
10008b04:	39803fcc 	andi	r6,r7,255
10008b08:	00000306 	br	10008b18 <memchr+0x78>
10008b0c:	18c00044 	addi	r3,r3,1
10008b10:	197fffc3 	ldbu	r5,-1(r3)
10008b14:	29800426 	beq	r5,r6,10008b28 <memchr+0x88>
10008b18:	1809883a 	mov	r4,r3
10008b1c:	18bffb1e 	bne	r3,r2,10008b0c <__alt_data_end+0xf8008b0c>
10008b20:	0005883a 	mov	r2,zero
10008b24:	f800283a 	ret
10008b28:	2005883a 	mov	r2,r4
10008b2c:	f800283a 	ret
10008b30:	28c03fcc 	andi	r3,r5,255
10008b34:	1810923a 	slli	r8,r3,8
10008b38:	02ffbff4 	movhi	r11,65279
10008b3c:	02a02074 	movhi	r10,32897
10008b40:	40c6b03a 	or	r3,r8,r3
10008b44:	1810943a 	slli	r8,r3,16
10008b48:	5affbfc4 	addi	r11,r11,-257
10008b4c:	52a02004 	addi	r10,r10,-32640
10008b50:	40d0b03a 	or	r8,r8,r3
10008b54:	20c00017 	ldw	r3,0(r4)
10008b58:	40c6f03a 	xor	r3,r8,r3
10008b5c:	1acd883a 	add	r6,r3,r11
10008b60:	00c6303a 	nor	r3,zero,r3
10008b64:	30c6703a 	and	r3,r6,r3
10008b68:	1a86703a 	and	r3,r3,r10
10008b6c:	183fdf1e 	bne	r3,zero,10008aec <__alt_data_end+0xf8008aec>
10008b70:	10bfff04 	addi	r2,r2,-4
10008b74:	21000104 	addi	r4,r4,4
10008b78:	48bff636 	bltu	r9,r2,10008b54 <__alt_data_end+0xf8008b54>
10008b7c:	003fdb06 	br	10008aec <__alt_data_end+0xf8008aec>
10008b80:	3005883a 	mov	r2,r6
10008b84:	003fd706 	br	10008ae4 <__alt_data_end+0xf8008ae4>

10008b88 <memcpy>:
10008b88:	deffff04 	addi	sp,sp,-4
10008b8c:	dc000015 	stw	r16,0(sp)
10008b90:	00c003c4 	movi	r3,15
10008b94:	2005883a 	mov	r2,r4
10008b98:	1980432e 	bgeu	r3,r6,10008ca8 <memcpy+0x120>
10008b9c:	2146b03a 	or	r3,r4,r5
10008ba0:	18c000cc 	andi	r3,r3,3
10008ba4:	1800421e 	bne	r3,zero,10008cb0 <memcpy+0x128>
10008ba8:	343ffc04 	addi	r16,r6,-16
10008bac:	8020d13a 	srli	r16,r16,4
10008bb0:	28c00104 	addi	r3,r5,4
10008bb4:	23400104 	addi	r13,r4,4
10008bb8:	801e913a 	slli	r15,r16,4
10008bbc:	2b000204 	addi	r12,r5,8
10008bc0:	22c00204 	addi	r11,r4,8
10008bc4:	7bc00504 	addi	r15,r15,20
10008bc8:	2a800304 	addi	r10,r5,12
10008bcc:	22400304 	addi	r9,r4,12
10008bd0:	2bdf883a 	add	r15,r5,r15
10008bd4:	2811883a 	mov	r8,r5
10008bd8:	200f883a 	mov	r7,r4
10008bdc:	41000017 	ldw	r4,0(r8)
10008be0:	39c00404 	addi	r7,r7,16
10008be4:	18c00404 	addi	r3,r3,16
10008be8:	393ffc15 	stw	r4,-16(r7)
10008bec:	1bbffc17 	ldw	r14,-16(r3)
10008bf0:	6b400404 	addi	r13,r13,16
10008bf4:	5ac00404 	addi	r11,r11,16
10008bf8:	6bbffc15 	stw	r14,-16(r13)
10008bfc:	63800017 	ldw	r14,0(r12)
10008c00:	4a400404 	addi	r9,r9,16
10008c04:	42000404 	addi	r8,r8,16
10008c08:	5bbffc15 	stw	r14,-16(r11)
10008c0c:	53800017 	ldw	r14,0(r10)
10008c10:	63000404 	addi	r12,r12,16
10008c14:	52800404 	addi	r10,r10,16
10008c18:	4bbffc15 	stw	r14,-16(r9)
10008c1c:	1bffef1e 	bne	r3,r15,10008bdc <__alt_data_end+0xf8008bdc>
10008c20:	81c00044 	addi	r7,r16,1
10008c24:	380e913a 	slli	r7,r7,4
10008c28:	310003cc 	andi	r4,r6,15
10008c2c:	02c000c4 	movi	r11,3
10008c30:	11c7883a 	add	r3,r2,r7
10008c34:	29cb883a 	add	r5,r5,r7
10008c38:	59001f2e 	bgeu	r11,r4,10008cb8 <memcpy+0x130>
10008c3c:	1813883a 	mov	r9,r3
10008c40:	2811883a 	mov	r8,r5
10008c44:	200f883a 	mov	r7,r4
10008c48:	42800017 	ldw	r10,0(r8)
10008c4c:	4a400104 	addi	r9,r9,4
10008c50:	39ffff04 	addi	r7,r7,-4
10008c54:	4abfff15 	stw	r10,-4(r9)
10008c58:	42000104 	addi	r8,r8,4
10008c5c:	59fffa36 	bltu	r11,r7,10008c48 <__alt_data_end+0xf8008c48>
10008c60:	213fff04 	addi	r4,r4,-4
10008c64:	2008d0ba 	srli	r4,r4,2
10008c68:	318000cc 	andi	r6,r6,3
10008c6c:	21000044 	addi	r4,r4,1
10008c70:	2109883a 	add	r4,r4,r4
10008c74:	2109883a 	add	r4,r4,r4
10008c78:	1907883a 	add	r3,r3,r4
10008c7c:	290b883a 	add	r5,r5,r4
10008c80:	30000626 	beq	r6,zero,10008c9c <memcpy+0x114>
10008c84:	198d883a 	add	r6,r3,r6
10008c88:	29c00003 	ldbu	r7,0(r5)
10008c8c:	18c00044 	addi	r3,r3,1
10008c90:	29400044 	addi	r5,r5,1
10008c94:	19ffffc5 	stb	r7,-1(r3)
10008c98:	19bffb1e 	bne	r3,r6,10008c88 <__alt_data_end+0xf8008c88>
10008c9c:	dc000017 	ldw	r16,0(sp)
10008ca0:	dec00104 	addi	sp,sp,4
10008ca4:	f800283a 	ret
10008ca8:	2007883a 	mov	r3,r4
10008cac:	003ff406 	br	10008c80 <__alt_data_end+0xf8008c80>
10008cb0:	2007883a 	mov	r3,r4
10008cb4:	003ff306 	br	10008c84 <__alt_data_end+0xf8008c84>
10008cb8:	200d883a 	mov	r6,r4
10008cbc:	003ff006 	br	10008c80 <__alt_data_end+0xf8008c80>

10008cc0 <memset>:
10008cc0:	20c000cc 	andi	r3,r4,3
10008cc4:	2005883a 	mov	r2,r4
10008cc8:	18004326 	beq	r3,zero,10008dd8 <memset+0x118>
10008ccc:	31ffffc4 	addi	r7,r6,-1
10008cd0:	30004026 	beq	r6,zero,10008dd4 <memset+0x114>
10008cd4:	2813883a 	mov	r9,r5
10008cd8:	200d883a 	mov	r6,r4
10008cdc:	2007883a 	mov	r3,r4
10008ce0:	00000406 	br	10008cf4 <memset+0x34>
10008ce4:	3a3fffc4 	addi	r8,r7,-1
10008ce8:	31800044 	addi	r6,r6,1
10008cec:	38003926 	beq	r7,zero,10008dd4 <memset+0x114>
10008cf0:	400f883a 	mov	r7,r8
10008cf4:	18c00044 	addi	r3,r3,1
10008cf8:	32400005 	stb	r9,0(r6)
10008cfc:	1a0000cc 	andi	r8,r3,3
10008d00:	403ff81e 	bne	r8,zero,10008ce4 <__alt_data_end+0xf8008ce4>
10008d04:	010000c4 	movi	r4,3
10008d08:	21c02d2e 	bgeu	r4,r7,10008dc0 <memset+0x100>
10008d0c:	29803fcc 	andi	r6,r5,255
10008d10:	3008923a 	slli	r4,r6,8
10008d14:	218cb03a 	or	r6,r4,r6
10008d18:	3008943a 	slli	r4,r6,16
10008d1c:	218cb03a 	or	r6,r4,r6
10008d20:	010003c4 	movi	r4,15
10008d24:	21c0182e 	bgeu	r4,r7,10008d88 <memset+0xc8>
10008d28:	3b3ffc04 	addi	r12,r7,-16
10008d2c:	6018d13a 	srli	r12,r12,4
10008d30:	1a000104 	addi	r8,r3,4
10008d34:	1ac00204 	addi	r11,r3,8
10008d38:	6008913a 	slli	r4,r12,4
10008d3c:	1a800304 	addi	r10,r3,12
10008d40:	1813883a 	mov	r9,r3
10008d44:	21000504 	addi	r4,r4,20
10008d48:	1909883a 	add	r4,r3,r4
10008d4c:	49800015 	stw	r6,0(r9)
10008d50:	41800015 	stw	r6,0(r8)
10008d54:	59800015 	stw	r6,0(r11)
10008d58:	51800015 	stw	r6,0(r10)
10008d5c:	42000404 	addi	r8,r8,16
10008d60:	4a400404 	addi	r9,r9,16
10008d64:	5ac00404 	addi	r11,r11,16
10008d68:	52800404 	addi	r10,r10,16
10008d6c:	413ff71e 	bne	r8,r4,10008d4c <__alt_data_end+0xf8008d4c>
10008d70:	63000044 	addi	r12,r12,1
10008d74:	6018913a 	slli	r12,r12,4
10008d78:	39c003cc 	andi	r7,r7,15
10008d7c:	010000c4 	movi	r4,3
10008d80:	1b07883a 	add	r3,r3,r12
10008d84:	21c00e2e 	bgeu	r4,r7,10008dc0 <memset+0x100>
10008d88:	1813883a 	mov	r9,r3
10008d8c:	3811883a 	mov	r8,r7
10008d90:	010000c4 	movi	r4,3
10008d94:	49800015 	stw	r6,0(r9)
10008d98:	423fff04 	addi	r8,r8,-4
10008d9c:	4a400104 	addi	r9,r9,4
10008da0:	223ffc36 	bltu	r4,r8,10008d94 <__alt_data_end+0xf8008d94>
10008da4:	393fff04 	addi	r4,r7,-4
10008da8:	2008d0ba 	srli	r4,r4,2
10008dac:	39c000cc 	andi	r7,r7,3
10008db0:	21000044 	addi	r4,r4,1
10008db4:	2109883a 	add	r4,r4,r4
10008db8:	2109883a 	add	r4,r4,r4
10008dbc:	1907883a 	add	r3,r3,r4
10008dc0:	38000426 	beq	r7,zero,10008dd4 <memset+0x114>
10008dc4:	19cf883a 	add	r7,r3,r7
10008dc8:	19400005 	stb	r5,0(r3)
10008dcc:	18c00044 	addi	r3,r3,1
10008dd0:	19fffd1e 	bne	r3,r7,10008dc8 <__alt_data_end+0xf8008dc8>
10008dd4:	f800283a 	ret
10008dd8:	2007883a 	mov	r3,r4
10008ddc:	300f883a 	mov	r7,r6
10008de0:	003fc806 	br	10008d04 <__alt_data_end+0xf8008d04>

10008de4 <_Balloc>:
10008de4:	20801317 	ldw	r2,76(r4)
10008de8:	defffc04 	addi	sp,sp,-16
10008dec:	dc400115 	stw	r17,4(sp)
10008df0:	dc000015 	stw	r16,0(sp)
10008df4:	dfc00315 	stw	ra,12(sp)
10008df8:	dc800215 	stw	r18,8(sp)
10008dfc:	2023883a 	mov	r17,r4
10008e00:	2821883a 	mov	r16,r5
10008e04:	10000f26 	beq	r2,zero,10008e44 <_Balloc+0x60>
10008e08:	8407883a 	add	r3,r16,r16
10008e0c:	18c7883a 	add	r3,r3,r3
10008e10:	10c7883a 	add	r3,r2,r3
10008e14:	18800017 	ldw	r2,0(r3)
10008e18:	10001126 	beq	r2,zero,10008e60 <_Balloc+0x7c>
10008e1c:	11000017 	ldw	r4,0(r2)
10008e20:	19000015 	stw	r4,0(r3)
10008e24:	10000415 	stw	zero,16(r2)
10008e28:	10000315 	stw	zero,12(r2)
10008e2c:	dfc00317 	ldw	ra,12(sp)
10008e30:	dc800217 	ldw	r18,8(sp)
10008e34:	dc400117 	ldw	r17,4(sp)
10008e38:	dc000017 	ldw	r16,0(sp)
10008e3c:	dec00404 	addi	sp,sp,16
10008e40:	f800283a 	ret
10008e44:	01400104 	movi	r5,4
10008e48:	01800844 	movi	r6,33
10008e4c:	000b7780 	call	1000b778 <_calloc_r>
10008e50:	88801315 	stw	r2,76(r17)
10008e54:	103fec1e 	bne	r2,zero,10008e08 <__alt_data_end+0xf8008e08>
10008e58:	0005883a 	mov	r2,zero
10008e5c:	003ff306 	br	10008e2c <__alt_data_end+0xf8008e2c>
10008e60:	01400044 	movi	r5,1
10008e64:	2c24983a 	sll	r18,r5,r16
10008e68:	8809883a 	mov	r4,r17
10008e6c:	91800144 	addi	r6,r18,5
10008e70:	318d883a 	add	r6,r6,r6
10008e74:	318d883a 	add	r6,r6,r6
10008e78:	000b7780 	call	1000b778 <_calloc_r>
10008e7c:	103ff626 	beq	r2,zero,10008e58 <__alt_data_end+0xf8008e58>
10008e80:	14000115 	stw	r16,4(r2)
10008e84:	14800215 	stw	r18,8(r2)
10008e88:	003fe606 	br	10008e24 <__alt_data_end+0xf8008e24>

10008e8c <_Bfree>:
10008e8c:	28000826 	beq	r5,zero,10008eb0 <_Bfree+0x24>
10008e90:	28c00117 	ldw	r3,4(r5)
10008e94:	20801317 	ldw	r2,76(r4)
10008e98:	18c7883a 	add	r3,r3,r3
10008e9c:	18c7883a 	add	r3,r3,r3
10008ea0:	10c5883a 	add	r2,r2,r3
10008ea4:	10c00017 	ldw	r3,0(r2)
10008ea8:	28c00015 	stw	r3,0(r5)
10008eac:	11400015 	stw	r5,0(r2)
10008eb0:	f800283a 	ret

10008eb4 <__multadd>:
10008eb4:	defff704 	addi	sp,sp,-36
10008eb8:	dc800215 	stw	r18,8(sp)
10008ebc:	2c800417 	ldw	r18,16(r5)
10008ec0:	ddc00715 	stw	r23,28(sp)
10008ec4:	dd800615 	stw	r22,24(sp)
10008ec8:	dd000415 	stw	r20,16(sp)
10008ecc:	dcc00315 	stw	r19,12(sp)
10008ed0:	dc400115 	stw	r17,4(sp)
10008ed4:	dc000015 	stw	r16,0(sp)
10008ed8:	dfc00815 	stw	ra,32(sp)
10008edc:	dd400515 	stw	r21,20(sp)
10008ee0:	2827883a 	mov	r19,r5
10008ee4:	2029883a 	mov	r20,r4
10008ee8:	3023883a 	mov	r17,r6
10008eec:	3821883a 	mov	r16,r7
10008ef0:	2d800504 	addi	r22,r5,20
10008ef4:	002f883a 	mov	r23,zero
10008ef8:	b5400017 	ldw	r21,0(r22)
10008efc:	880b883a 	mov	r5,r17
10008f00:	bdc00044 	addi	r23,r23,1
10008f04:	a93fffcc 	andi	r4,r21,65535
10008f08:	00024fc0 	call	100024fc <__mulsi3>
10008f0c:	1421883a 	add	r16,r2,r16
10008f10:	a808d43a 	srli	r4,r21,16
10008f14:	802ad43a 	srli	r21,r16,16
10008f18:	880b883a 	mov	r5,r17
10008f1c:	00024fc0 	call	100024fc <__mulsi3>
10008f20:	a88f883a 	add	r7,r21,r2
10008f24:	3804943a 	slli	r2,r7,16
10008f28:	80ffffcc 	andi	r3,r16,65535
10008f2c:	b5800104 	addi	r22,r22,4
10008f30:	10c7883a 	add	r3,r2,r3
10008f34:	b0ffff15 	stw	r3,-4(r22)
10008f38:	3820d43a 	srli	r16,r7,16
10008f3c:	bcbfee16 	blt	r23,r18,10008ef8 <__alt_data_end+0xf8008ef8>
10008f40:	80000926 	beq	r16,zero,10008f68 <__multadd+0xb4>
10008f44:	98800217 	ldw	r2,8(r19)
10008f48:	9080130e 	bge	r18,r2,10008f98 <__multadd+0xe4>
10008f4c:	90800144 	addi	r2,r18,5
10008f50:	1085883a 	add	r2,r2,r2
10008f54:	1085883a 	add	r2,r2,r2
10008f58:	9885883a 	add	r2,r19,r2
10008f5c:	14000015 	stw	r16,0(r2)
10008f60:	94800044 	addi	r18,r18,1
10008f64:	9c800415 	stw	r18,16(r19)
10008f68:	9805883a 	mov	r2,r19
10008f6c:	dfc00817 	ldw	ra,32(sp)
10008f70:	ddc00717 	ldw	r23,28(sp)
10008f74:	dd800617 	ldw	r22,24(sp)
10008f78:	dd400517 	ldw	r21,20(sp)
10008f7c:	dd000417 	ldw	r20,16(sp)
10008f80:	dcc00317 	ldw	r19,12(sp)
10008f84:	dc800217 	ldw	r18,8(sp)
10008f88:	dc400117 	ldw	r17,4(sp)
10008f8c:	dc000017 	ldw	r16,0(sp)
10008f90:	dec00904 	addi	sp,sp,36
10008f94:	f800283a 	ret
10008f98:	99400117 	ldw	r5,4(r19)
10008f9c:	a009883a 	mov	r4,r20
10008fa0:	29400044 	addi	r5,r5,1
10008fa4:	0008de40 	call	10008de4 <_Balloc>
10008fa8:	99800417 	ldw	r6,16(r19)
10008fac:	99400304 	addi	r5,r19,12
10008fb0:	11000304 	addi	r4,r2,12
10008fb4:	31800084 	addi	r6,r6,2
10008fb8:	318d883a 	add	r6,r6,r6
10008fbc:	318d883a 	add	r6,r6,r6
10008fc0:	1023883a 	mov	r17,r2
10008fc4:	0008b880 	call	10008b88 <memcpy>
10008fc8:	99000117 	ldw	r4,4(r19)
10008fcc:	a0c01317 	ldw	r3,76(r20)
10008fd0:	2109883a 	add	r4,r4,r4
10008fd4:	2109883a 	add	r4,r4,r4
10008fd8:	1907883a 	add	r3,r3,r4
10008fdc:	18800017 	ldw	r2,0(r3)
10008fe0:	98800015 	stw	r2,0(r19)
10008fe4:	1cc00015 	stw	r19,0(r3)
10008fe8:	8827883a 	mov	r19,r17
10008fec:	003fd706 	br	10008f4c <__alt_data_end+0xf8008f4c>

10008ff0 <__s2b>:
10008ff0:	defff904 	addi	sp,sp,-28
10008ff4:	dc400115 	stw	r17,4(sp)
10008ff8:	dc000015 	stw	r16,0(sp)
10008ffc:	2023883a 	mov	r17,r4
10009000:	2821883a 	mov	r16,r5
10009004:	39000204 	addi	r4,r7,8
10009008:	01400244 	movi	r5,9
1000900c:	dcc00315 	stw	r19,12(sp)
10009010:	dc800215 	stw	r18,8(sp)
10009014:	dfc00615 	stw	ra,24(sp)
10009018:	dd400515 	stw	r21,20(sp)
1000901c:	dd000415 	stw	r20,16(sp)
10009020:	3825883a 	mov	r18,r7
10009024:	3027883a 	mov	r19,r6
10009028:	000243c0 	call	1000243c <__divsi3>
1000902c:	00c00044 	movi	r3,1
10009030:	000b883a 	mov	r5,zero
10009034:	1880030e 	bge	r3,r2,10009044 <__s2b+0x54>
10009038:	18c7883a 	add	r3,r3,r3
1000903c:	29400044 	addi	r5,r5,1
10009040:	18bffd16 	blt	r3,r2,10009038 <__alt_data_end+0xf8009038>
10009044:	8809883a 	mov	r4,r17
10009048:	0008de40 	call	10008de4 <_Balloc>
1000904c:	d8c00717 	ldw	r3,28(sp)
10009050:	10c00515 	stw	r3,20(r2)
10009054:	00c00044 	movi	r3,1
10009058:	10c00415 	stw	r3,16(r2)
1000905c:	00c00244 	movi	r3,9
10009060:	1cc0210e 	bge	r3,r19,100090e8 <__s2b+0xf8>
10009064:	80eb883a 	add	r21,r16,r3
10009068:	a829883a 	mov	r20,r21
1000906c:	84e1883a 	add	r16,r16,r19
10009070:	a1c00007 	ldb	r7,0(r20)
10009074:	8809883a 	mov	r4,r17
10009078:	a5000044 	addi	r20,r20,1
1000907c:	100b883a 	mov	r5,r2
10009080:	01800284 	movi	r6,10
10009084:	39fff404 	addi	r7,r7,-48
10009088:	0008eb40 	call	10008eb4 <__multadd>
1000908c:	a43ff81e 	bne	r20,r16,10009070 <__alt_data_end+0xf8009070>
10009090:	ace1883a 	add	r16,r21,r19
10009094:	843ffe04 	addi	r16,r16,-8
10009098:	9c800a0e 	bge	r19,r18,100090c4 <__s2b+0xd4>
1000909c:	94e5c83a 	sub	r18,r18,r19
100090a0:	84a5883a 	add	r18,r16,r18
100090a4:	81c00007 	ldb	r7,0(r16)
100090a8:	8809883a 	mov	r4,r17
100090ac:	84000044 	addi	r16,r16,1
100090b0:	100b883a 	mov	r5,r2
100090b4:	01800284 	movi	r6,10
100090b8:	39fff404 	addi	r7,r7,-48
100090bc:	0008eb40 	call	10008eb4 <__multadd>
100090c0:	84bff81e 	bne	r16,r18,100090a4 <__alt_data_end+0xf80090a4>
100090c4:	dfc00617 	ldw	ra,24(sp)
100090c8:	dd400517 	ldw	r21,20(sp)
100090cc:	dd000417 	ldw	r20,16(sp)
100090d0:	dcc00317 	ldw	r19,12(sp)
100090d4:	dc800217 	ldw	r18,8(sp)
100090d8:	dc400117 	ldw	r17,4(sp)
100090dc:	dc000017 	ldw	r16,0(sp)
100090e0:	dec00704 	addi	sp,sp,28
100090e4:	f800283a 	ret
100090e8:	84000284 	addi	r16,r16,10
100090ec:	1827883a 	mov	r19,r3
100090f0:	003fe906 	br	10009098 <__alt_data_end+0xf8009098>

100090f4 <__hi0bits>:
100090f4:	20bfffec 	andhi	r2,r4,65535
100090f8:	1000141e 	bne	r2,zero,1000914c <__hi0bits+0x58>
100090fc:	2008943a 	slli	r4,r4,16
10009100:	00800404 	movi	r2,16
10009104:	20ffc02c 	andhi	r3,r4,65280
10009108:	1800021e 	bne	r3,zero,10009114 <__hi0bits+0x20>
1000910c:	2008923a 	slli	r4,r4,8
10009110:	10800204 	addi	r2,r2,8
10009114:	20fc002c 	andhi	r3,r4,61440
10009118:	1800021e 	bne	r3,zero,10009124 <__hi0bits+0x30>
1000911c:	2008913a 	slli	r4,r4,4
10009120:	10800104 	addi	r2,r2,4
10009124:	20f0002c 	andhi	r3,r4,49152
10009128:	1800031e 	bne	r3,zero,10009138 <__hi0bits+0x44>
1000912c:	2109883a 	add	r4,r4,r4
10009130:	10800084 	addi	r2,r2,2
10009134:	2109883a 	add	r4,r4,r4
10009138:	20000316 	blt	r4,zero,10009148 <__hi0bits+0x54>
1000913c:	2110002c 	andhi	r4,r4,16384
10009140:	2000041e 	bne	r4,zero,10009154 <__hi0bits+0x60>
10009144:	00800804 	movi	r2,32
10009148:	f800283a 	ret
1000914c:	0005883a 	mov	r2,zero
10009150:	003fec06 	br	10009104 <__alt_data_end+0xf8009104>
10009154:	10800044 	addi	r2,r2,1
10009158:	f800283a 	ret

1000915c <__lo0bits>:
1000915c:	20c00017 	ldw	r3,0(r4)
10009160:	188001cc 	andi	r2,r3,7
10009164:	10000826 	beq	r2,zero,10009188 <__lo0bits+0x2c>
10009168:	1880004c 	andi	r2,r3,1
1000916c:	1000211e 	bne	r2,zero,100091f4 <__lo0bits+0x98>
10009170:	1880008c 	andi	r2,r3,2
10009174:	1000211e 	bne	r2,zero,100091fc <__lo0bits+0xa0>
10009178:	1806d0ba 	srli	r3,r3,2
1000917c:	00800084 	movi	r2,2
10009180:	20c00015 	stw	r3,0(r4)
10009184:	f800283a 	ret
10009188:	18bfffcc 	andi	r2,r3,65535
1000918c:	10001326 	beq	r2,zero,100091dc <__lo0bits+0x80>
10009190:	0005883a 	mov	r2,zero
10009194:	19403fcc 	andi	r5,r3,255
10009198:	2800021e 	bne	r5,zero,100091a4 <__lo0bits+0x48>
1000919c:	1806d23a 	srli	r3,r3,8
100091a0:	10800204 	addi	r2,r2,8
100091a4:	194003cc 	andi	r5,r3,15
100091a8:	2800021e 	bne	r5,zero,100091b4 <__lo0bits+0x58>
100091ac:	1806d13a 	srli	r3,r3,4
100091b0:	10800104 	addi	r2,r2,4
100091b4:	194000cc 	andi	r5,r3,3
100091b8:	2800021e 	bne	r5,zero,100091c4 <__lo0bits+0x68>
100091bc:	1806d0ba 	srli	r3,r3,2
100091c0:	10800084 	addi	r2,r2,2
100091c4:	1940004c 	andi	r5,r3,1
100091c8:	2800081e 	bne	r5,zero,100091ec <__lo0bits+0x90>
100091cc:	1806d07a 	srli	r3,r3,1
100091d0:	1800051e 	bne	r3,zero,100091e8 <__lo0bits+0x8c>
100091d4:	00800804 	movi	r2,32
100091d8:	f800283a 	ret
100091dc:	1806d43a 	srli	r3,r3,16
100091e0:	00800404 	movi	r2,16
100091e4:	003feb06 	br	10009194 <__alt_data_end+0xf8009194>
100091e8:	10800044 	addi	r2,r2,1
100091ec:	20c00015 	stw	r3,0(r4)
100091f0:	f800283a 	ret
100091f4:	0005883a 	mov	r2,zero
100091f8:	f800283a 	ret
100091fc:	1806d07a 	srli	r3,r3,1
10009200:	00800044 	movi	r2,1
10009204:	20c00015 	stw	r3,0(r4)
10009208:	f800283a 	ret

1000920c <__i2b>:
1000920c:	defffd04 	addi	sp,sp,-12
10009210:	dc000015 	stw	r16,0(sp)
10009214:	04000044 	movi	r16,1
10009218:	dc400115 	stw	r17,4(sp)
1000921c:	2823883a 	mov	r17,r5
10009220:	800b883a 	mov	r5,r16
10009224:	dfc00215 	stw	ra,8(sp)
10009228:	0008de40 	call	10008de4 <_Balloc>
1000922c:	14400515 	stw	r17,20(r2)
10009230:	14000415 	stw	r16,16(r2)
10009234:	dfc00217 	ldw	ra,8(sp)
10009238:	dc400117 	ldw	r17,4(sp)
1000923c:	dc000017 	ldw	r16,0(sp)
10009240:	dec00304 	addi	sp,sp,12
10009244:	f800283a 	ret

10009248 <__multiply>:
10009248:	deffef04 	addi	sp,sp,-68
1000924c:	dc400815 	stw	r17,32(sp)
10009250:	dc000715 	stw	r16,28(sp)
10009254:	2c400417 	ldw	r17,16(r5)
10009258:	34000417 	ldw	r16,16(r6)
1000925c:	dd800d15 	stw	r22,52(sp)
10009260:	dc800915 	stw	r18,36(sp)
10009264:	dfc01015 	stw	ra,64(sp)
10009268:	df000f15 	stw	fp,60(sp)
1000926c:	ddc00e15 	stw	r23,56(sp)
10009270:	dd400c15 	stw	r21,48(sp)
10009274:	dd000b15 	stw	r20,44(sp)
10009278:	dcc00a15 	stw	r19,40(sp)
1000927c:	2825883a 	mov	r18,r5
10009280:	302d883a 	mov	r22,r6
10009284:	8c009116 	blt	r17,r16,100094cc <__multiply+0x284>
10009288:	8005883a 	mov	r2,r16
1000928c:	8821883a 	mov	r16,r17
10009290:	1023883a 	mov	r17,r2
10009294:	90800217 	ldw	r2,8(r18)
10009298:	8447883a 	add	r3,r16,r17
1000929c:	d8c00215 	stw	r3,8(sp)
100092a0:	91400117 	ldw	r5,4(r18)
100092a4:	10c0010e 	bge	r2,r3,100092ac <__multiply+0x64>
100092a8:	29400044 	addi	r5,r5,1
100092ac:	0008de40 	call	10008de4 <_Balloc>
100092b0:	d8c00217 	ldw	r3,8(sp)
100092b4:	d8800615 	stw	r2,24(sp)
100092b8:	18eb883a 	add	r21,r3,r3
100092bc:	ad6b883a 	add	r21,r21,r21
100092c0:	10c00504 	addi	r3,r2,20
100092c4:	1d6b883a 	add	r21,r3,r21
100092c8:	d8c00115 	stw	r3,4(sp)
100092cc:	dd400315 	stw	r21,12(sp)
100092d0:	1805883a 	mov	r2,r3
100092d4:	1d40042e 	bgeu	r3,r21,100092e8 <__multiply+0xa0>
100092d8:	d8c00317 	ldw	r3,12(sp)
100092dc:	10000015 	stw	zero,0(r2)
100092e0:	10800104 	addi	r2,r2,4
100092e4:	10fffc36 	bltu	r2,r3,100092d8 <__alt_data_end+0xf80092d8>
100092e8:	8c63883a 	add	r17,r17,r17
100092ec:	b5800504 	addi	r22,r22,20
100092f0:	8c63883a 	add	r17,r17,r17
100092f4:	94800504 	addi	r18,r18,20
100092f8:	8421883a 	add	r16,r16,r16
100092fc:	b463883a 	add	r17,r22,r17
10009300:	8421883a 	add	r16,r16,r16
10009304:	dd800015 	stw	r22,0(sp)
10009308:	dc800415 	stw	r18,16(sp)
1000930c:	dc400515 	stw	r17,20(sp)
10009310:	9429883a 	add	r20,r18,r16
10009314:	b4404f2e 	bgeu	r22,r17,10009454 <__multiply+0x20c>
10009318:	d8c00017 	ldw	r3,0(sp)
1000931c:	1c800017 	ldw	r18,0(r3)
10009320:	943fffcc 	andi	r16,r18,65535
10009324:	80001e26 	beq	r16,zero,100093a0 <__multiply+0x158>
10009328:	dd800117 	ldw	r22,4(sp)
1000932c:	dd400417 	ldw	r21,16(sp)
10009330:	0025883a 	mov	r18,zero
10009334:	adc00017 	ldw	r23,0(r21)
10009338:	b4c00017 	ldw	r19,0(r22)
1000933c:	800b883a 	mov	r5,r16
10009340:	b93fffcc 	andi	r4,r23,65535
10009344:	00024fc0 	call	100024fc <__mulsi3>
10009348:	9c7fffcc 	andi	r17,r19,65535
1000934c:	8885883a 	add	r2,r17,r2
10009350:	b808d43a 	srli	r4,r23,16
10009354:	14a3883a 	add	r17,r2,r18
10009358:	9826d43a 	srli	r19,r19,16
1000935c:	8824d43a 	srli	r18,r17,16
10009360:	800b883a 	mov	r5,r16
10009364:	00024fc0 	call	100024fc <__mulsi3>
10009368:	9885883a 	add	r2,r19,r2
1000936c:	14a7883a 	add	r19,r2,r18
10009370:	88ffffcc 	andi	r3,r17,65535
10009374:	9822943a 	slli	r17,r19,16
10009378:	ad400104 	addi	r21,r21,4
1000937c:	b005883a 	mov	r2,r22
10009380:	88c6b03a 	or	r3,r17,r3
10009384:	b0c00015 	stw	r3,0(r22)
10009388:	9824d43a 	srli	r18,r19,16
1000938c:	b5800104 	addi	r22,r22,4
10009390:	ad3fe836 	bltu	r21,r20,10009334 <__alt_data_end+0xf8009334>
10009394:	d8c00017 	ldw	r3,0(sp)
10009398:	14800115 	stw	r18,4(r2)
1000939c:	1c800017 	ldw	r18,0(r3)
100093a0:	9024d43a 	srli	r18,r18,16
100093a4:	90002226 	beq	r18,zero,10009430 <__multiply+0x1e8>
100093a8:	d8c00117 	ldw	r3,4(sp)
100093ac:	dd800417 	ldw	r22,16(sp)
100093b0:	002f883a 	mov	r23,zero
100093b4:	1f000017 	ldw	fp,0(r3)
100093b8:	1823883a 	mov	r17,r3
100093bc:	182b883a 	mov	r21,r3
100093c0:	e021883a 	mov	r16,fp
100093c4:	00000106 	br	100093cc <__multiply+0x184>
100093c8:	982b883a 	mov	r21,r19
100093cc:	b100000b 	ldhu	r4,0(r22)
100093d0:	8020d43a 	srli	r16,r16,16
100093d4:	900b883a 	mov	r5,r18
100093d8:	00024fc0 	call	100024fc <__mulsi3>
100093dc:	1405883a 	add	r2,r2,r16
100093e0:	15ef883a 	add	r23,r2,r23
100093e4:	b804943a 	slli	r2,r23,16
100093e8:	e0ffffcc 	andi	r3,fp,65535
100093ec:	8c400104 	addi	r17,r17,4
100093f0:	10c6b03a 	or	r3,r2,r3
100093f4:	88ffff15 	stw	r3,-4(r17)
100093f8:	b5800104 	addi	r22,r22,4
100093fc:	b13fff17 	ldw	r4,-4(r22)
10009400:	acc00104 	addi	r19,r21,4
10009404:	900b883a 	mov	r5,r18
10009408:	2008d43a 	srli	r4,r4,16
1000940c:	9c000017 	ldw	r16,0(r19)
10009410:	00024fc0 	call	100024fc <__mulsi3>
10009414:	b806d43a 	srli	r3,r23,16
10009418:	813fffcc 	andi	r4,r16,65535
1000941c:	1105883a 	add	r2,r2,r4
10009420:	10f9883a 	add	fp,r2,r3
10009424:	e02ed43a 	srli	r23,fp,16
10009428:	b53fe736 	bltu	r22,r20,100093c8 <__alt_data_end+0xf80093c8>
1000942c:	af000115 	stw	fp,4(r21)
10009430:	d8c00017 	ldw	r3,0(sp)
10009434:	d9000517 	ldw	r4,20(sp)
10009438:	18c00104 	addi	r3,r3,4
1000943c:	d8c00015 	stw	r3,0(sp)
10009440:	d8c00117 	ldw	r3,4(sp)
10009444:	18c00104 	addi	r3,r3,4
10009448:	d8c00115 	stw	r3,4(sp)
1000944c:	d8c00017 	ldw	r3,0(sp)
10009450:	193fb136 	bltu	r3,r4,10009318 <__alt_data_end+0xf8009318>
10009454:	d8c00217 	ldw	r3,8(sp)
10009458:	00c00c0e 	bge	zero,r3,1000948c <__multiply+0x244>
1000945c:	d8c00317 	ldw	r3,12(sp)
10009460:	18bfff17 	ldw	r2,-4(r3)
10009464:	1d7fff04 	addi	r21,r3,-4
10009468:	10000326 	beq	r2,zero,10009478 <__multiply+0x230>
1000946c:	00000706 	br	1000948c <__multiply+0x244>
10009470:	a8800017 	ldw	r2,0(r21)
10009474:	1000051e 	bne	r2,zero,1000948c <__multiply+0x244>
10009478:	d8c00217 	ldw	r3,8(sp)
1000947c:	ad7fff04 	addi	r21,r21,-4
10009480:	18ffffc4 	addi	r3,r3,-1
10009484:	d8c00215 	stw	r3,8(sp)
10009488:	183ff91e 	bne	r3,zero,10009470 <__alt_data_end+0xf8009470>
1000948c:	d8c00617 	ldw	r3,24(sp)
10009490:	d9000217 	ldw	r4,8(sp)
10009494:	1805883a 	mov	r2,r3
10009498:	19000415 	stw	r4,16(r3)
1000949c:	dfc01017 	ldw	ra,64(sp)
100094a0:	df000f17 	ldw	fp,60(sp)
100094a4:	ddc00e17 	ldw	r23,56(sp)
100094a8:	dd800d17 	ldw	r22,52(sp)
100094ac:	dd400c17 	ldw	r21,48(sp)
100094b0:	dd000b17 	ldw	r20,44(sp)
100094b4:	dcc00a17 	ldw	r19,40(sp)
100094b8:	dc800917 	ldw	r18,36(sp)
100094bc:	dc400817 	ldw	r17,32(sp)
100094c0:	dc000717 	ldw	r16,28(sp)
100094c4:	dec01104 	addi	sp,sp,68
100094c8:	f800283a 	ret
100094cc:	3025883a 	mov	r18,r6
100094d0:	282d883a 	mov	r22,r5
100094d4:	003f6f06 	br	10009294 <__alt_data_end+0xf8009294>

100094d8 <__pow5mult>:
100094d8:	defffa04 	addi	sp,sp,-24
100094dc:	dcc00315 	stw	r19,12(sp)
100094e0:	dc800215 	stw	r18,8(sp)
100094e4:	dc000015 	stw	r16,0(sp)
100094e8:	dfc00515 	stw	ra,20(sp)
100094ec:	dd000415 	stw	r20,16(sp)
100094f0:	dc400115 	stw	r17,4(sp)
100094f4:	308000cc 	andi	r2,r6,3
100094f8:	3021883a 	mov	r16,r6
100094fc:	2027883a 	mov	r19,r4
10009500:	2825883a 	mov	r18,r5
10009504:	10002e1e 	bne	r2,zero,100095c0 <__pow5mult+0xe8>
10009508:	8021d0ba 	srai	r16,r16,2
1000950c:	80001a26 	beq	r16,zero,10009578 <__pow5mult+0xa0>
10009510:	9c401217 	ldw	r17,72(r19)
10009514:	8800061e 	bne	r17,zero,10009530 <__pow5mult+0x58>
10009518:	00003406 	br	100095ec <__pow5mult+0x114>
1000951c:	8021d07a 	srai	r16,r16,1
10009520:	80001526 	beq	r16,zero,10009578 <__pow5mult+0xa0>
10009524:	88800017 	ldw	r2,0(r17)
10009528:	10001c26 	beq	r2,zero,1000959c <__pow5mult+0xc4>
1000952c:	1023883a 	mov	r17,r2
10009530:	80c0004c 	andi	r3,r16,1
10009534:	183ff926 	beq	r3,zero,1000951c <__alt_data_end+0xf800951c>
10009538:	900b883a 	mov	r5,r18
1000953c:	880d883a 	mov	r6,r17
10009540:	9809883a 	mov	r4,r19
10009544:	00092480 	call	10009248 <__multiply>
10009548:	90001b26 	beq	r18,zero,100095b8 <__pow5mult+0xe0>
1000954c:	91c00117 	ldw	r7,4(r18)
10009550:	98c01317 	ldw	r3,76(r19)
10009554:	8021d07a 	srai	r16,r16,1
10009558:	39cf883a 	add	r7,r7,r7
1000955c:	39cf883a 	add	r7,r7,r7
10009560:	19c7883a 	add	r3,r3,r7
10009564:	19000017 	ldw	r4,0(r3)
10009568:	91000015 	stw	r4,0(r18)
1000956c:	1c800015 	stw	r18,0(r3)
10009570:	1025883a 	mov	r18,r2
10009574:	803feb1e 	bne	r16,zero,10009524 <__alt_data_end+0xf8009524>
10009578:	9005883a 	mov	r2,r18
1000957c:	dfc00517 	ldw	ra,20(sp)
10009580:	dd000417 	ldw	r20,16(sp)
10009584:	dcc00317 	ldw	r19,12(sp)
10009588:	dc800217 	ldw	r18,8(sp)
1000958c:	dc400117 	ldw	r17,4(sp)
10009590:	dc000017 	ldw	r16,0(sp)
10009594:	dec00604 	addi	sp,sp,24
10009598:	f800283a 	ret
1000959c:	9809883a 	mov	r4,r19
100095a0:	880b883a 	mov	r5,r17
100095a4:	880d883a 	mov	r6,r17
100095a8:	00092480 	call	10009248 <__multiply>
100095ac:	88800015 	stw	r2,0(r17)
100095b0:	10000015 	stw	zero,0(r2)
100095b4:	003fdd06 	br	1000952c <__alt_data_end+0xf800952c>
100095b8:	1025883a 	mov	r18,r2
100095bc:	003fd706 	br	1000951c <__alt_data_end+0xf800951c>
100095c0:	10bfffc4 	addi	r2,r2,-1
100095c4:	1085883a 	add	r2,r2,r2
100095c8:	00c40074 	movhi	r3,4097
100095cc:	18c2a204 	addi	r3,r3,2696
100095d0:	1085883a 	add	r2,r2,r2
100095d4:	1885883a 	add	r2,r3,r2
100095d8:	11800017 	ldw	r6,0(r2)
100095dc:	000f883a 	mov	r7,zero
100095e0:	0008eb40 	call	10008eb4 <__multadd>
100095e4:	1025883a 	mov	r18,r2
100095e8:	003fc706 	br	10009508 <__alt_data_end+0xf8009508>
100095ec:	05000044 	movi	r20,1
100095f0:	9809883a 	mov	r4,r19
100095f4:	a00b883a 	mov	r5,r20
100095f8:	0008de40 	call	10008de4 <_Balloc>
100095fc:	1023883a 	mov	r17,r2
10009600:	00809c44 	movi	r2,625
10009604:	88800515 	stw	r2,20(r17)
10009608:	8d000415 	stw	r20,16(r17)
1000960c:	9c401215 	stw	r17,72(r19)
10009610:	88000015 	stw	zero,0(r17)
10009614:	003fc606 	br	10009530 <__alt_data_end+0xf8009530>

10009618 <__lshift>:
10009618:	defff904 	addi	sp,sp,-28
1000961c:	dd000415 	stw	r20,16(sp)
10009620:	dcc00315 	stw	r19,12(sp)
10009624:	3029d17a 	srai	r20,r6,5
10009628:	2cc00417 	ldw	r19,16(r5)
1000962c:	28800217 	ldw	r2,8(r5)
10009630:	dd400515 	stw	r21,20(sp)
10009634:	a4e7883a 	add	r19,r20,r19
10009638:	dc800215 	stw	r18,8(sp)
1000963c:	dc400115 	stw	r17,4(sp)
10009640:	dc000015 	stw	r16,0(sp)
10009644:	dfc00615 	stw	ra,24(sp)
10009648:	9c000044 	addi	r16,r19,1
1000964c:	2823883a 	mov	r17,r5
10009650:	302b883a 	mov	r21,r6
10009654:	2025883a 	mov	r18,r4
10009658:	29400117 	ldw	r5,4(r5)
1000965c:	1400030e 	bge	r2,r16,1000966c <__lshift+0x54>
10009660:	1085883a 	add	r2,r2,r2
10009664:	29400044 	addi	r5,r5,1
10009668:	143ffd16 	blt	r2,r16,10009660 <__alt_data_end+0xf8009660>
1000966c:	9009883a 	mov	r4,r18
10009670:	0008de40 	call	10008de4 <_Balloc>
10009674:	11c00504 	addi	r7,r2,20
10009678:	0500090e 	bge	zero,r20,100096a0 <__lshift+0x88>
1000967c:	3811883a 	mov	r8,r7
10009680:	0007883a 	mov	r3,zero
10009684:	40000015 	stw	zero,0(r8)
10009688:	18c00044 	addi	r3,r3,1
1000968c:	42000104 	addi	r8,r8,4
10009690:	1d3ffc1e 	bne	r3,r20,10009684 <__alt_data_end+0xf8009684>
10009694:	18c7883a 	add	r3,r3,r3
10009698:	18c7883a 	add	r3,r3,r3
1000969c:	38cf883a 	add	r7,r7,r3
100096a0:	89000417 	ldw	r4,16(r17)
100096a4:	88c00504 	addi	r3,r17,20
100096a8:	a98007cc 	andi	r6,r21,31
100096ac:	2109883a 	add	r4,r4,r4
100096b0:	2109883a 	add	r4,r4,r4
100096b4:	1909883a 	add	r4,r3,r4
100096b8:	30002326 	beq	r6,zero,10009748 <__lshift+0x130>
100096bc:	01400804 	movi	r5,32
100096c0:	298bc83a 	sub	r5,r5,r6
100096c4:	0013883a 	mov	r9,zero
100096c8:	1a000017 	ldw	r8,0(r3)
100096cc:	3815883a 	mov	r10,r7
100096d0:	39c00104 	addi	r7,r7,4
100096d4:	4190983a 	sll	r8,r8,r6
100096d8:	18c00104 	addi	r3,r3,4
100096dc:	4a10b03a 	or	r8,r9,r8
100096e0:	3a3fff15 	stw	r8,-4(r7)
100096e4:	1a3fff17 	ldw	r8,-4(r3)
100096e8:	4152d83a 	srl	r9,r8,r5
100096ec:	193ff636 	bltu	r3,r4,100096c8 <__alt_data_end+0xf80096c8>
100096f0:	52400115 	stw	r9,4(r10)
100096f4:	48000126 	beq	r9,zero,100096fc <__lshift+0xe4>
100096f8:	9c000084 	addi	r16,r19,2
100096fc:	89000117 	ldw	r4,4(r17)
10009700:	90c01317 	ldw	r3,76(r18)
10009704:	843fffc4 	addi	r16,r16,-1
10009708:	2109883a 	add	r4,r4,r4
1000970c:	2109883a 	add	r4,r4,r4
10009710:	1907883a 	add	r3,r3,r4
10009714:	19000017 	ldw	r4,0(r3)
10009718:	14000415 	stw	r16,16(r2)
1000971c:	89000015 	stw	r4,0(r17)
10009720:	1c400015 	stw	r17,0(r3)
10009724:	dfc00617 	ldw	ra,24(sp)
10009728:	dd400517 	ldw	r21,20(sp)
1000972c:	dd000417 	ldw	r20,16(sp)
10009730:	dcc00317 	ldw	r19,12(sp)
10009734:	dc800217 	ldw	r18,8(sp)
10009738:	dc400117 	ldw	r17,4(sp)
1000973c:	dc000017 	ldw	r16,0(sp)
10009740:	dec00704 	addi	sp,sp,28
10009744:	f800283a 	ret
10009748:	19400017 	ldw	r5,0(r3)
1000974c:	39c00104 	addi	r7,r7,4
10009750:	18c00104 	addi	r3,r3,4
10009754:	397fff15 	stw	r5,-4(r7)
10009758:	193ffb36 	bltu	r3,r4,10009748 <__alt_data_end+0xf8009748>
1000975c:	003fe706 	br	100096fc <__alt_data_end+0xf80096fc>

10009760 <__mcmp>:
10009760:	20800417 	ldw	r2,16(r4)
10009764:	28c00417 	ldw	r3,16(r5)
10009768:	10c5c83a 	sub	r2,r2,r3
1000976c:	1000111e 	bne	r2,zero,100097b4 <__mcmp+0x54>
10009770:	18c7883a 	add	r3,r3,r3
10009774:	18c7883a 	add	r3,r3,r3
10009778:	21000504 	addi	r4,r4,20
1000977c:	29400504 	addi	r5,r5,20
10009780:	20c5883a 	add	r2,r4,r3
10009784:	28cb883a 	add	r5,r5,r3
10009788:	00000106 	br	10009790 <__mcmp+0x30>
1000978c:	20800a2e 	bgeu	r4,r2,100097b8 <__mcmp+0x58>
10009790:	10bfff04 	addi	r2,r2,-4
10009794:	297fff04 	addi	r5,r5,-4
10009798:	11800017 	ldw	r6,0(r2)
1000979c:	28c00017 	ldw	r3,0(r5)
100097a0:	30fffa26 	beq	r6,r3,1000978c <__alt_data_end+0xf800978c>
100097a4:	30c00236 	bltu	r6,r3,100097b0 <__mcmp+0x50>
100097a8:	00800044 	movi	r2,1
100097ac:	f800283a 	ret
100097b0:	00bfffc4 	movi	r2,-1
100097b4:	f800283a 	ret
100097b8:	0005883a 	mov	r2,zero
100097bc:	f800283a 	ret

100097c0 <__mdiff>:
100097c0:	defffb04 	addi	sp,sp,-20
100097c4:	dc000015 	stw	r16,0(sp)
100097c8:	2821883a 	mov	r16,r5
100097cc:	dcc00315 	stw	r19,12(sp)
100097d0:	300b883a 	mov	r5,r6
100097d4:	2027883a 	mov	r19,r4
100097d8:	8009883a 	mov	r4,r16
100097dc:	dc800215 	stw	r18,8(sp)
100097e0:	dfc00415 	stw	ra,16(sp)
100097e4:	dc400115 	stw	r17,4(sp)
100097e8:	3025883a 	mov	r18,r6
100097ec:	00097600 	call	10009760 <__mcmp>
100097f0:	10005226 	beq	r2,zero,1000993c <__mdiff+0x17c>
100097f4:	10004c16 	blt	r2,zero,10009928 <__mdiff+0x168>
100097f8:	0023883a 	mov	r17,zero
100097fc:	81400117 	ldw	r5,4(r16)
10009800:	9809883a 	mov	r4,r19
10009804:	0008de40 	call	10008de4 <_Balloc>
10009808:	83400417 	ldw	r13,16(r16)
1000980c:	93800417 	ldw	r14,16(r18)
10009810:	81000504 	addi	r4,r16,20
10009814:	6b59883a 	add	r12,r13,r13
10009818:	739d883a 	add	r14,r14,r14
1000981c:	6319883a 	add	r12,r12,r12
10009820:	91800504 	addi	r6,r18,20
10009824:	739d883a 	add	r14,r14,r14
10009828:	14400315 	stw	r17,12(r2)
1000982c:	2319883a 	add	r12,r4,r12
10009830:	339d883a 	add	r14,r6,r14
10009834:	12400504 	addi	r9,r2,20
10009838:	0007883a 	mov	r3,zero
1000983c:	22000017 	ldw	r8,0(r4)
10009840:	32800017 	ldw	r10,0(r6)
10009844:	4ac00104 	addi	r11,r9,4
10009848:	41ffffcc 	andi	r7,r8,65535
1000984c:	38c7883a 	add	r3,r7,r3
10009850:	51ffffcc 	andi	r7,r10,65535
10009854:	19cfc83a 	sub	r7,r3,r7
10009858:	4010d43a 	srli	r8,r8,16
1000985c:	5014d43a 	srli	r10,r10,16
10009860:	3807d43a 	srai	r3,r7,16
10009864:	39ffffcc 	andi	r7,r7,65535
10009868:	4291c83a 	sub	r8,r8,r10
1000986c:	40c7883a 	add	r3,r8,r3
10009870:	1810943a 	slli	r8,r3,16
10009874:	31800104 	addi	r6,r6,4
10009878:	21000104 	addi	r4,r4,4
1000987c:	41ceb03a 	or	r7,r8,r7
10009880:	49c00015 	stw	r7,0(r9)
10009884:	1807d43a 	srai	r3,r3,16
10009888:	580b883a 	mov	r5,r11
1000988c:	5813883a 	mov	r9,r11
10009890:	33bfea36 	bltu	r6,r14,1000983c <__alt_data_end+0xf800983c>
10009894:	2011883a 	mov	r8,r4
10009898:	2300152e 	bgeu	r4,r12,100098f0 <__mdiff+0x130>
1000989c:	21400017 	ldw	r5,0(r4)
100098a0:	4a400104 	addi	r9,r9,4
100098a4:	21000104 	addi	r4,r4,4
100098a8:	29ffffcc 	andi	r7,r5,65535
100098ac:	38c7883a 	add	r3,r7,r3
100098b0:	280ad43a 	srli	r5,r5,16
100098b4:	180dd43a 	srai	r6,r3,16
100098b8:	19ffffcc 	andi	r7,r3,65535
100098bc:	3147883a 	add	r3,r6,r5
100098c0:	180a943a 	slli	r5,r3,16
100098c4:	1807d43a 	srai	r3,r3,16
100098c8:	29ceb03a 	or	r7,r5,r7
100098cc:	49ffff15 	stw	r7,-4(r9)
100098d0:	233ff236 	bltu	r4,r12,1000989c <__alt_data_end+0xf800989c>
100098d4:	0206303a 	nor	r3,zero,r8
100098d8:	1b07883a 	add	r3,r3,r12
100098dc:	1806d0ba 	srli	r3,r3,2
100098e0:	18c00044 	addi	r3,r3,1
100098e4:	18c7883a 	add	r3,r3,r3
100098e8:	18c7883a 	add	r3,r3,r3
100098ec:	58cb883a 	add	r5,r11,r3
100098f0:	28ffff04 	addi	r3,r5,-4
100098f4:	3800041e 	bne	r7,zero,10009908 <__mdiff+0x148>
100098f8:	18ffff04 	addi	r3,r3,-4
100098fc:	19000017 	ldw	r4,0(r3)
10009900:	6b7fffc4 	addi	r13,r13,-1
10009904:	203ffc26 	beq	r4,zero,100098f8 <__alt_data_end+0xf80098f8>
10009908:	13400415 	stw	r13,16(r2)
1000990c:	dfc00417 	ldw	ra,16(sp)
10009910:	dcc00317 	ldw	r19,12(sp)
10009914:	dc800217 	ldw	r18,8(sp)
10009918:	dc400117 	ldw	r17,4(sp)
1000991c:	dc000017 	ldw	r16,0(sp)
10009920:	dec00504 	addi	sp,sp,20
10009924:	f800283a 	ret
10009928:	8005883a 	mov	r2,r16
1000992c:	04400044 	movi	r17,1
10009930:	9021883a 	mov	r16,r18
10009934:	1025883a 	mov	r18,r2
10009938:	003fb006 	br	100097fc <__alt_data_end+0xf80097fc>
1000993c:	9809883a 	mov	r4,r19
10009940:	000b883a 	mov	r5,zero
10009944:	0008de40 	call	10008de4 <_Balloc>
10009948:	00c00044 	movi	r3,1
1000994c:	10c00415 	stw	r3,16(r2)
10009950:	10000515 	stw	zero,20(r2)
10009954:	003fed06 	br	1000990c <__alt_data_end+0xf800990c>

10009958 <__ulp>:
10009958:	295ffc2c 	andhi	r5,r5,32752
1000995c:	00bf3034 	movhi	r2,64704
10009960:	2887883a 	add	r3,r5,r2
10009964:	00c0020e 	bge	zero,r3,10009970 <__ulp+0x18>
10009968:	0005883a 	mov	r2,zero
1000996c:	f800283a 	ret
10009970:	00c7c83a 	sub	r3,zero,r3
10009974:	180bd53a 	srai	r5,r3,20
10009978:	008004c4 	movi	r2,19
1000997c:	11400a0e 	bge	r2,r5,100099a8 <__ulp+0x50>
10009980:	00800c84 	movi	r2,50
10009984:	0007883a 	mov	r3,zero
10009988:	11400516 	blt	r2,r5,100099a0 <__ulp+0x48>
1000998c:	00800cc4 	movi	r2,51
10009990:	114bc83a 	sub	r5,r2,r5
10009994:	00800044 	movi	r2,1
10009998:	1144983a 	sll	r2,r2,r5
1000999c:	f800283a 	ret
100099a0:	00800044 	movi	r2,1
100099a4:	f800283a 	ret
100099a8:	00800234 	movhi	r2,8
100099ac:	1147d83a 	sra	r3,r2,r5
100099b0:	0005883a 	mov	r2,zero
100099b4:	f800283a 	ret

100099b8 <__b2d>:
100099b8:	defffa04 	addi	sp,sp,-24
100099bc:	dc000015 	stw	r16,0(sp)
100099c0:	24000417 	ldw	r16,16(r4)
100099c4:	dc400115 	stw	r17,4(sp)
100099c8:	24400504 	addi	r17,r4,20
100099cc:	8421883a 	add	r16,r16,r16
100099d0:	8421883a 	add	r16,r16,r16
100099d4:	8c21883a 	add	r16,r17,r16
100099d8:	dc800215 	stw	r18,8(sp)
100099dc:	84bfff17 	ldw	r18,-4(r16)
100099e0:	dd000415 	stw	r20,16(sp)
100099e4:	dcc00315 	stw	r19,12(sp)
100099e8:	9009883a 	mov	r4,r18
100099ec:	2829883a 	mov	r20,r5
100099f0:	dfc00515 	stw	ra,20(sp)
100099f4:	00090f40 	call	100090f4 <__hi0bits>
100099f8:	00c00804 	movi	r3,32
100099fc:	1887c83a 	sub	r3,r3,r2
10009a00:	a0c00015 	stw	r3,0(r20)
10009a04:	00c00284 	movi	r3,10
10009a08:	84ffff04 	addi	r19,r16,-4
10009a0c:	18801216 	blt	r3,r2,10009a58 <__b2d+0xa0>
10009a10:	014002c4 	movi	r5,11
10009a14:	2889c83a 	sub	r4,r5,r2
10009a18:	9106d83a 	srl	r3,r18,r4
10009a1c:	18cffc34 	orhi	r3,r3,16368
10009a20:	8cc0282e 	bgeu	r17,r19,10009ac4 <__b2d+0x10c>
10009a24:	817ffe17 	ldw	r5,-8(r16)
10009a28:	290ad83a 	srl	r5,r5,r4
10009a2c:	10800544 	addi	r2,r2,21
10009a30:	9084983a 	sll	r2,r18,r2
10009a34:	2884b03a 	or	r2,r5,r2
10009a38:	dfc00517 	ldw	ra,20(sp)
10009a3c:	dd000417 	ldw	r20,16(sp)
10009a40:	dcc00317 	ldw	r19,12(sp)
10009a44:	dc800217 	ldw	r18,8(sp)
10009a48:	dc400117 	ldw	r17,4(sp)
10009a4c:	dc000017 	ldw	r16,0(sp)
10009a50:	dec00604 	addi	sp,sp,24
10009a54:	f800283a 	ret
10009a58:	113ffd44 	addi	r4,r2,-11
10009a5c:	8cc00f2e 	bgeu	r17,r19,10009a9c <__b2d+0xe4>
10009a60:	81bffe04 	addi	r6,r16,-8
10009a64:	817ffe17 	ldw	r5,-8(r16)
10009a68:	20001326 	beq	r4,zero,10009ab8 <__b2d+0x100>
10009a6c:	00c00ac4 	movi	r3,43
10009a70:	1885c83a 	sub	r2,r3,r2
10009a74:	2886d83a 	srl	r3,r5,r2
10009a78:	9124983a 	sll	r18,r18,r4
10009a7c:	90e4b03a 	or	r18,r18,r3
10009a80:	90cffc34 	orhi	r3,r18,16368
10009a84:	8980112e 	bgeu	r17,r6,10009acc <__b2d+0x114>
10009a88:	81bffd17 	ldw	r6,-12(r16)
10009a8c:	308cd83a 	srl	r6,r6,r2
10009a90:	2904983a 	sll	r2,r5,r4
10009a94:	1184b03a 	or	r2,r2,r6
10009a98:	003fe706 	br	10009a38 <__alt_data_end+0xf8009a38>
10009a9c:	20000526 	beq	r4,zero,10009ab4 <__b2d+0xfc>
10009aa0:	9124983a 	sll	r18,r18,r4
10009aa4:	000d883a 	mov	r6,zero
10009aa8:	000b883a 	mov	r5,zero
10009aac:	90cffc34 	orhi	r3,r18,16368
10009ab0:	003ff706 	br	10009a90 <__alt_data_end+0xf8009a90>
10009ab4:	000b883a 	mov	r5,zero
10009ab8:	90cffc34 	orhi	r3,r18,16368
10009abc:	2805883a 	mov	r2,r5
10009ac0:	003fdd06 	br	10009a38 <__alt_data_end+0xf8009a38>
10009ac4:	000b883a 	mov	r5,zero
10009ac8:	003fd806 	br	10009a2c <__alt_data_end+0xf8009a2c>
10009acc:	000d883a 	mov	r6,zero
10009ad0:	003fef06 	br	10009a90 <__alt_data_end+0xf8009a90>

10009ad4 <__d2b>:
10009ad4:	defff704 	addi	sp,sp,-36
10009ad8:	dc000215 	stw	r16,8(sp)
10009adc:	3021883a 	mov	r16,r6
10009ae0:	dc400315 	stw	r17,12(sp)
10009ae4:	8022907a 	slli	r17,r16,1
10009ae8:	dd400715 	stw	r21,28(sp)
10009aec:	282b883a 	mov	r21,r5
10009af0:	01400044 	movi	r5,1
10009af4:	dd000615 	stw	r20,24(sp)
10009af8:	dcc00515 	stw	r19,20(sp)
10009afc:	dc800415 	stw	r18,16(sp)
10009b00:	dfc00815 	stw	ra,32(sp)
10009b04:	3829883a 	mov	r20,r7
10009b08:	dc800917 	ldw	r18,36(sp)
10009b0c:	8822d57a 	srli	r17,r17,21
10009b10:	0008de40 	call	10008de4 <_Balloc>
10009b14:	1027883a 	mov	r19,r2
10009b18:	00800434 	movhi	r2,16
10009b1c:	10bfffc4 	addi	r2,r2,-1
10009b20:	808c703a 	and	r6,r16,r2
10009b24:	88000126 	beq	r17,zero,10009b2c <__d2b+0x58>
10009b28:	31800434 	orhi	r6,r6,16
10009b2c:	d9800015 	stw	r6,0(sp)
10009b30:	a8001f26 	beq	r21,zero,10009bb0 <__d2b+0xdc>
10009b34:	d9000104 	addi	r4,sp,4
10009b38:	dd400115 	stw	r21,4(sp)
10009b3c:	000915c0 	call	1000915c <__lo0bits>
10009b40:	d8c00017 	ldw	r3,0(sp)
10009b44:	1000291e 	bne	r2,zero,10009bec <__d2b+0x118>
10009b48:	d9000117 	ldw	r4,4(sp)
10009b4c:	99000515 	stw	r4,20(r19)
10009b50:	1820c03a 	cmpne	r16,r3,zero
10009b54:	84000044 	addi	r16,r16,1
10009b58:	98c00615 	stw	r3,24(r19)
10009b5c:	9c000415 	stw	r16,16(r19)
10009b60:	88001b1e 	bne	r17,zero,10009bd0 <__d2b+0xfc>
10009b64:	800690ba 	slli	r3,r16,2
10009b68:	10bef384 	addi	r2,r2,-1074
10009b6c:	a0800015 	stw	r2,0(r20)
10009b70:	98c5883a 	add	r2,r19,r3
10009b74:	11000417 	ldw	r4,16(r2)
10009b78:	8020917a 	slli	r16,r16,5
10009b7c:	00090f40 	call	100090f4 <__hi0bits>
10009b80:	8085c83a 	sub	r2,r16,r2
10009b84:	90800015 	stw	r2,0(r18)
10009b88:	9805883a 	mov	r2,r19
10009b8c:	dfc00817 	ldw	ra,32(sp)
10009b90:	dd400717 	ldw	r21,28(sp)
10009b94:	dd000617 	ldw	r20,24(sp)
10009b98:	dcc00517 	ldw	r19,20(sp)
10009b9c:	dc800417 	ldw	r18,16(sp)
10009ba0:	dc400317 	ldw	r17,12(sp)
10009ba4:	dc000217 	ldw	r16,8(sp)
10009ba8:	dec00904 	addi	sp,sp,36
10009bac:	f800283a 	ret
10009bb0:	d809883a 	mov	r4,sp
10009bb4:	000915c0 	call	1000915c <__lo0bits>
10009bb8:	d8c00017 	ldw	r3,0(sp)
10009bbc:	04000044 	movi	r16,1
10009bc0:	9c000415 	stw	r16,16(r19)
10009bc4:	98c00515 	stw	r3,20(r19)
10009bc8:	10800804 	addi	r2,r2,32
10009bcc:	883fe526 	beq	r17,zero,10009b64 <__alt_data_end+0xf8009b64>
10009bd0:	8c7ef344 	addi	r17,r17,-1075
10009bd4:	88a3883a 	add	r17,r17,r2
10009bd8:	00c00d44 	movi	r3,53
10009bdc:	a4400015 	stw	r17,0(r20)
10009be0:	1885c83a 	sub	r2,r3,r2
10009be4:	90800015 	stw	r2,0(r18)
10009be8:	003fe706 	br	10009b88 <__alt_data_end+0xf8009b88>
10009bec:	01000804 	movi	r4,32
10009bf0:	2089c83a 	sub	r4,r4,r2
10009bf4:	1908983a 	sll	r4,r3,r4
10009bf8:	d9400117 	ldw	r5,4(sp)
10009bfc:	1886d83a 	srl	r3,r3,r2
10009c00:	2148b03a 	or	r4,r4,r5
10009c04:	99000515 	stw	r4,20(r19)
10009c08:	d8c00015 	stw	r3,0(sp)
10009c0c:	003fd006 	br	10009b50 <__alt_data_end+0xf8009b50>

10009c10 <__ratio>:
10009c10:	defff904 	addi	sp,sp,-28
10009c14:	dc400315 	stw	r17,12(sp)
10009c18:	2823883a 	mov	r17,r5
10009c1c:	d9400104 	addi	r5,sp,4
10009c20:	dfc00615 	stw	ra,24(sp)
10009c24:	dcc00515 	stw	r19,20(sp)
10009c28:	dc800415 	stw	r18,16(sp)
10009c2c:	2027883a 	mov	r19,r4
10009c30:	dc000215 	stw	r16,8(sp)
10009c34:	00099b80 	call	100099b8 <__b2d>
10009c38:	8809883a 	mov	r4,r17
10009c3c:	d80b883a 	mov	r5,sp
10009c40:	1025883a 	mov	r18,r2
10009c44:	1821883a 	mov	r16,r3
10009c48:	00099b80 	call	100099b8 <__b2d>
10009c4c:	8a400417 	ldw	r9,16(r17)
10009c50:	9a000417 	ldw	r8,16(r19)
10009c54:	100d883a 	mov	r6,r2
10009c58:	d8800017 	ldw	r2,0(sp)
10009c5c:	4251c83a 	sub	r8,r8,r9
10009c60:	4012917a 	slli	r9,r8,5
10009c64:	da000117 	ldw	r8,4(sp)
10009c68:	4091c83a 	sub	r8,r8,r2
10009c6c:	4251883a 	add	r8,r8,r9
10009c70:	02000d0e 	bge	zero,r8,10009ca8 <__ratio+0x98>
10009c74:	4010953a 	slli	r8,r8,20
10009c78:	4421883a 	add	r16,r8,r16
10009c7c:	9009883a 	mov	r4,r18
10009c80:	800b883a 	mov	r5,r16
10009c84:	180f883a 	mov	r7,r3
10009c88:	000ccc00 	call	1000ccc0 <__divdf3>
10009c8c:	dfc00617 	ldw	ra,24(sp)
10009c90:	dcc00517 	ldw	r19,20(sp)
10009c94:	dc800417 	ldw	r18,16(sp)
10009c98:	dc400317 	ldw	r17,12(sp)
10009c9c:	dc000217 	ldw	r16,8(sp)
10009ca0:	dec00704 	addi	sp,sp,28
10009ca4:	f800283a 	ret
10009ca8:	4010953a 	slli	r8,r8,20
10009cac:	1a07c83a 	sub	r3,r3,r8
10009cb0:	003ff206 	br	10009c7c <__alt_data_end+0xf8009c7c>

10009cb4 <_mprec_log10>:
10009cb4:	defffe04 	addi	sp,sp,-8
10009cb8:	dc000015 	stw	r16,0(sp)
10009cbc:	dfc00115 	stw	ra,4(sp)
10009cc0:	008005c4 	movi	r2,23
10009cc4:	2021883a 	mov	r16,r4
10009cc8:	11000d0e 	bge	r2,r4,10009d00 <_mprec_log10+0x4c>
10009ccc:	0005883a 	mov	r2,zero
10009cd0:	00cffc34 	movhi	r3,16368
10009cd4:	843fffc4 	addi	r16,r16,-1
10009cd8:	1009883a 	mov	r4,r2
10009cdc:	180b883a 	mov	r5,r3
10009ce0:	000d883a 	mov	r6,zero
10009ce4:	01d00934 	movhi	r7,16420
10009ce8:	000d8840 	call	1000d884 <__muldf3>
10009cec:	803ff91e 	bne	r16,zero,10009cd4 <__alt_data_end+0xf8009cd4>
10009cf0:	dfc00117 	ldw	ra,4(sp)
10009cf4:	dc000017 	ldw	r16,0(sp)
10009cf8:	dec00204 	addi	sp,sp,8
10009cfc:	f800283a 	ret
10009d00:	202090fa 	slli	r16,r4,3
10009d04:	00840074 	movhi	r2,4097
10009d08:	1082b904 	addi	r2,r2,2788
10009d0c:	1421883a 	add	r16,r2,r16
10009d10:	80800017 	ldw	r2,0(r16)
10009d14:	80c00117 	ldw	r3,4(r16)
10009d18:	dfc00117 	ldw	ra,4(sp)
10009d1c:	dc000017 	ldw	r16,0(sp)
10009d20:	dec00204 	addi	sp,sp,8
10009d24:	f800283a 	ret

10009d28 <__copybits>:
10009d28:	297fffc4 	addi	r5,r5,-1
10009d2c:	280fd17a 	srai	r7,r5,5
10009d30:	30c00417 	ldw	r3,16(r6)
10009d34:	30800504 	addi	r2,r6,20
10009d38:	39c00044 	addi	r7,r7,1
10009d3c:	18c7883a 	add	r3,r3,r3
10009d40:	39cf883a 	add	r7,r7,r7
10009d44:	18c7883a 	add	r3,r3,r3
10009d48:	39cf883a 	add	r7,r7,r7
10009d4c:	10c7883a 	add	r3,r2,r3
10009d50:	21cf883a 	add	r7,r4,r7
10009d54:	10c00d2e 	bgeu	r2,r3,10009d8c <__copybits+0x64>
10009d58:	200b883a 	mov	r5,r4
10009d5c:	12000017 	ldw	r8,0(r2)
10009d60:	29400104 	addi	r5,r5,4
10009d64:	10800104 	addi	r2,r2,4
10009d68:	2a3fff15 	stw	r8,-4(r5)
10009d6c:	10fffb36 	bltu	r2,r3,10009d5c <__alt_data_end+0xf8009d5c>
10009d70:	1985c83a 	sub	r2,r3,r6
10009d74:	10bffac4 	addi	r2,r2,-21
10009d78:	1004d0ba 	srli	r2,r2,2
10009d7c:	10800044 	addi	r2,r2,1
10009d80:	1085883a 	add	r2,r2,r2
10009d84:	1085883a 	add	r2,r2,r2
10009d88:	2089883a 	add	r4,r4,r2
10009d8c:	21c0032e 	bgeu	r4,r7,10009d9c <__copybits+0x74>
10009d90:	20000015 	stw	zero,0(r4)
10009d94:	21000104 	addi	r4,r4,4
10009d98:	21fffd36 	bltu	r4,r7,10009d90 <__alt_data_end+0xf8009d90>
10009d9c:	f800283a 	ret

10009da0 <__any_on>:
10009da0:	20c00417 	ldw	r3,16(r4)
10009da4:	2805d17a 	srai	r2,r5,5
10009da8:	21000504 	addi	r4,r4,20
10009dac:	18800d0e 	bge	r3,r2,10009de4 <__any_on+0x44>
10009db0:	18c7883a 	add	r3,r3,r3
10009db4:	18c7883a 	add	r3,r3,r3
10009db8:	20c7883a 	add	r3,r4,r3
10009dbc:	20c0192e 	bgeu	r4,r3,10009e24 <__any_on+0x84>
10009dc0:	18bfff17 	ldw	r2,-4(r3)
10009dc4:	18ffff04 	addi	r3,r3,-4
10009dc8:	1000041e 	bne	r2,zero,10009ddc <__any_on+0x3c>
10009dcc:	20c0142e 	bgeu	r4,r3,10009e20 <__any_on+0x80>
10009dd0:	18ffff04 	addi	r3,r3,-4
10009dd4:	19400017 	ldw	r5,0(r3)
10009dd8:	283ffc26 	beq	r5,zero,10009dcc <__alt_data_end+0xf8009dcc>
10009ddc:	00800044 	movi	r2,1
10009de0:	f800283a 	ret
10009de4:	10c00a0e 	bge	r2,r3,10009e10 <__any_on+0x70>
10009de8:	1085883a 	add	r2,r2,r2
10009dec:	1085883a 	add	r2,r2,r2
10009df0:	294007cc 	andi	r5,r5,31
10009df4:	2087883a 	add	r3,r4,r2
10009df8:	283ff026 	beq	r5,zero,10009dbc <__alt_data_end+0xf8009dbc>
10009dfc:	19800017 	ldw	r6,0(r3)
10009e00:	3144d83a 	srl	r2,r6,r5
10009e04:	114a983a 	sll	r5,r2,r5
10009e08:	29bff41e 	bne	r5,r6,10009ddc <__alt_data_end+0xf8009ddc>
10009e0c:	003feb06 	br	10009dbc <__alt_data_end+0xf8009dbc>
10009e10:	1085883a 	add	r2,r2,r2
10009e14:	1085883a 	add	r2,r2,r2
10009e18:	2087883a 	add	r3,r4,r2
10009e1c:	003fe706 	br	10009dbc <__alt_data_end+0xf8009dbc>
10009e20:	f800283a 	ret
10009e24:	0005883a 	mov	r2,zero
10009e28:	f800283a 	ret

10009e2c <__fpclassifyd>:
10009e2c:	00a00034 	movhi	r2,32768
10009e30:	10bfffc4 	addi	r2,r2,-1
10009e34:	2884703a 	and	r2,r5,r2
10009e38:	10000726 	beq	r2,zero,10009e58 <__fpclassifyd+0x2c>
10009e3c:	00fffc34 	movhi	r3,65520
10009e40:	019ff834 	movhi	r6,32736
10009e44:	28c7883a 	add	r3,r5,r3
10009e48:	31bfffc4 	addi	r6,r6,-1
10009e4c:	30c00536 	bltu	r6,r3,10009e64 <__fpclassifyd+0x38>
10009e50:	00800104 	movi	r2,4
10009e54:	f800283a 	ret
10009e58:	2000021e 	bne	r4,zero,10009e64 <__fpclassifyd+0x38>
10009e5c:	00800084 	movi	r2,2
10009e60:	f800283a 	ret
10009e64:	00dffc34 	movhi	r3,32752
10009e68:	019ff834 	movhi	r6,32736
10009e6c:	28cb883a 	add	r5,r5,r3
10009e70:	31bfffc4 	addi	r6,r6,-1
10009e74:	317ff62e 	bgeu	r6,r5,10009e50 <__alt_data_end+0xf8009e50>
10009e78:	01400434 	movhi	r5,16
10009e7c:	297fffc4 	addi	r5,r5,-1
10009e80:	28800236 	bltu	r5,r2,10009e8c <__fpclassifyd+0x60>
10009e84:	008000c4 	movi	r2,3
10009e88:	f800283a 	ret
10009e8c:	10c00226 	beq	r2,r3,10009e98 <__fpclassifyd+0x6c>
10009e90:	0005883a 	mov	r2,zero
10009e94:	f800283a 	ret
10009e98:	2005003a 	cmpeq	r2,r4,zero
10009e9c:	f800283a 	ret

10009ea0 <_sbrk_r>:
10009ea0:	defffd04 	addi	sp,sp,-12
10009ea4:	dc000015 	stw	r16,0(sp)
10009ea8:	04040074 	movhi	r16,4097
10009eac:	dc400115 	stw	r17,4(sp)
10009eb0:	84108304 	addi	r16,r16,16908
10009eb4:	2023883a 	mov	r17,r4
10009eb8:	2809883a 	mov	r4,r5
10009ebc:	dfc00215 	stw	ra,8(sp)
10009ec0:	80000015 	stw	zero,0(r16)
10009ec4:	000e9880 	call	1000e988 <sbrk>
10009ec8:	00ffffc4 	movi	r3,-1
10009ecc:	10c00526 	beq	r2,r3,10009ee4 <_sbrk_r+0x44>
10009ed0:	dfc00217 	ldw	ra,8(sp)
10009ed4:	dc400117 	ldw	r17,4(sp)
10009ed8:	dc000017 	ldw	r16,0(sp)
10009edc:	dec00304 	addi	sp,sp,12
10009ee0:	f800283a 	ret
10009ee4:	80c00017 	ldw	r3,0(r16)
10009ee8:	183ff926 	beq	r3,zero,10009ed0 <__alt_data_end+0xf8009ed0>
10009eec:	88c00015 	stw	r3,0(r17)
10009ef0:	003ff706 	br	10009ed0 <__alt_data_end+0xf8009ed0>

10009ef4 <__sread>:
10009ef4:	defffe04 	addi	sp,sp,-8
10009ef8:	dc000015 	stw	r16,0(sp)
10009efc:	2821883a 	mov	r16,r5
10009f00:	2940038f 	ldh	r5,14(r5)
10009f04:	dfc00115 	stw	ra,4(sp)
10009f08:	000c2480 	call	1000c248 <_read_r>
10009f0c:	10000716 	blt	r2,zero,10009f2c <__sread+0x38>
10009f10:	80c01417 	ldw	r3,80(r16)
10009f14:	1887883a 	add	r3,r3,r2
10009f18:	80c01415 	stw	r3,80(r16)
10009f1c:	dfc00117 	ldw	ra,4(sp)
10009f20:	dc000017 	ldw	r16,0(sp)
10009f24:	dec00204 	addi	sp,sp,8
10009f28:	f800283a 	ret
10009f2c:	80c0030b 	ldhu	r3,12(r16)
10009f30:	18fbffcc 	andi	r3,r3,61439
10009f34:	80c0030d 	sth	r3,12(r16)
10009f38:	dfc00117 	ldw	ra,4(sp)
10009f3c:	dc000017 	ldw	r16,0(sp)
10009f40:	dec00204 	addi	sp,sp,8
10009f44:	f800283a 	ret

10009f48 <__seofread>:
10009f48:	0005883a 	mov	r2,zero
10009f4c:	f800283a 	ret

10009f50 <__swrite>:
10009f50:	2880030b 	ldhu	r2,12(r5)
10009f54:	defffb04 	addi	sp,sp,-20
10009f58:	dcc00315 	stw	r19,12(sp)
10009f5c:	dc800215 	stw	r18,8(sp)
10009f60:	dc400115 	stw	r17,4(sp)
10009f64:	dc000015 	stw	r16,0(sp)
10009f68:	dfc00415 	stw	ra,16(sp)
10009f6c:	10c0400c 	andi	r3,r2,256
10009f70:	2821883a 	mov	r16,r5
10009f74:	2027883a 	mov	r19,r4
10009f78:	3025883a 	mov	r18,r6
10009f7c:	3823883a 	mov	r17,r7
10009f80:	18000526 	beq	r3,zero,10009f98 <__swrite+0x48>
10009f84:	2940038f 	ldh	r5,14(r5)
10009f88:	000d883a 	mov	r6,zero
10009f8c:	01c00084 	movi	r7,2
10009f90:	000c0900 	call	1000c090 <_lseek_r>
10009f94:	8080030b 	ldhu	r2,12(r16)
10009f98:	8140038f 	ldh	r5,14(r16)
10009f9c:	10bbffcc 	andi	r2,r2,61439
10009fa0:	9809883a 	mov	r4,r19
10009fa4:	900d883a 	mov	r6,r18
10009fa8:	880f883a 	mov	r7,r17
10009fac:	8080030d 	sth	r2,12(r16)
10009fb0:	dfc00417 	ldw	ra,16(sp)
10009fb4:	dcc00317 	ldw	r19,12(sp)
10009fb8:	dc800217 	ldw	r18,8(sp)
10009fbc:	dc400117 	ldw	r17,4(sp)
10009fc0:	dc000017 	ldw	r16,0(sp)
10009fc4:	dec00504 	addi	sp,sp,20
10009fc8:	000b6c81 	jmpi	1000b6c8 <_write_r>

10009fcc <__sseek>:
10009fcc:	defffe04 	addi	sp,sp,-8
10009fd0:	dc000015 	stw	r16,0(sp)
10009fd4:	2821883a 	mov	r16,r5
10009fd8:	2940038f 	ldh	r5,14(r5)
10009fdc:	dfc00115 	stw	ra,4(sp)
10009fe0:	000c0900 	call	1000c090 <_lseek_r>
10009fe4:	00ffffc4 	movi	r3,-1
10009fe8:	10c00826 	beq	r2,r3,1000a00c <__sseek+0x40>
10009fec:	80c0030b 	ldhu	r3,12(r16)
10009ff0:	80801415 	stw	r2,80(r16)
10009ff4:	18c40014 	ori	r3,r3,4096
10009ff8:	80c0030d 	sth	r3,12(r16)
10009ffc:	dfc00117 	ldw	ra,4(sp)
1000a000:	dc000017 	ldw	r16,0(sp)
1000a004:	dec00204 	addi	sp,sp,8
1000a008:	f800283a 	ret
1000a00c:	80c0030b 	ldhu	r3,12(r16)
1000a010:	18fbffcc 	andi	r3,r3,61439
1000a014:	80c0030d 	sth	r3,12(r16)
1000a018:	dfc00117 	ldw	ra,4(sp)
1000a01c:	dc000017 	ldw	r16,0(sp)
1000a020:	dec00204 	addi	sp,sp,8
1000a024:	f800283a 	ret

1000a028 <__sclose>:
1000a028:	2940038f 	ldh	r5,14(r5)
1000a02c:	000b7241 	jmpi	1000b724 <_close_r>

1000a030 <strcmp>:
1000a030:	2144b03a 	or	r2,r4,r5
1000a034:	108000cc 	andi	r2,r2,3
1000a038:	1000171e 	bne	r2,zero,1000a098 <strcmp+0x68>
1000a03c:	20800017 	ldw	r2,0(r4)
1000a040:	28c00017 	ldw	r3,0(r5)
1000a044:	10c0141e 	bne	r2,r3,1000a098 <strcmp+0x68>
1000a048:	027fbff4 	movhi	r9,65279
1000a04c:	4a7fbfc4 	addi	r9,r9,-257
1000a050:	0086303a 	nor	r3,zero,r2
1000a054:	02202074 	movhi	r8,32897
1000a058:	1245883a 	add	r2,r2,r9
1000a05c:	42202004 	addi	r8,r8,-32640
1000a060:	10c4703a 	and	r2,r2,r3
1000a064:	1204703a 	and	r2,r2,r8
1000a068:	10000226 	beq	r2,zero,1000a074 <strcmp+0x44>
1000a06c:	00001706 	br	1000a0cc <strcmp+0x9c>
1000a070:	1000161e 	bne	r2,zero,1000a0cc <strcmp+0x9c>
1000a074:	21000104 	addi	r4,r4,4
1000a078:	20c00017 	ldw	r3,0(r4)
1000a07c:	29400104 	addi	r5,r5,4
1000a080:	29800017 	ldw	r6,0(r5)
1000a084:	1a4f883a 	add	r7,r3,r9
1000a088:	00c4303a 	nor	r2,zero,r3
1000a08c:	3884703a 	and	r2,r7,r2
1000a090:	1204703a 	and	r2,r2,r8
1000a094:	19bff626 	beq	r3,r6,1000a070 <__alt_data_end+0xf800a070>
1000a098:	20800007 	ldb	r2,0(r4)
1000a09c:	1000051e 	bne	r2,zero,1000a0b4 <strcmp+0x84>
1000a0a0:	00000606 	br	1000a0bc <strcmp+0x8c>
1000a0a4:	21000044 	addi	r4,r4,1
1000a0a8:	20800007 	ldb	r2,0(r4)
1000a0ac:	29400044 	addi	r5,r5,1
1000a0b0:	10000226 	beq	r2,zero,1000a0bc <strcmp+0x8c>
1000a0b4:	28c00007 	ldb	r3,0(r5)
1000a0b8:	10fffa26 	beq	r2,r3,1000a0a4 <__alt_data_end+0xf800a0a4>
1000a0bc:	20800003 	ldbu	r2,0(r4)
1000a0c0:	28c00003 	ldbu	r3,0(r5)
1000a0c4:	10c5c83a 	sub	r2,r2,r3
1000a0c8:	f800283a 	ret
1000a0cc:	0005883a 	mov	r2,zero
1000a0d0:	f800283a 	ret

1000a0d4 <strlen>:
1000a0d4:	208000cc 	andi	r2,r4,3
1000a0d8:	10002026 	beq	r2,zero,1000a15c <strlen+0x88>
1000a0dc:	20800007 	ldb	r2,0(r4)
1000a0e0:	10002026 	beq	r2,zero,1000a164 <strlen+0x90>
1000a0e4:	2005883a 	mov	r2,r4
1000a0e8:	00000206 	br	1000a0f4 <strlen+0x20>
1000a0ec:	10c00007 	ldb	r3,0(r2)
1000a0f0:	18001826 	beq	r3,zero,1000a154 <strlen+0x80>
1000a0f4:	10800044 	addi	r2,r2,1
1000a0f8:	10c000cc 	andi	r3,r2,3
1000a0fc:	183ffb1e 	bne	r3,zero,1000a0ec <__alt_data_end+0xf800a0ec>
1000a100:	10c00017 	ldw	r3,0(r2)
1000a104:	01ffbff4 	movhi	r7,65279
1000a108:	39ffbfc4 	addi	r7,r7,-257
1000a10c:	00ca303a 	nor	r5,zero,r3
1000a110:	01a02074 	movhi	r6,32897
1000a114:	19c7883a 	add	r3,r3,r7
1000a118:	31a02004 	addi	r6,r6,-32640
1000a11c:	1946703a 	and	r3,r3,r5
1000a120:	1986703a 	and	r3,r3,r6
1000a124:	1800091e 	bne	r3,zero,1000a14c <strlen+0x78>
1000a128:	10800104 	addi	r2,r2,4
1000a12c:	10c00017 	ldw	r3,0(r2)
1000a130:	19cb883a 	add	r5,r3,r7
1000a134:	00c6303a 	nor	r3,zero,r3
1000a138:	28c6703a 	and	r3,r5,r3
1000a13c:	1986703a 	and	r3,r3,r6
1000a140:	183ff926 	beq	r3,zero,1000a128 <__alt_data_end+0xf800a128>
1000a144:	00000106 	br	1000a14c <strlen+0x78>
1000a148:	10800044 	addi	r2,r2,1
1000a14c:	10c00007 	ldb	r3,0(r2)
1000a150:	183ffd1e 	bne	r3,zero,1000a148 <__alt_data_end+0xf800a148>
1000a154:	1105c83a 	sub	r2,r2,r4
1000a158:	f800283a 	ret
1000a15c:	2005883a 	mov	r2,r4
1000a160:	003fe706 	br	1000a100 <__alt_data_end+0xf800a100>
1000a164:	0005883a 	mov	r2,zero
1000a168:	f800283a 	ret

1000a16c <__sprint_r.part.0>:
1000a16c:	28801917 	ldw	r2,100(r5)
1000a170:	defff604 	addi	sp,sp,-40
1000a174:	dd400515 	stw	r21,20(sp)
1000a178:	dcc00315 	stw	r19,12(sp)
1000a17c:	dfc00915 	stw	ra,36(sp)
1000a180:	df000815 	stw	fp,32(sp)
1000a184:	ddc00715 	stw	r23,28(sp)
1000a188:	dd800615 	stw	r22,24(sp)
1000a18c:	dd000415 	stw	r20,16(sp)
1000a190:	dc800215 	stw	r18,8(sp)
1000a194:	dc400115 	stw	r17,4(sp)
1000a198:	dc000015 	stw	r16,0(sp)
1000a19c:	1088000c 	andi	r2,r2,8192
1000a1a0:	2827883a 	mov	r19,r5
1000a1a4:	302b883a 	mov	r21,r6
1000a1a8:	10002d26 	beq	r2,zero,1000a260 <__sprint_r.part.0+0xf4>
1000a1ac:	30800217 	ldw	r2,8(r6)
1000a1b0:	35800017 	ldw	r22,0(r6)
1000a1b4:	10002826 	beq	r2,zero,1000a258 <__sprint_r.part.0+0xec>
1000a1b8:	2029883a 	mov	r20,r4
1000a1bc:	b5c00104 	addi	r23,r22,4
1000a1c0:	04bfffc4 	movi	r18,-1
1000a1c4:	bc400017 	ldw	r17,0(r23)
1000a1c8:	b4000017 	ldw	r16,0(r22)
1000a1cc:	0039883a 	mov	fp,zero
1000a1d0:	8822d0ba 	srli	r17,r17,2
1000a1d4:	04400316 	blt	zero,r17,1000a1e4 <__sprint_r.part.0+0x78>
1000a1d8:	00001706 	br	1000a238 <__sprint_r.part.0+0xcc>
1000a1dc:	84000104 	addi	r16,r16,4
1000a1e0:	8f001526 	beq	r17,fp,1000a238 <__sprint_r.part.0+0xcc>
1000a1e4:	81400017 	ldw	r5,0(r16)
1000a1e8:	a009883a 	mov	r4,r20
1000a1ec:	980d883a 	mov	r6,r19
1000a1f0:	000b9640 	call	1000b964 <_fputwc_r>
1000a1f4:	e7000044 	addi	fp,fp,1
1000a1f8:	14bff81e 	bne	r2,r18,1000a1dc <__alt_data_end+0xf800a1dc>
1000a1fc:	9005883a 	mov	r2,r18
1000a200:	a8000215 	stw	zero,8(r21)
1000a204:	a8000115 	stw	zero,4(r21)
1000a208:	dfc00917 	ldw	ra,36(sp)
1000a20c:	df000817 	ldw	fp,32(sp)
1000a210:	ddc00717 	ldw	r23,28(sp)
1000a214:	dd800617 	ldw	r22,24(sp)
1000a218:	dd400517 	ldw	r21,20(sp)
1000a21c:	dd000417 	ldw	r20,16(sp)
1000a220:	dcc00317 	ldw	r19,12(sp)
1000a224:	dc800217 	ldw	r18,8(sp)
1000a228:	dc400117 	ldw	r17,4(sp)
1000a22c:	dc000017 	ldw	r16,0(sp)
1000a230:	dec00a04 	addi	sp,sp,40
1000a234:	f800283a 	ret
1000a238:	a8c00217 	ldw	r3,8(r21)
1000a23c:	8c63883a 	add	r17,r17,r17
1000a240:	8c63883a 	add	r17,r17,r17
1000a244:	1c45c83a 	sub	r2,r3,r17
1000a248:	a8800215 	stw	r2,8(r21)
1000a24c:	b5800204 	addi	r22,r22,8
1000a250:	bdc00204 	addi	r23,r23,8
1000a254:	103fdb1e 	bne	r2,zero,1000a1c4 <__alt_data_end+0xf800a1c4>
1000a258:	0005883a 	mov	r2,zero
1000a25c:	003fe806 	br	1000a200 <__alt_data_end+0xf800a200>
1000a260:	000bb980 	call	1000bb98 <__sfvwrite_r>
1000a264:	003fe606 	br	1000a200 <__alt_data_end+0xf800a200>

1000a268 <__sprint_r>:
1000a268:	30c00217 	ldw	r3,8(r6)
1000a26c:	18000126 	beq	r3,zero,1000a274 <__sprint_r+0xc>
1000a270:	000a16c1 	jmpi	1000a16c <__sprint_r.part.0>
1000a274:	30000115 	stw	zero,4(r6)
1000a278:	0005883a 	mov	r2,zero
1000a27c:	f800283a 	ret

1000a280 <___vfiprintf_internal_r>:
1000a280:	defeca04 	addi	sp,sp,-1240
1000a284:	dcc12f15 	stw	r19,1212(sp)
1000a288:	dfc13515 	stw	ra,1236(sp)
1000a28c:	df013415 	stw	fp,1232(sp)
1000a290:	ddc13315 	stw	r23,1228(sp)
1000a294:	dd813215 	stw	r22,1224(sp)
1000a298:	dd413115 	stw	r21,1220(sp)
1000a29c:	dd013015 	stw	r20,1216(sp)
1000a2a0:	dc812e15 	stw	r18,1208(sp)
1000a2a4:	dc412d15 	stw	r17,1204(sp)
1000a2a8:	dc012c15 	stw	r16,1200(sp)
1000a2ac:	d9012115 	stw	r4,1156(sp)
1000a2b0:	d9412015 	stw	r5,1152(sp)
1000a2b4:	d9c12315 	stw	r7,1164(sp)
1000a2b8:	3027883a 	mov	r19,r6
1000a2bc:	20000226 	beq	r4,zero,1000a2c8 <___vfiprintf_internal_r+0x48>
1000a2c0:	20800e17 	ldw	r2,56(r4)
1000a2c4:	1000f726 	beq	r2,zero,1000a6a4 <___vfiprintf_internal_r+0x424>
1000a2c8:	d8812017 	ldw	r2,1152(sp)
1000a2cc:	10c0030b 	ldhu	r3,12(r2)
1000a2d0:	1908000c 	andi	r4,r3,8192
1000a2d4:	1805883a 	mov	r2,r3
1000a2d8:	2000081e 	bne	r4,zero,1000a2fc <___vfiprintf_internal_r+0x7c>
1000a2dc:	d9412017 	ldw	r5,1152(sp)
1000a2e0:	18880014 	ori	r2,r3,8192
1000a2e4:	00f7ffc4 	movi	r3,-8193
1000a2e8:	29001917 	ldw	r4,100(r5)
1000a2ec:	2880030d 	sth	r2,12(r5)
1000a2f0:	20c8703a 	and	r4,r4,r3
1000a2f4:	29001915 	stw	r4,100(r5)
1000a2f8:	1007883a 	mov	r3,r2
1000a2fc:	1100020c 	andi	r4,r2,8
1000a300:	2000a726 	beq	r4,zero,1000a5a0 <___vfiprintf_internal_r+0x320>
1000a304:	d9412017 	ldw	r5,1152(sp)
1000a308:	29000417 	ldw	r4,16(r5)
1000a30c:	2000a426 	beq	r4,zero,1000a5a0 <___vfiprintf_internal_r+0x320>
1000a310:	1080068c 	andi	r2,r2,26
1000a314:	01000284 	movi	r4,10
1000a318:	1100ab26 	beq	r2,r4,1000a5c8 <___vfiprintf_internal_r+0x348>
1000a31c:	d9010a04 	addi	r4,sp,1064
1000a320:	d94109c4 	addi	r5,sp,1063
1000a324:	07040074 	movhi	fp,4097
1000a328:	04440074 	movhi	r17,4097
1000a32c:	2145c83a 	sub	r2,r4,r5
1000a330:	e702ef04 	addi	fp,fp,3004
1000a334:	8c42eb04 	addi	r17,r17,2988
1000a338:	d9011e15 	stw	r4,1144(sp)
1000a33c:	d9411f15 	stw	r5,1148(sp)
1000a340:	dec11a15 	stw	sp,1128(sp)
1000a344:	d8011c15 	stw	zero,1136(sp)
1000a348:	d8011b15 	stw	zero,1132(sp)
1000a34c:	d8012715 	stw	zero,1180(sp)
1000a350:	d8012515 	stw	zero,1172(sp)
1000a354:	d811883a 	mov	r8,sp
1000a358:	d8812815 	stw	r2,1184(sp)
1000a35c:	982f883a 	mov	r23,r19
1000a360:	b8800007 	ldb	r2,0(r23)
1000a364:	1003b026 	beq	r2,zero,1000b228 <___vfiprintf_internal_r+0xfa8>
1000a368:	01000944 	movi	r4,37
1000a36c:	1103ae26 	beq	r2,r4,1000b228 <___vfiprintf_internal_r+0xfa8>
1000a370:	b805883a 	mov	r2,r23
1000a374:	00000106 	br	1000a37c <___vfiprintf_internal_r+0xfc>
1000a378:	19000326 	beq	r3,r4,1000a388 <___vfiprintf_internal_r+0x108>
1000a37c:	10800044 	addi	r2,r2,1
1000a380:	10c00007 	ldb	r3,0(r2)
1000a384:	183ffc1e 	bne	r3,zero,1000a378 <__alt_data_end+0xf800a378>
1000a388:	15e1c83a 	sub	r16,r2,r23
1000a38c:	1029883a 	mov	r20,r2
1000a390:	80001026 	beq	r16,zero,1000a3d4 <___vfiprintf_internal_r+0x154>
1000a394:	d8c11c17 	ldw	r3,1136(sp)
1000a398:	d8811b17 	ldw	r2,1132(sp)
1000a39c:	45c00015 	stw	r23,0(r8)
1000a3a0:	80c7883a 	add	r3,r16,r3
1000a3a4:	10800044 	addi	r2,r2,1
1000a3a8:	44000115 	stw	r16,4(r8)
1000a3ac:	d8c11c15 	stw	r3,1136(sp)
1000a3b0:	d8811b15 	stw	r2,1132(sp)
1000a3b4:	010001c4 	movi	r4,7
1000a3b8:	2080740e 	bge	r4,r2,1000a58c <___vfiprintf_internal_r+0x30c>
1000a3bc:	1803a71e 	bne	r3,zero,1000b25c <___vfiprintf_internal_r+0xfdc>
1000a3c0:	d8c12517 	ldw	r3,1172(sp)
1000a3c4:	d8011b15 	stw	zero,1132(sp)
1000a3c8:	d811883a 	mov	r8,sp
1000a3cc:	1c07883a 	add	r3,r3,r16
1000a3d0:	d8c12515 	stw	r3,1172(sp)
1000a3d4:	a0800007 	ldb	r2,0(r20)
1000a3d8:	1002bf26 	beq	r2,zero,1000aed8 <___vfiprintf_internal_r+0xc58>
1000a3dc:	a5c00044 	addi	r23,r20,1
1000a3e0:	a1800047 	ldb	r6,1(r20)
1000a3e4:	d8011d85 	stb	zero,1142(sp)
1000a3e8:	d8012205 	stb	zero,1160(sp)
1000a3ec:	043fffc4 	movi	r16,-1
1000a3f0:	d8012415 	stw	zero,1168(sp)
1000a3f4:	0025883a 	mov	r18,zero
1000a3f8:	05001604 	movi	r20,88
1000a3fc:	05400244 	movi	r21,9
1000a400:	4027883a 	mov	r19,r8
1000a404:	bdc00044 	addi	r23,r23,1
1000a408:	30bff804 	addi	r2,r6,-32
1000a40c:	a0825636 	bltu	r20,r2,1000ad68 <___vfiprintf_internal_r+0xae8>
1000a410:	100490ba 	slli	r2,r2,2
1000a414:	01040074 	movhi	r4,4097
1000a418:	21290a04 	addi	r4,r4,-23512
1000a41c:	1105883a 	add	r2,r2,r4
1000a420:	10800017 	ldw	r2,0(r2)
1000a424:	1000683a 	jmp	r2
1000a428:	1000acf8 	rdprs	zero,r2,691
1000a42c:	1000ad68 	cmpgeui	zero,r2,693
1000a430:	1000ad68 	cmpgeui	zero,r2,693
1000a434:	1000ad5c 	xori	zero,r2,693
1000a438:	1000ad68 	cmpgeui	zero,r2,693
1000a43c:	1000ad68 	cmpgeui	zero,r2,693
1000a440:	1000ad68 	cmpgeui	zero,r2,693
1000a444:	1000ad68 	cmpgeui	zero,r2,693
1000a448:	1000ad68 	cmpgeui	zero,r2,693
1000a44c:	1000ad68 	cmpgeui	zero,r2,693
1000a450:	1000aae8 	cmpgeui	zero,r2,683
1000a454:	1000ad10 	cmplti	zero,r2,692
1000a458:	1000ad68 	cmpgeui	zero,r2,693
1000a45c:	1000a6bc 	xorhi	zero,r2,666
1000a460:	1000ab0c 	andi	zero,r2,684
1000a464:	1000ad68 	cmpgeui	zero,r2,693
1000a468:	1000a6c8 	cmpgei	zero,r2,667
1000a46c:	1000a6d4 	ori	zero,r2,667
1000a470:	1000a6d4 	ori	zero,r2,667
1000a474:	1000a6d4 	ori	zero,r2,667
1000a478:	1000a6d4 	ori	zero,r2,667
1000a47c:	1000a6d4 	ori	zero,r2,667
1000a480:	1000a6d4 	ori	zero,r2,667
1000a484:	1000a6d4 	ori	zero,r2,667
1000a488:	1000a6d4 	ori	zero,r2,667
1000a48c:	1000a6d4 	ori	zero,r2,667
1000a490:	1000ad68 	cmpgeui	zero,r2,693
1000a494:	1000ad68 	cmpgeui	zero,r2,693
1000a498:	1000ad68 	cmpgeui	zero,r2,693
1000a49c:	1000ad68 	cmpgeui	zero,r2,693
1000a4a0:	1000ad68 	cmpgeui	zero,r2,693
1000a4a4:	1000ad68 	cmpgeui	zero,r2,693
1000a4a8:	1000ad68 	cmpgeui	zero,r2,693
1000a4ac:	1000ad68 	cmpgeui	zero,r2,693
1000a4b0:	1000ad68 	cmpgeui	zero,r2,693
1000a4b4:	1000ad68 	cmpgeui	zero,r2,693
1000a4b8:	1000a714 	ori	zero,r2,668
1000a4bc:	1000ad68 	cmpgeui	zero,r2,693
1000a4c0:	1000ad68 	cmpgeui	zero,r2,693
1000a4c4:	1000ad68 	cmpgeui	zero,r2,693
1000a4c8:	1000ad68 	cmpgeui	zero,r2,693
1000a4cc:	1000ad68 	cmpgeui	zero,r2,693
1000a4d0:	1000ad68 	cmpgeui	zero,r2,693
1000a4d4:	1000ad68 	cmpgeui	zero,r2,693
1000a4d8:	1000ad68 	cmpgeui	zero,r2,693
1000a4dc:	1000ad68 	cmpgeui	zero,r2,693
1000a4e0:	1000ad68 	cmpgeui	zero,r2,693
1000a4e4:	1000aa04 	addi	zero,r2,680
1000a4e8:	1000ad68 	cmpgeui	zero,r2,693
1000a4ec:	1000ad68 	cmpgeui	zero,r2,693
1000a4f0:	1000ad68 	cmpgeui	zero,r2,693
1000a4f4:	1000ad68 	cmpgeui	zero,r2,693
1000a4f8:	1000ad68 	cmpgeui	zero,r2,693
1000a4fc:	1000aa44 	addi	zero,r2,681
1000a500:	1000ad68 	cmpgeui	zero,r2,693
1000a504:	1000ad68 	cmpgeui	zero,r2,693
1000a508:	1000aa88 	cmpgei	zero,r2,682
1000a50c:	1000ad68 	cmpgeui	zero,r2,693
1000a510:	1000ad68 	cmpgeui	zero,r2,693
1000a514:	1000ad68 	cmpgeui	zero,r2,693
1000a518:	1000ad68 	cmpgeui	zero,r2,693
1000a51c:	1000ad68 	cmpgeui	zero,r2,693
1000a520:	1000ad68 	cmpgeui	zero,r2,693
1000a524:	1000ad68 	cmpgeui	zero,r2,693
1000a528:	1000ad68 	cmpgeui	zero,r2,693
1000a52c:	1000ad68 	cmpgeui	zero,r2,693
1000a530:	1000ad68 	cmpgeui	zero,r2,693
1000a534:	1000a9d0 	cmplti	zero,r2,679
1000a538:	1000ad20 	cmpeqi	zero,r2,692
1000a53c:	1000ad68 	cmpgeui	zero,r2,693
1000a540:	1000ad68 	cmpgeui	zero,r2,693
1000a544:	1000ad68 	cmpgeui	zero,r2,693
1000a548:	1000ab5c 	xori	zero,r2,685
1000a54c:	1000ad20 	cmpeqi	zero,r2,692
1000a550:	1000ad68 	cmpgeui	zero,r2,693
1000a554:	1000ad68 	cmpgeui	zero,r2,693
1000a558:	1000aa74 	orhi	zero,r2,681
1000a55c:	1000ad68 	cmpgeui	zero,r2,693
1000a560:	1000acc0 	call	11000acc <_gp+0xfe6420>
1000a564:	1000ac48 	cmpgei	zero,r2,689
1000a568:	1000ac7c 	xorhi	zero,r2,689
1000a56c:	1000ab68 	cmpgeui	zero,r2,685
1000a570:	1000ad68 	cmpgeui	zero,r2,693
1000a574:	1000ab74 	orhi	zero,r2,685
1000a578:	1000ad68 	cmpgeui	zero,r2,693
1000a57c:	1000abd0 	cmplti	zero,r2,687
1000a580:	1000ad68 	cmpgeui	zero,r2,693
1000a584:	1000ad68 	cmpgeui	zero,r2,693
1000a588:	1000ac04 	addi	zero,r2,688
1000a58c:	42000204 	addi	r8,r8,8
1000a590:	d8c12517 	ldw	r3,1172(sp)
1000a594:	1c07883a 	add	r3,r3,r16
1000a598:	d8c12515 	stw	r3,1172(sp)
1000a59c:	003f8d06 	br	1000a3d4 <__alt_data_end+0xf800a3d4>
1000a5a0:	d9012117 	ldw	r4,1156(sp)
1000a5a4:	d9412017 	ldw	r5,1152(sp)
1000a5a8:	0005a500 	call	10005a50 <__swsetup_r>
1000a5ac:	1000301e 	bne	r2,zero,1000a670 <___vfiprintf_internal_r+0x3f0>
1000a5b0:	d8812017 	ldw	r2,1152(sp)
1000a5b4:	01000284 	movi	r4,10
1000a5b8:	10c0030b 	ldhu	r3,12(r2)
1000a5bc:	1805883a 	mov	r2,r3
1000a5c0:	1080068c 	andi	r2,r2,26
1000a5c4:	113f551e 	bne	r2,r4,1000a31c <__alt_data_end+0xf800a31c>
1000a5c8:	d9012017 	ldw	r4,1152(sp)
1000a5cc:	2080038b 	ldhu	r2,14(r4)
1000a5d0:	113fffcc 	andi	r4,r2,65535
1000a5d4:	2120001c 	xori	r4,r4,32768
1000a5d8:	21200004 	addi	r4,r4,-32768
1000a5dc:	203f4f16 	blt	r4,zero,1000a31c <__alt_data_end+0xf800a31c>
1000a5e0:	d9412017 	ldw	r5,1152(sp)
1000a5e4:	d9012117 	ldw	r4,1156(sp)
1000a5e8:	d9c12317 	ldw	r7,1164(sp)
1000a5ec:	2b001917 	ldw	r12,100(r5)
1000a5f0:	2ac00717 	ldw	r11,28(r5)
1000a5f4:	2a800917 	ldw	r10,36(r5)
1000a5f8:	02010004 	movi	r8,1024
1000a5fc:	18ffff4c 	andi	r3,r3,65533
1000a600:	da0b883a 	add	r5,sp,r8
1000a604:	980d883a 	mov	r6,r19
1000a608:	d8c1030d 	sth	r3,1036(sp)
1000a60c:	db011915 	stw	r12,1124(sp)
1000a610:	d881038d 	sth	r2,1038(sp)
1000a614:	dac10715 	stw	r11,1052(sp)
1000a618:	da810915 	stw	r10,1060(sp)
1000a61c:	dec10015 	stw	sp,1024(sp)
1000a620:	dec10415 	stw	sp,1040(sp)
1000a624:	da010215 	stw	r8,1032(sp)
1000a628:	da010515 	stw	r8,1044(sp)
1000a62c:	d8010615 	stw	zero,1048(sp)
1000a630:	000a2800 	call	1000a280 <___vfiprintf_internal_r>
1000a634:	1021883a 	mov	r16,r2
1000a638:	10000416 	blt	r2,zero,1000a64c <___vfiprintf_internal_r+0x3cc>
1000a63c:	d9012117 	ldw	r4,1156(sp)
1000a640:	d9410004 	addi	r5,sp,1024
1000a644:	00074d00 	call	100074d0 <_fflush_r>
1000a648:	10040f1e 	bne	r2,zero,1000b688 <___vfiprintf_internal_r+0x1408>
1000a64c:	d881030b 	ldhu	r2,1036(sp)
1000a650:	1080100c 	andi	r2,r2,64
1000a654:	10000426 	beq	r2,zero,1000a668 <___vfiprintf_internal_r+0x3e8>
1000a658:	d8c12017 	ldw	r3,1152(sp)
1000a65c:	1880030b 	ldhu	r2,12(r3)
1000a660:	10801014 	ori	r2,r2,64
1000a664:	1880030d 	sth	r2,12(r3)
1000a668:	8005883a 	mov	r2,r16
1000a66c:	00000106 	br	1000a674 <___vfiprintf_internal_r+0x3f4>
1000a670:	00bfffc4 	movi	r2,-1
1000a674:	dfc13517 	ldw	ra,1236(sp)
1000a678:	df013417 	ldw	fp,1232(sp)
1000a67c:	ddc13317 	ldw	r23,1228(sp)
1000a680:	dd813217 	ldw	r22,1224(sp)
1000a684:	dd413117 	ldw	r21,1220(sp)
1000a688:	dd013017 	ldw	r20,1216(sp)
1000a68c:	dcc12f17 	ldw	r19,1212(sp)
1000a690:	dc812e17 	ldw	r18,1208(sp)
1000a694:	dc412d17 	ldw	r17,1204(sp)
1000a698:	dc012c17 	ldw	r16,1200(sp)
1000a69c:	dec13604 	addi	sp,sp,1240
1000a6a0:	f800283a 	ret
1000a6a4:	0007a8c0 	call	10007a8c <__sinit>
1000a6a8:	003f0706 	br	1000a2c8 <__alt_data_end+0xf800a2c8>
1000a6ac:	d8c12417 	ldw	r3,1168(sp)
1000a6b0:	d8812315 	stw	r2,1164(sp)
1000a6b4:	00c7c83a 	sub	r3,zero,r3
1000a6b8:	d8c12415 	stw	r3,1168(sp)
1000a6bc:	94800114 	ori	r18,r18,4
1000a6c0:	b9800007 	ldb	r6,0(r23)
1000a6c4:	003f4f06 	br	1000a404 <__alt_data_end+0xf800a404>
1000a6c8:	94802014 	ori	r18,r18,128
1000a6cc:	b9800007 	ldb	r6,0(r23)
1000a6d0:	003f4c06 	br	1000a404 <__alt_data_end+0xf800a404>
1000a6d4:	dc012615 	stw	r16,1176(sp)
1000a6d8:	d8012415 	stw	zero,1168(sp)
1000a6dc:	35bff404 	addi	r22,r6,-48
1000a6e0:	0009883a 	mov	r4,zero
1000a6e4:	b821883a 	mov	r16,r23
1000a6e8:	01400284 	movi	r5,10
1000a6ec:	00024fc0 	call	100024fc <__mulsi3>
1000a6f0:	81800007 	ldb	r6,0(r16)
1000a6f4:	1589883a 	add	r4,r2,r22
1000a6f8:	bdc00044 	addi	r23,r23,1
1000a6fc:	35bff404 	addi	r22,r6,-48
1000a700:	b821883a 	mov	r16,r23
1000a704:	adbff82e 	bgeu	r21,r22,1000a6e8 <__alt_data_end+0xf800a6e8>
1000a708:	d9012415 	stw	r4,1168(sp)
1000a70c:	dc012617 	ldw	r16,1176(sp)
1000a710:	003f3d06 	br	1000a408 <__alt_data_end+0xf800a408>
1000a714:	d8c12203 	ldbu	r3,1160(sp)
1000a718:	94800414 	ori	r18,r18,16
1000a71c:	9080080c 	andi	r2,r18,32
1000a720:	d8c11d85 	stb	r3,1142(sp)
1000a724:	9811883a 	mov	r8,r19
1000a728:	d8c12317 	ldw	r3,1164(sp)
1000a72c:	10018226 	beq	r2,zero,1000ad38 <___vfiprintf_internal_r+0xab8>
1000a730:	d9012317 	ldw	r4,1164(sp)
1000a734:	18800117 	ldw	r2,4(r3)
1000a738:	1cc00017 	ldw	r19,0(r3)
1000a73c:	21000204 	addi	r4,r4,8
1000a740:	d9012315 	stw	r4,1164(sp)
1000a744:	102b883a 	mov	r21,r2
1000a748:	10030016 	blt	r2,zero,1000b34c <___vfiprintf_internal_r+0x10cc>
1000a74c:	dd811d83 	ldbu	r22,1142(sp)
1000a750:	8029883a 	mov	r20,r16
1000a754:	00800044 	movi	r2,1
1000a758:	9d46b03a 	or	r3,r19,r21
1000a75c:	80000216 	blt	r16,zero,1000a768 <___vfiprintf_internal_r+0x4e8>
1000a760:	013fdfc4 	movi	r4,-129
1000a764:	9124703a 	and	r18,r18,r4
1000a768:	1801b41e 	bne	r3,zero,1000ae3c <___vfiprintf_internal_r+0xbbc>
1000a76c:	80028126 	beq	r16,zero,1000b174 <___vfiprintf_internal_r+0xef4>
1000a770:	10803fcc 	andi	r2,r2,255
1000a774:	00c00044 	movi	r3,1
1000a778:	10c1d126 	beq	r2,r3,1000aec0 <___vfiprintf_internal_r+0xc40>
1000a77c:	00c00084 	movi	r3,2
1000a780:	10c28626 	beq	r2,r3,1000b19c <___vfiprintf_internal_r+0xf1c>
1000a784:	d8c10a04 	addi	r3,sp,1064
1000a788:	9808d0fa 	srli	r4,r19,3
1000a78c:	a80a977a 	slli	r5,r21,29
1000a790:	a82ad0fa 	srli	r21,r21,3
1000a794:	9cc001cc 	andi	r19,r19,7
1000a798:	98800c04 	addi	r2,r19,48
1000a79c:	18ffffc4 	addi	r3,r3,-1
1000a7a0:	2926b03a 	or	r19,r5,r4
1000a7a4:	18800005 	stb	r2,0(r3)
1000a7a8:	9d48b03a 	or	r4,r19,r21
1000a7ac:	203ff61e 	bne	r4,zero,1000a788 <__alt_data_end+0xf800a788>
1000a7b0:	9100004c 	andi	r4,r18,1
1000a7b4:	d8c12215 	stw	r3,1160(sp)
1000a7b8:	2002b31e 	bne	r4,zero,1000b288 <___vfiprintf_internal_r+0x1008>
1000a7bc:	d9411e17 	ldw	r5,1144(sp)
1000a7c0:	28e9c83a 	sub	r20,r5,r3
1000a7c4:	a02b883a 	mov	r21,r20
1000a7c8:	a400010e 	bge	r20,r16,1000a7d0 <___vfiprintf_internal_r+0x550>
1000a7cc:	802b883a 	mov	r21,r16
1000a7d0:	b5803fcc 	andi	r22,r22,255
1000a7d4:	b580201c 	xori	r22,r22,128
1000a7d8:	b5bfe004 	addi	r22,r22,-128
1000a7dc:	b0000126 	beq	r22,zero,1000a7e4 <___vfiprintf_internal_r+0x564>
1000a7e0:	ad400044 	addi	r21,r21,1
1000a7e4:	9280008c 	andi	r10,r18,2
1000a7e8:	50000126 	beq	r10,zero,1000a7f0 <___vfiprintf_internal_r+0x570>
1000a7ec:	ad400084 	addi	r21,r21,2
1000a7f0:	9580210c 	andi	r22,r18,132
1000a7f4:	b001751e 	bne	r22,zero,1000adcc <___vfiprintf_internal_r+0xb4c>
1000a7f8:	d9012417 	ldw	r4,1168(sp)
1000a7fc:	2567c83a 	sub	r19,r4,r21
1000a800:	04c1720e 	bge	zero,r19,1000adcc <___vfiprintf_internal_r+0xb4c>
1000a804:	01c00404 	movi	r7,16
1000a808:	d8c11c17 	ldw	r3,1136(sp)
1000a80c:	3cc36b0e 	bge	r7,r19,1000b5bc <___vfiprintf_internal_r+0x133c>
1000a810:	00840074 	movhi	r2,4097
1000a814:	1082ef04 	addi	r2,r2,3004
1000a818:	dc012915 	stw	r16,1188(sp)
1000a81c:	d9011b17 	ldw	r4,1132(sp)
1000a820:	9821883a 	mov	r16,r19
1000a824:	d8812615 	stw	r2,1176(sp)
1000a828:	030001c4 	movi	r12,7
1000a82c:	5027883a 	mov	r19,r10
1000a830:	00000506 	br	1000a848 <___vfiprintf_internal_r+0x5c8>
1000a834:	21400084 	addi	r5,r4,2
1000a838:	42000204 	addi	r8,r8,8
1000a83c:	1009883a 	mov	r4,r2
1000a840:	843ffc04 	addi	r16,r16,-16
1000a844:	3c000d0e 	bge	r7,r16,1000a87c <___vfiprintf_internal_r+0x5fc>
1000a848:	18c00404 	addi	r3,r3,16
1000a84c:	20800044 	addi	r2,r4,1
1000a850:	47000015 	stw	fp,0(r8)
1000a854:	41c00115 	stw	r7,4(r8)
1000a858:	d8c11c15 	stw	r3,1136(sp)
1000a85c:	d8811b15 	stw	r2,1132(sp)
1000a860:	60bff40e 	bge	r12,r2,1000a834 <__alt_data_end+0xf800a834>
1000a864:	18014b1e 	bne	r3,zero,1000ad94 <___vfiprintf_internal_r+0xb14>
1000a868:	843ffc04 	addi	r16,r16,-16
1000a86c:	0009883a 	mov	r4,zero
1000a870:	01400044 	movi	r5,1
1000a874:	d811883a 	mov	r8,sp
1000a878:	3c3ff316 	blt	r7,r16,1000a848 <__alt_data_end+0xf800a848>
1000a87c:	9815883a 	mov	r10,r19
1000a880:	8027883a 	mov	r19,r16
1000a884:	dc012917 	ldw	r16,1188(sp)
1000a888:	d9012617 	ldw	r4,1176(sp)
1000a88c:	98c7883a 	add	r3,r19,r3
1000a890:	44c00115 	stw	r19,4(r8)
1000a894:	41000015 	stw	r4,0(r8)
1000a898:	d8c11c15 	stw	r3,1136(sp)
1000a89c:	d9411b15 	stw	r5,1132(sp)
1000a8a0:	008001c4 	movi	r2,7
1000a8a4:	11425116 	blt	r2,r5,1000b1ec <___vfiprintf_internal_r+0xf6c>
1000a8a8:	d9011d87 	ldb	r4,1142(sp)
1000a8ac:	42000204 	addi	r8,r8,8
1000a8b0:	28800044 	addi	r2,r5,1
1000a8b4:	20014a1e 	bne	r4,zero,1000ade0 <___vfiprintf_internal_r+0xb60>
1000a8b8:	50000c26 	beq	r10,zero,1000a8ec <___vfiprintf_internal_r+0x66c>
1000a8bc:	d9011d04 	addi	r4,sp,1140
1000a8c0:	18c00084 	addi	r3,r3,2
1000a8c4:	41000015 	stw	r4,0(r8)
1000a8c8:	01000084 	movi	r4,2
1000a8cc:	41000115 	stw	r4,4(r8)
1000a8d0:	d8c11c15 	stw	r3,1136(sp)
1000a8d4:	d8811b15 	stw	r2,1132(sp)
1000a8d8:	010001c4 	movi	r4,7
1000a8dc:	20822016 	blt	r4,r2,1000b160 <___vfiprintf_internal_r+0xee0>
1000a8e0:	100b883a 	mov	r5,r2
1000a8e4:	42000204 	addi	r8,r8,8
1000a8e8:	10800044 	addi	r2,r2,1
1000a8ec:	01002004 	movi	r4,128
1000a8f0:	b101de26 	beq	r22,r4,1000b06c <___vfiprintf_internal_r+0xdec>
1000a8f4:	8521c83a 	sub	r16,r16,r20
1000a8f8:	0400230e 	bge	zero,r16,1000a988 <___vfiprintf_internal_r+0x708>
1000a8fc:	04c00404 	movi	r19,16
1000a900:	9c030d0e 	bge	r19,r16,1000b538 <___vfiprintf_internal_r+0x12b8>
1000a904:	00840074 	movhi	r2,4097
1000a908:	1082eb04 	addi	r2,r2,2988
1000a90c:	d8812615 	stw	r2,1176(sp)
1000a910:	058001c4 	movi	r22,7
1000a914:	00000506 	br	1000a92c <___vfiprintf_internal_r+0x6ac>
1000a918:	28800084 	addi	r2,r5,2
1000a91c:	42000204 	addi	r8,r8,8
1000a920:	200b883a 	mov	r5,r4
1000a924:	843ffc04 	addi	r16,r16,-16
1000a928:	9c000d0e 	bge	r19,r16,1000a960 <___vfiprintf_internal_r+0x6e0>
1000a92c:	18c00404 	addi	r3,r3,16
1000a930:	29000044 	addi	r4,r5,1
1000a934:	44400015 	stw	r17,0(r8)
1000a938:	44c00115 	stw	r19,4(r8)
1000a93c:	d8c11c15 	stw	r3,1136(sp)
1000a940:	d9011b15 	stw	r4,1132(sp)
1000a944:	b13ff40e 	bge	r22,r4,1000a918 <__alt_data_end+0xf800a918>
1000a948:	1801321e 	bne	r3,zero,1000ae14 <___vfiprintf_internal_r+0xb94>
1000a94c:	843ffc04 	addi	r16,r16,-16
1000a950:	000b883a 	mov	r5,zero
1000a954:	00800044 	movi	r2,1
1000a958:	d811883a 	mov	r8,sp
1000a95c:	9c3ff316 	blt	r19,r16,1000a92c <__alt_data_end+0xf800a92c>
1000a960:	d9012617 	ldw	r4,1176(sp)
1000a964:	1c07883a 	add	r3,r3,r16
1000a968:	44000115 	stw	r16,4(r8)
1000a96c:	41000015 	stw	r4,0(r8)
1000a970:	d8c11c15 	stw	r3,1136(sp)
1000a974:	d8811b15 	stw	r2,1132(sp)
1000a978:	010001c4 	movi	r4,7
1000a97c:	20816216 	blt	r4,r2,1000af08 <___vfiprintf_internal_r+0xc88>
1000a980:	42000204 	addi	r8,r8,8
1000a984:	10800044 	addi	r2,r2,1
1000a988:	d9012217 	ldw	r4,1160(sp)
1000a98c:	1d07883a 	add	r3,r3,r20
1000a990:	45000115 	stw	r20,4(r8)
1000a994:	41000015 	stw	r4,0(r8)
1000a998:	d8c11c15 	stw	r3,1136(sp)
1000a99c:	d8811b15 	stw	r2,1132(sp)
1000a9a0:	010001c4 	movi	r4,7
1000a9a4:	2081610e 	bge	r4,r2,1000af2c <___vfiprintf_internal_r+0xcac>
1000a9a8:	1802211e 	bne	r3,zero,1000b230 <___vfiprintf_internal_r+0xfb0>
1000a9ac:	d8011b15 	stw	zero,1132(sp)
1000a9b0:	9480010c 	andi	r18,r18,4
1000a9b4:	9002171e 	bne	r18,zero,1000b214 <___vfiprintf_internal_r+0xf94>
1000a9b8:	d9412417 	ldw	r5,1168(sp)
1000a9bc:	a9433716 	blt	r21,r5,1000b69c <___vfiprintf_internal_r+0x141c>
1000a9c0:	d8812517 	ldw	r2,1172(sp)
1000a9c4:	1545883a 	add	r2,r2,r21
1000a9c8:	d8812515 	stw	r2,1172(sp)
1000a9cc:	00019a06 	br	1000b038 <___vfiprintf_internal_r+0xdb8>
1000a9d0:	d8c12317 	ldw	r3,1164(sp)
1000a9d4:	05400044 	movi	r21,1
1000a9d8:	9811883a 	mov	r8,r19
1000a9dc:	18800017 	ldw	r2,0(r3)
1000a9e0:	18c00104 	addi	r3,r3,4
1000a9e4:	d8c12315 	stw	r3,1164(sp)
1000a9e8:	d8c10004 	addi	r3,sp,1024
1000a9ec:	d8011d85 	stb	zero,1142(sp)
1000a9f0:	d8810005 	stb	r2,1024(sp)
1000a9f4:	a829883a 	mov	r20,r21
1000a9f8:	d8c12215 	stw	r3,1160(sp)
1000a9fc:	0021883a 	mov	r16,zero
1000aa00:	003f7806 	br	1000a7e4 <__alt_data_end+0xf800a7e4>
1000aa04:	94800414 	ori	r18,r18,16
1000aa08:	9080080c 	andi	r2,r18,32
1000aa0c:	9811883a 	mov	r8,r19
1000aa10:	10009026 	beq	r2,zero,1000ac54 <___vfiprintf_internal_r+0x9d4>
1000aa14:	d8812317 	ldw	r2,1164(sp)
1000aa18:	d8c12317 	ldw	r3,1164(sp)
1000aa1c:	14c00017 	ldw	r19,0(r2)
1000aa20:	15400117 	ldw	r21,4(r2)
1000aa24:	18c00204 	addi	r3,r3,8
1000aa28:	d8c12315 	stw	r3,1164(sp)
1000aa2c:	0005883a 	mov	r2,zero
1000aa30:	9d46b03a 	or	r3,r19,r21
1000aa34:	d8011d85 	stb	zero,1142(sp)
1000aa38:	8029883a 	mov	r20,r16
1000aa3c:	002d883a 	mov	r22,zero
1000aa40:	003f4606 	br	1000a75c <__alt_data_end+0xf800a75c>
1000aa44:	94800414 	ori	r18,r18,16
1000aa48:	9080080c 	andi	r2,r18,32
1000aa4c:	9811883a 	mov	r8,r19
1000aa50:	10006226 	beq	r2,zero,1000abdc <___vfiprintf_internal_r+0x95c>
1000aa54:	d9012317 	ldw	r4,1164(sp)
1000aa58:	00800044 	movi	r2,1
1000aa5c:	24c00017 	ldw	r19,0(r4)
1000aa60:	25400117 	ldw	r21,4(r4)
1000aa64:	21000204 	addi	r4,r4,8
1000aa68:	d9012315 	stw	r4,1164(sp)
1000aa6c:	9d46b03a 	or	r3,r19,r21
1000aa70:	003ff006 	br	1000aa34 <__alt_data_end+0xf800aa34>
1000aa74:	b9800007 	ldb	r6,0(r23)
1000aa78:	00801b04 	movi	r2,108
1000aa7c:	3082b226 	beq	r6,r2,1000b548 <___vfiprintf_internal_r+0x12c8>
1000aa80:	94800414 	ori	r18,r18,16
1000aa84:	003e5f06 	br	1000a404 <__alt_data_end+0xf800a404>
1000aa88:	d8c12203 	ldbu	r3,1160(sp)
1000aa8c:	01040074 	movhi	r4,4097
1000aa90:	21028504 	addi	r4,r4,2580
1000aa94:	d8c11d85 	stb	r3,1142(sp)
1000aa98:	d9012715 	stw	r4,1180(sp)
1000aa9c:	90c0080c 	andi	r3,r18,32
1000aaa0:	9811883a 	mov	r8,r19
1000aaa4:	d8812317 	ldw	r2,1164(sp)
1000aaa8:	18005f26 	beq	r3,zero,1000ac28 <___vfiprintf_internal_r+0x9a8>
1000aaac:	d9012317 	ldw	r4,1164(sp)
1000aab0:	14c00017 	ldw	r19,0(r2)
1000aab4:	15400117 	ldw	r21,4(r2)
1000aab8:	21000204 	addi	r4,r4,8
1000aabc:	d9012315 	stw	r4,1164(sp)
1000aac0:	9080004c 	andi	r2,r18,1
1000aac4:	1001e226 	beq	r2,zero,1000b250 <___vfiprintf_internal_r+0xfd0>
1000aac8:	9d46b03a 	or	r3,r19,r21
1000aacc:	18024e26 	beq	r3,zero,1000b408 <___vfiprintf_internal_r+0x1188>
1000aad0:	00800c04 	movi	r2,48
1000aad4:	d8811d05 	stb	r2,1140(sp)
1000aad8:	d9811d45 	stb	r6,1141(sp)
1000aadc:	94800094 	ori	r18,r18,2
1000aae0:	00800084 	movi	r2,2
1000aae4:	003fd306 	br	1000aa34 <__alt_data_end+0xf800aa34>
1000aae8:	d9012317 	ldw	r4,1164(sp)
1000aaec:	d9412317 	ldw	r5,1164(sp)
1000aaf0:	21000017 	ldw	r4,0(r4)
1000aaf4:	28800104 	addi	r2,r5,4
1000aaf8:	d9012415 	stw	r4,1168(sp)
1000aafc:	203eeb16 	blt	r4,zero,1000a6ac <__alt_data_end+0xf800a6ac>
1000ab00:	d8812315 	stw	r2,1164(sp)
1000ab04:	b9800007 	ldb	r6,0(r23)
1000ab08:	003e3e06 	br	1000a404 <__alt_data_end+0xf800a404>
1000ab0c:	b9800007 	ldb	r6,0(r23)
1000ab10:	01000a84 	movi	r4,42
1000ab14:	b8800044 	addi	r2,r23,1
1000ab18:	3102d226 	beq	r6,r4,1000b664 <___vfiprintf_internal_r+0x13e4>
1000ab1c:	35bff404 	addi	r22,r6,-48
1000ab20:	102f883a 	mov	r23,r2
1000ab24:	0021883a 	mov	r16,zero
1000ab28:	adbe3736 	bltu	r21,r22,1000a408 <__alt_data_end+0xf800a408>
1000ab2c:	0009883a 	mov	r4,zero
1000ab30:	01400284 	movi	r5,10
1000ab34:	00024fc0 	call	100024fc <__mulsi3>
1000ab38:	b9800007 	ldb	r6,0(r23)
1000ab3c:	b089883a 	add	r4,r22,r2
1000ab40:	bdc00044 	addi	r23,r23,1
1000ab44:	35bff404 	addi	r22,r6,-48
1000ab48:	adbff92e 	bgeu	r21,r22,1000ab30 <__alt_data_end+0xf800ab30>
1000ab4c:	2021883a 	mov	r16,r4
1000ab50:	203e2d0e 	bge	r4,zero,1000a408 <__alt_data_end+0xf800a408>
1000ab54:	043fffc4 	movi	r16,-1
1000ab58:	003e2b06 	br	1000a408 <__alt_data_end+0xf800a408>
1000ab5c:	94801014 	ori	r18,r18,64
1000ab60:	b9800007 	ldb	r6,0(r23)
1000ab64:	003e2706 	br	1000a404 <__alt_data_end+0xf800a404>
1000ab68:	94800814 	ori	r18,r18,32
1000ab6c:	b9800007 	ldb	r6,0(r23)
1000ab70:	003e2406 	br	1000a404 <__alt_data_end+0xf800a404>
1000ab74:	d9412317 	ldw	r5,1164(sp)
1000ab78:	d8812317 	ldw	r2,1164(sp)
1000ab7c:	d8011d85 	stb	zero,1142(sp)
1000ab80:	29400017 	ldw	r5,0(r5)
1000ab84:	9811883a 	mov	r8,r19
1000ab88:	14c00104 	addi	r19,r2,4
1000ab8c:	d9412215 	stw	r5,1160(sp)
1000ab90:	28029026 	beq	r5,zero,1000b5d4 <___vfiprintf_internal_r+0x1354>
1000ab94:	d9012217 	ldw	r4,1160(sp)
1000ab98:	80027616 	blt	r16,zero,1000b574 <___vfiprintf_internal_r+0x12f4>
1000ab9c:	000b883a 	mov	r5,zero
1000aba0:	800d883a 	mov	r6,r16
1000aba4:	da012a15 	stw	r8,1192(sp)
1000aba8:	0008aa00 	call	10008aa0 <memchr>
1000abac:	da012a17 	ldw	r8,1192(sp)
1000abb0:	1002a026 	beq	r2,zero,1000b634 <___vfiprintf_internal_r+0x13b4>
1000abb4:	d8c12217 	ldw	r3,1160(sp)
1000abb8:	10e9c83a 	sub	r20,r2,r3
1000abbc:	85023816 	blt	r16,r20,1000b4a0 <___vfiprintf_internal_r+0x1220>
1000abc0:	dd811d83 	ldbu	r22,1142(sp)
1000abc4:	dcc12315 	stw	r19,1164(sp)
1000abc8:	0021883a 	mov	r16,zero
1000abcc:	003efd06 	br	1000a7c4 <__alt_data_end+0xf800a7c4>
1000abd0:	9080080c 	andi	r2,r18,32
1000abd4:	9811883a 	mov	r8,r19
1000abd8:	103f9e1e 	bne	r2,zero,1000aa54 <__alt_data_end+0xf800aa54>
1000abdc:	9080040c 	andi	r2,r18,16
1000abe0:	10021726 	beq	r2,zero,1000b440 <___vfiprintf_internal_r+0x11c0>
1000abe4:	d9412317 	ldw	r5,1164(sp)
1000abe8:	002b883a 	mov	r21,zero
1000abec:	00800044 	movi	r2,1
1000abf0:	2cc00017 	ldw	r19,0(r5)
1000abf4:	29400104 	addi	r5,r5,4
1000abf8:	d9412315 	stw	r5,1164(sp)
1000abfc:	9807883a 	mov	r3,r19
1000ac00:	003f8c06 	br	1000aa34 <__alt_data_end+0xf800aa34>
1000ac04:	d8c12203 	ldbu	r3,1160(sp)
1000ac08:	01040074 	movhi	r4,4097
1000ac0c:	21028a04 	addi	r4,r4,2600
1000ac10:	d8c11d85 	stb	r3,1142(sp)
1000ac14:	d9012715 	stw	r4,1180(sp)
1000ac18:	90c0080c 	andi	r3,r18,32
1000ac1c:	9811883a 	mov	r8,r19
1000ac20:	d8812317 	ldw	r2,1164(sp)
1000ac24:	183fa11e 	bne	r3,zero,1000aaac <__alt_data_end+0xf800aaac>
1000ac28:	90c0040c 	andi	r3,r18,16
1000ac2c:	1801e526 	beq	r3,zero,1000b3c4 <___vfiprintf_internal_r+0x1144>
1000ac30:	d9412317 	ldw	r5,1164(sp)
1000ac34:	14c00017 	ldw	r19,0(r2)
1000ac38:	002b883a 	mov	r21,zero
1000ac3c:	29400104 	addi	r5,r5,4
1000ac40:	d9412315 	stw	r5,1164(sp)
1000ac44:	003f9e06 	br	1000aac0 <__alt_data_end+0xf800aac0>
1000ac48:	9080080c 	andi	r2,r18,32
1000ac4c:	9811883a 	mov	r8,r19
1000ac50:	103f701e 	bne	r2,zero,1000aa14 <__alt_data_end+0xf800aa14>
1000ac54:	9080040c 	andi	r2,r18,16
1000ac58:	1001ef26 	beq	r2,zero,1000b418 <___vfiprintf_internal_r+0x1198>
1000ac5c:	d9012317 	ldw	r4,1164(sp)
1000ac60:	002b883a 	mov	r21,zero
1000ac64:	0005883a 	mov	r2,zero
1000ac68:	24c00017 	ldw	r19,0(r4)
1000ac6c:	21000104 	addi	r4,r4,4
1000ac70:	d9012315 	stw	r4,1164(sp)
1000ac74:	9807883a 	mov	r3,r19
1000ac78:	003f6e06 	br	1000aa34 <__alt_data_end+0xf800aa34>
1000ac7c:	d8c12317 	ldw	r3,1164(sp)
1000ac80:	9811883a 	mov	r8,r19
1000ac84:	00800c04 	movi	r2,48
1000ac88:	1cc00017 	ldw	r19,0(r3)
1000ac8c:	01040074 	movhi	r4,4097
1000ac90:	18c00104 	addi	r3,r3,4
1000ac94:	d8811d05 	stb	r2,1140(sp)
1000ac98:	21028a04 	addi	r4,r4,2600
1000ac9c:	00801e04 	movi	r2,120
1000aca0:	d8811d45 	stb	r2,1141(sp)
1000aca4:	d8c12315 	stw	r3,1164(sp)
1000aca8:	002b883a 	mov	r21,zero
1000acac:	94800094 	ori	r18,r18,2
1000acb0:	d9012715 	stw	r4,1180(sp)
1000acb4:	00800084 	movi	r2,2
1000acb8:	9807883a 	mov	r3,r19
1000acbc:	003f5d06 	br	1000aa34 <__alt_data_end+0xf800aa34>
1000acc0:	d8c12203 	ldbu	r3,1160(sp)
1000acc4:	9080080c 	andi	r2,r18,32
1000acc8:	9811883a 	mov	r8,r19
1000accc:	d8c11d85 	stb	r3,1142(sp)
1000acd0:	1001b126 	beq	r2,zero,1000b398 <___vfiprintf_internal_r+0x1118>
1000acd4:	d9012317 	ldw	r4,1164(sp)
1000acd8:	d9412517 	ldw	r5,1172(sp)
1000acdc:	20800017 	ldw	r2,0(r4)
1000ace0:	2807d7fa 	srai	r3,r5,31
1000ace4:	21000104 	addi	r4,r4,4
1000ace8:	d9012315 	stw	r4,1164(sp)
1000acec:	11400015 	stw	r5,0(r2)
1000acf0:	10c00115 	stw	r3,4(r2)
1000acf4:	003d9a06 	br	1000a360 <__alt_data_end+0xf800a360>
1000acf8:	d8812207 	ldb	r2,1160(sp)
1000acfc:	1001c41e 	bne	r2,zero,1000b410 <___vfiprintf_internal_r+0x1190>
1000ad00:	00c00804 	movi	r3,32
1000ad04:	d8c12205 	stb	r3,1160(sp)
1000ad08:	b9800007 	ldb	r6,0(r23)
1000ad0c:	003dbd06 	br	1000a404 <__alt_data_end+0xf800a404>
1000ad10:	00c00ac4 	movi	r3,43
1000ad14:	d8c12205 	stb	r3,1160(sp)
1000ad18:	b9800007 	ldb	r6,0(r23)
1000ad1c:	003db906 	br	1000a404 <__alt_data_end+0xf800a404>
1000ad20:	d8c12203 	ldbu	r3,1160(sp)
1000ad24:	9080080c 	andi	r2,r18,32
1000ad28:	9811883a 	mov	r8,r19
1000ad2c:	d8c11d85 	stb	r3,1142(sp)
1000ad30:	d8c12317 	ldw	r3,1164(sp)
1000ad34:	103e7e1e 	bne	r2,zero,1000a730 <__alt_data_end+0xf800a730>
1000ad38:	9080040c 	andi	r2,r18,16
1000ad3c:	1001a926 	beq	r2,zero,1000b3e4 <___vfiprintf_internal_r+0x1164>
1000ad40:	1cc00017 	ldw	r19,0(r3)
1000ad44:	d9412317 	ldw	r5,1164(sp)
1000ad48:	982bd7fa 	srai	r21,r19,31
1000ad4c:	29400104 	addi	r5,r5,4
1000ad50:	d9412315 	stw	r5,1164(sp)
1000ad54:	a805883a 	mov	r2,r21
1000ad58:	003e7b06 	br	1000a748 <__alt_data_end+0xf800a748>
1000ad5c:	94800054 	ori	r18,r18,1
1000ad60:	b9800007 	ldb	r6,0(r23)
1000ad64:	003da706 	br	1000a404 <__alt_data_end+0xf800a404>
1000ad68:	d8c12203 	ldbu	r3,1160(sp)
1000ad6c:	9811883a 	mov	r8,r19
1000ad70:	d8c11d85 	stb	r3,1142(sp)
1000ad74:	30005826 	beq	r6,zero,1000aed8 <___vfiprintf_internal_r+0xc58>
1000ad78:	05400044 	movi	r21,1
1000ad7c:	d8c10004 	addi	r3,sp,1024
1000ad80:	d9810005 	stb	r6,1024(sp)
1000ad84:	d8011d85 	stb	zero,1142(sp)
1000ad88:	a829883a 	mov	r20,r21
1000ad8c:	d8c12215 	stw	r3,1160(sp)
1000ad90:	003f1a06 	br	1000a9fc <__alt_data_end+0xf800a9fc>
1000ad94:	d9012117 	ldw	r4,1156(sp)
1000ad98:	d9412017 	ldw	r5,1152(sp)
1000ad9c:	d9811a04 	addi	r6,sp,1128
1000ada0:	d9c12a15 	stw	r7,1192(sp)
1000ada4:	db012b15 	stw	r12,1196(sp)
1000ada8:	000a16c0 	call	1000a16c <__sprint_r.part.0>
1000adac:	d9c12a17 	ldw	r7,1192(sp)
1000adb0:	db012b17 	ldw	r12,1196(sp)
1000adb4:	10004e1e 	bne	r2,zero,1000aef0 <___vfiprintf_internal_r+0xc70>
1000adb8:	d9011b17 	ldw	r4,1132(sp)
1000adbc:	d8c11c17 	ldw	r3,1136(sp)
1000adc0:	d811883a 	mov	r8,sp
1000adc4:	21400044 	addi	r5,r4,1
1000adc8:	003e9d06 	br	1000a840 <__alt_data_end+0xf800a840>
1000adcc:	d9411b17 	ldw	r5,1132(sp)
1000add0:	d8c11c17 	ldw	r3,1136(sp)
1000add4:	28800044 	addi	r2,r5,1
1000add8:	d9011d87 	ldb	r4,1142(sp)
1000addc:	203eb626 	beq	r4,zero,1000a8b8 <__alt_data_end+0xf800a8b8>
1000ade0:	01000044 	movi	r4,1
1000ade4:	d9411d84 	addi	r5,sp,1142
1000ade8:	1907883a 	add	r3,r3,r4
1000adec:	41400015 	stw	r5,0(r8)
1000adf0:	41000115 	stw	r4,4(r8)
1000adf4:	d8c11c15 	stw	r3,1136(sp)
1000adf8:	d8811b15 	stw	r2,1132(sp)
1000adfc:	014001c4 	movi	r5,7
1000ae00:	2880ce16 	blt	r5,r2,1000b13c <___vfiprintf_internal_r+0xebc>
1000ae04:	100b883a 	mov	r5,r2
1000ae08:	42000204 	addi	r8,r8,8
1000ae0c:	10800044 	addi	r2,r2,1
1000ae10:	003ea906 	br	1000a8b8 <__alt_data_end+0xf800a8b8>
1000ae14:	d9012117 	ldw	r4,1156(sp)
1000ae18:	d9412017 	ldw	r5,1152(sp)
1000ae1c:	d9811a04 	addi	r6,sp,1128
1000ae20:	000a16c0 	call	1000a16c <__sprint_r.part.0>
1000ae24:	1000321e 	bne	r2,zero,1000aef0 <___vfiprintf_internal_r+0xc70>
1000ae28:	d9411b17 	ldw	r5,1132(sp)
1000ae2c:	d8c11c17 	ldw	r3,1136(sp)
1000ae30:	d811883a 	mov	r8,sp
1000ae34:	28800044 	addi	r2,r5,1
1000ae38:	003eba06 	br	1000a924 <__alt_data_end+0xf800a924>
1000ae3c:	10803fcc 	andi	r2,r2,255
1000ae40:	00c00044 	movi	r3,1
1000ae44:	10fe4d1e 	bne	r2,r3,1000a77c <__alt_data_end+0xf800a77c>
1000ae48:	a800021e 	bne	r21,zero,1000ae54 <___vfiprintf_internal_r+0xbd4>
1000ae4c:	00800244 	movi	r2,9
1000ae50:	14c01b2e 	bgeu	r2,r19,1000aec0 <___vfiprintf_internal_r+0xc40>
1000ae54:	dc012215 	stw	r16,1160(sp)
1000ae58:	dd010a04 	addi	r20,sp,1064
1000ae5c:	a821883a 	mov	r16,r21
1000ae60:	402b883a 	mov	r21,r8
1000ae64:	9809883a 	mov	r4,r19
1000ae68:	800b883a 	mov	r5,r16
1000ae6c:	01800284 	movi	r6,10
1000ae70:	000f883a 	mov	r7,zero
1000ae74:	0001db40 	call	10001db4 <__umoddi3>
1000ae78:	10800c04 	addi	r2,r2,48
1000ae7c:	a53fffc4 	addi	r20,r20,-1
1000ae80:	9809883a 	mov	r4,r19
1000ae84:	800b883a 	mov	r5,r16
1000ae88:	01800284 	movi	r6,10
1000ae8c:	000f883a 	mov	r7,zero
1000ae90:	a0800005 	stb	r2,0(r20)
1000ae94:	00017740 	call	10001774 <__udivdi3>
1000ae98:	1027883a 	mov	r19,r2
1000ae9c:	10c4b03a 	or	r2,r2,r3
1000aea0:	1821883a 	mov	r16,r3
1000aea4:	103fef1e 	bne	r2,zero,1000ae64 <__alt_data_end+0xf800ae64>
1000aea8:	d9011e17 	ldw	r4,1144(sp)
1000aeac:	dc012217 	ldw	r16,1160(sp)
1000aeb0:	a811883a 	mov	r8,r21
1000aeb4:	dd012215 	stw	r20,1160(sp)
1000aeb8:	2529c83a 	sub	r20,r4,r20
1000aebc:	003e4106 	br	1000a7c4 <__alt_data_end+0xf800a7c4>
1000aec0:	9cc00c04 	addi	r19,r19,48
1000aec4:	d8c109c4 	addi	r3,sp,1063
1000aec8:	dcc109c5 	stb	r19,1063(sp)
1000aecc:	dd012817 	ldw	r20,1184(sp)
1000aed0:	d8c12215 	stw	r3,1160(sp)
1000aed4:	003e3b06 	br	1000a7c4 <__alt_data_end+0xf800a7c4>
1000aed8:	d8811c17 	ldw	r2,1136(sp)
1000aedc:	10000426 	beq	r2,zero,1000aef0 <___vfiprintf_internal_r+0xc70>
1000aee0:	d9012117 	ldw	r4,1156(sp)
1000aee4:	d9412017 	ldw	r5,1152(sp)
1000aee8:	d9811a04 	addi	r6,sp,1128
1000aeec:	000a16c0 	call	1000a16c <__sprint_r.part.0>
1000aef0:	d9412017 	ldw	r5,1152(sp)
1000aef4:	2880030b 	ldhu	r2,12(r5)
1000aef8:	1080100c 	andi	r2,r2,64
1000aefc:	103ddc1e 	bne	r2,zero,1000a670 <__alt_data_end+0xf800a670>
1000af00:	d8812517 	ldw	r2,1172(sp)
1000af04:	003ddb06 	br	1000a674 <__alt_data_end+0xf800a674>
1000af08:	1801061e 	bne	r3,zero,1000b324 <___vfiprintf_internal_r+0x10a4>
1000af0c:	d8c12217 	ldw	r3,1160(sp)
1000af10:	00800044 	movi	r2,1
1000af14:	dd000115 	stw	r20,4(sp)
1000af18:	d8c00015 	stw	r3,0(sp)
1000af1c:	dd011c15 	stw	r20,1136(sp)
1000af20:	d8811b15 	stw	r2,1132(sp)
1000af24:	a007883a 	mov	r3,r20
1000af28:	d811883a 	mov	r8,sp
1000af2c:	42000204 	addi	r8,r8,8
1000af30:	9480010c 	andi	r18,r18,4
1000af34:	90003426 	beq	r18,zero,1000b008 <___vfiprintf_internal_r+0xd88>
1000af38:	d9412417 	ldw	r5,1168(sp)
1000af3c:	2d65c83a 	sub	r18,r5,r21
1000af40:	0480310e 	bge	zero,r18,1000b008 <___vfiprintf_internal_r+0xd88>
1000af44:	04000404 	movi	r16,16
1000af48:	8481ad0e 	bge	r16,r18,1000b600 <___vfiprintf_internal_r+0x1380>
1000af4c:	01440074 	movhi	r5,4097
1000af50:	2942ef04 	addi	r5,r5,3004
1000af54:	d9011b17 	ldw	r4,1132(sp)
1000af58:	d9412615 	stw	r5,1176(sp)
1000af5c:	04c001c4 	movi	r19,7
1000af60:	dd012117 	ldw	r20,1156(sp)
1000af64:	dd812017 	ldw	r22,1152(sp)
1000af68:	00000506 	br	1000af80 <___vfiprintf_internal_r+0xd00>
1000af6c:	21400084 	addi	r5,r4,2
1000af70:	42000204 	addi	r8,r8,8
1000af74:	1009883a 	mov	r4,r2
1000af78:	94bffc04 	addi	r18,r18,-16
1000af7c:	84800d0e 	bge	r16,r18,1000afb4 <___vfiprintf_internal_r+0xd34>
1000af80:	18c00404 	addi	r3,r3,16
1000af84:	20800044 	addi	r2,r4,1
1000af88:	47000015 	stw	fp,0(r8)
1000af8c:	44000115 	stw	r16,4(r8)
1000af90:	d8c11c15 	stw	r3,1136(sp)
1000af94:	d8811b15 	stw	r2,1132(sp)
1000af98:	98bff40e 	bge	r19,r2,1000af6c <__alt_data_end+0xf800af6c>
1000af9c:	1800291e 	bne	r3,zero,1000b044 <___vfiprintf_internal_r+0xdc4>
1000afa0:	94bffc04 	addi	r18,r18,-16
1000afa4:	0009883a 	mov	r4,zero
1000afa8:	01400044 	movi	r5,1
1000afac:	d811883a 	mov	r8,sp
1000afb0:	84bff316 	blt	r16,r18,1000af80 <__alt_data_end+0xf800af80>
1000afb4:	d8812617 	ldw	r2,1176(sp)
1000afb8:	1c87883a 	add	r3,r3,r18
1000afbc:	44800115 	stw	r18,4(r8)
1000afc0:	40800015 	stw	r2,0(r8)
1000afc4:	d8c11c15 	stw	r3,1136(sp)
1000afc8:	d9411b15 	stw	r5,1132(sp)
1000afcc:	008001c4 	movi	r2,7
1000afd0:	11400d0e 	bge	r2,r5,1000b008 <___vfiprintf_internal_r+0xd88>
1000afd4:	1800061e 	bne	r3,zero,1000aff0 <___vfiprintf_internal_r+0xd70>
1000afd8:	d8c12417 	ldw	r3,1168(sp)
1000afdc:	a8c12e16 	blt	r21,r3,1000b498 <___vfiprintf_internal_r+0x1218>
1000afe0:	d9012517 	ldw	r4,1172(sp)
1000afe4:	2549883a 	add	r4,r4,r21
1000afe8:	d9012515 	stw	r4,1172(sp)
1000afec:	00001206 	br	1000b038 <___vfiprintf_internal_r+0xdb8>
1000aff0:	d9012117 	ldw	r4,1156(sp)
1000aff4:	d9412017 	ldw	r5,1152(sp)
1000aff8:	d9811a04 	addi	r6,sp,1128
1000affc:	000a16c0 	call	1000a16c <__sprint_r.part.0>
1000b000:	103fbb1e 	bne	r2,zero,1000aef0 <__alt_data_end+0xf800aef0>
1000b004:	d8c11c17 	ldw	r3,1136(sp)
1000b008:	d8812417 	ldw	r2,1168(sp)
1000b00c:	a880010e 	bge	r21,r2,1000b014 <___vfiprintf_internal_r+0xd94>
1000b010:	102b883a 	mov	r21,r2
1000b014:	d9012517 	ldw	r4,1172(sp)
1000b018:	2549883a 	add	r4,r4,r21
1000b01c:	d9012515 	stw	r4,1172(sp)
1000b020:	18000526 	beq	r3,zero,1000b038 <___vfiprintf_internal_r+0xdb8>
1000b024:	d9012117 	ldw	r4,1156(sp)
1000b028:	d9412017 	ldw	r5,1152(sp)
1000b02c:	d9811a04 	addi	r6,sp,1128
1000b030:	000a16c0 	call	1000a16c <__sprint_r.part.0>
1000b034:	103fae1e 	bne	r2,zero,1000aef0 <__alt_data_end+0xf800aef0>
1000b038:	d8011b15 	stw	zero,1132(sp)
1000b03c:	d811883a 	mov	r8,sp
1000b040:	003cc706 	br	1000a360 <__alt_data_end+0xf800a360>
1000b044:	a009883a 	mov	r4,r20
1000b048:	b00b883a 	mov	r5,r22
1000b04c:	d9811a04 	addi	r6,sp,1128
1000b050:	000a16c0 	call	1000a16c <__sprint_r.part.0>
1000b054:	103fa61e 	bne	r2,zero,1000aef0 <__alt_data_end+0xf800aef0>
1000b058:	d9011b17 	ldw	r4,1132(sp)
1000b05c:	d8c11c17 	ldw	r3,1136(sp)
1000b060:	d811883a 	mov	r8,sp
1000b064:	21400044 	addi	r5,r4,1
1000b068:	003fc306 	br	1000af78 <__alt_data_end+0xf800af78>
1000b06c:	d9012417 	ldw	r4,1168(sp)
1000b070:	256dc83a 	sub	r22,r4,r21
1000b074:	05be1f0e 	bge	zero,r22,1000a8f4 <__alt_data_end+0xf800a8f4>
1000b078:	04c00404 	movi	r19,16
1000b07c:	9d81720e 	bge	r19,r22,1000b648 <___vfiprintf_internal_r+0x13c8>
1000b080:	00840074 	movhi	r2,4097
1000b084:	1082eb04 	addi	r2,r2,2988
1000b088:	d8812615 	stw	r2,1176(sp)
1000b08c:	028001c4 	movi	r10,7
1000b090:	00000506 	br	1000b0a8 <___vfiprintf_internal_r+0xe28>
1000b094:	29000084 	addi	r4,r5,2
1000b098:	42000204 	addi	r8,r8,8
1000b09c:	100b883a 	mov	r5,r2
1000b0a0:	b5bffc04 	addi	r22,r22,-16
1000b0a4:	9d800d0e 	bge	r19,r22,1000b0dc <___vfiprintf_internal_r+0xe5c>
1000b0a8:	18c00404 	addi	r3,r3,16
1000b0ac:	28800044 	addi	r2,r5,1
1000b0b0:	44400015 	stw	r17,0(r8)
1000b0b4:	44c00115 	stw	r19,4(r8)
1000b0b8:	d8c11c15 	stw	r3,1136(sp)
1000b0bc:	d8811b15 	stw	r2,1132(sp)
1000b0c0:	50bff40e 	bge	r10,r2,1000b094 <__alt_data_end+0xf800b094>
1000b0c4:	1800111e 	bne	r3,zero,1000b10c <___vfiprintf_internal_r+0xe8c>
1000b0c8:	b5bffc04 	addi	r22,r22,-16
1000b0cc:	000b883a 	mov	r5,zero
1000b0d0:	01000044 	movi	r4,1
1000b0d4:	d811883a 	mov	r8,sp
1000b0d8:	9dbff316 	blt	r19,r22,1000b0a8 <__alt_data_end+0xf800b0a8>
1000b0dc:	d9412617 	ldw	r5,1176(sp)
1000b0e0:	1d87883a 	add	r3,r3,r22
1000b0e4:	45800115 	stw	r22,4(r8)
1000b0e8:	41400015 	stw	r5,0(r8)
1000b0ec:	d8c11c15 	stw	r3,1136(sp)
1000b0f0:	d9011b15 	stw	r4,1132(sp)
1000b0f4:	008001c4 	movi	r2,7
1000b0f8:	11008516 	blt	r2,r4,1000b310 <___vfiprintf_internal_r+0x1090>
1000b0fc:	42000204 	addi	r8,r8,8
1000b100:	20800044 	addi	r2,r4,1
1000b104:	200b883a 	mov	r5,r4
1000b108:	003dfa06 	br	1000a8f4 <__alt_data_end+0xf800a8f4>
1000b10c:	d9012117 	ldw	r4,1156(sp)
1000b110:	d9412017 	ldw	r5,1152(sp)
1000b114:	d9811a04 	addi	r6,sp,1128
1000b118:	da812a15 	stw	r10,1192(sp)
1000b11c:	000a16c0 	call	1000a16c <__sprint_r.part.0>
1000b120:	da812a17 	ldw	r10,1192(sp)
1000b124:	103f721e 	bne	r2,zero,1000aef0 <__alt_data_end+0xf800aef0>
1000b128:	d9411b17 	ldw	r5,1132(sp)
1000b12c:	d8c11c17 	ldw	r3,1136(sp)
1000b130:	d811883a 	mov	r8,sp
1000b134:	29000044 	addi	r4,r5,1
1000b138:	003fd906 	br	1000b0a0 <__alt_data_end+0xf800b0a0>
1000b13c:	1800681e 	bne	r3,zero,1000b2e0 <___vfiprintf_internal_r+0x1060>
1000b140:	50004d26 	beq	r10,zero,1000b278 <___vfiprintf_internal_r+0xff8>
1000b144:	d8811d04 	addi	r2,sp,1140
1000b148:	00c00084 	movi	r3,2
1000b14c:	d8800015 	stw	r2,0(sp)
1000b150:	d8c00115 	stw	r3,4(sp)
1000b154:	2005883a 	mov	r2,r4
1000b158:	d811883a 	mov	r8,sp
1000b15c:	003de006 	br	1000a8e0 <__alt_data_end+0xf800a8e0>
1000b160:	1800551e 	bne	r3,zero,1000b2b8 <___vfiprintf_internal_r+0x1038>
1000b164:	000b883a 	mov	r5,zero
1000b168:	00800044 	movi	r2,1
1000b16c:	d811883a 	mov	r8,sp
1000b170:	003dde06 	br	1000a8ec <__alt_data_end+0xf800a8ec>
1000b174:	10803fcc 	andi	r2,r2,255
1000b178:	1000191e 	bne	r2,zero,1000b1e0 <___vfiprintf_internal_r+0xf60>
1000b17c:	9080004c 	andi	r2,r18,1
1000b180:	10001726 	beq	r2,zero,1000b1e0 <___vfiprintf_internal_r+0xf60>
1000b184:	00800c04 	movi	r2,48
1000b188:	d8c109c4 	addi	r3,sp,1063
1000b18c:	d88109c5 	stb	r2,1063(sp)
1000b190:	dd012817 	ldw	r20,1184(sp)
1000b194:	d8c12215 	stw	r3,1160(sp)
1000b198:	003d8a06 	br	1000a7c4 <__alt_data_end+0xf800a7c4>
1000b19c:	d9012717 	ldw	r4,1180(sp)
1000b1a0:	dd010a04 	addi	r20,sp,1064
1000b1a4:	988003cc 	andi	r2,r19,15
1000b1a8:	a806973a 	slli	r3,r21,28
1000b1ac:	2085883a 	add	r2,r4,r2
1000b1b0:	9826d13a 	srli	r19,r19,4
1000b1b4:	10800003 	ldbu	r2,0(r2)
1000b1b8:	a82ad13a 	srli	r21,r21,4
1000b1bc:	a53fffc4 	addi	r20,r20,-1
1000b1c0:	1ce6b03a 	or	r19,r3,r19
1000b1c4:	a0800005 	stb	r2,0(r20)
1000b1c8:	9d44b03a 	or	r2,r19,r21
1000b1cc:	103ff51e 	bne	r2,zero,1000b1a4 <__alt_data_end+0xf800b1a4>
1000b1d0:	d9411e17 	ldw	r5,1144(sp)
1000b1d4:	dd012215 	stw	r20,1160(sp)
1000b1d8:	2d29c83a 	sub	r20,r5,r20
1000b1dc:	003d7906 	br	1000a7c4 <__alt_data_end+0xf800a7c4>
1000b1e0:	d8c10a04 	addi	r3,sp,1064
1000b1e4:	d8c12215 	stw	r3,1160(sp)
1000b1e8:	003d7606 	br	1000a7c4 <__alt_data_end+0xf800a7c4>
1000b1ec:	18009e1e 	bne	r3,zero,1000b468 <___vfiprintf_internal_r+0x11e8>
1000b1f0:	d8811d87 	ldb	r2,1142(sp)
1000b1f4:	10005f26 	beq	r2,zero,1000b374 <___vfiprintf_internal_r+0x10f4>
1000b1f8:	00c00044 	movi	r3,1
1000b1fc:	d9011d84 	addi	r4,sp,1142
1000b200:	1805883a 	mov	r2,r3
1000b204:	d9000015 	stw	r4,0(sp)
1000b208:	d8c00115 	stw	r3,4(sp)
1000b20c:	d811883a 	mov	r8,sp
1000b210:	003efc06 	br	1000ae04 <__alt_data_end+0xf800ae04>
1000b214:	d9412417 	ldw	r5,1168(sp)
1000b218:	d811883a 	mov	r8,sp
1000b21c:	2d65c83a 	sub	r18,r5,r21
1000b220:	04bf4816 	blt	zero,r18,1000af44 <__alt_data_end+0xf800af44>
1000b224:	003f6c06 	br	1000afd8 <__alt_data_end+0xf800afd8>
1000b228:	b829883a 	mov	r20,r23
1000b22c:	003c6906 	br	1000a3d4 <__alt_data_end+0xf800a3d4>
1000b230:	d9012117 	ldw	r4,1156(sp)
1000b234:	d9412017 	ldw	r5,1152(sp)
1000b238:	d9811a04 	addi	r6,sp,1128
1000b23c:	000a16c0 	call	1000a16c <__sprint_r.part.0>
1000b240:	103f2b1e 	bne	r2,zero,1000aef0 <__alt_data_end+0xf800aef0>
1000b244:	d8c11c17 	ldw	r3,1136(sp)
1000b248:	d811883a 	mov	r8,sp
1000b24c:	003f3806 	br	1000af30 <__alt_data_end+0xf800af30>
1000b250:	00800084 	movi	r2,2
1000b254:	9d46b03a 	or	r3,r19,r21
1000b258:	003df606 	br	1000aa34 <__alt_data_end+0xf800aa34>
1000b25c:	d9012117 	ldw	r4,1156(sp)
1000b260:	d9412017 	ldw	r5,1152(sp)
1000b264:	d9811a04 	addi	r6,sp,1128
1000b268:	000a16c0 	call	1000a16c <__sprint_r.part.0>
1000b26c:	103f201e 	bne	r2,zero,1000aef0 <__alt_data_end+0xf800aef0>
1000b270:	d811883a 	mov	r8,sp
1000b274:	003cc606 	br	1000a590 <__alt_data_end+0xf800a590>
1000b278:	000b883a 	mov	r5,zero
1000b27c:	2005883a 	mov	r2,r4
1000b280:	d811883a 	mov	r8,sp
1000b284:	003d9906 	br	1000a8ec <__alt_data_end+0xf800a8ec>
1000b288:	10803fcc 	andi	r2,r2,255
1000b28c:	1080201c 	xori	r2,r2,128
1000b290:	10bfe004 	addi	r2,r2,-128
1000b294:	01000c04 	movi	r4,48
1000b298:	1100b226 	beq	r2,r4,1000b564 <___vfiprintf_internal_r+0x12e4>
1000b29c:	d9412217 	ldw	r5,1160(sp)
1000b2a0:	d8811e17 	ldw	r2,1144(sp)
1000b2a4:	193fffc5 	stb	r4,-1(r3)
1000b2a8:	297fffc4 	addi	r5,r5,-1
1000b2ac:	d9412215 	stw	r5,1160(sp)
1000b2b0:	1169c83a 	sub	r20,r2,r5
1000b2b4:	003d4306 	br	1000a7c4 <__alt_data_end+0xf800a7c4>
1000b2b8:	d9012117 	ldw	r4,1156(sp)
1000b2bc:	d9412017 	ldw	r5,1152(sp)
1000b2c0:	d9811a04 	addi	r6,sp,1128
1000b2c4:	000a16c0 	call	1000a16c <__sprint_r.part.0>
1000b2c8:	103f091e 	bne	r2,zero,1000aef0 <__alt_data_end+0xf800aef0>
1000b2cc:	d9411b17 	ldw	r5,1132(sp)
1000b2d0:	d8c11c17 	ldw	r3,1136(sp)
1000b2d4:	d811883a 	mov	r8,sp
1000b2d8:	28800044 	addi	r2,r5,1
1000b2dc:	003d8306 	br	1000a8ec <__alt_data_end+0xf800a8ec>
1000b2e0:	d9012117 	ldw	r4,1156(sp)
1000b2e4:	d9412017 	ldw	r5,1152(sp)
1000b2e8:	d9811a04 	addi	r6,sp,1128
1000b2ec:	da812a15 	stw	r10,1192(sp)
1000b2f0:	000a16c0 	call	1000a16c <__sprint_r.part.0>
1000b2f4:	da812a17 	ldw	r10,1192(sp)
1000b2f8:	103efd1e 	bne	r2,zero,1000aef0 <__alt_data_end+0xf800aef0>
1000b2fc:	d9411b17 	ldw	r5,1132(sp)
1000b300:	d8c11c17 	ldw	r3,1136(sp)
1000b304:	d811883a 	mov	r8,sp
1000b308:	28800044 	addi	r2,r5,1
1000b30c:	003d6a06 	br	1000a8b8 <__alt_data_end+0xf800a8b8>
1000b310:	1800a01e 	bne	r3,zero,1000b594 <___vfiprintf_internal_r+0x1314>
1000b314:	000b883a 	mov	r5,zero
1000b318:	00800044 	movi	r2,1
1000b31c:	d811883a 	mov	r8,sp
1000b320:	003d7406 	br	1000a8f4 <__alt_data_end+0xf800a8f4>
1000b324:	d9012117 	ldw	r4,1156(sp)
1000b328:	d9412017 	ldw	r5,1152(sp)
1000b32c:	d9811a04 	addi	r6,sp,1128
1000b330:	000a16c0 	call	1000a16c <__sprint_r.part.0>
1000b334:	103eee1e 	bne	r2,zero,1000aef0 <__alt_data_end+0xf800aef0>
1000b338:	d8811b17 	ldw	r2,1132(sp)
1000b33c:	d8c11c17 	ldw	r3,1136(sp)
1000b340:	d811883a 	mov	r8,sp
1000b344:	10800044 	addi	r2,r2,1
1000b348:	003d8f06 	br	1000a988 <__alt_data_end+0xf800a988>
1000b34c:	04e7c83a 	sub	r19,zero,r19
1000b350:	9804c03a 	cmpne	r2,r19,zero
1000b354:	056bc83a 	sub	r21,zero,r21
1000b358:	a8abc83a 	sub	r21,r21,r2
1000b35c:	05800b44 	movi	r22,45
1000b360:	dd811d85 	stb	r22,1142(sp)
1000b364:	8029883a 	mov	r20,r16
1000b368:	00800044 	movi	r2,1
1000b36c:	9d46b03a 	or	r3,r19,r21
1000b370:	003cfa06 	br	1000a75c <__alt_data_end+0xf800a75c>
1000b374:	000b883a 	mov	r5,zero
1000b378:	00800044 	movi	r2,1
1000b37c:	d811883a 	mov	r8,sp
1000b380:	503d5a26 	beq	r10,zero,1000a8ec <__alt_data_end+0xf800a8ec>
1000b384:	00c00084 	movi	r3,2
1000b388:	d9011d04 	addi	r4,sp,1140
1000b38c:	d9000015 	stw	r4,0(sp)
1000b390:	d8c00115 	stw	r3,4(sp)
1000b394:	003d5206 	br	1000a8e0 <__alt_data_end+0xf800a8e0>
1000b398:	9080040c 	andi	r2,r18,16
1000b39c:	1000421e 	bne	r2,zero,1000b4a8 <___vfiprintf_internal_r+0x1228>
1000b3a0:	9480100c 	andi	r18,r18,64
1000b3a4:	90009c26 	beq	r18,zero,1000b618 <___vfiprintf_internal_r+0x1398>
1000b3a8:	d9412317 	ldw	r5,1164(sp)
1000b3ac:	d8c12517 	ldw	r3,1172(sp)
1000b3b0:	28800017 	ldw	r2,0(r5)
1000b3b4:	29400104 	addi	r5,r5,4
1000b3b8:	d9412315 	stw	r5,1164(sp)
1000b3bc:	10c0000d 	sth	r3,0(r2)
1000b3c0:	003be706 	br	1000a360 <__alt_data_end+0xf800a360>
1000b3c4:	90c0100c 	andi	r3,r18,64
1000b3c8:	18003e26 	beq	r3,zero,1000b4c4 <___vfiprintf_internal_r+0x1244>
1000b3cc:	d8c12317 	ldw	r3,1164(sp)
1000b3d0:	14c0000b 	ldhu	r19,0(r2)
1000b3d4:	002b883a 	mov	r21,zero
1000b3d8:	18c00104 	addi	r3,r3,4
1000b3dc:	d8c12315 	stw	r3,1164(sp)
1000b3e0:	003db706 	br	1000aac0 <__alt_data_end+0xf800aac0>
1000b3e4:	9080100c 	andi	r2,r18,64
1000b3e8:	10004c26 	beq	r2,zero,1000b51c <___vfiprintf_internal_r+0x129c>
1000b3ec:	1cc0000f 	ldh	r19,0(r3)
1000b3f0:	d8812317 	ldw	r2,1164(sp)
1000b3f4:	982bd7fa 	srai	r21,r19,31
1000b3f8:	10800104 	addi	r2,r2,4
1000b3fc:	d8812315 	stw	r2,1164(sp)
1000b400:	a805883a 	mov	r2,r21
1000b404:	003cd006 	br	1000a748 <__alt_data_end+0xf800a748>
1000b408:	00800084 	movi	r2,2
1000b40c:	003d8906 	br	1000aa34 <__alt_data_end+0xf800aa34>
1000b410:	b9800007 	ldb	r6,0(r23)
1000b414:	003bfb06 	br	1000a404 <__alt_data_end+0xf800a404>
1000b418:	9080100c 	andi	r2,r18,64
1000b41c:	10003726 	beq	r2,zero,1000b4fc <___vfiprintf_internal_r+0x127c>
1000b420:	d9412317 	ldw	r5,1164(sp)
1000b424:	002b883a 	mov	r21,zero
1000b428:	0005883a 	mov	r2,zero
1000b42c:	2cc0000b 	ldhu	r19,0(r5)
1000b430:	29400104 	addi	r5,r5,4
1000b434:	d9412315 	stw	r5,1164(sp)
1000b438:	9807883a 	mov	r3,r19
1000b43c:	003d7d06 	br	1000aa34 <__alt_data_end+0xf800aa34>
1000b440:	9080100c 	andi	r2,r18,64
1000b444:	10002526 	beq	r2,zero,1000b4dc <___vfiprintf_internal_r+0x125c>
1000b448:	d8812317 	ldw	r2,1164(sp)
1000b44c:	002b883a 	mov	r21,zero
1000b450:	14c0000b 	ldhu	r19,0(r2)
1000b454:	10800104 	addi	r2,r2,4
1000b458:	d8812315 	stw	r2,1164(sp)
1000b45c:	9807883a 	mov	r3,r19
1000b460:	00800044 	movi	r2,1
1000b464:	003d7306 	br	1000aa34 <__alt_data_end+0xf800aa34>
1000b468:	d9012117 	ldw	r4,1156(sp)
1000b46c:	d9412017 	ldw	r5,1152(sp)
1000b470:	d9811a04 	addi	r6,sp,1128
1000b474:	da812a15 	stw	r10,1192(sp)
1000b478:	000a16c0 	call	1000a16c <__sprint_r.part.0>
1000b47c:	da812a17 	ldw	r10,1192(sp)
1000b480:	103e9b1e 	bne	r2,zero,1000aef0 <__alt_data_end+0xf800aef0>
1000b484:	d9411b17 	ldw	r5,1132(sp)
1000b488:	d8c11c17 	ldw	r3,1136(sp)
1000b48c:	d811883a 	mov	r8,sp
1000b490:	28800044 	addi	r2,r5,1
1000b494:	003e5006 	br	1000add8 <__alt_data_end+0xf800add8>
1000b498:	182b883a 	mov	r21,r3
1000b49c:	003ed006 	br	1000afe0 <__alt_data_end+0xf800afe0>
1000b4a0:	8029883a 	mov	r20,r16
1000b4a4:	003dc606 	br	1000abc0 <__alt_data_end+0xf800abc0>
1000b4a8:	d8c12317 	ldw	r3,1164(sp)
1000b4ac:	d9012517 	ldw	r4,1172(sp)
1000b4b0:	18800017 	ldw	r2,0(r3)
1000b4b4:	18c00104 	addi	r3,r3,4
1000b4b8:	d8c12315 	stw	r3,1164(sp)
1000b4bc:	11000015 	stw	r4,0(r2)
1000b4c0:	003ba706 	br	1000a360 <__alt_data_end+0xf800a360>
1000b4c4:	d9012317 	ldw	r4,1164(sp)
1000b4c8:	14c00017 	ldw	r19,0(r2)
1000b4cc:	002b883a 	mov	r21,zero
1000b4d0:	21000104 	addi	r4,r4,4
1000b4d4:	d9012315 	stw	r4,1164(sp)
1000b4d8:	003d7906 	br	1000aac0 <__alt_data_end+0xf800aac0>
1000b4dc:	d8c12317 	ldw	r3,1164(sp)
1000b4e0:	002b883a 	mov	r21,zero
1000b4e4:	00800044 	movi	r2,1
1000b4e8:	1cc00017 	ldw	r19,0(r3)
1000b4ec:	18c00104 	addi	r3,r3,4
1000b4f0:	d8c12315 	stw	r3,1164(sp)
1000b4f4:	9807883a 	mov	r3,r19
1000b4f8:	003d4e06 	br	1000aa34 <__alt_data_end+0xf800aa34>
1000b4fc:	d8812317 	ldw	r2,1164(sp)
1000b500:	002b883a 	mov	r21,zero
1000b504:	14c00017 	ldw	r19,0(r2)
1000b508:	10800104 	addi	r2,r2,4
1000b50c:	d8812315 	stw	r2,1164(sp)
1000b510:	9807883a 	mov	r3,r19
1000b514:	0005883a 	mov	r2,zero
1000b518:	003d4606 	br	1000aa34 <__alt_data_end+0xf800aa34>
1000b51c:	1cc00017 	ldw	r19,0(r3)
1000b520:	d8c12317 	ldw	r3,1164(sp)
1000b524:	982bd7fa 	srai	r21,r19,31
1000b528:	18c00104 	addi	r3,r3,4
1000b52c:	d8c12315 	stw	r3,1164(sp)
1000b530:	a805883a 	mov	r2,r21
1000b534:	003c8406 	br	1000a748 <__alt_data_end+0xf800a748>
1000b538:	01040074 	movhi	r4,4097
1000b53c:	2102eb04 	addi	r4,r4,2988
1000b540:	d9012615 	stw	r4,1176(sp)
1000b544:	003d0606 	br	1000a960 <__alt_data_end+0xf800a960>
1000b548:	b9800043 	ldbu	r6,1(r23)
1000b54c:	94800814 	ori	r18,r18,32
1000b550:	bdc00044 	addi	r23,r23,1
1000b554:	31803fcc 	andi	r6,r6,255
1000b558:	3180201c 	xori	r6,r6,128
1000b55c:	31bfe004 	addi	r6,r6,-128
1000b560:	003ba806 	br	1000a404 <__alt_data_end+0xf800a404>
1000b564:	d8811e17 	ldw	r2,1144(sp)
1000b568:	d8c12217 	ldw	r3,1160(sp)
1000b56c:	10e9c83a 	sub	r20,r2,r3
1000b570:	003c9406 	br	1000a7c4 <__alt_data_end+0xf800a7c4>
1000b574:	da012a15 	stw	r8,1192(sp)
1000b578:	000a0d40 	call	1000a0d4 <strlen>
1000b57c:	1029883a 	mov	r20,r2
1000b580:	dd811d83 	ldbu	r22,1142(sp)
1000b584:	dcc12315 	stw	r19,1164(sp)
1000b588:	0021883a 	mov	r16,zero
1000b58c:	da012a17 	ldw	r8,1192(sp)
1000b590:	003c8c06 	br	1000a7c4 <__alt_data_end+0xf800a7c4>
1000b594:	d9012117 	ldw	r4,1156(sp)
1000b598:	d9412017 	ldw	r5,1152(sp)
1000b59c:	d9811a04 	addi	r6,sp,1128
1000b5a0:	000a16c0 	call	1000a16c <__sprint_r.part.0>
1000b5a4:	103e521e 	bne	r2,zero,1000aef0 <__alt_data_end+0xf800aef0>
1000b5a8:	d9411b17 	ldw	r5,1132(sp)
1000b5ac:	d8c11c17 	ldw	r3,1136(sp)
1000b5b0:	d811883a 	mov	r8,sp
1000b5b4:	28800044 	addi	r2,r5,1
1000b5b8:	003cce06 	br	1000a8f4 <__alt_data_end+0xf800a8f4>
1000b5bc:	01440074 	movhi	r5,4097
1000b5c0:	2942ef04 	addi	r5,r5,3004
1000b5c4:	d9412615 	stw	r5,1176(sp)
1000b5c8:	d9411b17 	ldw	r5,1132(sp)
1000b5cc:	29400044 	addi	r5,r5,1
1000b5d0:	003cad06 	br	1000a888 <__alt_data_end+0xf800a888>
1000b5d4:	00800184 	movi	r2,6
1000b5d8:	1400012e 	bgeu	r2,r16,1000b5e0 <___vfiprintf_internal_r+0x1360>
1000b5dc:	1021883a 	mov	r16,r2
1000b5e0:	8029883a 	mov	r20,r16
1000b5e4:	802b883a 	mov	r21,r16
1000b5e8:	80001c16 	blt	r16,zero,1000b65c <___vfiprintf_internal_r+0x13dc>
1000b5ec:	00c40074 	movhi	r3,4097
1000b5f0:	18c28f04 	addi	r3,r3,2620
1000b5f4:	dcc12315 	stw	r19,1164(sp)
1000b5f8:	d8c12215 	stw	r3,1160(sp)
1000b5fc:	003cff06 	br	1000a9fc <__alt_data_end+0xf800a9fc>
1000b600:	d9411b17 	ldw	r5,1132(sp)
1000b604:	00840074 	movhi	r2,4097
1000b608:	1082ef04 	addi	r2,r2,3004
1000b60c:	d8812615 	stw	r2,1176(sp)
1000b610:	29400044 	addi	r5,r5,1
1000b614:	003e6706 	br	1000afb4 <__alt_data_end+0xf800afb4>
1000b618:	d9012317 	ldw	r4,1164(sp)
1000b61c:	d9412517 	ldw	r5,1172(sp)
1000b620:	20800017 	ldw	r2,0(r4)
1000b624:	21000104 	addi	r4,r4,4
1000b628:	d9012315 	stw	r4,1164(sp)
1000b62c:	11400015 	stw	r5,0(r2)
1000b630:	003b4b06 	br	1000a360 <__alt_data_end+0xf800a360>
1000b634:	8029883a 	mov	r20,r16
1000b638:	dd811d83 	ldbu	r22,1142(sp)
1000b63c:	dcc12315 	stw	r19,1164(sp)
1000b640:	0021883a 	mov	r16,zero
1000b644:	003c5f06 	br	1000a7c4 <__alt_data_end+0xf800a7c4>
1000b648:	01040074 	movhi	r4,4097
1000b64c:	2102eb04 	addi	r4,r4,2988
1000b650:	d9012615 	stw	r4,1176(sp)
1000b654:	1009883a 	mov	r4,r2
1000b658:	003ea006 	br	1000b0dc <__alt_data_end+0xf800b0dc>
1000b65c:	002b883a 	mov	r21,zero
1000b660:	003fe206 	br	1000b5ec <__alt_data_end+0xf800b5ec>
1000b664:	d9412317 	ldw	r5,1164(sp)
1000b668:	b807883a 	mov	r3,r23
1000b66c:	102f883a 	mov	r23,r2
1000b670:	2c000017 	ldw	r16,0(r5)
1000b674:	29000104 	addi	r4,r5,4
1000b678:	d9012315 	stw	r4,1164(sp)
1000b67c:	80000416 	blt	r16,zero,1000b690 <___vfiprintf_internal_r+0x1410>
1000b680:	19800047 	ldb	r6,1(r3)
1000b684:	003b5f06 	br	1000a404 <__alt_data_end+0xf800a404>
1000b688:	043fffc4 	movi	r16,-1
1000b68c:	003bef06 	br	1000a64c <__alt_data_end+0xf800a64c>
1000b690:	043fffc4 	movi	r16,-1
1000b694:	19800047 	ldb	r6,1(r3)
1000b698:	003b5a06 	br	1000a404 <__alt_data_end+0xf800a404>
1000b69c:	282b883a 	mov	r21,r5
1000b6a0:	003cc706 	br	1000a9c0 <__alt_data_end+0xf800a9c0>

1000b6a4 <__vfiprintf_internal>:
1000b6a4:	2007883a 	mov	r3,r4
1000b6a8:	01040074 	movhi	r4,4097
1000b6ac:	2109ac04 	addi	r4,r4,9904
1000b6b0:	21000017 	ldw	r4,0(r4)
1000b6b4:	2805883a 	mov	r2,r5
1000b6b8:	300f883a 	mov	r7,r6
1000b6bc:	180b883a 	mov	r5,r3
1000b6c0:	100d883a 	mov	r6,r2
1000b6c4:	000a2801 	jmpi	1000a280 <___vfiprintf_internal_r>

1000b6c8 <_write_r>:
1000b6c8:	defffd04 	addi	sp,sp,-12
1000b6cc:	dc000015 	stw	r16,0(sp)
1000b6d0:	04040074 	movhi	r16,4097
1000b6d4:	dc400115 	stw	r17,4(sp)
1000b6d8:	84108304 	addi	r16,r16,16908
1000b6dc:	2023883a 	mov	r17,r4
1000b6e0:	2809883a 	mov	r4,r5
1000b6e4:	300b883a 	mov	r5,r6
1000b6e8:	380d883a 	mov	r6,r7
1000b6ec:	dfc00215 	stw	ra,8(sp)
1000b6f0:	80000015 	stw	zero,0(r16)
1000b6f4:	000ea880 	call	1000ea88 <write>
1000b6f8:	00ffffc4 	movi	r3,-1
1000b6fc:	10c00526 	beq	r2,r3,1000b714 <_write_r+0x4c>
1000b700:	dfc00217 	ldw	ra,8(sp)
1000b704:	dc400117 	ldw	r17,4(sp)
1000b708:	dc000017 	ldw	r16,0(sp)
1000b70c:	dec00304 	addi	sp,sp,12
1000b710:	f800283a 	ret
1000b714:	80c00017 	ldw	r3,0(r16)
1000b718:	183ff926 	beq	r3,zero,1000b700 <__alt_data_end+0xf800b700>
1000b71c:	88c00015 	stw	r3,0(r17)
1000b720:	003ff706 	br	1000b700 <__alt_data_end+0xf800b700>

1000b724 <_close_r>:
1000b724:	defffd04 	addi	sp,sp,-12
1000b728:	dc000015 	stw	r16,0(sp)
1000b72c:	04040074 	movhi	r16,4097
1000b730:	dc400115 	stw	r17,4(sp)
1000b734:	84108304 	addi	r16,r16,16908
1000b738:	2023883a 	mov	r17,r4
1000b73c:	2809883a 	mov	r4,r5
1000b740:	dfc00215 	stw	ra,8(sp)
1000b744:	80000015 	stw	zero,0(r16)
1000b748:	000e1e40 	call	1000e1e4 <close>
1000b74c:	00ffffc4 	movi	r3,-1
1000b750:	10c00526 	beq	r2,r3,1000b768 <_close_r+0x44>
1000b754:	dfc00217 	ldw	ra,8(sp)
1000b758:	dc400117 	ldw	r17,4(sp)
1000b75c:	dc000017 	ldw	r16,0(sp)
1000b760:	dec00304 	addi	sp,sp,12
1000b764:	f800283a 	ret
1000b768:	80c00017 	ldw	r3,0(r16)
1000b76c:	183ff926 	beq	r3,zero,1000b754 <__alt_data_end+0xf800b754>
1000b770:	88c00015 	stw	r3,0(r17)
1000b774:	003ff706 	br	1000b754 <__alt_data_end+0xf800b754>

1000b778 <_calloc_r>:
1000b778:	defffe04 	addi	sp,sp,-8
1000b77c:	dc000015 	stw	r16,0(sp)
1000b780:	2021883a 	mov	r16,r4
1000b784:	2809883a 	mov	r4,r5
1000b788:	300b883a 	mov	r5,r6
1000b78c:	dfc00115 	stw	ra,4(sp)
1000b790:	00024fc0 	call	100024fc <__mulsi3>
1000b794:	8009883a 	mov	r4,r16
1000b798:	100b883a 	mov	r5,r2
1000b79c:	00082f80 	call	100082f8 <_malloc_r>
1000b7a0:	1021883a 	mov	r16,r2
1000b7a4:	10002826 	beq	r2,zero,1000b848 <_calloc_r+0xd0>
1000b7a8:	11bfff17 	ldw	r6,-4(r2)
1000b7ac:	00bfff04 	movi	r2,-4
1000b7b0:	00c00904 	movi	r3,36
1000b7b4:	308c703a 	and	r6,r6,r2
1000b7b8:	308d883a 	add	r6,r6,r2
1000b7bc:	19801436 	bltu	r3,r6,1000b810 <_calloc_r+0x98>
1000b7c0:	008004c4 	movi	r2,19
1000b7c4:	11800936 	bltu	r2,r6,1000b7ec <_calloc_r+0x74>
1000b7c8:	8005883a 	mov	r2,r16
1000b7cc:	10000015 	stw	zero,0(r2)
1000b7d0:	10000115 	stw	zero,4(r2)
1000b7d4:	10000215 	stw	zero,8(r2)
1000b7d8:	8005883a 	mov	r2,r16
1000b7dc:	dfc00117 	ldw	ra,4(sp)
1000b7e0:	dc000017 	ldw	r16,0(sp)
1000b7e4:	dec00204 	addi	sp,sp,8
1000b7e8:	f800283a 	ret
1000b7ec:	80000015 	stw	zero,0(r16)
1000b7f0:	80000115 	stw	zero,4(r16)
1000b7f4:	008006c4 	movi	r2,27
1000b7f8:	11800d2e 	bgeu	r2,r6,1000b830 <_calloc_r+0xb8>
1000b7fc:	80000215 	stw	zero,8(r16)
1000b800:	80000315 	stw	zero,12(r16)
1000b804:	30c00c26 	beq	r6,r3,1000b838 <_calloc_r+0xc0>
1000b808:	80800404 	addi	r2,r16,16
1000b80c:	003fef06 	br	1000b7cc <__alt_data_end+0xf800b7cc>
1000b810:	8009883a 	mov	r4,r16
1000b814:	000b883a 	mov	r5,zero
1000b818:	0008cc00 	call	10008cc0 <memset>
1000b81c:	8005883a 	mov	r2,r16
1000b820:	dfc00117 	ldw	ra,4(sp)
1000b824:	dc000017 	ldw	r16,0(sp)
1000b828:	dec00204 	addi	sp,sp,8
1000b82c:	f800283a 	ret
1000b830:	80800204 	addi	r2,r16,8
1000b834:	003fe506 	br	1000b7cc <__alt_data_end+0xf800b7cc>
1000b838:	80000415 	stw	zero,16(r16)
1000b83c:	80800604 	addi	r2,r16,24
1000b840:	80000515 	stw	zero,20(r16)
1000b844:	003fe106 	br	1000b7cc <__alt_data_end+0xf800b7cc>
1000b848:	0005883a 	mov	r2,zero
1000b84c:	003fe306 	br	1000b7dc <__alt_data_end+0xf800b7dc>

1000b850 <_fclose_r>:
1000b850:	28003226 	beq	r5,zero,1000b91c <_fclose_r+0xcc>
1000b854:	defffc04 	addi	sp,sp,-16
1000b858:	dc400115 	stw	r17,4(sp)
1000b85c:	2023883a 	mov	r17,r4
1000b860:	dc000015 	stw	r16,0(sp)
1000b864:	dfc00315 	stw	ra,12(sp)
1000b868:	dc800215 	stw	r18,8(sp)
1000b86c:	2821883a 	mov	r16,r5
1000b870:	0007a9c0 	call	10007a9c <__sfp_lock_acquire>
1000b874:	88000226 	beq	r17,zero,1000b880 <_fclose_r+0x30>
1000b878:	88800e17 	ldw	r2,56(r17)
1000b87c:	10002926 	beq	r2,zero,1000b924 <_fclose_r+0xd4>
1000b880:	8080030f 	ldh	r2,12(r16)
1000b884:	10002226 	beq	r2,zero,1000b910 <_fclose_r+0xc0>
1000b888:	8809883a 	mov	r4,r17
1000b88c:	800b883a 	mov	r5,r16
1000b890:	00074d00 	call	100074d0 <_fflush_r>
1000b894:	1025883a 	mov	r18,r2
1000b898:	80800b17 	ldw	r2,44(r16)
1000b89c:	10000426 	beq	r2,zero,1000b8b0 <_fclose_r+0x60>
1000b8a0:	81400717 	ldw	r5,28(r16)
1000b8a4:	8809883a 	mov	r4,r17
1000b8a8:	103ee83a 	callr	r2
1000b8ac:	10002616 	blt	r2,zero,1000b948 <_fclose_r+0xf8>
1000b8b0:	8080030b 	ldhu	r2,12(r16)
1000b8b4:	1080200c 	andi	r2,r2,128
1000b8b8:	10001f1e 	bne	r2,zero,1000b938 <_fclose_r+0xe8>
1000b8bc:	81400c17 	ldw	r5,48(r16)
1000b8c0:	28000526 	beq	r5,zero,1000b8d8 <_fclose_r+0x88>
1000b8c4:	80801004 	addi	r2,r16,64
1000b8c8:	28800226 	beq	r5,r2,1000b8d4 <_fclose_r+0x84>
1000b8cc:	8809883a 	mov	r4,r17
1000b8d0:	0007c000 	call	10007c00 <_free_r>
1000b8d4:	80000c15 	stw	zero,48(r16)
1000b8d8:	81401117 	ldw	r5,68(r16)
1000b8dc:	28000326 	beq	r5,zero,1000b8ec <_fclose_r+0x9c>
1000b8e0:	8809883a 	mov	r4,r17
1000b8e4:	0007c000 	call	10007c00 <_free_r>
1000b8e8:	80001115 	stw	zero,68(r16)
1000b8ec:	8000030d 	sth	zero,12(r16)
1000b8f0:	0007aa00 	call	10007aa0 <__sfp_lock_release>
1000b8f4:	9005883a 	mov	r2,r18
1000b8f8:	dfc00317 	ldw	ra,12(sp)
1000b8fc:	dc800217 	ldw	r18,8(sp)
1000b900:	dc400117 	ldw	r17,4(sp)
1000b904:	dc000017 	ldw	r16,0(sp)
1000b908:	dec00404 	addi	sp,sp,16
1000b90c:	f800283a 	ret
1000b910:	0007aa00 	call	10007aa0 <__sfp_lock_release>
1000b914:	0005883a 	mov	r2,zero
1000b918:	003ff706 	br	1000b8f8 <__alt_data_end+0xf800b8f8>
1000b91c:	0005883a 	mov	r2,zero
1000b920:	f800283a 	ret
1000b924:	8809883a 	mov	r4,r17
1000b928:	0007a8c0 	call	10007a8c <__sinit>
1000b92c:	8080030f 	ldh	r2,12(r16)
1000b930:	103fd51e 	bne	r2,zero,1000b888 <__alt_data_end+0xf800b888>
1000b934:	003ff606 	br	1000b910 <__alt_data_end+0xf800b910>
1000b938:	81400417 	ldw	r5,16(r16)
1000b93c:	8809883a 	mov	r4,r17
1000b940:	0007c000 	call	10007c00 <_free_r>
1000b944:	003fdd06 	br	1000b8bc <__alt_data_end+0xf800b8bc>
1000b948:	04bfffc4 	movi	r18,-1
1000b94c:	003fd806 	br	1000b8b0 <__alt_data_end+0xf800b8b0>

1000b950 <fclose>:
1000b950:	00840074 	movhi	r2,4097
1000b954:	1089ac04 	addi	r2,r2,9904
1000b958:	200b883a 	mov	r5,r4
1000b95c:	11000017 	ldw	r4,0(r2)
1000b960:	000b8501 	jmpi	1000b850 <_fclose_r>

1000b964 <_fputwc_r>:
1000b964:	3080030b 	ldhu	r2,12(r6)
1000b968:	defff804 	addi	sp,sp,-32
1000b96c:	dcc00415 	stw	r19,16(sp)
1000b970:	dc800315 	stw	r18,12(sp)
1000b974:	dc000115 	stw	r16,4(sp)
1000b978:	dfc00715 	stw	ra,28(sp)
1000b97c:	dd400615 	stw	r21,24(sp)
1000b980:	dd000515 	stw	r20,20(sp)
1000b984:	dc400215 	stw	r17,8(sp)
1000b988:	10c8000c 	andi	r3,r2,8192
1000b98c:	3021883a 	mov	r16,r6
1000b990:	2027883a 	mov	r19,r4
1000b994:	2825883a 	mov	r18,r5
1000b998:	1800051e 	bne	r3,zero,1000b9b0 <_fputwc_r+0x4c>
1000b99c:	30c01917 	ldw	r3,100(r6)
1000b9a0:	10880014 	ori	r2,r2,8192
1000b9a4:	3080030d 	sth	r2,12(r6)
1000b9a8:	18880014 	ori	r2,r3,8192
1000b9ac:	30801915 	stw	r2,100(r6)
1000b9b0:	00080e80 	call	100080e8 <__locale_mb_cur_max>
1000b9b4:	00c00044 	movi	r3,1
1000b9b8:	10c03e26 	beq	r2,r3,1000bab4 <_fputwc_r+0x150>
1000b9bc:	9809883a 	mov	r4,r19
1000b9c0:	d80b883a 	mov	r5,sp
1000b9c4:	900d883a 	mov	r6,r18
1000b9c8:	81c01704 	addi	r7,r16,92
1000b9cc:	000c9b40 	call	1000c9b4 <_wcrtomb_r>
1000b9d0:	1029883a 	mov	r20,r2
1000b9d4:	00bfffc4 	movi	r2,-1
1000b9d8:	a0802026 	beq	r20,r2,1000ba5c <_fputwc_r+0xf8>
1000b9dc:	d9400003 	ldbu	r5,0(sp)
1000b9e0:	a0001c26 	beq	r20,zero,1000ba54 <_fputwc_r+0xf0>
1000b9e4:	0023883a 	mov	r17,zero
1000b9e8:	05400284 	movi	r21,10
1000b9ec:	00000906 	br	1000ba14 <_fputwc_r+0xb0>
1000b9f0:	80800017 	ldw	r2,0(r16)
1000b9f4:	11400005 	stb	r5,0(r2)
1000b9f8:	80c00017 	ldw	r3,0(r16)
1000b9fc:	18c00044 	addi	r3,r3,1
1000ba00:	80c00015 	stw	r3,0(r16)
1000ba04:	8c400044 	addi	r17,r17,1
1000ba08:	dc45883a 	add	r2,sp,r17
1000ba0c:	8d00112e 	bgeu	r17,r20,1000ba54 <_fputwc_r+0xf0>
1000ba10:	11400003 	ldbu	r5,0(r2)
1000ba14:	80c00217 	ldw	r3,8(r16)
1000ba18:	18ffffc4 	addi	r3,r3,-1
1000ba1c:	80c00215 	stw	r3,8(r16)
1000ba20:	183ff30e 	bge	r3,zero,1000b9f0 <__alt_data_end+0xf800b9f0>
1000ba24:	80800617 	ldw	r2,24(r16)
1000ba28:	18801916 	blt	r3,r2,1000ba90 <_fputwc_r+0x12c>
1000ba2c:	80800017 	ldw	r2,0(r16)
1000ba30:	11400005 	stb	r5,0(r2)
1000ba34:	80800017 	ldw	r2,0(r16)
1000ba38:	10c00003 	ldbu	r3,0(r2)
1000ba3c:	10800044 	addi	r2,r2,1
1000ba40:	1d402326 	beq	r3,r21,1000bad0 <_fputwc_r+0x16c>
1000ba44:	80800015 	stw	r2,0(r16)
1000ba48:	8c400044 	addi	r17,r17,1
1000ba4c:	dc45883a 	add	r2,sp,r17
1000ba50:	8d3fef36 	bltu	r17,r20,1000ba10 <__alt_data_end+0xf800ba10>
1000ba54:	9005883a 	mov	r2,r18
1000ba58:	00000406 	br	1000ba6c <_fputwc_r+0x108>
1000ba5c:	80c0030b 	ldhu	r3,12(r16)
1000ba60:	a005883a 	mov	r2,r20
1000ba64:	18c01014 	ori	r3,r3,64
1000ba68:	80c0030d 	sth	r3,12(r16)
1000ba6c:	dfc00717 	ldw	ra,28(sp)
1000ba70:	dd400617 	ldw	r21,24(sp)
1000ba74:	dd000517 	ldw	r20,20(sp)
1000ba78:	dcc00417 	ldw	r19,16(sp)
1000ba7c:	dc800317 	ldw	r18,12(sp)
1000ba80:	dc400217 	ldw	r17,8(sp)
1000ba84:	dc000117 	ldw	r16,4(sp)
1000ba88:	dec00804 	addi	sp,sp,32
1000ba8c:	f800283a 	ret
1000ba90:	9809883a 	mov	r4,r19
1000ba94:	29403fcc 	andi	r5,r5,255
1000ba98:	800d883a 	mov	r6,r16
1000ba9c:	000c8440 	call	1000c844 <__swbuf_r>
1000baa0:	10bfffe0 	cmpeqi	r2,r2,-1
1000baa4:	10803fcc 	andi	r2,r2,255
1000baa8:	103fd626 	beq	r2,zero,1000ba04 <__alt_data_end+0xf800ba04>
1000baac:	00bfffc4 	movi	r2,-1
1000bab0:	003fee06 	br	1000ba6c <__alt_data_end+0xf800ba6c>
1000bab4:	90ffffc4 	addi	r3,r18,-1
1000bab8:	01003f84 	movi	r4,254
1000babc:	20ffbf36 	bltu	r4,r3,1000b9bc <__alt_data_end+0xf800b9bc>
1000bac0:	900b883a 	mov	r5,r18
1000bac4:	dc800005 	stb	r18,0(sp)
1000bac8:	1029883a 	mov	r20,r2
1000bacc:	003fc506 	br	1000b9e4 <__alt_data_end+0xf800b9e4>
1000bad0:	9809883a 	mov	r4,r19
1000bad4:	a80b883a 	mov	r5,r21
1000bad8:	800d883a 	mov	r6,r16
1000badc:	000c8440 	call	1000c844 <__swbuf_r>
1000bae0:	10bfffe0 	cmpeqi	r2,r2,-1
1000bae4:	003fef06 	br	1000baa4 <__alt_data_end+0xf800baa4>

1000bae8 <fputwc>:
1000bae8:	defffc04 	addi	sp,sp,-16
1000baec:	dc000115 	stw	r16,4(sp)
1000baf0:	04040074 	movhi	r16,4097
1000baf4:	8409ac04 	addi	r16,r16,9904
1000baf8:	dc400215 	stw	r17,8(sp)
1000bafc:	2023883a 	mov	r17,r4
1000bb00:	81000017 	ldw	r4,0(r16)
1000bb04:	dfc00315 	stw	ra,12(sp)
1000bb08:	280d883a 	mov	r6,r5
1000bb0c:	20000626 	beq	r4,zero,1000bb28 <fputwc+0x40>
1000bb10:	20800e17 	ldw	r2,56(r4)
1000bb14:	1000041e 	bne	r2,zero,1000bb28 <fputwc+0x40>
1000bb18:	d9400015 	stw	r5,0(sp)
1000bb1c:	0007a8c0 	call	10007a8c <__sinit>
1000bb20:	81000017 	ldw	r4,0(r16)
1000bb24:	d9800017 	ldw	r6,0(sp)
1000bb28:	880b883a 	mov	r5,r17
1000bb2c:	dfc00317 	ldw	ra,12(sp)
1000bb30:	dc400217 	ldw	r17,8(sp)
1000bb34:	dc000117 	ldw	r16,4(sp)
1000bb38:	dec00404 	addi	sp,sp,16
1000bb3c:	000b9641 	jmpi	1000b964 <_fputwc_r>

1000bb40 <_fstat_r>:
1000bb40:	defffd04 	addi	sp,sp,-12
1000bb44:	dc000015 	stw	r16,0(sp)
1000bb48:	04040074 	movhi	r16,4097
1000bb4c:	dc400115 	stw	r17,4(sp)
1000bb50:	84108304 	addi	r16,r16,16908
1000bb54:	2023883a 	mov	r17,r4
1000bb58:	2809883a 	mov	r4,r5
1000bb5c:	300b883a 	mov	r5,r6
1000bb60:	dfc00215 	stw	ra,8(sp)
1000bb64:	80000015 	stw	zero,0(r16)
1000bb68:	000e3380 	call	1000e338 <fstat>
1000bb6c:	00ffffc4 	movi	r3,-1
1000bb70:	10c00526 	beq	r2,r3,1000bb88 <_fstat_r+0x48>
1000bb74:	dfc00217 	ldw	ra,8(sp)
1000bb78:	dc400117 	ldw	r17,4(sp)
1000bb7c:	dc000017 	ldw	r16,0(sp)
1000bb80:	dec00304 	addi	sp,sp,12
1000bb84:	f800283a 	ret
1000bb88:	80c00017 	ldw	r3,0(r16)
1000bb8c:	183ff926 	beq	r3,zero,1000bb74 <__alt_data_end+0xf800bb74>
1000bb90:	88c00015 	stw	r3,0(r17)
1000bb94:	003ff706 	br	1000bb74 <__alt_data_end+0xf800bb74>

1000bb98 <__sfvwrite_r>:
1000bb98:	30800217 	ldw	r2,8(r6)
1000bb9c:	10004526 	beq	r2,zero,1000bcb4 <__sfvwrite_r+0x11c>
1000bba0:	28c0030b 	ldhu	r3,12(r5)
1000bba4:	defff404 	addi	sp,sp,-48
1000bba8:	dd400715 	stw	r21,28(sp)
1000bbac:	dcc00515 	stw	r19,20(sp)
1000bbb0:	dc000215 	stw	r16,8(sp)
1000bbb4:	dfc00b15 	stw	ra,44(sp)
1000bbb8:	df000a15 	stw	fp,40(sp)
1000bbbc:	ddc00915 	stw	r23,36(sp)
1000bbc0:	dd800815 	stw	r22,32(sp)
1000bbc4:	dd000615 	stw	r20,24(sp)
1000bbc8:	dc800415 	stw	r18,16(sp)
1000bbcc:	dc400315 	stw	r17,12(sp)
1000bbd0:	1880020c 	andi	r2,r3,8
1000bbd4:	2821883a 	mov	r16,r5
1000bbd8:	202b883a 	mov	r21,r4
1000bbdc:	3027883a 	mov	r19,r6
1000bbe0:	10002526 	beq	r2,zero,1000bc78 <__sfvwrite_r+0xe0>
1000bbe4:	28800417 	ldw	r2,16(r5)
1000bbe8:	10002326 	beq	r2,zero,1000bc78 <__sfvwrite_r+0xe0>
1000bbec:	1880008c 	andi	r2,r3,2
1000bbf0:	9c400017 	ldw	r17,0(r19)
1000bbf4:	10003126 	beq	r2,zero,1000bcbc <__sfvwrite_r+0x124>
1000bbf8:	0029883a 	mov	r20,zero
1000bbfc:	0025883a 	mov	r18,zero
1000bc00:	05810004 	movi	r22,1024
1000bc04:	a00d883a 	mov	r6,r20
1000bc08:	a809883a 	mov	r4,r21
1000bc0c:	90002526 	beq	r18,zero,1000bca4 <__sfvwrite_r+0x10c>
1000bc10:	900f883a 	mov	r7,r18
1000bc14:	81400717 	ldw	r5,28(r16)
1000bc18:	b480012e 	bgeu	r22,r18,1000bc20 <__sfvwrite_r+0x88>
1000bc1c:	01c10004 	movi	r7,1024
1000bc20:	80800917 	ldw	r2,36(r16)
1000bc24:	103ee83a 	callr	r2
1000bc28:	0080510e 	bge	zero,r2,1000bd70 <__sfvwrite_r+0x1d8>
1000bc2c:	98c00217 	ldw	r3,8(r19)
1000bc30:	a0a9883a 	add	r20,r20,r2
1000bc34:	90a5c83a 	sub	r18,r18,r2
1000bc38:	1885c83a 	sub	r2,r3,r2
1000bc3c:	98800215 	stw	r2,8(r19)
1000bc40:	103ff01e 	bne	r2,zero,1000bc04 <__alt_data_end+0xf800bc04>
1000bc44:	0005883a 	mov	r2,zero
1000bc48:	dfc00b17 	ldw	ra,44(sp)
1000bc4c:	df000a17 	ldw	fp,40(sp)
1000bc50:	ddc00917 	ldw	r23,36(sp)
1000bc54:	dd800817 	ldw	r22,32(sp)
1000bc58:	dd400717 	ldw	r21,28(sp)
1000bc5c:	dd000617 	ldw	r20,24(sp)
1000bc60:	dcc00517 	ldw	r19,20(sp)
1000bc64:	dc800417 	ldw	r18,16(sp)
1000bc68:	dc400317 	ldw	r17,12(sp)
1000bc6c:	dc000217 	ldw	r16,8(sp)
1000bc70:	dec00c04 	addi	sp,sp,48
1000bc74:	f800283a 	ret
1000bc78:	a809883a 	mov	r4,r21
1000bc7c:	800b883a 	mov	r5,r16
1000bc80:	0005a500 	call	10005a50 <__swsetup_r>
1000bc84:	80c0030b 	ldhu	r3,12(r16)
1000bc88:	103fd826 	beq	r2,zero,1000bbec <__alt_data_end+0xf800bbec>
1000bc8c:	18c01014 	ori	r3,r3,64
1000bc90:	80c0030d 	sth	r3,12(r16)
1000bc94:	00c00244 	movi	r3,9
1000bc98:	00bfffc4 	movi	r2,-1
1000bc9c:	a8c00015 	stw	r3,0(r21)
1000bca0:	003fe906 	br	1000bc48 <__alt_data_end+0xf800bc48>
1000bca4:	8d000017 	ldw	r20,0(r17)
1000bca8:	8c800117 	ldw	r18,4(r17)
1000bcac:	8c400204 	addi	r17,r17,8
1000bcb0:	003fd406 	br	1000bc04 <__alt_data_end+0xf800bc04>
1000bcb4:	0005883a 	mov	r2,zero
1000bcb8:	f800283a 	ret
1000bcbc:	1880004c 	andi	r2,r3,1
1000bcc0:	1000301e 	bne	r2,zero,1000bd84 <__sfvwrite_r+0x1ec>
1000bcc4:	002f883a 	mov	r23,zero
1000bcc8:	0025883a 	mov	r18,zero
1000bccc:	90001c26 	beq	r18,zero,1000bd40 <__sfvwrite_r+0x1a8>
1000bcd0:	1880800c 	andi	r2,r3,512
1000bcd4:	85000217 	ldw	r20,8(r16)
1000bcd8:	10006c26 	beq	r2,zero,1000be8c <__sfvwrite_r+0x2f4>
1000bcdc:	a02d883a 	mov	r22,r20
1000bce0:	95008536 	bltu	r18,r20,1000bef8 <__sfvwrite_r+0x360>
1000bce4:	1881200c 	andi	r2,r3,1152
1000bce8:	10009d1e 	bne	r2,zero,1000bf60 <__sfvwrite_r+0x3c8>
1000bcec:	81000017 	ldw	r4,0(r16)
1000bcf0:	a039883a 	mov	fp,r20
1000bcf4:	9029883a 	mov	r20,r18
1000bcf8:	b80b883a 	mov	r5,r23
1000bcfc:	b00d883a 	mov	r6,r22
1000bd00:	000c0ec0 	call	1000c0ec <memmove>
1000bd04:	80c00217 	ldw	r3,8(r16)
1000bd08:	81000017 	ldw	r4,0(r16)
1000bd0c:	9005883a 	mov	r2,r18
1000bd10:	1f39c83a 	sub	fp,r3,fp
1000bd14:	258f883a 	add	r7,r4,r22
1000bd18:	87000215 	stw	fp,8(r16)
1000bd1c:	81c00015 	stw	r7,0(r16)
1000bd20:	98c00217 	ldw	r3,8(r19)
1000bd24:	b8af883a 	add	r23,r23,r2
1000bd28:	90a5c83a 	sub	r18,r18,r2
1000bd2c:	1d05c83a 	sub	r2,r3,r20
1000bd30:	98800215 	stw	r2,8(r19)
1000bd34:	103fc326 	beq	r2,zero,1000bc44 <__alt_data_end+0xf800bc44>
1000bd38:	80c0030b 	ldhu	r3,12(r16)
1000bd3c:	903fe41e 	bne	r18,zero,1000bcd0 <__alt_data_end+0xf800bcd0>
1000bd40:	8dc00017 	ldw	r23,0(r17)
1000bd44:	8c800117 	ldw	r18,4(r17)
1000bd48:	8c400204 	addi	r17,r17,8
1000bd4c:	003fdf06 	br	1000bccc <__alt_data_end+0xf800bccc>
1000bd50:	000c2a40 	call	1000c2a4 <_realloc_r>
1000bd54:	102d883a 	mov	r22,r2
1000bd58:	1000a01e 	bne	r2,zero,1000bfdc <__sfvwrite_r+0x444>
1000bd5c:	81400417 	ldw	r5,16(r16)
1000bd60:	a809883a 	mov	r4,r21
1000bd64:	0007c000 	call	10007c00 <_free_r>
1000bd68:	00800304 	movi	r2,12
1000bd6c:	a8800015 	stw	r2,0(r21)
1000bd70:	80c0030b 	ldhu	r3,12(r16)
1000bd74:	00bfffc4 	movi	r2,-1
1000bd78:	18c01014 	ori	r3,r3,64
1000bd7c:	80c0030d 	sth	r3,12(r16)
1000bd80:	003fb106 	br	1000bc48 <__alt_data_end+0xf800bc48>
1000bd84:	0029883a 	mov	r20,zero
1000bd88:	0011883a 	mov	r8,zero
1000bd8c:	0039883a 	mov	fp,zero
1000bd90:	0025883a 	mov	r18,zero
1000bd94:	90001f26 	beq	r18,zero,1000be14 <__sfvwrite_r+0x27c>
1000bd98:	40006826 	beq	r8,zero,1000bf3c <__sfvwrite_r+0x3a4>
1000bd9c:	a02f883a 	mov	r23,r20
1000bda0:	9500012e 	bgeu	r18,r20,1000bda8 <__sfvwrite_r+0x210>
1000bda4:	902f883a 	mov	r23,r18
1000bda8:	81000017 	ldw	r4,0(r16)
1000bdac:	80800417 	ldw	r2,16(r16)
1000bdb0:	b82d883a 	mov	r22,r23
1000bdb4:	81800217 	ldw	r6,8(r16)
1000bdb8:	81c00517 	ldw	r7,20(r16)
1000bdbc:	1100022e 	bgeu	r2,r4,1000bdc8 <__sfvwrite_r+0x230>
1000bdc0:	31c7883a 	add	r3,r6,r7
1000bdc4:	1dc01816 	blt	r3,r23,1000be28 <__sfvwrite_r+0x290>
1000bdc8:	b9c03f16 	blt	r23,r7,1000bec8 <__sfvwrite_r+0x330>
1000bdcc:	80800917 	ldw	r2,36(r16)
1000bdd0:	81400717 	ldw	r5,28(r16)
1000bdd4:	a809883a 	mov	r4,r21
1000bdd8:	da000115 	stw	r8,4(sp)
1000bddc:	e00d883a 	mov	r6,fp
1000bde0:	103ee83a 	callr	r2
1000bde4:	102d883a 	mov	r22,r2
1000bde8:	da000117 	ldw	r8,4(sp)
1000bdec:	00bfe00e 	bge	zero,r2,1000bd70 <__alt_data_end+0xf800bd70>
1000bdf0:	a5a9c83a 	sub	r20,r20,r22
1000bdf4:	a0001f26 	beq	r20,zero,1000be74 <__sfvwrite_r+0x2dc>
1000bdf8:	98800217 	ldw	r2,8(r19)
1000bdfc:	e5b9883a 	add	fp,fp,r22
1000be00:	95a5c83a 	sub	r18,r18,r22
1000be04:	15adc83a 	sub	r22,r2,r22
1000be08:	9d800215 	stw	r22,8(r19)
1000be0c:	b03f8d26 	beq	r22,zero,1000bc44 <__alt_data_end+0xf800bc44>
1000be10:	903fe11e 	bne	r18,zero,1000bd98 <__alt_data_end+0xf800bd98>
1000be14:	8f000017 	ldw	fp,0(r17)
1000be18:	8c800117 	ldw	r18,4(r17)
1000be1c:	0011883a 	mov	r8,zero
1000be20:	8c400204 	addi	r17,r17,8
1000be24:	003fdb06 	br	1000bd94 <__alt_data_end+0xf800bd94>
1000be28:	180d883a 	mov	r6,r3
1000be2c:	e00b883a 	mov	r5,fp
1000be30:	da000115 	stw	r8,4(sp)
1000be34:	d8c00015 	stw	r3,0(sp)
1000be38:	000c0ec0 	call	1000c0ec <memmove>
1000be3c:	d8c00017 	ldw	r3,0(sp)
1000be40:	80800017 	ldw	r2,0(r16)
1000be44:	a809883a 	mov	r4,r21
1000be48:	800b883a 	mov	r5,r16
1000be4c:	10c5883a 	add	r2,r2,r3
1000be50:	80800015 	stw	r2,0(r16)
1000be54:	d8c00015 	stw	r3,0(sp)
1000be58:	00074d00 	call	100074d0 <_fflush_r>
1000be5c:	d8c00017 	ldw	r3,0(sp)
1000be60:	da000117 	ldw	r8,4(sp)
1000be64:	103fc21e 	bne	r2,zero,1000bd70 <__alt_data_end+0xf800bd70>
1000be68:	182d883a 	mov	r22,r3
1000be6c:	a5a9c83a 	sub	r20,r20,r22
1000be70:	a03fe11e 	bne	r20,zero,1000bdf8 <__alt_data_end+0xf800bdf8>
1000be74:	a809883a 	mov	r4,r21
1000be78:	800b883a 	mov	r5,r16
1000be7c:	00074d00 	call	100074d0 <_fflush_r>
1000be80:	103fbb1e 	bne	r2,zero,1000bd70 <__alt_data_end+0xf800bd70>
1000be84:	0011883a 	mov	r8,zero
1000be88:	003fdb06 	br	1000bdf8 <__alt_data_end+0xf800bdf8>
1000be8c:	81000017 	ldw	r4,0(r16)
1000be90:	80800417 	ldw	r2,16(r16)
1000be94:	1100012e 	bgeu	r2,r4,1000be9c <__sfvwrite_r+0x304>
1000be98:	a4805a36 	bltu	r20,r18,1000c004 <__sfvwrite_r+0x46c>
1000be9c:	81c00517 	ldw	r7,20(r16)
1000bea0:	91c01a36 	bltu	r18,r7,1000bf0c <__sfvwrite_r+0x374>
1000bea4:	80800917 	ldw	r2,36(r16)
1000bea8:	81400717 	ldw	r5,28(r16)
1000beac:	a809883a 	mov	r4,r21
1000beb0:	b80d883a 	mov	r6,r23
1000beb4:	103ee83a 	callr	r2
1000beb8:	1029883a 	mov	r20,r2
1000bebc:	00bfac0e 	bge	zero,r2,1000bd70 <__alt_data_end+0xf800bd70>
1000bec0:	a005883a 	mov	r2,r20
1000bec4:	003f9606 	br	1000bd20 <__alt_data_end+0xf800bd20>
1000bec8:	b80d883a 	mov	r6,r23
1000becc:	e00b883a 	mov	r5,fp
1000bed0:	da000115 	stw	r8,4(sp)
1000bed4:	000c0ec0 	call	1000c0ec <memmove>
1000bed8:	80800217 	ldw	r2,8(r16)
1000bedc:	80c00017 	ldw	r3,0(r16)
1000bee0:	da000117 	ldw	r8,4(sp)
1000bee4:	15c5c83a 	sub	r2,r2,r23
1000bee8:	1def883a 	add	r23,r3,r23
1000beec:	80800215 	stw	r2,8(r16)
1000bef0:	85c00015 	stw	r23,0(r16)
1000bef4:	003fbe06 	br	1000bdf0 <__alt_data_end+0xf800bdf0>
1000bef8:	81000017 	ldw	r4,0(r16)
1000befc:	9039883a 	mov	fp,r18
1000bf00:	9029883a 	mov	r20,r18
1000bf04:	902d883a 	mov	r22,r18
1000bf08:	003f7b06 	br	1000bcf8 <__alt_data_end+0xf800bcf8>
1000bf0c:	b80b883a 	mov	r5,r23
1000bf10:	900d883a 	mov	r6,r18
1000bf14:	000c0ec0 	call	1000c0ec <memmove>
1000bf18:	80c00217 	ldw	r3,8(r16)
1000bf1c:	80800017 	ldw	r2,0(r16)
1000bf20:	9029883a 	mov	r20,r18
1000bf24:	1c87c83a 	sub	r3,r3,r18
1000bf28:	1485883a 	add	r2,r2,r18
1000bf2c:	80800015 	stw	r2,0(r16)
1000bf30:	80c00215 	stw	r3,8(r16)
1000bf34:	9005883a 	mov	r2,r18
1000bf38:	003f7906 	br	1000bd20 <__alt_data_end+0xf800bd20>
1000bf3c:	e009883a 	mov	r4,fp
1000bf40:	01400284 	movi	r5,10
1000bf44:	900d883a 	mov	r6,r18
1000bf48:	0008aa00 	call	10008aa0 <memchr>
1000bf4c:	10003826 	beq	r2,zero,1000c030 <__sfvwrite_r+0x498>
1000bf50:	10800044 	addi	r2,r2,1
1000bf54:	1729c83a 	sub	r20,r2,fp
1000bf58:	02000044 	movi	r8,1
1000bf5c:	003f8f06 	br	1000bd9c <__alt_data_end+0xf800bd9c>
1000bf60:	80800517 	ldw	r2,20(r16)
1000bf64:	81400417 	ldw	r5,16(r16)
1000bf68:	87000017 	ldw	fp,0(r16)
1000bf6c:	10a9883a 	add	r20,r2,r2
1000bf70:	a085883a 	add	r2,r20,r2
1000bf74:	1028d7fa 	srli	r20,r2,31
1000bf78:	e179c83a 	sub	fp,fp,r5
1000bf7c:	e1000044 	addi	r4,fp,1
1000bf80:	a085883a 	add	r2,r20,r2
1000bf84:	1029d07a 	srai	r20,r2,1
1000bf88:	2485883a 	add	r2,r4,r18
1000bf8c:	a00d883a 	mov	r6,r20
1000bf90:	a080022e 	bgeu	r20,r2,1000bf9c <__sfvwrite_r+0x404>
1000bf94:	1029883a 	mov	r20,r2
1000bf98:	100d883a 	mov	r6,r2
1000bf9c:	18c1000c 	andi	r3,r3,1024
1000bfa0:	a809883a 	mov	r4,r21
1000bfa4:	183f6a26 	beq	r3,zero,1000bd50 <__alt_data_end+0xf800bd50>
1000bfa8:	300b883a 	mov	r5,r6
1000bfac:	00082f80 	call	100082f8 <_malloc_r>
1000bfb0:	102d883a 	mov	r22,r2
1000bfb4:	103f6c26 	beq	r2,zero,1000bd68 <__alt_data_end+0xf800bd68>
1000bfb8:	81400417 	ldw	r5,16(r16)
1000bfbc:	1009883a 	mov	r4,r2
1000bfc0:	e00d883a 	mov	r6,fp
1000bfc4:	0008b880 	call	10008b88 <memcpy>
1000bfc8:	8080030b 	ldhu	r2,12(r16)
1000bfcc:	00fedfc4 	movi	r3,-1153
1000bfd0:	10c4703a 	and	r2,r2,r3
1000bfd4:	10802014 	ori	r2,r2,128
1000bfd8:	8080030d 	sth	r2,12(r16)
1000bfdc:	b709883a 	add	r4,r22,fp
1000bfe0:	a707c83a 	sub	r3,r20,fp
1000bfe4:	85800415 	stw	r22,16(r16)
1000bfe8:	85000515 	stw	r20,20(r16)
1000bfec:	81000015 	stw	r4,0(r16)
1000bff0:	9039883a 	mov	fp,r18
1000bff4:	80c00215 	stw	r3,8(r16)
1000bff8:	9029883a 	mov	r20,r18
1000bffc:	902d883a 	mov	r22,r18
1000c000:	003f3d06 	br	1000bcf8 <__alt_data_end+0xf800bcf8>
1000c004:	b80b883a 	mov	r5,r23
1000c008:	a00d883a 	mov	r6,r20
1000c00c:	000c0ec0 	call	1000c0ec <memmove>
1000c010:	80800017 	ldw	r2,0(r16)
1000c014:	a809883a 	mov	r4,r21
1000c018:	800b883a 	mov	r5,r16
1000c01c:	1505883a 	add	r2,r2,r20
1000c020:	80800015 	stw	r2,0(r16)
1000c024:	00074d00 	call	100074d0 <_fflush_r>
1000c028:	103fa526 	beq	r2,zero,1000bec0 <__alt_data_end+0xf800bec0>
1000c02c:	003f5006 	br	1000bd70 <__alt_data_end+0xf800bd70>
1000c030:	95000044 	addi	r20,r18,1
1000c034:	02000044 	movi	r8,1
1000c038:	003f5806 	br	1000bd9c <__alt_data_end+0xf800bd9c>

1000c03c <_isatty_r>:
1000c03c:	defffd04 	addi	sp,sp,-12
1000c040:	dc000015 	stw	r16,0(sp)
1000c044:	04040074 	movhi	r16,4097
1000c048:	dc400115 	stw	r17,4(sp)
1000c04c:	84108304 	addi	r16,r16,16908
1000c050:	2023883a 	mov	r17,r4
1000c054:	2809883a 	mov	r4,r5
1000c058:	dfc00215 	stw	ra,8(sp)
1000c05c:	80000015 	stw	zero,0(r16)
1000c060:	000e4400 	call	1000e440 <isatty>
1000c064:	00ffffc4 	movi	r3,-1
1000c068:	10c00526 	beq	r2,r3,1000c080 <_isatty_r+0x44>
1000c06c:	dfc00217 	ldw	ra,8(sp)
1000c070:	dc400117 	ldw	r17,4(sp)
1000c074:	dc000017 	ldw	r16,0(sp)
1000c078:	dec00304 	addi	sp,sp,12
1000c07c:	f800283a 	ret
1000c080:	80c00017 	ldw	r3,0(r16)
1000c084:	183ff926 	beq	r3,zero,1000c06c <__alt_data_end+0xf800c06c>
1000c088:	88c00015 	stw	r3,0(r17)
1000c08c:	003ff706 	br	1000c06c <__alt_data_end+0xf800c06c>

1000c090 <_lseek_r>:
1000c090:	defffd04 	addi	sp,sp,-12
1000c094:	dc000015 	stw	r16,0(sp)
1000c098:	04040074 	movhi	r16,4097
1000c09c:	dc400115 	stw	r17,4(sp)
1000c0a0:	84108304 	addi	r16,r16,16908
1000c0a4:	2023883a 	mov	r17,r4
1000c0a8:	2809883a 	mov	r4,r5
1000c0ac:	300b883a 	mov	r5,r6
1000c0b0:	380d883a 	mov	r6,r7
1000c0b4:	dfc00215 	stw	ra,8(sp)
1000c0b8:	80000015 	stw	zero,0(r16)
1000c0bc:	000e6200 	call	1000e620 <lseek>
1000c0c0:	00ffffc4 	movi	r3,-1
1000c0c4:	10c00526 	beq	r2,r3,1000c0dc <_lseek_r+0x4c>
1000c0c8:	dfc00217 	ldw	ra,8(sp)
1000c0cc:	dc400117 	ldw	r17,4(sp)
1000c0d0:	dc000017 	ldw	r16,0(sp)
1000c0d4:	dec00304 	addi	sp,sp,12
1000c0d8:	f800283a 	ret
1000c0dc:	80c00017 	ldw	r3,0(r16)
1000c0e0:	183ff926 	beq	r3,zero,1000c0c8 <__alt_data_end+0xf800c0c8>
1000c0e4:	88c00015 	stw	r3,0(r17)
1000c0e8:	003ff706 	br	1000c0c8 <__alt_data_end+0xf800c0c8>

1000c0ec <memmove>:
1000c0ec:	2005883a 	mov	r2,r4
1000c0f0:	29000b2e 	bgeu	r5,r4,1000c120 <memmove+0x34>
1000c0f4:	298f883a 	add	r7,r5,r6
1000c0f8:	21c0092e 	bgeu	r4,r7,1000c120 <memmove+0x34>
1000c0fc:	2187883a 	add	r3,r4,r6
1000c100:	198bc83a 	sub	r5,r3,r6
1000c104:	30004b26 	beq	r6,zero,1000c234 <memmove+0x148>
1000c108:	39ffffc4 	addi	r7,r7,-1
1000c10c:	39000003 	ldbu	r4,0(r7)
1000c110:	18ffffc4 	addi	r3,r3,-1
1000c114:	19000005 	stb	r4,0(r3)
1000c118:	197ffb1e 	bne	r3,r5,1000c108 <__alt_data_end+0xf800c108>
1000c11c:	f800283a 	ret
1000c120:	00c003c4 	movi	r3,15
1000c124:	1980412e 	bgeu	r3,r6,1000c22c <memmove+0x140>
1000c128:	1146b03a 	or	r3,r2,r5
1000c12c:	18c000cc 	andi	r3,r3,3
1000c130:	1800411e 	bne	r3,zero,1000c238 <memmove+0x14c>
1000c134:	33fffc04 	addi	r15,r6,-16
1000c138:	781ed13a 	srli	r15,r15,4
1000c13c:	28c00104 	addi	r3,r5,4
1000c140:	13400104 	addi	r13,r2,4
1000c144:	781c913a 	slli	r14,r15,4
1000c148:	2b000204 	addi	r12,r5,8
1000c14c:	12c00204 	addi	r11,r2,8
1000c150:	73800504 	addi	r14,r14,20
1000c154:	2a800304 	addi	r10,r5,12
1000c158:	12400304 	addi	r9,r2,12
1000c15c:	2b9d883a 	add	r14,r5,r14
1000c160:	2811883a 	mov	r8,r5
1000c164:	100f883a 	mov	r7,r2
1000c168:	41000017 	ldw	r4,0(r8)
1000c16c:	39c00404 	addi	r7,r7,16
1000c170:	18c00404 	addi	r3,r3,16
1000c174:	393ffc15 	stw	r4,-16(r7)
1000c178:	193ffc17 	ldw	r4,-16(r3)
1000c17c:	6b400404 	addi	r13,r13,16
1000c180:	5ac00404 	addi	r11,r11,16
1000c184:	693ffc15 	stw	r4,-16(r13)
1000c188:	61000017 	ldw	r4,0(r12)
1000c18c:	4a400404 	addi	r9,r9,16
1000c190:	42000404 	addi	r8,r8,16
1000c194:	593ffc15 	stw	r4,-16(r11)
1000c198:	51000017 	ldw	r4,0(r10)
1000c19c:	63000404 	addi	r12,r12,16
1000c1a0:	52800404 	addi	r10,r10,16
1000c1a4:	493ffc15 	stw	r4,-16(r9)
1000c1a8:	1bbfef1e 	bne	r3,r14,1000c168 <__alt_data_end+0xf800c168>
1000c1ac:	79000044 	addi	r4,r15,1
1000c1b0:	2008913a 	slli	r4,r4,4
1000c1b4:	328003cc 	andi	r10,r6,15
1000c1b8:	02c000c4 	movi	r11,3
1000c1bc:	1107883a 	add	r3,r2,r4
1000c1c0:	290b883a 	add	r5,r5,r4
1000c1c4:	5a801e2e 	bgeu	r11,r10,1000c240 <memmove+0x154>
1000c1c8:	1813883a 	mov	r9,r3
1000c1cc:	2811883a 	mov	r8,r5
1000c1d0:	500f883a 	mov	r7,r10
1000c1d4:	41000017 	ldw	r4,0(r8)
1000c1d8:	4a400104 	addi	r9,r9,4
1000c1dc:	39ffff04 	addi	r7,r7,-4
1000c1e0:	493fff15 	stw	r4,-4(r9)
1000c1e4:	42000104 	addi	r8,r8,4
1000c1e8:	59fffa36 	bltu	r11,r7,1000c1d4 <__alt_data_end+0xf800c1d4>
1000c1ec:	513fff04 	addi	r4,r10,-4
1000c1f0:	2008d0ba 	srli	r4,r4,2
1000c1f4:	318000cc 	andi	r6,r6,3
1000c1f8:	21000044 	addi	r4,r4,1
1000c1fc:	2109883a 	add	r4,r4,r4
1000c200:	2109883a 	add	r4,r4,r4
1000c204:	1907883a 	add	r3,r3,r4
1000c208:	290b883a 	add	r5,r5,r4
1000c20c:	30000926 	beq	r6,zero,1000c234 <memmove+0x148>
1000c210:	198d883a 	add	r6,r3,r6
1000c214:	29c00003 	ldbu	r7,0(r5)
1000c218:	18c00044 	addi	r3,r3,1
1000c21c:	29400044 	addi	r5,r5,1
1000c220:	19ffffc5 	stb	r7,-1(r3)
1000c224:	19bffb1e 	bne	r3,r6,1000c214 <__alt_data_end+0xf800c214>
1000c228:	f800283a 	ret
1000c22c:	1007883a 	mov	r3,r2
1000c230:	003ff606 	br	1000c20c <__alt_data_end+0xf800c20c>
1000c234:	f800283a 	ret
1000c238:	1007883a 	mov	r3,r2
1000c23c:	003ff406 	br	1000c210 <__alt_data_end+0xf800c210>
1000c240:	500d883a 	mov	r6,r10
1000c244:	003ff106 	br	1000c20c <__alt_data_end+0xf800c20c>

1000c248 <_read_r>:
1000c248:	defffd04 	addi	sp,sp,-12
1000c24c:	dc000015 	stw	r16,0(sp)
1000c250:	04040074 	movhi	r16,4097
1000c254:	dc400115 	stw	r17,4(sp)
1000c258:	84108304 	addi	r16,r16,16908
1000c25c:	2023883a 	mov	r17,r4
1000c260:	2809883a 	mov	r4,r5
1000c264:	300b883a 	mov	r5,r6
1000c268:	380d883a 	mov	r6,r7
1000c26c:	dfc00215 	stw	ra,8(sp)
1000c270:	80000015 	stw	zero,0(r16)
1000c274:	000e8040 	call	1000e804 <read>
1000c278:	00ffffc4 	movi	r3,-1
1000c27c:	10c00526 	beq	r2,r3,1000c294 <_read_r+0x4c>
1000c280:	dfc00217 	ldw	ra,8(sp)
1000c284:	dc400117 	ldw	r17,4(sp)
1000c288:	dc000017 	ldw	r16,0(sp)
1000c28c:	dec00304 	addi	sp,sp,12
1000c290:	f800283a 	ret
1000c294:	80c00017 	ldw	r3,0(r16)
1000c298:	183ff926 	beq	r3,zero,1000c280 <__alt_data_end+0xf800c280>
1000c29c:	88c00015 	stw	r3,0(r17)
1000c2a0:	003ff706 	br	1000c280 <__alt_data_end+0xf800c280>

1000c2a4 <_realloc_r>:
1000c2a4:	defff604 	addi	sp,sp,-40
1000c2a8:	dcc00315 	stw	r19,12(sp)
1000c2ac:	dc400115 	stw	r17,4(sp)
1000c2b0:	dfc00915 	stw	ra,36(sp)
1000c2b4:	df000815 	stw	fp,32(sp)
1000c2b8:	ddc00715 	stw	r23,28(sp)
1000c2bc:	dd800615 	stw	r22,24(sp)
1000c2c0:	dd400515 	stw	r21,20(sp)
1000c2c4:	dd000415 	stw	r20,16(sp)
1000c2c8:	dc800215 	stw	r18,8(sp)
1000c2cc:	dc000015 	stw	r16,0(sp)
1000c2d0:	2827883a 	mov	r19,r5
1000c2d4:	3023883a 	mov	r17,r6
1000c2d8:	2800bf26 	beq	r5,zero,1000c5d8 <_realloc_r+0x334>
1000c2dc:	2025883a 	mov	r18,r4
1000c2e0:	000e7740 	call	1000e774 <__malloc_lock>
1000c2e4:	98ffff17 	ldw	r3,-4(r19)
1000c2e8:	01bfff04 	movi	r6,-4
1000c2ec:	890002c4 	addi	r4,r17,11
1000c2f0:	01c00584 	movi	r7,22
1000c2f4:	9d7ffe04 	addi	r21,r19,-8
1000c2f8:	19a0703a 	and	r16,r3,r6
1000c2fc:	39003f2e 	bgeu	r7,r4,1000c3fc <_realloc_r+0x158>
1000c300:	053ffe04 	movi	r20,-8
1000c304:	2528703a 	and	r20,r4,r20
1000c308:	a00f883a 	mov	r7,r20
1000c30c:	a0008216 	blt	r20,zero,1000c518 <_realloc_r+0x274>
1000c310:	a4408136 	bltu	r20,r17,1000c518 <_realloc_r+0x274>
1000c314:	81c03c0e 	bge	r16,r7,1000c408 <_realloc_r+0x164>
1000c318:	07040074 	movhi	fp,4097
1000c31c:	e7042704 	addi	fp,fp,4252
1000c320:	e1000217 	ldw	r4,8(fp)
1000c324:	ac05883a 	add	r2,r21,r16
1000c328:	2080bf26 	beq	r4,r2,1000c628 <_realloc_r+0x384>
1000c32c:	11000117 	ldw	r4,4(r2)
1000c330:	023fff84 	movi	r8,-2
1000c334:	2210703a 	and	r8,r4,r8
1000c338:	1211883a 	add	r8,r2,r8
1000c33c:	41400117 	ldw	r5,4(r8)
1000c340:	2940004c 	andi	r5,r5,1
1000c344:	28004a1e 	bne	r5,zero,1000c470 <_realloc_r+0x1cc>
1000c348:	017fff04 	movi	r5,-4
1000c34c:	2148703a 	and	r4,r4,r5
1000c350:	2409883a 	add	r4,r4,r16
1000c354:	21c0ad0e 	bge	r4,r7,1000c60c <_realloc_r+0x368>
1000c358:	18c0004c 	andi	r3,r3,1
1000c35c:	18007f1e 	bne	r3,zero,1000c55c <_realloc_r+0x2b8>
1000c360:	9dfffe17 	ldw	r23,-8(r19)
1000c364:	adefc83a 	sub	r23,r21,r23
1000c368:	bd800117 	ldw	r22,4(r23)
1000c36c:	b14a703a 	and	r5,r22,r5
1000c370:	216d883a 	add	r22,r4,r5
1000c374:	b1c04516 	blt	r22,r7,1000c48c <_realloc_r+0x1e8>
1000c378:	10c00317 	ldw	r3,12(r2)
1000c37c:	10800217 	ldw	r2,8(r2)
1000c380:	81bfff04 	addi	r6,r16,-4
1000c384:	bc400204 	addi	r17,r23,8
1000c388:	10c00315 	stw	r3,12(r2)
1000c38c:	18800215 	stw	r2,8(r3)
1000c390:	b9400217 	ldw	r5,8(r23)
1000c394:	b8c00317 	ldw	r3,12(r23)
1000c398:	00800904 	movi	r2,36
1000c39c:	28c00315 	stw	r3,12(r5)
1000c3a0:	19400215 	stw	r5,8(r3)
1000c3a4:	1180ef36 	bltu	r2,r6,1000c764 <_realloc_r+0x4c0>
1000c3a8:	008004c4 	movi	r2,19
1000c3ac:	1180da2e 	bgeu	r2,r6,1000c718 <_realloc_r+0x474>
1000c3b0:	98800017 	ldw	r2,0(r19)
1000c3b4:	b8800215 	stw	r2,8(r23)
1000c3b8:	98800117 	ldw	r2,4(r19)
1000c3bc:	b8800315 	stw	r2,12(r23)
1000c3c0:	008006c4 	movi	r2,27
1000c3c4:	1180fc2e 	bgeu	r2,r6,1000c7b8 <_realloc_r+0x514>
1000c3c8:	98800217 	ldw	r2,8(r19)
1000c3cc:	b8800415 	stw	r2,16(r23)
1000c3d0:	98800317 	ldw	r2,12(r19)
1000c3d4:	b8800515 	stw	r2,20(r23)
1000c3d8:	00800904 	movi	r2,36
1000c3dc:	3080421e 	bne	r6,r2,1000c4e8 <_realloc_r+0x244>
1000c3e0:	98800417 	ldw	r2,16(r19)
1000c3e4:	9cc00604 	addi	r19,r19,24
1000c3e8:	b8c00804 	addi	r3,r23,32
1000c3ec:	b8800615 	stw	r2,24(r23)
1000c3f0:	98bfff17 	ldw	r2,-4(r19)
1000c3f4:	b8800715 	stw	r2,28(r23)
1000c3f8:	00003d06 	br	1000c4f0 <_realloc_r+0x24c>
1000c3fc:	01c00404 	movi	r7,16
1000c400:	3829883a 	mov	r20,r7
1000c404:	003fc206 	br	1000c310 <__alt_data_end+0xf800c310>
1000c408:	9823883a 	mov	r17,r19
1000c40c:	850fc83a 	sub	r7,r16,r20
1000c410:	008003c4 	movi	r2,15
1000c414:	18c0004c 	andi	r3,r3,1
1000c418:	11c04336 	bltu	r2,r7,1000c528 <_realloc_r+0x284>
1000c41c:	1c06b03a 	or	r3,r3,r16
1000c420:	a8c00115 	stw	r3,4(r21)
1000c424:	ac21883a 	add	r16,r21,r16
1000c428:	80c00117 	ldw	r3,4(r16)
1000c42c:	18c00054 	ori	r3,r3,1
1000c430:	80c00115 	stw	r3,4(r16)
1000c434:	9009883a 	mov	r4,r18
1000c438:	000e7940 	call	1000e794 <__malloc_unlock>
1000c43c:	8805883a 	mov	r2,r17
1000c440:	dfc00917 	ldw	ra,36(sp)
1000c444:	df000817 	ldw	fp,32(sp)
1000c448:	ddc00717 	ldw	r23,28(sp)
1000c44c:	dd800617 	ldw	r22,24(sp)
1000c450:	dd400517 	ldw	r21,20(sp)
1000c454:	dd000417 	ldw	r20,16(sp)
1000c458:	dcc00317 	ldw	r19,12(sp)
1000c45c:	dc800217 	ldw	r18,8(sp)
1000c460:	dc400117 	ldw	r17,4(sp)
1000c464:	dc000017 	ldw	r16,0(sp)
1000c468:	dec00a04 	addi	sp,sp,40
1000c46c:	f800283a 	ret
1000c470:	18c0004c 	andi	r3,r3,1
1000c474:	1800391e 	bne	r3,zero,1000c55c <_realloc_r+0x2b8>
1000c478:	9dfffe17 	ldw	r23,-8(r19)
1000c47c:	00bfff04 	movi	r2,-4
1000c480:	adefc83a 	sub	r23,r21,r23
1000c484:	b9400117 	ldw	r5,4(r23)
1000c488:	288a703a 	and	r5,r5,r2
1000c48c:	2c2d883a 	add	r22,r5,r16
1000c490:	b1c03216 	blt	r22,r7,1000c55c <_realloc_r+0x2b8>
1000c494:	b8800317 	ldw	r2,12(r23)
1000c498:	b8c00217 	ldw	r3,8(r23)
1000c49c:	81bfff04 	addi	r6,r16,-4
1000c4a0:	01000904 	movi	r4,36
1000c4a4:	18800315 	stw	r2,12(r3)
1000c4a8:	10c00215 	stw	r3,8(r2)
1000c4ac:	bc400204 	addi	r17,r23,8
1000c4b0:	2180ac36 	bltu	r4,r6,1000c764 <_realloc_r+0x4c0>
1000c4b4:	008004c4 	movi	r2,19
1000c4b8:	1180972e 	bgeu	r2,r6,1000c718 <_realloc_r+0x474>
1000c4bc:	98800017 	ldw	r2,0(r19)
1000c4c0:	b8800215 	stw	r2,8(r23)
1000c4c4:	98800117 	ldw	r2,4(r19)
1000c4c8:	b8800315 	stw	r2,12(r23)
1000c4cc:	008006c4 	movi	r2,27
1000c4d0:	1180b92e 	bgeu	r2,r6,1000c7b8 <_realloc_r+0x514>
1000c4d4:	98800217 	ldw	r2,8(r19)
1000c4d8:	b8800415 	stw	r2,16(r23)
1000c4dc:	98800317 	ldw	r2,12(r19)
1000c4e0:	b8800515 	stw	r2,20(r23)
1000c4e4:	313fbe26 	beq	r6,r4,1000c3e0 <__alt_data_end+0xf800c3e0>
1000c4e8:	b8c00604 	addi	r3,r23,24
1000c4ec:	9cc00404 	addi	r19,r19,16
1000c4f0:	98800017 	ldw	r2,0(r19)
1000c4f4:	b021883a 	mov	r16,r22
1000c4f8:	b82b883a 	mov	r21,r23
1000c4fc:	18800015 	stw	r2,0(r3)
1000c500:	98800117 	ldw	r2,4(r19)
1000c504:	18800115 	stw	r2,4(r3)
1000c508:	98800217 	ldw	r2,8(r19)
1000c50c:	18800215 	stw	r2,8(r3)
1000c510:	b8c00117 	ldw	r3,4(r23)
1000c514:	003fbd06 	br	1000c40c <__alt_data_end+0xf800c40c>
1000c518:	00800304 	movi	r2,12
1000c51c:	90800015 	stw	r2,0(r18)
1000c520:	0005883a 	mov	r2,zero
1000c524:	003fc606 	br	1000c440 <__alt_data_end+0xf800c440>
1000c528:	1d06b03a 	or	r3,r3,r20
1000c52c:	ad0b883a 	add	r5,r21,r20
1000c530:	a8c00115 	stw	r3,4(r21)
1000c534:	38800054 	ori	r2,r7,1
1000c538:	28800115 	stw	r2,4(r5)
1000c53c:	29cf883a 	add	r7,r5,r7
1000c540:	38800117 	ldw	r2,4(r7)
1000c544:	9009883a 	mov	r4,r18
1000c548:	29400204 	addi	r5,r5,8
1000c54c:	10800054 	ori	r2,r2,1
1000c550:	38800115 	stw	r2,4(r7)
1000c554:	0007c000 	call	10007c00 <_free_r>
1000c558:	003fb606 	br	1000c434 <__alt_data_end+0xf800c434>
1000c55c:	880b883a 	mov	r5,r17
1000c560:	9009883a 	mov	r4,r18
1000c564:	00082f80 	call	100082f8 <_malloc_r>
1000c568:	1023883a 	mov	r17,r2
1000c56c:	1000aa26 	beq	r2,zero,1000c818 <_realloc_r+0x574>
1000c570:	98ffff17 	ldw	r3,-4(r19)
1000c574:	113ffe04 	addi	r4,r2,-8
1000c578:	00bfff84 	movi	r2,-2
1000c57c:	1884703a 	and	r2,r3,r2
1000c580:	a885883a 	add	r2,r21,r2
1000c584:	20808626 	beq	r4,r2,1000c7a0 <_realloc_r+0x4fc>
1000c588:	81bfff04 	addi	r6,r16,-4
1000c58c:	00800904 	movi	r2,36
1000c590:	11807036 	bltu	r2,r6,1000c754 <_realloc_r+0x4b0>
1000c594:	00c004c4 	movi	r3,19
1000c598:	19805636 	bltu	r3,r6,1000c6f4 <_realloc_r+0x450>
1000c59c:	8805883a 	mov	r2,r17
1000c5a0:	9807883a 	mov	r3,r19
1000c5a4:	19000017 	ldw	r4,0(r3)
1000c5a8:	11000015 	stw	r4,0(r2)
1000c5ac:	19000117 	ldw	r4,4(r3)
1000c5b0:	11000115 	stw	r4,4(r2)
1000c5b4:	18c00217 	ldw	r3,8(r3)
1000c5b8:	10c00215 	stw	r3,8(r2)
1000c5bc:	980b883a 	mov	r5,r19
1000c5c0:	9009883a 	mov	r4,r18
1000c5c4:	0007c000 	call	10007c00 <_free_r>
1000c5c8:	9009883a 	mov	r4,r18
1000c5cc:	000e7940 	call	1000e794 <__malloc_unlock>
1000c5d0:	8805883a 	mov	r2,r17
1000c5d4:	003f9a06 	br	1000c440 <__alt_data_end+0xf800c440>
1000c5d8:	300b883a 	mov	r5,r6
1000c5dc:	dfc00917 	ldw	ra,36(sp)
1000c5e0:	df000817 	ldw	fp,32(sp)
1000c5e4:	ddc00717 	ldw	r23,28(sp)
1000c5e8:	dd800617 	ldw	r22,24(sp)
1000c5ec:	dd400517 	ldw	r21,20(sp)
1000c5f0:	dd000417 	ldw	r20,16(sp)
1000c5f4:	dcc00317 	ldw	r19,12(sp)
1000c5f8:	dc800217 	ldw	r18,8(sp)
1000c5fc:	dc400117 	ldw	r17,4(sp)
1000c600:	dc000017 	ldw	r16,0(sp)
1000c604:	dec00a04 	addi	sp,sp,40
1000c608:	00082f81 	jmpi	100082f8 <_malloc_r>
1000c60c:	11400317 	ldw	r5,12(r2)
1000c610:	10800217 	ldw	r2,8(r2)
1000c614:	9823883a 	mov	r17,r19
1000c618:	2021883a 	mov	r16,r4
1000c61c:	11400315 	stw	r5,12(r2)
1000c620:	28800215 	stw	r2,8(r5)
1000c624:	003f7906 	br	1000c40c <__alt_data_end+0xf800c40c>
1000c628:	21000117 	ldw	r4,4(r4)
1000c62c:	00bfff04 	movi	r2,-4
1000c630:	a1800404 	addi	r6,r20,16
1000c634:	2088703a 	and	r4,r4,r2
1000c638:	2409883a 	add	r4,r4,r16
1000c63c:	2180380e 	bge	r4,r6,1000c720 <_realloc_r+0x47c>
1000c640:	18c0004c 	andi	r3,r3,1
1000c644:	183fc51e 	bne	r3,zero,1000c55c <__alt_data_end+0xf800c55c>
1000c648:	9dfffe17 	ldw	r23,-8(r19)
1000c64c:	adefc83a 	sub	r23,r21,r23
1000c650:	b9400117 	ldw	r5,4(r23)
1000c654:	288a703a 	and	r5,r5,r2
1000c658:	216d883a 	add	r22,r4,r5
1000c65c:	b1bf8b16 	blt	r22,r6,1000c48c <__alt_data_end+0xf800c48c>
1000c660:	b8800317 	ldw	r2,12(r23)
1000c664:	b8c00217 	ldw	r3,8(r23)
1000c668:	81bfff04 	addi	r6,r16,-4
1000c66c:	01000904 	movi	r4,36
1000c670:	18800315 	stw	r2,12(r3)
1000c674:	10c00215 	stw	r3,8(r2)
1000c678:	bc400204 	addi	r17,r23,8
1000c67c:	21805a36 	bltu	r4,r6,1000c7e8 <_realloc_r+0x544>
1000c680:	008004c4 	movi	r2,19
1000c684:	1180562e 	bgeu	r2,r6,1000c7e0 <_realloc_r+0x53c>
1000c688:	98800017 	ldw	r2,0(r19)
1000c68c:	b8800215 	stw	r2,8(r23)
1000c690:	98800117 	ldw	r2,4(r19)
1000c694:	b8800315 	stw	r2,12(r23)
1000c698:	008006c4 	movi	r2,27
1000c69c:	11805636 	bltu	r2,r6,1000c7f8 <_realloc_r+0x554>
1000c6a0:	b8800404 	addi	r2,r23,16
1000c6a4:	9cc00204 	addi	r19,r19,8
1000c6a8:	98c00017 	ldw	r3,0(r19)
1000c6ac:	10c00015 	stw	r3,0(r2)
1000c6b0:	98c00117 	ldw	r3,4(r19)
1000c6b4:	10c00115 	stw	r3,4(r2)
1000c6b8:	98c00217 	ldw	r3,8(r19)
1000c6bc:	10c00215 	stw	r3,8(r2)
1000c6c0:	bd07883a 	add	r3,r23,r20
1000c6c4:	b505c83a 	sub	r2,r22,r20
1000c6c8:	e0c00215 	stw	r3,8(fp)
1000c6cc:	10800054 	ori	r2,r2,1
1000c6d0:	18800115 	stw	r2,4(r3)
1000c6d4:	b8800117 	ldw	r2,4(r23)
1000c6d8:	9009883a 	mov	r4,r18
1000c6dc:	1080004c 	andi	r2,r2,1
1000c6e0:	a0a8b03a 	or	r20,r20,r2
1000c6e4:	bd000115 	stw	r20,4(r23)
1000c6e8:	000e7940 	call	1000e794 <__malloc_unlock>
1000c6ec:	8805883a 	mov	r2,r17
1000c6f0:	003f5306 	br	1000c440 <__alt_data_end+0xf800c440>
1000c6f4:	98c00017 	ldw	r3,0(r19)
1000c6f8:	88c00015 	stw	r3,0(r17)
1000c6fc:	98c00117 	ldw	r3,4(r19)
1000c700:	88c00115 	stw	r3,4(r17)
1000c704:	00c006c4 	movi	r3,27
1000c708:	19801d36 	bltu	r3,r6,1000c780 <_realloc_r+0x4dc>
1000c70c:	88800204 	addi	r2,r17,8
1000c710:	98c00204 	addi	r3,r19,8
1000c714:	003fa306 	br	1000c5a4 <__alt_data_end+0xf800c5a4>
1000c718:	8807883a 	mov	r3,r17
1000c71c:	003f7406 	br	1000c4f0 <__alt_data_end+0xf800c4f0>
1000c720:	ad2b883a 	add	r21,r21,r20
1000c724:	2505c83a 	sub	r2,r4,r20
1000c728:	e5400215 	stw	r21,8(fp)
1000c72c:	10800054 	ori	r2,r2,1
1000c730:	a8800115 	stw	r2,4(r21)
1000c734:	98bfff17 	ldw	r2,-4(r19)
1000c738:	9009883a 	mov	r4,r18
1000c73c:	1080004c 	andi	r2,r2,1
1000c740:	a0a8b03a 	or	r20,r20,r2
1000c744:	9d3fff15 	stw	r20,-4(r19)
1000c748:	000e7940 	call	1000e794 <__malloc_unlock>
1000c74c:	9805883a 	mov	r2,r19
1000c750:	003f3b06 	br	1000c440 <__alt_data_end+0xf800c440>
1000c754:	8809883a 	mov	r4,r17
1000c758:	980b883a 	mov	r5,r19
1000c75c:	000c0ec0 	call	1000c0ec <memmove>
1000c760:	003f9606 	br	1000c5bc <__alt_data_end+0xf800c5bc>
1000c764:	8809883a 	mov	r4,r17
1000c768:	980b883a 	mov	r5,r19
1000c76c:	000c0ec0 	call	1000c0ec <memmove>
1000c770:	b8c00117 	ldw	r3,4(r23)
1000c774:	b021883a 	mov	r16,r22
1000c778:	b82b883a 	mov	r21,r23
1000c77c:	003f2306 	br	1000c40c <__alt_data_end+0xf800c40c>
1000c780:	98c00217 	ldw	r3,8(r19)
1000c784:	88c00215 	stw	r3,8(r17)
1000c788:	98c00317 	ldw	r3,12(r19)
1000c78c:	88c00315 	stw	r3,12(r17)
1000c790:	30800c26 	beq	r6,r2,1000c7c4 <_realloc_r+0x520>
1000c794:	88800404 	addi	r2,r17,16
1000c798:	98c00404 	addi	r3,r19,16
1000c79c:	003f8106 	br	1000c5a4 <__alt_data_end+0xf800c5a4>
1000c7a0:	893fff17 	ldw	r4,-4(r17)
1000c7a4:	00bfff04 	movi	r2,-4
1000c7a8:	9823883a 	mov	r17,r19
1000c7ac:	2084703a 	and	r2,r4,r2
1000c7b0:	80a1883a 	add	r16,r16,r2
1000c7b4:	003f1506 	br	1000c40c <__alt_data_end+0xf800c40c>
1000c7b8:	b8c00404 	addi	r3,r23,16
1000c7bc:	9cc00204 	addi	r19,r19,8
1000c7c0:	003f4b06 	br	1000c4f0 <__alt_data_end+0xf800c4f0>
1000c7c4:	99000417 	ldw	r4,16(r19)
1000c7c8:	88800604 	addi	r2,r17,24
1000c7cc:	98c00604 	addi	r3,r19,24
1000c7d0:	89000415 	stw	r4,16(r17)
1000c7d4:	99000517 	ldw	r4,20(r19)
1000c7d8:	89000515 	stw	r4,20(r17)
1000c7dc:	003f7106 	br	1000c5a4 <__alt_data_end+0xf800c5a4>
1000c7e0:	8805883a 	mov	r2,r17
1000c7e4:	003fb006 	br	1000c6a8 <__alt_data_end+0xf800c6a8>
1000c7e8:	8809883a 	mov	r4,r17
1000c7ec:	980b883a 	mov	r5,r19
1000c7f0:	000c0ec0 	call	1000c0ec <memmove>
1000c7f4:	003fb206 	br	1000c6c0 <__alt_data_end+0xf800c6c0>
1000c7f8:	98800217 	ldw	r2,8(r19)
1000c7fc:	b8800415 	stw	r2,16(r23)
1000c800:	98800317 	ldw	r2,12(r19)
1000c804:	b8800515 	stw	r2,20(r23)
1000c808:	31000726 	beq	r6,r4,1000c828 <_realloc_r+0x584>
1000c80c:	b8800604 	addi	r2,r23,24
1000c810:	9cc00404 	addi	r19,r19,16
1000c814:	003fa406 	br	1000c6a8 <__alt_data_end+0xf800c6a8>
1000c818:	9009883a 	mov	r4,r18
1000c81c:	000e7940 	call	1000e794 <__malloc_unlock>
1000c820:	0005883a 	mov	r2,zero
1000c824:	003f0606 	br	1000c440 <__alt_data_end+0xf800c440>
1000c828:	98c00417 	ldw	r3,16(r19)
1000c82c:	9cc00604 	addi	r19,r19,24
1000c830:	b8800804 	addi	r2,r23,32
1000c834:	b8c00615 	stw	r3,24(r23)
1000c838:	98ffff17 	ldw	r3,-4(r19)
1000c83c:	b8c00715 	stw	r3,28(r23)
1000c840:	003f9906 	br	1000c6a8 <__alt_data_end+0xf800c6a8>

1000c844 <__swbuf_r>:
1000c844:	defffc04 	addi	sp,sp,-16
1000c848:	dc800215 	stw	r18,8(sp)
1000c84c:	dc400115 	stw	r17,4(sp)
1000c850:	dc000015 	stw	r16,0(sp)
1000c854:	dfc00315 	stw	ra,12(sp)
1000c858:	2025883a 	mov	r18,r4
1000c85c:	2823883a 	mov	r17,r5
1000c860:	3021883a 	mov	r16,r6
1000c864:	20000226 	beq	r4,zero,1000c870 <__swbuf_r+0x2c>
1000c868:	20800e17 	ldw	r2,56(r4)
1000c86c:	10004126 	beq	r2,zero,1000c974 <__swbuf_r+0x130>
1000c870:	80c00617 	ldw	r3,24(r16)
1000c874:	8180030b 	ldhu	r6,12(r16)
1000c878:	80c00215 	stw	r3,8(r16)
1000c87c:	30c0020c 	andi	r3,r6,8
1000c880:	18003526 	beq	r3,zero,1000c958 <__swbuf_r+0x114>
1000c884:	80c00417 	ldw	r3,16(r16)
1000c888:	18003326 	beq	r3,zero,1000c958 <__swbuf_r+0x114>
1000c88c:	3088000c 	andi	r2,r6,8192
1000c890:	8c403fcc 	andi	r17,r17,255
1000c894:	10001726 	beq	r2,zero,1000c8f4 <__swbuf_r+0xb0>
1000c898:	80800017 	ldw	r2,0(r16)
1000c89c:	81000517 	ldw	r4,20(r16)
1000c8a0:	10c7c83a 	sub	r3,r2,r3
1000c8a4:	19001d0e 	bge	r3,r4,1000c91c <__swbuf_r+0xd8>
1000c8a8:	18c00044 	addi	r3,r3,1
1000c8ac:	81400217 	ldw	r5,8(r16)
1000c8b0:	11000044 	addi	r4,r2,1
1000c8b4:	81000015 	stw	r4,0(r16)
1000c8b8:	297fffc4 	addi	r5,r5,-1
1000c8bc:	81400215 	stw	r5,8(r16)
1000c8c0:	14400005 	stb	r17,0(r2)
1000c8c4:	80800517 	ldw	r2,20(r16)
1000c8c8:	10c01d26 	beq	r2,r3,1000c940 <__swbuf_r+0xfc>
1000c8cc:	8080030b 	ldhu	r2,12(r16)
1000c8d0:	1080004c 	andi	r2,r2,1
1000c8d4:	1000181e 	bne	r2,zero,1000c938 <__swbuf_r+0xf4>
1000c8d8:	8805883a 	mov	r2,r17
1000c8dc:	dfc00317 	ldw	ra,12(sp)
1000c8e0:	dc800217 	ldw	r18,8(sp)
1000c8e4:	dc400117 	ldw	r17,4(sp)
1000c8e8:	dc000017 	ldw	r16,0(sp)
1000c8ec:	dec00404 	addi	sp,sp,16
1000c8f0:	f800283a 	ret
1000c8f4:	81001917 	ldw	r4,100(r16)
1000c8f8:	00b7ffc4 	movi	r2,-8193
1000c8fc:	31880014 	ori	r6,r6,8192
1000c900:	2084703a 	and	r2,r4,r2
1000c904:	80801915 	stw	r2,100(r16)
1000c908:	80800017 	ldw	r2,0(r16)
1000c90c:	81000517 	ldw	r4,20(r16)
1000c910:	8180030d 	sth	r6,12(r16)
1000c914:	10c7c83a 	sub	r3,r2,r3
1000c918:	193fe316 	blt	r3,r4,1000c8a8 <__alt_data_end+0xf800c8a8>
1000c91c:	9009883a 	mov	r4,r18
1000c920:	800b883a 	mov	r5,r16
1000c924:	00074d00 	call	100074d0 <_fflush_r>
1000c928:	1000091e 	bne	r2,zero,1000c950 <__swbuf_r+0x10c>
1000c92c:	80800017 	ldw	r2,0(r16)
1000c930:	00c00044 	movi	r3,1
1000c934:	003fdd06 	br	1000c8ac <__alt_data_end+0xf800c8ac>
1000c938:	00800284 	movi	r2,10
1000c93c:	88bfe61e 	bne	r17,r2,1000c8d8 <__alt_data_end+0xf800c8d8>
1000c940:	9009883a 	mov	r4,r18
1000c944:	800b883a 	mov	r5,r16
1000c948:	00074d00 	call	100074d0 <_fflush_r>
1000c94c:	103fe226 	beq	r2,zero,1000c8d8 <__alt_data_end+0xf800c8d8>
1000c950:	00bfffc4 	movi	r2,-1
1000c954:	003fe106 	br	1000c8dc <__alt_data_end+0xf800c8dc>
1000c958:	9009883a 	mov	r4,r18
1000c95c:	800b883a 	mov	r5,r16
1000c960:	0005a500 	call	10005a50 <__swsetup_r>
1000c964:	1000051e 	bne	r2,zero,1000c97c <__swbuf_r+0x138>
1000c968:	8180030b 	ldhu	r6,12(r16)
1000c96c:	80c00417 	ldw	r3,16(r16)
1000c970:	003fc606 	br	1000c88c <__alt_data_end+0xf800c88c>
1000c974:	0007a8c0 	call	10007a8c <__sinit>
1000c978:	003fbd06 	br	1000c870 <__alt_data_end+0xf800c870>
1000c97c:	80c0030b 	ldhu	r3,12(r16)
1000c980:	00bfffc4 	movi	r2,-1
1000c984:	18c01014 	ori	r3,r3,64
1000c988:	80c0030d 	sth	r3,12(r16)
1000c98c:	00c00244 	movi	r3,9
1000c990:	90c00015 	stw	r3,0(r18)
1000c994:	003fd106 	br	1000c8dc <__alt_data_end+0xf800c8dc>

1000c998 <__swbuf>:
1000c998:	00c40074 	movhi	r3,4097
1000c99c:	18c9ac04 	addi	r3,r3,9904
1000c9a0:	2005883a 	mov	r2,r4
1000c9a4:	19000017 	ldw	r4,0(r3)
1000c9a8:	280d883a 	mov	r6,r5
1000c9ac:	100b883a 	mov	r5,r2
1000c9b0:	000c8441 	jmpi	1000c844 <__swbuf_r>

1000c9b4 <_wcrtomb_r>:
1000c9b4:	defff604 	addi	sp,sp,-40
1000c9b8:	00840074 	movhi	r2,4097
1000c9bc:	dc800815 	stw	r18,32(sp)
1000c9c0:	dc400715 	stw	r17,28(sp)
1000c9c4:	dc000615 	stw	r16,24(sp)
1000c9c8:	1089b004 	addi	r2,r2,9920
1000c9cc:	dfc00915 	stw	ra,36(sp)
1000c9d0:	2021883a 	mov	r16,r4
1000c9d4:	3823883a 	mov	r17,r7
1000c9d8:	14800017 	ldw	r18,0(r2)
1000c9dc:	28001426 	beq	r5,zero,1000ca30 <_wcrtomb_r+0x7c>
1000c9e0:	d9400415 	stw	r5,16(sp)
1000c9e4:	d9800515 	stw	r6,20(sp)
1000c9e8:	00080dc0 	call	100080dc <__locale_charset>
1000c9ec:	d9400417 	ldw	r5,16(sp)
1000c9f0:	d9800517 	ldw	r6,20(sp)
1000c9f4:	8009883a 	mov	r4,r16
1000c9f8:	dc400015 	stw	r17,0(sp)
1000c9fc:	100f883a 	mov	r7,r2
1000ca00:	903ee83a 	callr	r18
1000ca04:	00ffffc4 	movi	r3,-1
1000ca08:	10c0031e 	bne	r2,r3,1000ca18 <_wcrtomb_r+0x64>
1000ca0c:	88000015 	stw	zero,0(r17)
1000ca10:	00c02284 	movi	r3,138
1000ca14:	80c00015 	stw	r3,0(r16)
1000ca18:	dfc00917 	ldw	ra,36(sp)
1000ca1c:	dc800817 	ldw	r18,32(sp)
1000ca20:	dc400717 	ldw	r17,28(sp)
1000ca24:	dc000617 	ldw	r16,24(sp)
1000ca28:	dec00a04 	addi	sp,sp,40
1000ca2c:	f800283a 	ret
1000ca30:	00080dc0 	call	100080dc <__locale_charset>
1000ca34:	8009883a 	mov	r4,r16
1000ca38:	dc400015 	stw	r17,0(sp)
1000ca3c:	d9400104 	addi	r5,sp,4
1000ca40:	000d883a 	mov	r6,zero
1000ca44:	100f883a 	mov	r7,r2
1000ca48:	903ee83a 	callr	r18
1000ca4c:	003fed06 	br	1000ca04 <__alt_data_end+0xf800ca04>

1000ca50 <wcrtomb>:
1000ca50:	defff504 	addi	sp,sp,-44
1000ca54:	dc400515 	stw	r17,20(sp)
1000ca58:	dc000415 	stw	r16,16(sp)
1000ca5c:	dfc00a15 	stw	ra,40(sp)
1000ca60:	dd400915 	stw	r21,36(sp)
1000ca64:	dd000815 	stw	r20,32(sp)
1000ca68:	dcc00715 	stw	r19,28(sp)
1000ca6c:	dc800615 	stw	r18,24(sp)
1000ca70:	2021883a 	mov	r16,r4
1000ca74:	3023883a 	mov	r17,r6
1000ca78:	20001d26 	beq	r4,zero,1000caf0 <wcrtomb+0xa0>
1000ca7c:	04840074 	movhi	r18,4097
1000ca80:	9489ac04 	addi	r18,r18,9904
1000ca84:	00840074 	movhi	r2,4097
1000ca88:	95400017 	ldw	r21,0(r18)
1000ca8c:	1089b004 	addi	r2,r2,9920
1000ca90:	15000017 	ldw	r20,0(r2)
1000ca94:	2827883a 	mov	r19,r5
1000ca98:	00080dc0 	call	100080dc <__locale_charset>
1000ca9c:	a809883a 	mov	r4,r21
1000caa0:	dc400015 	stw	r17,0(sp)
1000caa4:	800b883a 	mov	r5,r16
1000caa8:	980d883a 	mov	r6,r19
1000caac:	100f883a 	mov	r7,r2
1000cab0:	a03ee83a 	callr	r20
1000cab4:	00ffffc4 	movi	r3,-1
1000cab8:	10c0041e 	bne	r2,r3,1000cacc <wcrtomb+0x7c>
1000cabc:	90c00017 	ldw	r3,0(r18)
1000cac0:	01002284 	movi	r4,138
1000cac4:	88000015 	stw	zero,0(r17)
1000cac8:	19000015 	stw	r4,0(r3)
1000cacc:	dfc00a17 	ldw	ra,40(sp)
1000cad0:	dd400917 	ldw	r21,36(sp)
1000cad4:	dd000817 	ldw	r20,32(sp)
1000cad8:	dcc00717 	ldw	r19,28(sp)
1000cadc:	dc800617 	ldw	r18,24(sp)
1000cae0:	dc400517 	ldw	r17,20(sp)
1000cae4:	dc000417 	ldw	r16,16(sp)
1000cae8:	dec00b04 	addi	sp,sp,44
1000caec:	f800283a 	ret
1000caf0:	04840074 	movhi	r18,4097
1000caf4:	9489ac04 	addi	r18,r18,9904
1000caf8:	00840074 	movhi	r2,4097
1000cafc:	94c00017 	ldw	r19,0(r18)
1000cb00:	1089b004 	addi	r2,r2,9920
1000cb04:	14000017 	ldw	r16,0(r2)
1000cb08:	00080dc0 	call	100080dc <__locale_charset>
1000cb0c:	9809883a 	mov	r4,r19
1000cb10:	dc400015 	stw	r17,0(sp)
1000cb14:	d9400104 	addi	r5,sp,4
1000cb18:	000d883a 	mov	r6,zero
1000cb1c:	100f883a 	mov	r7,r2
1000cb20:	803ee83a 	callr	r16
1000cb24:	003fe306 	br	1000cab4 <__alt_data_end+0xf800cab4>

1000cb28 <__ascii_wctomb>:
1000cb28:	28000526 	beq	r5,zero,1000cb40 <__ascii_wctomb+0x18>
1000cb2c:	00803fc4 	movi	r2,255
1000cb30:	11800536 	bltu	r2,r6,1000cb48 <__ascii_wctomb+0x20>
1000cb34:	29800005 	stb	r6,0(r5)
1000cb38:	00800044 	movi	r2,1
1000cb3c:	f800283a 	ret
1000cb40:	0005883a 	mov	r2,zero
1000cb44:	f800283a 	ret
1000cb48:	00802284 	movi	r2,138
1000cb4c:	20800015 	stw	r2,0(r4)
1000cb50:	00bfffc4 	movi	r2,-1
1000cb54:	f800283a 	ret

1000cb58 <_wctomb_r>:
1000cb58:	00840074 	movhi	r2,4097
1000cb5c:	defff904 	addi	sp,sp,-28
1000cb60:	1089b004 	addi	r2,r2,9920
1000cb64:	dfc00615 	stw	ra,24(sp)
1000cb68:	dc400515 	stw	r17,20(sp)
1000cb6c:	dc000415 	stw	r16,16(sp)
1000cb70:	3823883a 	mov	r17,r7
1000cb74:	14000017 	ldw	r16,0(r2)
1000cb78:	d9000115 	stw	r4,4(sp)
1000cb7c:	d9400215 	stw	r5,8(sp)
1000cb80:	d9800315 	stw	r6,12(sp)
1000cb84:	00080dc0 	call	100080dc <__locale_charset>
1000cb88:	d9000117 	ldw	r4,4(sp)
1000cb8c:	d9400217 	ldw	r5,8(sp)
1000cb90:	d9800317 	ldw	r6,12(sp)
1000cb94:	dc400015 	stw	r17,0(sp)
1000cb98:	100f883a 	mov	r7,r2
1000cb9c:	803ee83a 	callr	r16
1000cba0:	dfc00617 	ldw	ra,24(sp)
1000cba4:	dc400517 	ldw	r17,20(sp)
1000cba8:	dc000417 	ldw	r16,16(sp)
1000cbac:	dec00704 	addi	sp,sp,28
1000cbb0:	f800283a 	ret

1000cbb4 <__muldi3>:
1000cbb4:	defff604 	addi	sp,sp,-40
1000cbb8:	dd800615 	stw	r22,24(sp)
1000cbbc:	dd400515 	stw	r21,20(sp)
1000cbc0:	25bfffcc 	andi	r22,r4,65535
1000cbc4:	357fffcc 	andi	r21,r6,65535
1000cbc8:	dc400115 	stw	r17,4(sp)
1000cbcc:	2022d43a 	srli	r17,r4,16
1000cbd0:	dcc00315 	stw	r19,12(sp)
1000cbd4:	dc800215 	stw	r18,8(sp)
1000cbd8:	2027883a 	mov	r19,r4
1000cbdc:	2825883a 	mov	r18,r5
1000cbe0:	a809883a 	mov	r4,r21
1000cbe4:	b00b883a 	mov	r5,r22
1000cbe8:	dfc00915 	stw	ra,36(sp)
1000cbec:	df000815 	stw	fp,32(sp)
1000cbf0:	ddc00715 	stw	r23,28(sp)
1000cbf4:	3839883a 	mov	fp,r7
1000cbf8:	302ed43a 	srli	r23,r6,16
1000cbfc:	dd000415 	stw	r20,16(sp)
1000cc00:	dc000015 	stw	r16,0(sp)
1000cc04:	3029883a 	mov	r20,r6
1000cc08:	00024fc0 	call	100024fc <__mulsi3>
1000cc0c:	a809883a 	mov	r4,r21
1000cc10:	880b883a 	mov	r5,r17
1000cc14:	1021883a 	mov	r16,r2
1000cc18:	00024fc0 	call	100024fc <__mulsi3>
1000cc1c:	880b883a 	mov	r5,r17
1000cc20:	b809883a 	mov	r4,r23
1000cc24:	102b883a 	mov	r21,r2
1000cc28:	00024fc0 	call	100024fc <__mulsi3>
1000cc2c:	b809883a 	mov	r4,r23
1000cc30:	b00b883a 	mov	r5,r22
1000cc34:	1023883a 	mov	r17,r2
1000cc38:	00024fc0 	call	100024fc <__mulsi3>
1000cc3c:	8012d43a 	srli	r9,r16,16
1000cc40:	a885883a 	add	r2,r21,r2
1000cc44:	1251883a 	add	r8,r2,r9
1000cc48:	4540022e 	bgeu	r8,r21,1000cc54 <__muldi3+0xa0>
1000cc4c:	00800074 	movhi	r2,1
1000cc50:	88a3883a 	add	r17,r17,r2
1000cc54:	4006d43a 	srli	r3,r8,16
1000cc58:	4010943a 	slli	r8,r8,16
1000cc5c:	9809883a 	mov	r4,r19
1000cc60:	e00b883a 	mov	r5,fp
1000cc64:	843fffcc 	andi	r16,r16,65535
1000cc68:	88e3883a 	add	r17,r17,r3
1000cc6c:	4421883a 	add	r16,r8,r16
1000cc70:	00024fc0 	call	100024fc <__mulsi3>
1000cc74:	a009883a 	mov	r4,r20
1000cc78:	900b883a 	mov	r5,r18
1000cc7c:	1027883a 	mov	r19,r2
1000cc80:	00024fc0 	call	100024fc <__mulsi3>
1000cc84:	9885883a 	add	r2,r19,r2
1000cc88:	1447883a 	add	r3,r2,r17
1000cc8c:	8005883a 	mov	r2,r16
1000cc90:	dfc00917 	ldw	ra,36(sp)
1000cc94:	df000817 	ldw	fp,32(sp)
1000cc98:	ddc00717 	ldw	r23,28(sp)
1000cc9c:	dd800617 	ldw	r22,24(sp)
1000cca0:	dd400517 	ldw	r21,20(sp)
1000cca4:	dd000417 	ldw	r20,16(sp)
1000cca8:	dcc00317 	ldw	r19,12(sp)
1000ccac:	dc800217 	ldw	r18,8(sp)
1000ccb0:	dc400117 	ldw	r17,4(sp)
1000ccb4:	dc000017 	ldw	r16,0(sp)
1000ccb8:	dec00a04 	addi	sp,sp,40
1000ccbc:	f800283a 	ret

1000ccc0 <__divdf3>:
1000ccc0:	defff004 	addi	sp,sp,-64
1000ccc4:	dc800815 	stw	r18,32(sp)
1000ccc8:	2824d53a 	srli	r18,r5,20
1000cccc:	dd800c15 	stw	r22,48(sp)
1000ccd0:	282cd7fa 	srli	r22,r5,31
1000ccd4:	dc000615 	stw	r16,24(sp)
1000ccd8:	04000434 	movhi	r16,16
1000ccdc:	df000e15 	stw	fp,56(sp)
1000cce0:	dd000a15 	stw	r20,40(sp)
1000cce4:	dcc00915 	stw	r19,36(sp)
1000cce8:	dc400715 	stw	r17,28(sp)
1000ccec:	843fffc4 	addi	r16,r16,-1
1000ccf0:	dfc00f15 	stw	ra,60(sp)
1000ccf4:	ddc00d15 	stw	r23,52(sp)
1000ccf8:	dd400b15 	stw	r21,44(sp)
1000ccfc:	9481ffcc 	andi	r18,r18,2047
1000cd00:	2029883a 	mov	r20,r4
1000cd04:	2027883a 	mov	r19,r4
1000cd08:	2c22703a 	and	r17,r5,r16
1000cd0c:	b7003fcc 	andi	fp,r22,255
1000cd10:	90005e26 	beq	r18,zero,1000ce8c <__divdf3+0x1cc>
1000cd14:	0081ffc4 	movi	r2,2047
1000cd18:	90803526 	beq	r18,r2,1000cdf0 <__divdf3+0x130>
1000cd1c:	8c000434 	orhi	r16,r17,16
1000cd20:	2004d77a 	srli	r2,r4,29
1000cd24:	802090fa 	slli	r16,r16,3
1000cd28:	202690fa 	slli	r19,r4,3
1000cd2c:	94bf0044 	addi	r18,r18,-1023
1000cd30:	80a2b03a 	or	r17,r16,r2
1000cd34:	0029883a 	mov	r20,zero
1000cd38:	0011883a 	mov	r8,zero
1000cd3c:	380ad53a 	srli	r5,r7,20
1000cd40:	382ed7fa 	srli	r23,r7,31
1000cd44:	04000434 	movhi	r16,16
1000cd48:	843fffc4 	addi	r16,r16,-1
1000cd4c:	2941ffcc 	andi	r5,r5,2047
1000cd50:	302b883a 	mov	r21,r6
1000cd54:	3c20703a 	and	r16,r7,r16
1000cd58:	ba403fcc 	andi	r9,r23,255
1000cd5c:	28006726 	beq	r5,zero,1000cefc <__divdf3+0x23c>
1000cd60:	0081ffc4 	movi	r2,2047
1000cd64:	28805f26 	beq	r5,r2,1000cee4 <__divdf3+0x224>
1000cd68:	84000434 	orhi	r16,r16,16
1000cd6c:	3004d77a 	srli	r2,r6,29
1000cd70:	802090fa 	slli	r16,r16,3
1000cd74:	302a90fa 	slli	r21,r6,3
1000cd78:	297f0044 	addi	r5,r5,-1023
1000cd7c:	80a0b03a 	or	r16,r16,r2
1000cd80:	000f883a 	mov	r7,zero
1000cd84:	3d06b03a 	or	r3,r7,r20
1000cd88:	180690ba 	slli	r3,r3,2
1000cd8c:	00840074 	movhi	r2,4097
1000cd90:	10b36c04 	addi	r2,r2,-12880
1000cd94:	1885883a 	add	r2,r3,r2
1000cd98:	10800017 	ldw	r2,0(r2)
1000cd9c:	b5c8f03a 	xor	r4,r22,r23
1000cda0:	200d883a 	mov	r6,r4
1000cda4:	25003fcc 	andi	r20,r4,255
1000cda8:	9165c83a 	sub	r18,r18,r5
1000cdac:	1000683a 	jmp	r2
1000cdb0:	1000cff8 	rdprs	zero,r2,831
1000cdb4:	1000ce28 	cmpgeui	zero,r2,824
1000cdb8:	1000cfbc 	xorhi	zero,r2,830
1000cdbc:	1000ce0c 	andi	zero,r2,824
1000cdc0:	1000cfbc 	xorhi	zero,r2,830
1000cdc4:	1000cf90 	cmplti	zero,r2,830
1000cdc8:	1000cfbc 	xorhi	zero,r2,830
1000cdcc:	1000ce0c 	andi	zero,r2,824
1000cdd0:	1000ce28 	cmpgeui	zero,r2,824
1000cdd4:	1000ce28 	cmpgeui	zero,r2,824
1000cdd8:	1000cf90 	cmplti	zero,r2,830
1000cddc:	1000ce0c 	andi	zero,r2,824
1000cde0:	1000ce1c 	xori	zero,r2,824
1000cde4:	1000ce1c 	xori	zero,r2,824
1000cde8:	1000ce1c 	xori	zero,r2,824
1000cdec:	1000cfcc 	andi	zero,r2,831
1000cdf0:	8904b03a 	or	r2,r17,r4
1000cdf4:	1000631e 	bne	r2,zero,1000cf84 <__divdf3+0x2c4>
1000cdf8:	05000204 	movi	r20,8
1000cdfc:	0023883a 	mov	r17,zero
1000ce00:	0027883a 	mov	r19,zero
1000ce04:	02000084 	movi	r8,2
1000ce08:	003fcc06 	br	1000cd3c <__alt_data_end+0xf800cd3c>
1000ce0c:	8023883a 	mov	r17,r16
1000ce10:	a827883a 	mov	r19,r21
1000ce14:	4839883a 	mov	fp,r9
1000ce18:	3811883a 	mov	r8,r7
1000ce1c:	00800084 	movi	r2,2
1000ce20:	4081531e 	bne	r8,r2,1000d370 <__divdf3+0x6b0>
1000ce24:	e029883a 	mov	r20,fp
1000ce28:	a180004c 	andi	r6,r20,1
1000ce2c:	0201ffc4 	movi	r8,2047
1000ce30:	000b883a 	mov	r5,zero
1000ce34:	0027883a 	mov	r19,zero
1000ce38:	4010953a 	slli	r8,r8,20
1000ce3c:	30c03fcc 	andi	r3,r6,255
1000ce40:	04000434 	movhi	r16,16
1000ce44:	180697fa 	slli	r3,r3,31
1000ce48:	843fffc4 	addi	r16,r16,-1
1000ce4c:	2c20703a 	and	r16,r5,r16
1000ce50:	8220b03a 	or	r16,r16,r8
1000ce54:	80c6b03a 	or	r3,r16,r3
1000ce58:	9805883a 	mov	r2,r19
1000ce5c:	dfc00f17 	ldw	ra,60(sp)
1000ce60:	df000e17 	ldw	fp,56(sp)
1000ce64:	ddc00d17 	ldw	r23,52(sp)
1000ce68:	dd800c17 	ldw	r22,48(sp)
1000ce6c:	dd400b17 	ldw	r21,44(sp)
1000ce70:	dd000a17 	ldw	r20,40(sp)
1000ce74:	dcc00917 	ldw	r19,36(sp)
1000ce78:	dc800817 	ldw	r18,32(sp)
1000ce7c:	dc400717 	ldw	r17,28(sp)
1000ce80:	dc000617 	ldw	r16,24(sp)
1000ce84:	dec01004 	addi	sp,sp,64
1000ce88:	f800283a 	ret
1000ce8c:	8904b03a 	or	r2,r17,r4
1000ce90:	10003726 	beq	r2,zero,1000cf70 <__divdf3+0x2b0>
1000ce94:	88014d26 	beq	r17,zero,1000d3cc <__divdf3+0x70c>
1000ce98:	8809883a 	mov	r4,r17
1000ce9c:	d9800215 	stw	r6,8(sp)
1000cea0:	d9c00515 	stw	r7,20(sp)
1000cea4:	00037e80 	call	100037e8 <__clzsi2>
1000cea8:	d9800217 	ldw	r6,8(sp)
1000ceac:	d9c00517 	ldw	r7,20(sp)
1000ceb0:	1007883a 	mov	r3,r2
1000ceb4:	01000a04 	movi	r4,40
1000ceb8:	1cfffe04 	addi	r19,r3,-8
1000cebc:	20c9c83a 	sub	r4,r4,r3
1000cec0:	8cca983a 	sll	r5,r17,r19
1000cec4:	a108d83a 	srl	r4,r20,r4
1000cec8:	a4e6983a 	sll	r19,r20,r19
1000cecc:	2162b03a 	or	r17,r4,r5
1000ced0:	04bf0344 	movi	r18,-1011
1000ced4:	90e5c83a 	sub	r18,r18,r3
1000ced8:	0029883a 	mov	r20,zero
1000cedc:	0011883a 	mov	r8,zero
1000cee0:	003f9606 	br	1000cd3c <__alt_data_end+0xf800cd3c>
1000cee4:	8184b03a 	or	r2,r16,r6
1000cee8:	10001f1e 	bne	r2,zero,1000cf68 <__divdf3+0x2a8>
1000ceec:	0021883a 	mov	r16,zero
1000cef0:	002b883a 	mov	r21,zero
1000cef4:	01c00084 	movi	r7,2
1000cef8:	003fa206 	br	1000cd84 <__alt_data_end+0xf800cd84>
1000cefc:	8184b03a 	or	r2,r16,r6
1000cf00:	10001526 	beq	r2,zero,1000cf58 <__divdf3+0x298>
1000cf04:	80013d26 	beq	r16,zero,1000d3fc <__divdf3+0x73c>
1000cf08:	8009883a 	mov	r4,r16
1000cf0c:	d9800215 	stw	r6,8(sp)
1000cf10:	da000315 	stw	r8,12(sp)
1000cf14:	da400415 	stw	r9,16(sp)
1000cf18:	00037e80 	call	100037e8 <__clzsi2>
1000cf1c:	d9800217 	ldw	r6,8(sp)
1000cf20:	da000317 	ldw	r8,12(sp)
1000cf24:	da400417 	ldw	r9,16(sp)
1000cf28:	1007883a 	mov	r3,r2
1000cf2c:	01000a04 	movi	r4,40
1000cf30:	1d7ffe04 	addi	r21,r3,-8
1000cf34:	20c9c83a 	sub	r4,r4,r3
1000cf38:	8560983a 	sll	r16,r16,r21
1000cf3c:	3108d83a 	srl	r4,r6,r4
1000cf40:	356a983a 	sll	r21,r6,r21
1000cf44:	2420b03a 	or	r16,r4,r16
1000cf48:	017f0344 	movi	r5,-1011
1000cf4c:	28cbc83a 	sub	r5,r5,r3
1000cf50:	000f883a 	mov	r7,zero
1000cf54:	003f8b06 	br	1000cd84 <__alt_data_end+0xf800cd84>
1000cf58:	0021883a 	mov	r16,zero
1000cf5c:	002b883a 	mov	r21,zero
1000cf60:	01c00044 	movi	r7,1
1000cf64:	003f8706 	br	1000cd84 <__alt_data_end+0xf800cd84>
1000cf68:	01c000c4 	movi	r7,3
1000cf6c:	003f8506 	br	1000cd84 <__alt_data_end+0xf800cd84>
1000cf70:	05000104 	movi	r20,4
1000cf74:	0023883a 	mov	r17,zero
1000cf78:	0027883a 	mov	r19,zero
1000cf7c:	02000044 	movi	r8,1
1000cf80:	003f6e06 	br	1000cd3c <__alt_data_end+0xf800cd3c>
1000cf84:	05000304 	movi	r20,12
1000cf88:	020000c4 	movi	r8,3
1000cf8c:	003f6b06 	br	1000cd3c <__alt_data_end+0xf800cd3c>
1000cf90:	01400434 	movhi	r5,16
1000cf94:	000d883a 	mov	r6,zero
1000cf98:	297fffc4 	addi	r5,r5,-1
1000cf9c:	04ffffc4 	movi	r19,-1
1000cfa0:	0201ffc4 	movi	r8,2047
1000cfa4:	003fa406 	br	1000ce38 <__alt_data_end+0xf800ce38>
1000cfa8:	043f0084 	movi	r16,-1022
1000cfac:	84a1c83a 	sub	r16,r16,r18
1000cfb0:	00800e04 	movi	r2,56
1000cfb4:	14014d0e 	bge	r2,r16,1000d4ec <__divdf3+0x82c>
1000cfb8:	a180004c 	andi	r6,r20,1
1000cfbc:	0011883a 	mov	r8,zero
1000cfc0:	000b883a 	mov	r5,zero
1000cfc4:	0027883a 	mov	r19,zero
1000cfc8:	003f9b06 	br	1000ce38 <__alt_data_end+0xf800ce38>
1000cfcc:	8880022c 	andhi	r2,r17,8
1000cfd0:	1000f026 	beq	r2,zero,1000d394 <__divdf3+0x6d4>
1000cfd4:	8080022c 	andhi	r2,r16,8
1000cfd8:	1000ee1e 	bne	r2,zero,1000d394 <__divdf3+0x6d4>
1000cfdc:	00800434 	movhi	r2,16
1000cfe0:	81400234 	orhi	r5,r16,8
1000cfe4:	10bfffc4 	addi	r2,r2,-1
1000cfe8:	b80d883a 	mov	r6,r23
1000cfec:	288a703a 	and	r5,r5,r2
1000cff0:	a827883a 	mov	r19,r21
1000cff4:	003fea06 	br	1000cfa0 <__alt_data_end+0xf800cfa0>
1000cff8:	84411c36 	bltu	r16,r17,1000d46c <__divdf3+0x7ac>
1000cffc:	8c011a26 	beq	r17,r16,1000d468 <__divdf3+0x7a8>
1000d000:	94bfffc4 	addi	r18,r18,-1
1000d004:	dcc00015 	stw	r19,0(sp)
1000d008:	8811883a 	mov	r8,r17
1000d00c:	002d883a 	mov	r22,zero
1000d010:	a80cd63a 	srli	r6,r21,24
1000d014:	8020923a 	slli	r16,r16,8
1000d018:	a82a923a 	slli	r21,r21,8
1000d01c:	4009883a 	mov	r4,r8
1000d020:	342eb03a 	or	r23,r6,r16
1000d024:	dd400115 	stw	r21,4(sp)
1000d028:	b82ad43a 	srli	r21,r23,16
1000d02c:	da000315 	stw	r8,12(sp)
1000d030:	bcffffcc 	andi	r19,r23,65535
1000d034:	a80b883a 	mov	r5,r21
1000d038:	00024ec0 	call	100024ec <__udivsi3>
1000d03c:	1009883a 	mov	r4,r2
1000d040:	980b883a 	mov	r5,r19
1000d044:	1023883a 	mov	r17,r2
1000d048:	00024fc0 	call	100024fc <__mulsi3>
1000d04c:	da000317 	ldw	r8,12(sp)
1000d050:	a80b883a 	mov	r5,r21
1000d054:	1039883a 	mov	fp,r2
1000d058:	4009883a 	mov	r4,r8
1000d05c:	00024f40 	call	100024f4 <__umodsi3>
1000d060:	d8c00017 	ldw	r3,0(sp)
1000d064:	1004943a 	slli	r2,r2,16
1000d068:	1810d43a 	srli	r8,r3,16
1000d06c:	120eb03a 	or	r7,r2,r8
1000d070:	3f00062e 	bgeu	r7,fp,1000d08c <__divdf3+0x3cc>
1000d074:	3dcf883a 	add	r7,r7,r23
1000d078:	88bfffc4 	addi	r2,r17,-1
1000d07c:	3dc10a36 	bltu	r7,r23,1000d4a8 <__divdf3+0x7e8>
1000d080:	3f01092e 	bgeu	r7,fp,1000d4a8 <__divdf3+0x7e8>
1000d084:	8c7fff84 	addi	r17,r17,-2
1000d088:	3dcf883a 	add	r7,r7,r23
1000d08c:	3f39c83a 	sub	fp,r7,fp
1000d090:	e009883a 	mov	r4,fp
1000d094:	a80b883a 	mov	r5,r21
1000d098:	00024ec0 	call	100024ec <__udivsi3>
1000d09c:	1009883a 	mov	r4,r2
1000d0a0:	980b883a 	mov	r5,r19
1000d0a4:	1021883a 	mov	r16,r2
1000d0a8:	00024fc0 	call	100024fc <__mulsi3>
1000d0ac:	e009883a 	mov	r4,fp
1000d0b0:	a80b883a 	mov	r5,r21
1000d0b4:	d8800315 	stw	r2,12(sp)
1000d0b8:	00024f40 	call	100024f4 <__umodsi3>
1000d0bc:	d9000017 	ldw	r4,0(sp)
1000d0c0:	1004943a 	slli	r2,r2,16
1000d0c4:	da000317 	ldw	r8,12(sp)
1000d0c8:	20ffffcc 	andi	r3,r4,65535
1000d0cc:	10ceb03a 	or	r7,r2,r3
1000d0d0:	3a00062e 	bgeu	r7,r8,1000d0ec <__divdf3+0x42c>
1000d0d4:	3dcf883a 	add	r7,r7,r23
1000d0d8:	80bfffc4 	addi	r2,r16,-1
1000d0dc:	3dc0f036 	bltu	r7,r23,1000d4a0 <__divdf3+0x7e0>
1000d0e0:	3a00ef2e 	bgeu	r7,r8,1000d4a0 <__divdf3+0x7e0>
1000d0e4:	843fff84 	addi	r16,r16,-2
1000d0e8:	3dcf883a 	add	r7,r7,r23
1000d0ec:	d8c00117 	ldw	r3,4(sp)
1000d0f0:	8822943a 	slli	r17,r17,16
1000d0f4:	3a0fc83a 	sub	r7,r7,r8
1000d0f8:	1806d43a 	srli	r3,r3,16
1000d0fc:	8462b03a 	or	r17,r16,r17
1000d100:	8affffcc 	andi	r11,r17,65535
1000d104:	d8c00015 	stw	r3,0(sp)
1000d108:	d8c00117 	ldw	r3,4(sp)
1000d10c:	8820d43a 	srli	r16,r17,16
1000d110:	5809883a 	mov	r4,r11
1000d114:	1f3fffcc 	andi	fp,r3,65535
1000d118:	e00b883a 	mov	r5,fp
1000d11c:	d9c00515 	stw	r7,20(sp)
1000d120:	dac00215 	stw	r11,8(sp)
1000d124:	00024fc0 	call	100024fc <__mulsi3>
1000d128:	8009883a 	mov	r4,r16
1000d12c:	e00b883a 	mov	r5,fp
1000d130:	d8800415 	stw	r2,16(sp)
1000d134:	00024fc0 	call	100024fc <__mulsi3>
1000d138:	d9400017 	ldw	r5,0(sp)
1000d13c:	8009883a 	mov	r4,r16
1000d140:	d8800315 	stw	r2,12(sp)
1000d144:	00024fc0 	call	100024fc <__mulsi3>
1000d148:	dac00217 	ldw	r11,8(sp)
1000d14c:	d9400017 	ldw	r5,0(sp)
1000d150:	d8800215 	stw	r2,8(sp)
1000d154:	5809883a 	mov	r4,r11
1000d158:	00024fc0 	call	100024fc <__mulsi3>
1000d15c:	da400417 	ldw	r9,16(sp)
1000d160:	da800317 	ldw	r10,12(sp)
1000d164:	d9c00517 	ldw	r7,20(sp)
1000d168:	480ad43a 	srli	r5,r9,16
1000d16c:	5085883a 	add	r2,r10,r2
1000d170:	db000217 	ldw	r12,8(sp)
1000d174:	1151883a 	add	r8,r2,r5
1000d178:	4280022e 	bgeu	r8,r10,1000d184 <__divdf3+0x4c4>
1000d17c:	00800074 	movhi	r2,1
1000d180:	6099883a 	add	r12,r12,r2
1000d184:	400ad43a 	srli	r5,r8,16
1000d188:	4010943a 	slli	r8,r8,16
1000d18c:	4c3fffcc 	andi	r16,r9,65535
1000d190:	6149883a 	add	r4,r12,r5
1000d194:	4411883a 	add	r8,r8,r16
1000d198:	3900a736 	bltu	r7,r4,1000d438 <__divdf3+0x778>
1000d19c:	3900c426 	beq	r7,r4,1000d4b0 <__divdf3+0x7f0>
1000d1a0:	3909c83a 	sub	r4,r7,r4
1000d1a4:	b221c83a 	sub	r16,r22,r8
1000d1a8:	b42d803a 	cmpltu	r22,r22,r16
1000d1ac:	25adc83a 	sub	r22,r4,r22
1000d1b0:	b5c0c626 	beq	r22,r23,1000d4cc <__divdf3+0x80c>
1000d1b4:	b009883a 	mov	r4,r22
1000d1b8:	a80b883a 	mov	r5,r21
1000d1bc:	00024ec0 	call	100024ec <__udivsi3>
1000d1c0:	1009883a 	mov	r4,r2
1000d1c4:	980b883a 	mov	r5,r19
1000d1c8:	d8800315 	stw	r2,12(sp)
1000d1cc:	00024fc0 	call	100024fc <__mulsi3>
1000d1d0:	a80b883a 	mov	r5,r21
1000d1d4:	b009883a 	mov	r4,r22
1000d1d8:	d8800415 	stw	r2,16(sp)
1000d1dc:	00024f40 	call	100024f4 <__umodsi3>
1000d1e0:	1004943a 	slli	r2,r2,16
1000d1e4:	800ed43a 	srli	r7,r16,16
1000d1e8:	da400417 	ldw	r9,16(sp)
1000d1ec:	da000317 	ldw	r8,12(sp)
1000d1f0:	11cab03a 	or	r5,r2,r7
1000d1f4:	2a40062e 	bgeu	r5,r9,1000d210 <__divdf3+0x550>
1000d1f8:	2dcb883a 	add	r5,r5,r23
1000d1fc:	40bfffc4 	addi	r2,r8,-1
1000d200:	2dc0b436 	bltu	r5,r23,1000d4d4 <__divdf3+0x814>
1000d204:	2a40b32e 	bgeu	r5,r9,1000d4d4 <__divdf3+0x814>
1000d208:	423fff84 	addi	r8,r8,-2
1000d20c:	2dcb883a 	add	r5,r5,r23
1000d210:	2a6dc83a 	sub	r22,r5,r9
1000d214:	b009883a 	mov	r4,r22
1000d218:	a80b883a 	mov	r5,r21
1000d21c:	da000315 	stw	r8,12(sp)
1000d220:	00024ec0 	call	100024ec <__udivsi3>
1000d224:	980b883a 	mov	r5,r19
1000d228:	1009883a 	mov	r4,r2
1000d22c:	d8800415 	stw	r2,16(sp)
1000d230:	00024fc0 	call	100024fc <__mulsi3>
1000d234:	b009883a 	mov	r4,r22
1000d238:	a80b883a 	mov	r5,r21
1000d23c:	1027883a 	mov	r19,r2
1000d240:	00024f40 	call	100024f4 <__umodsi3>
1000d244:	1004943a 	slli	r2,r2,16
1000d248:	843fffcc 	andi	r16,r16,65535
1000d24c:	da000317 	ldw	r8,12(sp)
1000d250:	140eb03a 	or	r7,r2,r16
1000d254:	da400417 	ldw	r9,16(sp)
1000d258:	3cc0062e 	bgeu	r7,r19,1000d274 <__divdf3+0x5b4>
1000d25c:	3dcf883a 	add	r7,r7,r23
1000d260:	48bfffc4 	addi	r2,r9,-1
1000d264:	3dc09d36 	bltu	r7,r23,1000d4dc <__divdf3+0x81c>
1000d268:	3cc09c2e 	bgeu	r7,r19,1000d4dc <__divdf3+0x81c>
1000d26c:	4a7fff84 	addi	r9,r9,-2
1000d270:	3dcf883a 	add	r7,r7,r23
1000d274:	4010943a 	slli	r8,r8,16
1000d278:	3cebc83a 	sub	r21,r7,r19
1000d27c:	e00b883a 	mov	r5,fp
1000d280:	4a26b03a 	or	r19,r9,r8
1000d284:	99ffffcc 	andi	r7,r19,65535
1000d288:	9820d43a 	srli	r16,r19,16
1000d28c:	3809883a 	mov	r4,r7
1000d290:	d9c00515 	stw	r7,20(sp)
1000d294:	00024fc0 	call	100024fc <__mulsi3>
1000d298:	8009883a 	mov	r4,r16
1000d29c:	e00b883a 	mov	r5,fp
1000d2a0:	102d883a 	mov	r22,r2
1000d2a4:	00024fc0 	call	100024fc <__mulsi3>
1000d2a8:	d9400017 	ldw	r5,0(sp)
1000d2ac:	8009883a 	mov	r4,r16
1000d2b0:	1039883a 	mov	fp,r2
1000d2b4:	00024fc0 	call	100024fc <__mulsi3>
1000d2b8:	d9c00517 	ldw	r7,20(sp)
1000d2bc:	d9400017 	ldw	r5,0(sp)
1000d2c0:	1021883a 	mov	r16,r2
1000d2c4:	3809883a 	mov	r4,r7
1000d2c8:	00024fc0 	call	100024fc <__mulsi3>
1000d2cc:	b008d43a 	srli	r4,r22,16
1000d2d0:	e085883a 	add	r2,fp,r2
1000d2d4:	1109883a 	add	r4,r2,r4
1000d2d8:	2700022e 	bgeu	r4,fp,1000d2e4 <__divdf3+0x624>
1000d2dc:	00800074 	movhi	r2,1
1000d2e0:	80a1883a 	add	r16,r16,r2
1000d2e4:	200ad43a 	srli	r5,r4,16
1000d2e8:	2008943a 	slli	r4,r4,16
1000d2ec:	b5bfffcc 	andi	r22,r22,65535
1000d2f0:	8145883a 	add	r2,r16,r5
1000d2f4:	2589883a 	add	r4,r4,r22
1000d2f8:	a8802c36 	bltu	r21,r2,1000d3ac <__divdf3+0x6ec>
1000d2fc:	a880a426 	beq	r21,r2,1000d590 <__divdf3+0x8d0>
1000d300:	9cc00054 	ori	r19,r19,1
1000d304:	9200ffc4 	addi	r8,r18,1023
1000d308:	023f270e 	bge	zero,r8,1000cfa8 <__alt_data_end+0xf800cfa8>
1000d30c:	988001cc 	andi	r2,r19,7
1000d310:	10000726 	beq	r2,zero,1000d330 <__divdf3+0x670>
1000d314:	990003cc 	andi	r4,r19,15
1000d318:	00800104 	movi	r2,4
1000d31c:	20800426 	beq	r4,r2,1000d330 <__divdf3+0x670>
1000d320:	9885883a 	add	r2,r19,r2
1000d324:	14e7803a 	cmpltu	r19,r2,r19
1000d328:	8ce3883a 	add	r17,r17,r19
1000d32c:	1027883a 	mov	r19,r2
1000d330:	8880402c 	andhi	r2,r17,256
1000d334:	10000426 	beq	r2,zero,1000d348 <__divdf3+0x688>
1000d338:	00bfc034 	movhi	r2,65280
1000d33c:	10bfffc4 	addi	r2,r2,-1
1000d340:	92010004 	addi	r8,r18,1024
1000d344:	88a2703a 	and	r17,r17,r2
1000d348:	0081ff84 	movi	r2,2046
1000d34c:	123eb616 	blt	r2,r8,1000ce28 <__alt_data_end+0xf800ce28>
1000d350:	9826d0fa 	srli	r19,r19,3
1000d354:	8804977a 	slli	r2,r17,29
1000d358:	8820927a 	slli	r16,r17,9
1000d35c:	4201ffcc 	andi	r8,r8,2047
1000d360:	14e6b03a 	or	r19,r2,r19
1000d364:	800ad33a 	srli	r5,r16,12
1000d368:	a180004c 	andi	r6,r20,1
1000d36c:	003eb206 	br	1000ce38 <__alt_data_end+0xf800ce38>
1000d370:	008000c4 	movi	r2,3
1000d374:	4080ac26 	beq	r8,r2,1000d628 <__divdf3+0x968>
1000d378:	00800044 	movi	r2,1
1000d37c:	4080591e 	bne	r8,r2,1000d4e4 <__divdf3+0x824>
1000d380:	e00d883a 	mov	r6,fp
1000d384:	0011883a 	mov	r8,zero
1000d388:	000b883a 	mov	r5,zero
1000d38c:	0027883a 	mov	r19,zero
1000d390:	003ea906 	br	1000ce38 <__alt_data_end+0xf800ce38>
1000d394:	00800434 	movhi	r2,16
1000d398:	89400234 	orhi	r5,r17,8
1000d39c:	10bfffc4 	addi	r2,r2,-1
1000d3a0:	b00d883a 	mov	r6,r22
1000d3a4:	288a703a 	and	r5,r5,r2
1000d3a8:	003efd06 	br	1000cfa0 <__alt_data_end+0xf800cfa0>
1000d3ac:	adcf883a 	add	r7,r21,r23
1000d3b0:	997fffc4 	addi	r5,r19,-1
1000d3b4:	3dc0412e 	bgeu	r7,r23,1000d4bc <__divdf3+0x7fc>
1000d3b8:	2827883a 	mov	r19,r5
1000d3bc:	38bfd01e 	bne	r7,r2,1000d300 <__alt_data_end+0xf800d300>
1000d3c0:	d8c00117 	ldw	r3,4(sp)
1000d3c4:	193fce1e 	bne	r3,r4,1000d300 <__alt_data_end+0xf800d300>
1000d3c8:	003fce06 	br	1000d304 <__alt_data_end+0xf800d304>
1000d3cc:	d9800215 	stw	r6,8(sp)
1000d3d0:	d9c00515 	stw	r7,20(sp)
1000d3d4:	00037e80 	call	100037e8 <__clzsi2>
1000d3d8:	10c00804 	addi	r3,r2,32
1000d3dc:	010009c4 	movi	r4,39
1000d3e0:	d9800217 	ldw	r6,8(sp)
1000d3e4:	d9c00517 	ldw	r7,20(sp)
1000d3e8:	20feb20e 	bge	r4,r3,1000ceb4 <__alt_data_end+0xf800ceb4>
1000d3ec:	117ffe04 	addi	r5,r2,-8
1000d3f0:	a162983a 	sll	r17,r20,r5
1000d3f4:	0027883a 	mov	r19,zero
1000d3f8:	003eb506 	br	1000ced0 <__alt_data_end+0xf800ced0>
1000d3fc:	3009883a 	mov	r4,r6
1000d400:	d9800215 	stw	r6,8(sp)
1000d404:	da000315 	stw	r8,12(sp)
1000d408:	da400415 	stw	r9,16(sp)
1000d40c:	00037e80 	call	100037e8 <__clzsi2>
1000d410:	10c00804 	addi	r3,r2,32
1000d414:	010009c4 	movi	r4,39
1000d418:	d9800217 	ldw	r6,8(sp)
1000d41c:	da000317 	ldw	r8,12(sp)
1000d420:	da400417 	ldw	r9,16(sp)
1000d424:	20fec10e 	bge	r4,r3,1000cf2c <__alt_data_end+0xf800cf2c>
1000d428:	10bffe04 	addi	r2,r2,-8
1000d42c:	a8a0983a 	sll	r16,r21,r2
1000d430:	002b883a 	mov	r21,zero
1000d434:	003ec406 	br	1000cf48 <__alt_data_end+0xf800cf48>
1000d438:	d8c00117 	ldw	r3,4(sp)
1000d43c:	b0ed883a 	add	r22,r22,r3
1000d440:	b0c5803a 	cmpltu	r2,r22,r3
1000d444:	15c5883a 	add	r2,r2,r23
1000d448:	11cf883a 	add	r7,r2,r7
1000d44c:	88bfffc4 	addi	r2,r17,-1
1000d450:	b9c00d2e 	bgeu	r23,r7,1000d488 <__divdf3+0x7c8>
1000d454:	39003f36 	bltu	r7,r4,1000d554 <__divdf3+0x894>
1000d458:	21c06a26 	beq	r4,r7,1000d604 <__divdf3+0x944>
1000d45c:	3909c83a 	sub	r4,r7,r4
1000d460:	1023883a 	mov	r17,r2
1000d464:	003f4f06 	br	1000d1a4 <__alt_data_end+0xf800d1a4>
1000d468:	9d7ee536 	bltu	r19,r21,1000d000 <__alt_data_end+0xf800d000>
1000d46c:	982ed07a 	srli	r23,r19,1
1000d470:	880497fa 	slli	r2,r17,31
1000d474:	8810d07a 	srli	r8,r17,1
1000d478:	982c97fa 	slli	r22,r19,31
1000d47c:	b884b03a 	or	r2,r23,r2
1000d480:	d8800015 	stw	r2,0(sp)
1000d484:	003ee206 	br	1000d010 <__alt_data_end+0xf800d010>
1000d488:	3dfff41e 	bne	r7,r23,1000d45c <__alt_data_end+0xf800d45c>
1000d48c:	d8c00117 	ldw	r3,4(sp)
1000d490:	b0fff02e 	bgeu	r22,r3,1000d454 <__alt_data_end+0xf800d454>
1000d494:	b909c83a 	sub	r4,r23,r4
1000d498:	1023883a 	mov	r17,r2
1000d49c:	003f4106 	br	1000d1a4 <__alt_data_end+0xf800d1a4>
1000d4a0:	1021883a 	mov	r16,r2
1000d4a4:	003f1106 	br	1000d0ec <__alt_data_end+0xf800d0ec>
1000d4a8:	1023883a 	mov	r17,r2
1000d4ac:	003ef706 	br	1000d08c <__alt_data_end+0xf800d08c>
1000d4b0:	b23fe136 	bltu	r22,r8,1000d438 <__alt_data_end+0xf800d438>
1000d4b4:	0009883a 	mov	r4,zero
1000d4b8:	003f3a06 	br	1000d1a4 <__alt_data_end+0xf800d1a4>
1000d4bc:	38802c36 	bltu	r7,r2,1000d570 <__divdf3+0x8b0>
1000d4c0:	11c05326 	beq	r2,r7,1000d610 <__divdf3+0x950>
1000d4c4:	2827883a 	mov	r19,r5
1000d4c8:	003f8d06 	br	1000d300 <__alt_data_end+0xf800d300>
1000d4cc:	04ffffc4 	movi	r19,-1
1000d4d0:	003f8c06 	br	1000d304 <__alt_data_end+0xf800d304>
1000d4d4:	1011883a 	mov	r8,r2
1000d4d8:	003f4d06 	br	1000d210 <__alt_data_end+0xf800d210>
1000d4dc:	1013883a 	mov	r9,r2
1000d4e0:	003f6406 	br	1000d274 <__alt_data_end+0xf800d274>
1000d4e4:	e029883a 	mov	r20,fp
1000d4e8:	003f8606 	br	1000d304 <__alt_data_end+0xf800d304>
1000d4ec:	008007c4 	movi	r2,31
1000d4f0:	14002a16 	blt	r2,r16,1000d59c <__divdf3+0x8dc>
1000d4f4:	91410784 	addi	r5,r18,1054
1000d4f8:	9c0cd83a 	srl	r6,r19,r16
1000d4fc:	8948983a 	sll	r4,r17,r5
1000d500:	9944983a 	sll	r2,r19,r5
1000d504:	8c20d83a 	srl	r16,r17,r16
1000d508:	3108b03a 	or	r4,r6,r4
1000d50c:	1004c03a 	cmpne	r2,r2,zero
1000d510:	2084b03a 	or	r2,r4,r2
1000d514:	110001cc 	andi	r4,r2,7
1000d518:	20000726 	beq	r4,zero,1000d538 <__divdf3+0x878>
1000d51c:	114003cc 	andi	r5,r2,15
1000d520:	01000104 	movi	r4,4
1000d524:	29000426 	beq	r5,r4,1000d538 <__divdf3+0x878>
1000d528:	11000104 	addi	r4,r2,4
1000d52c:	2085803a 	cmpltu	r2,r4,r2
1000d530:	80a1883a 	add	r16,r16,r2
1000d534:	2005883a 	mov	r2,r4
1000d538:	8100202c 	andhi	r4,r16,128
1000d53c:	20002d26 	beq	r4,zero,1000d5f4 <__divdf3+0x934>
1000d540:	a180004c 	andi	r6,r20,1
1000d544:	02000044 	movi	r8,1
1000d548:	000b883a 	mov	r5,zero
1000d54c:	0027883a 	mov	r19,zero
1000d550:	003e3906 	br	1000ce38 <__alt_data_end+0xf800ce38>
1000d554:	d8c00117 	ldw	r3,4(sp)
1000d558:	8c7fff84 	addi	r17,r17,-2
1000d55c:	b0ed883a 	add	r22,r22,r3
1000d560:	b0c5803a 	cmpltu	r2,r22,r3
1000d564:	15c5883a 	add	r2,r2,r23
1000d568:	11cf883a 	add	r7,r2,r7
1000d56c:	003f0c06 	br	1000d1a0 <__alt_data_end+0xf800d1a0>
1000d570:	d8c00117 	ldw	r3,4(sp)
1000d574:	997fff84 	addi	r5,r19,-2
1000d578:	18d1883a 	add	r8,r3,r3
1000d57c:	40c7803a 	cmpltu	r3,r8,r3
1000d580:	1dcd883a 	add	r6,r3,r23
1000d584:	398f883a 	add	r7,r7,r6
1000d588:	da000115 	stw	r8,4(sp)
1000d58c:	003f8a06 	br	1000d3b8 <__alt_data_end+0xf800d3b8>
1000d590:	203f861e 	bne	r4,zero,1000d3ac <__alt_data_end+0xf800d3ac>
1000d594:	d8000115 	stw	zero,4(sp)
1000d598:	003f8906 	br	1000d3c0 <__alt_data_end+0xf800d3c0>
1000d59c:	00bef884 	movi	r2,-1054
1000d5a0:	1485c83a 	sub	r2,r2,r18
1000d5a4:	01000804 	movi	r4,32
1000d5a8:	8884d83a 	srl	r2,r17,r2
1000d5ac:	81001c26 	beq	r16,r4,1000d620 <__divdf3+0x960>
1000d5b0:	91010f84 	addi	r4,r18,1086
1000d5b4:	8908983a 	sll	r4,r17,r4
1000d5b8:	24c8b03a 	or	r4,r4,r19
1000d5bc:	2008c03a 	cmpne	r4,r4,zero
1000d5c0:	2084b03a 	or	r2,r4,r2
1000d5c4:	140001cc 	andi	r16,r2,7
1000d5c8:	8000061e 	bne	r16,zero,1000d5e4 <__divdf3+0x924>
1000d5cc:	000b883a 	mov	r5,zero
1000d5d0:	1004d0fa 	srli	r2,r2,3
1000d5d4:	a180004c 	andi	r6,r20,1
1000d5d8:	0011883a 	mov	r8,zero
1000d5dc:	1426b03a 	or	r19,r2,r16
1000d5e0:	003e1506 	br	1000ce38 <__alt_data_end+0xf800ce38>
1000d5e4:	114003cc 	andi	r5,r2,15
1000d5e8:	01000104 	movi	r4,4
1000d5ec:	0021883a 	mov	r16,zero
1000d5f0:	293fcd1e 	bne	r5,r4,1000d528 <__alt_data_end+0xf800d528>
1000d5f4:	800a927a 	slli	r5,r16,9
1000d5f8:	8020977a 	slli	r16,r16,29
1000d5fc:	280ad33a 	srli	r5,r5,12
1000d600:	003ff306 	br	1000d5d0 <__alt_data_end+0xf800d5d0>
1000d604:	b23fd336 	bltu	r22,r8,1000d554 <__alt_data_end+0xf800d554>
1000d608:	1023883a 	mov	r17,r2
1000d60c:	003fa906 	br	1000d4b4 <__alt_data_end+0xf800d4b4>
1000d610:	d8c00117 	ldw	r3,4(sp)
1000d614:	193fd636 	bltu	r3,r4,1000d570 <__alt_data_end+0xf800d570>
1000d618:	2827883a 	mov	r19,r5
1000d61c:	003f6806 	br	1000d3c0 <__alt_data_end+0xf800d3c0>
1000d620:	0009883a 	mov	r4,zero
1000d624:	003fe406 	br	1000d5b8 <__alt_data_end+0xf800d5b8>
1000d628:	00800434 	movhi	r2,16
1000d62c:	89400234 	orhi	r5,r17,8
1000d630:	10bfffc4 	addi	r2,r2,-1
1000d634:	e00d883a 	mov	r6,fp
1000d638:	288a703a 	and	r5,r5,r2
1000d63c:	003e5806 	br	1000cfa0 <__alt_data_end+0xf800cfa0>

1000d640 <__eqdf2>:
1000d640:	2804d53a 	srli	r2,r5,20
1000d644:	3806d53a 	srli	r3,r7,20
1000d648:	02000434 	movhi	r8,16
1000d64c:	423fffc4 	addi	r8,r8,-1
1000d650:	1081ffcc 	andi	r2,r2,2047
1000d654:	0241ffc4 	movi	r9,2047
1000d658:	2a14703a 	and	r10,r5,r8
1000d65c:	18c1ffcc 	andi	r3,r3,2047
1000d660:	3a10703a 	and	r8,r7,r8
1000d664:	280ad7fa 	srli	r5,r5,31
1000d668:	380ed7fa 	srli	r7,r7,31
1000d66c:	12400f26 	beq	r2,r9,1000d6ac <__eqdf2+0x6c>
1000d670:	0241ffc4 	movi	r9,2047
1000d674:	1a400326 	beq	r3,r9,1000d684 <__eqdf2+0x44>
1000d678:	10c00526 	beq	r2,r3,1000d690 <__eqdf2+0x50>
1000d67c:	00800044 	movi	r2,1
1000d680:	f800283a 	ret
1000d684:	4192b03a 	or	r9,r8,r6
1000d688:	483ffc1e 	bne	r9,zero,1000d67c <__alt_data_end+0xf800d67c>
1000d68c:	10fffb1e 	bne	r2,r3,1000d67c <__alt_data_end+0xf800d67c>
1000d690:	523ffa1e 	bne	r10,r8,1000d67c <__alt_data_end+0xf800d67c>
1000d694:	21bff91e 	bne	r4,r6,1000d67c <__alt_data_end+0xf800d67c>
1000d698:	29c00826 	beq	r5,r7,1000d6bc <__eqdf2+0x7c>
1000d69c:	103ff71e 	bne	r2,zero,1000d67c <__alt_data_end+0xf800d67c>
1000d6a0:	5104b03a 	or	r2,r10,r4
1000d6a4:	1004c03a 	cmpne	r2,r2,zero
1000d6a8:	f800283a 	ret
1000d6ac:	5112b03a 	or	r9,r10,r4
1000d6b0:	483fef26 	beq	r9,zero,1000d670 <__alt_data_end+0xf800d670>
1000d6b4:	00800044 	movi	r2,1
1000d6b8:	f800283a 	ret
1000d6bc:	0005883a 	mov	r2,zero
1000d6c0:	f800283a 	ret

1000d6c4 <__gedf2>:
1000d6c4:	2804d53a 	srli	r2,r5,20
1000d6c8:	3806d53a 	srli	r3,r7,20
1000d6cc:	02000434 	movhi	r8,16
1000d6d0:	423fffc4 	addi	r8,r8,-1
1000d6d4:	0241ffc4 	movi	r9,2047
1000d6d8:	1081ffcc 	andi	r2,r2,2047
1000d6dc:	2a14703a 	and	r10,r5,r8
1000d6e0:	1a46703a 	and	r3,r3,r9
1000d6e4:	3a10703a 	and	r8,r7,r8
1000d6e8:	280ad7fa 	srli	r5,r5,31
1000d6ec:	380ed7fa 	srli	r7,r7,31
1000d6f0:	12400b26 	beq	r2,r9,1000d720 <__gedf2+0x5c>
1000d6f4:	1a401626 	beq	r3,r9,1000d750 <__gedf2+0x8c>
1000d6f8:	10000c1e 	bne	r2,zero,1000d72c <__gedf2+0x68>
1000d6fc:	5112b03a 	or	r9,r10,r4
1000d700:	4813003a 	cmpeq	r9,r9,zero
1000d704:	4817883a 	mov	r11,r9
1000d708:	18000c1e 	bne	r3,zero,1000d73c <__gedf2+0x78>
1000d70c:	4198b03a 	or	r12,r8,r6
1000d710:	60000a1e 	bne	r12,zero,1000d73c <__gedf2+0x78>
1000d714:	48001326 	beq	r9,zero,1000d764 <__gedf2+0xa0>
1000d718:	0005883a 	mov	r2,zero
1000d71c:	f800283a 	ret
1000d720:	5112b03a 	or	r9,r10,r4
1000d724:	4800191e 	bne	r9,zero,1000d78c <__gedf2+0xc8>
1000d728:	18800926 	beq	r3,r2,1000d750 <__gedf2+0x8c>
1000d72c:	18000b1e 	bne	r3,zero,1000d75c <__gedf2+0x98>
1000d730:	4192b03a 	or	r9,r8,r6
1000d734:	0017883a 	mov	r11,zero
1000d738:	48000a26 	beq	r9,zero,1000d764 <__gedf2+0xa0>
1000d73c:	39c03fcc 	andi	r7,r7,255
1000d740:	58000726 	beq	r11,zero,1000d760 <__gedf2+0x9c>
1000d744:	3800081e 	bne	r7,zero,1000d768 <__gedf2+0xa4>
1000d748:	00bfffc4 	movi	r2,-1
1000d74c:	f800283a 	ret
1000d750:	4192b03a 	or	r9,r8,r6
1000d754:	48000d1e 	bne	r9,zero,1000d78c <__gedf2+0xc8>
1000d758:	103fe826 	beq	r2,zero,1000d6fc <__alt_data_end+0xf800d6fc>
1000d75c:	39c03fcc 	andi	r7,r7,255
1000d760:	29c00326 	beq	r5,r7,1000d770 <__gedf2+0xac>
1000d764:	283ff81e 	bne	r5,zero,1000d748 <__alt_data_end+0xf800d748>
1000d768:	00800044 	movi	r2,1
1000d76c:	f800283a 	ret
1000d770:	18bffc16 	blt	r3,r2,1000d764 <__alt_data_end+0xf800d764>
1000d774:	10c00316 	blt	r2,r3,1000d784 <__gedf2+0xc0>
1000d778:	42bffa36 	bltu	r8,r10,1000d764 <__alt_data_end+0xf800d764>
1000d77c:	52000526 	beq	r10,r8,1000d794 <__gedf2+0xd0>
1000d780:	523fe52e 	bgeu	r10,r8,1000d718 <__alt_data_end+0xf800d718>
1000d784:	283ff026 	beq	r5,zero,1000d748 <__alt_data_end+0xf800d748>
1000d788:	003ff706 	br	1000d768 <__alt_data_end+0xf800d768>
1000d78c:	00bfff84 	movi	r2,-2
1000d790:	f800283a 	ret
1000d794:	313ff336 	bltu	r6,r4,1000d764 <__alt_data_end+0xf800d764>
1000d798:	21bfdf2e 	bgeu	r4,r6,1000d718 <__alt_data_end+0xf800d718>
1000d79c:	283fea26 	beq	r5,zero,1000d748 <__alt_data_end+0xf800d748>
1000d7a0:	003ff106 	br	1000d768 <__alt_data_end+0xf800d768>

1000d7a4 <__ledf2>:
1000d7a4:	2804d53a 	srli	r2,r5,20
1000d7a8:	3810d53a 	srli	r8,r7,20
1000d7ac:	00c00434 	movhi	r3,16
1000d7b0:	18ffffc4 	addi	r3,r3,-1
1000d7b4:	0241ffc4 	movi	r9,2047
1000d7b8:	1081ffcc 	andi	r2,r2,2047
1000d7bc:	28d4703a 	and	r10,r5,r3
1000d7c0:	4250703a 	and	r8,r8,r9
1000d7c4:	38c6703a 	and	r3,r7,r3
1000d7c8:	280ad7fa 	srli	r5,r5,31
1000d7cc:	380ed7fa 	srli	r7,r7,31
1000d7d0:	12400b26 	beq	r2,r9,1000d800 <__ledf2+0x5c>
1000d7d4:	42401926 	beq	r8,r9,1000d83c <__ledf2+0x98>
1000d7d8:	10000c1e 	bne	r2,zero,1000d80c <__ledf2+0x68>
1000d7dc:	5112b03a 	or	r9,r10,r4
1000d7e0:	4813003a 	cmpeq	r9,r9,zero
1000d7e4:	4817883a 	mov	r11,r9
1000d7e8:	40000f26 	beq	r8,zero,1000d828 <__ledf2+0x84>
1000d7ec:	39c03fcc 	andi	r7,r7,255
1000d7f0:	58001826 	beq	r11,zero,1000d854 <__ledf2+0xb0>
1000d7f4:	38000a1e 	bne	r7,zero,1000d820 <__ledf2+0x7c>
1000d7f8:	00bfffc4 	movi	r2,-1
1000d7fc:	f800283a 	ret
1000d800:	5112b03a 	or	r9,r10,r4
1000d804:	48000f1e 	bne	r9,zero,1000d844 <__ledf2+0xa0>
1000d808:	40800c26 	beq	r8,r2,1000d83c <__ledf2+0x98>
1000d80c:	4000101e 	bne	r8,zero,1000d850 <__ledf2+0xac>
1000d810:	1992b03a 	or	r9,r3,r6
1000d814:	0017883a 	mov	r11,zero
1000d818:	483ff41e 	bne	r9,zero,1000d7ec <__alt_data_end+0xf800d7ec>
1000d81c:	283ff61e 	bne	r5,zero,1000d7f8 <__alt_data_end+0xf800d7f8>
1000d820:	00800044 	movi	r2,1
1000d824:	f800283a 	ret
1000d828:	1998b03a 	or	r12,r3,r6
1000d82c:	603fef1e 	bne	r12,zero,1000d7ec <__alt_data_end+0xf800d7ec>
1000d830:	483ffa26 	beq	r9,zero,1000d81c <__alt_data_end+0xf800d81c>
1000d834:	0005883a 	mov	r2,zero
1000d838:	f800283a 	ret
1000d83c:	1992b03a 	or	r9,r3,r6
1000d840:	48000226 	beq	r9,zero,1000d84c <__ledf2+0xa8>
1000d844:	00800084 	movi	r2,2
1000d848:	f800283a 	ret
1000d84c:	103fe326 	beq	r2,zero,1000d7dc <__alt_data_end+0xf800d7dc>
1000d850:	39c03fcc 	andi	r7,r7,255
1000d854:	29fff11e 	bne	r5,r7,1000d81c <__alt_data_end+0xf800d81c>
1000d858:	40bff016 	blt	r8,r2,1000d81c <__alt_data_end+0xf800d81c>
1000d85c:	12000316 	blt	r2,r8,1000d86c <__ledf2+0xc8>
1000d860:	1abfee36 	bltu	r3,r10,1000d81c <__alt_data_end+0xf800d81c>
1000d864:	50c00326 	beq	r10,r3,1000d874 <__ledf2+0xd0>
1000d868:	50fff22e 	bgeu	r10,r3,1000d834 <__alt_data_end+0xf800d834>
1000d86c:	283fe226 	beq	r5,zero,1000d7f8 <__alt_data_end+0xf800d7f8>
1000d870:	003feb06 	br	1000d820 <__alt_data_end+0xf800d820>
1000d874:	313fe936 	bltu	r6,r4,1000d81c <__alt_data_end+0xf800d81c>
1000d878:	21bfee2e 	bgeu	r4,r6,1000d834 <__alt_data_end+0xf800d834>
1000d87c:	283fde26 	beq	r5,zero,1000d7f8 <__alt_data_end+0xf800d7f8>
1000d880:	003fe706 	br	1000d820 <__alt_data_end+0xf800d820>

1000d884 <__muldf3>:
1000d884:	deffee04 	addi	sp,sp,-72
1000d888:	dd000c15 	stw	r20,48(sp)
1000d88c:	2828d53a 	srli	r20,r5,20
1000d890:	dd400d15 	stw	r21,52(sp)
1000d894:	282ad7fa 	srli	r21,r5,31
1000d898:	dc000815 	stw	r16,32(sp)
1000d89c:	04000434 	movhi	r16,16
1000d8a0:	ddc00f15 	stw	r23,60(sp)
1000d8a4:	dcc00b15 	stw	r19,44(sp)
1000d8a8:	dc800a15 	stw	r18,40(sp)
1000d8ac:	843fffc4 	addi	r16,r16,-1
1000d8b0:	dfc01115 	stw	ra,68(sp)
1000d8b4:	df001015 	stw	fp,64(sp)
1000d8b8:	dd800e15 	stw	r22,56(sp)
1000d8bc:	dc400915 	stw	r17,36(sp)
1000d8c0:	a501ffcc 	andi	r20,r20,2047
1000d8c4:	2025883a 	mov	r18,r4
1000d8c8:	202f883a 	mov	r23,r4
1000d8cc:	2c20703a 	and	r16,r5,r16
1000d8d0:	a827883a 	mov	r19,r21
1000d8d4:	aa403fcc 	andi	r9,r21,255
1000d8d8:	a0005926 	beq	r20,zero,1000da40 <__muldf3+0x1bc>
1000d8dc:	0081ffc4 	movi	r2,2047
1000d8e0:	a0803426 	beq	r20,r2,1000d9b4 <__muldf3+0x130>
1000d8e4:	84000434 	orhi	r16,r16,16
1000d8e8:	2004d77a 	srli	r2,r4,29
1000d8ec:	802090fa 	slli	r16,r16,3
1000d8f0:	202e90fa 	slli	r23,r4,3
1000d8f4:	a53f0044 	addi	r20,r20,-1023
1000d8f8:	80a0b03a 	or	r16,r16,r2
1000d8fc:	000b883a 	mov	r5,zero
1000d900:	0039883a 	mov	fp,zero
1000d904:	3806d53a 	srli	r3,r7,20
1000d908:	382cd7fa 	srli	r22,r7,31
1000d90c:	00800434 	movhi	r2,16
1000d910:	10bfffc4 	addi	r2,r2,-1
1000d914:	18c1ffcc 	andi	r3,r3,2047
1000d918:	3025883a 	mov	r18,r6
1000d91c:	38a2703a 	and	r17,r7,r2
1000d920:	b2803fcc 	andi	r10,r22,255
1000d924:	18006426 	beq	r3,zero,1000dab8 <__muldf3+0x234>
1000d928:	0081ffc4 	movi	r2,2047
1000d92c:	18805c26 	beq	r3,r2,1000daa0 <__muldf3+0x21c>
1000d930:	8c400434 	orhi	r17,r17,16
1000d934:	3004d77a 	srli	r2,r6,29
1000d938:	882290fa 	slli	r17,r17,3
1000d93c:	302490fa 	slli	r18,r6,3
1000d940:	18ff0044 	addi	r3,r3,-1023
1000d944:	88a2b03a 	or	r17,r17,r2
1000d948:	000f883a 	mov	r7,zero
1000d94c:	394ab03a 	or	r5,r7,r5
1000d950:	280a90ba 	slli	r5,r5,2
1000d954:	00840074 	movhi	r2,4097
1000d958:	10b65d04 	addi	r2,r2,-9868
1000d95c:	288b883a 	add	r5,r5,r2
1000d960:	28800017 	ldw	r2,0(r5)
1000d964:	a0c7883a 	add	r3,r20,r3
1000d968:	b54cf03a 	xor	r6,r22,r21
1000d96c:	1a000044 	addi	r8,r3,1
1000d970:	1000683a 	jmp	r2
1000d974:	1000dbb8 	rdprs	zero,r2,878
1000d978:	1000dba4 	muli	zero,r2,878
1000d97c:	1000dba4 	muli	zero,r2,878
1000d980:	1000db90 	cmplti	zero,r2,878
1000d984:	1000d9d0 	cmplti	zero,r2,871
1000d988:	1000d9d0 	cmplti	zero,r2,871
1000d98c:	1000db78 	rdprs	zero,r2,877
1000d990:	1000db90 	cmplti	zero,r2,878
1000d994:	1000d9d0 	cmplti	zero,r2,871
1000d998:	1000db78 	rdprs	zero,r2,877
1000d99c:	1000d9d0 	cmplti	zero,r2,871
1000d9a0:	1000db90 	cmplti	zero,r2,878
1000d9a4:	1000d9d4 	ori	zero,r2,871
1000d9a8:	1000d9d4 	ori	zero,r2,871
1000d9ac:	1000d9d4 	ori	zero,r2,871
1000d9b0:	1000def4 	orhi	zero,r2,891
1000d9b4:	8104b03a 	or	r2,r16,r4
1000d9b8:	10006c1e 	bne	r2,zero,1000db6c <__muldf3+0x2e8>
1000d9bc:	01400204 	movi	r5,8
1000d9c0:	0021883a 	mov	r16,zero
1000d9c4:	002f883a 	mov	r23,zero
1000d9c8:	07000084 	movi	fp,2
1000d9cc:	003fcd06 	br	1000d904 <__alt_data_end+0xf800d904>
1000d9d0:	3013883a 	mov	r9,r6
1000d9d4:	00800084 	movi	r2,2
1000d9d8:	e080501e 	bne	fp,r2,1000db1c <__muldf3+0x298>
1000d9dc:	4cc0004c 	andi	r19,r9,1
1000d9e0:	0101ffc4 	movi	r4,2047
1000d9e4:	0021883a 	mov	r16,zero
1000d9e8:	002f883a 	mov	r23,zero
1000d9ec:	2008953a 	slli	r4,r4,20
1000d9f0:	98c03fcc 	andi	r3,r19,255
1000d9f4:	04400434 	movhi	r17,16
1000d9f8:	8c7fffc4 	addi	r17,r17,-1
1000d9fc:	180697fa 	slli	r3,r3,31
1000da00:	8460703a 	and	r16,r16,r17
1000da04:	8120b03a 	or	r16,r16,r4
1000da08:	80c6b03a 	or	r3,r16,r3
1000da0c:	b805883a 	mov	r2,r23
1000da10:	dfc01117 	ldw	ra,68(sp)
1000da14:	df001017 	ldw	fp,64(sp)
1000da18:	ddc00f17 	ldw	r23,60(sp)
1000da1c:	dd800e17 	ldw	r22,56(sp)
1000da20:	dd400d17 	ldw	r21,52(sp)
1000da24:	dd000c17 	ldw	r20,48(sp)
1000da28:	dcc00b17 	ldw	r19,44(sp)
1000da2c:	dc800a17 	ldw	r18,40(sp)
1000da30:	dc400917 	ldw	r17,36(sp)
1000da34:	dc000817 	ldw	r16,32(sp)
1000da38:	dec01204 	addi	sp,sp,72
1000da3c:	f800283a 	ret
1000da40:	8104b03a 	or	r2,r16,r4
1000da44:	10004426 	beq	r2,zero,1000db58 <__muldf3+0x2d4>
1000da48:	80014b26 	beq	r16,zero,1000df78 <__muldf3+0x6f4>
1000da4c:	8009883a 	mov	r4,r16
1000da50:	d9800715 	stw	r6,28(sp)
1000da54:	d9c00215 	stw	r7,8(sp)
1000da58:	da400415 	stw	r9,16(sp)
1000da5c:	00037e80 	call	100037e8 <__clzsi2>
1000da60:	d9800717 	ldw	r6,28(sp)
1000da64:	d9c00217 	ldw	r7,8(sp)
1000da68:	da400417 	ldw	r9,16(sp)
1000da6c:	1007883a 	mov	r3,r2
1000da70:	01000a04 	movi	r4,40
1000da74:	1dfffe04 	addi	r23,r3,-8
1000da78:	20c9c83a 	sub	r4,r4,r3
1000da7c:	85e0983a 	sll	r16,r16,r23
1000da80:	9108d83a 	srl	r4,r18,r4
1000da84:	95ee983a 	sll	r23,r18,r23
1000da88:	2420b03a 	or	r16,r4,r16
1000da8c:	053f0344 	movi	r20,-1011
1000da90:	a0e9c83a 	sub	r20,r20,r3
1000da94:	000b883a 	mov	r5,zero
1000da98:	0039883a 	mov	fp,zero
1000da9c:	003f9906 	br	1000d904 <__alt_data_end+0xf800d904>
1000daa0:	8984b03a 	or	r2,r17,r6
1000daa4:	10002a1e 	bne	r2,zero,1000db50 <__muldf3+0x2cc>
1000daa8:	0023883a 	mov	r17,zero
1000daac:	0025883a 	mov	r18,zero
1000dab0:	01c00084 	movi	r7,2
1000dab4:	003fa506 	br	1000d94c <__alt_data_end+0xf800d94c>
1000dab8:	8984b03a 	or	r2,r17,r6
1000dabc:	10002026 	beq	r2,zero,1000db40 <__muldf3+0x2bc>
1000dac0:	88011c26 	beq	r17,zero,1000df34 <__muldf3+0x6b0>
1000dac4:	8809883a 	mov	r4,r17
1000dac8:	d9400215 	stw	r5,8(sp)
1000dacc:	d9800715 	stw	r6,28(sp)
1000dad0:	da400415 	stw	r9,16(sp)
1000dad4:	da800315 	stw	r10,12(sp)
1000dad8:	00037e80 	call	100037e8 <__clzsi2>
1000dadc:	d9400217 	ldw	r5,8(sp)
1000dae0:	d9800717 	ldw	r6,28(sp)
1000dae4:	da400417 	ldw	r9,16(sp)
1000dae8:	da800317 	ldw	r10,12(sp)
1000daec:	1007883a 	mov	r3,r2
1000daf0:	01000a04 	movi	r4,40
1000daf4:	1cbffe04 	addi	r18,r3,-8
1000daf8:	20c9c83a 	sub	r4,r4,r3
1000dafc:	8ca2983a 	sll	r17,r17,r18
1000db00:	3108d83a 	srl	r4,r6,r4
1000db04:	34a4983a 	sll	r18,r6,r18
1000db08:	2462b03a 	or	r17,r4,r17
1000db0c:	00bf0344 	movi	r2,-1011
1000db10:	10c7c83a 	sub	r3,r2,r3
1000db14:	000f883a 	mov	r7,zero
1000db18:	003f8c06 	br	1000d94c <__alt_data_end+0xf800d94c>
1000db1c:	008000c4 	movi	r2,3
1000db20:	e0816d26 	beq	fp,r2,1000e0d8 <__muldf3+0x854>
1000db24:	00800044 	movi	r2,1
1000db28:	e081321e 	bne	fp,r2,1000dff4 <__muldf3+0x770>
1000db2c:	48a6703a 	and	r19,r9,r2
1000db30:	0009883a 	mov	r4,zero
1000db34:	0021883a 	mov	r16,zero
1000db38:	002f883a 	mov	r23,zero
1000db3c:	003fab06 	br	1000d9ec <__alt_data_end+0xf800d9ec>
1000db40:	0023883a 	mov	r17,zero
1000db44:	0025883a 	mov	r18,zero
1000db48:	01c00044 	movi	r7,1
1000db4c:	003f7f06 	br	1000d94c <__alt_data_end+0xf800d94c>
1000db50:	01c000c4 	movi	r7,3
1000db54:	003f7d06 	br	1000d94c <__alt_data_end+0xf800d94c>
1000db58:	01400104 	movi	r5,4
1000db5c:	0021883a 	mov	r16,zero
1000db60:	002f883a 	mov	r23,zero
1000db64:	07000044 	movi	fp,1
1000db68:	003f6606 	br	1000d904 <__alt_data_end+0xf800d904>
1000db6c:	01400304 	movi	r5,12
1000db70:	070000c4 	movi	fp,3
1000db74:	003f6306 	br	1000d904 <__alt_data_end+0xf800d904>
1000db78:	04000434 	movhi	r16,16
1000db7c:	0027883a 	mov	r19,zero
1000db80:	843fffc4 	addi	r16,r16,-1
1000db84:	05ffffc4 	movi	r23,-1
1000db88:	0101ffc4 	movi	r4,2047
1000db8c:	003f9706 	br	1000d9ec <__alt_data_end+0xf800d9ec>
1000db90:	8821883a 	mov	r16,r17
1000db94:	902f883a 	mov	r23,r18
1000db98:	5013883a 	mov	r9,r10
1000db9c:	3839883a 	mov	fp,r7
1000dba0:	003f8c06 	br	1000d9d4 <__alt_data_end+0xf800d9d4>
1000dba4:	8821883a 	mov	r16,r17
1000dba8:	902f883a 	mov	r23,r18
1000dbac:	3013883a 	mov	r9,r6
1000dbb0:	3839883a 	mov	fp,r7
1000dbb4:	003f8706 	br	1000d9d4 <__alt_data_end+0xf800d9d4>
1000dbb8:	b82ad43a 	srli	r21,r23,16
1000dbbc:	9038d43a 	srli	fp,r18,16
1000dbc0:	bdffffcc 	andi	r23,r23,65535
1000dbc4:	94bfffcc 	andi	r18,r18,65535
1000dbc8:	9009883a 	mov	r4,r18
1000dbcc:	b80b883a 	mov	r5,r23
1000dbd0:	d8c00515 	stw	r3,20(sp)
1000dbd4:	d9800715 	stw	r6,28(sp)
1000dbd8:	da000615 	stw	r8,24(sp)
1000dbdc:	00024fc0 	call	100024fc <__mulsi3>
1000dbe0:	9009883a 	mov	r4,r18
1000dbe4:	a80b883a 	mov	r5,r21
1000dbe8:	1029883a 	mov	r20,r2
1000dbec:	00024fc0 	call	100024fc <__mulsi3>
1000dbf0:	e009883a 	mov	r4,fp
1000dbf4:	a80b883a 	mov	r5,r21
1000dbf8:	102d883a 	mov	r22,r2
1000dbfc:	00024fc0 	call	100024fc <__mulsi3>
1000dc00:	e009883a 	mov	r4,fp
1000dc04:	b80b883a 	mov	r5,r23
1000dc08:	1027883a 	mov	r19,r2
1000dc0c:	00024fc0 	call	100024fc <__mulsi3>
1000dc10:	a008d43a 	srli	r4,r20,16
1000dc14:	b085883a 	add	r2,r22,r2
1000dc18:	d8c00517 	ldw	r3,20(sp)
1000dc1c:	110f883a 	add	r7,r2,r4
1000dc20:	d9800717 	ldw	r6,28(sp)
1000dc24:	da000617 	ldw	r8,24(sp)
1000dc28:	3d80022e 	bgeu	r7,r22,1000dc34 <__muldf3+0x3b0>
1000dc2c:	00800074 	movhi	r2,1
1000dc30:	98a7883a 	add	r19,r19,r2
1000dc34:	3804943a 	slli	r2,r7,16
1000dc38:	380ed43a 	srli	r7,r7,16
1000dc3c:	882cd43a 	srli	r22,r17,16
1000dc40:	a53fffcc 	andi	r20,r20,65535
1000dc44:	8c7fffcc 	andi	r17,r17,65535
1000dc48:	1529883a 	add	r20,r2,r20
1000dc4c:	8809883a 	mov	r4,r17
1000dc50:	b80b883a 	mov	r5,r23
1000dc54:	d8c00515 	stw	r3,20(sp)
1000dc58:	d9800715 	stw	r6,28(sp)
1000dc5c:	da000615 	stw	r8,24(sp)
1000dc60:	d9c00015 	stw	r7,0(sp)
1000dc64:	dd000115 	stw	r20,4(sp)
1000dc68:	00024fc0 	call	100024fc <__mulsi3>
1000dc6c:	a80b883a 	mov	r5,r21
1000dc70:	8809883a 	mov	r4,r17
1000dc74:	d8800415 	stw	r2,16(sp)
1000dc78:	00024fc0 	call	100024fc <__mulsi3>
1000dc7c:	a80b883a 	mov	r5,r21
1000dc80:	b009883a 	mov	r4,r22
1000dc84:	1029883a 	mov	r20,r2
1000dc88:	00024fc0 	call	100024fc <__mulsi3>
1000dc8c:	b009883a 	mov	r4,r22
1000dc90:	b80b883a 	mov	r5,r23
1000dc94:	102b883a 	mov	r21,r2
1000dc98:	00024fc0 	call	100024fc <__mulsi3>
1000dc9c:	da400417 	ldw	r9,16(sp)
1000dca0:	a085883a 	add	r2,r20,r2
1000dca4:	d8c00517 	ldw	r3,20(sp)
1000dca8:	4808d43a 	srli	r4,r9,16
1000dcac:	d9800717 	ldw	r6,28(sp)
1000dcb0:	da000617 	ldw	r8,24(sp)
1000dcb4:	1109883a 	add	r4,r2,r4
1000dcb8:	2500022e 	bgeu	r4,r20,1000dcc4 <__muldf3+0x440>
1000dcbc:	00800074 	movhi	r2,1
1000dcc0:	a8ab883a 	add	r21,r21,r2
1000dcc4:	200e943a 	slli	r7,r4,16
1000dcc8:	2004d43a 	srli	r2,r4,16
1000dccc:	802ed43a 	srli	r23,r16,16
1000dcd0:	843fffcc 	andi	r16,r16,65535
1000dcd4:	4d3fffcc 	andi	r20,r9,65535
1000dcd8:	9009883a 	mov	r4,r18
1000dcdc:	800b883a 	mov	r5,r16
1000dce0:	3d29883a 	add	r20,r7,r20
1000dce4:	d8c00515 	stw	r3,20(sp)
1000dce8:	d9800715 	stw	r6,28(sp)
1000dcec:	da000615 	stw	r8,24(sp)
1000dcf0:	a8ab883a 	add	r21,r21,r2
1000dcf4:	00024fc0 	call	100024fc <__mulsi3>
1000dcf8:	9009883a 	mov	r4,r18
1000dcfc:	b80b883a 	mov	r5,r23
1000dd00:	d8800315 	stw	r2,12(sp)
1000dd04:	00024fc0 	call	100024fc <__mulsi3>
1000dd08:	e009883a 	mov	r4,fp
1000dd0c:	b80b883a 	mov	r5,r23
1000dd10:	1025883a 	mov	r18,r2
1000dd14:	00024fc0 	call	100024fc <__mulsi3>
1000dd18:	e009883a 	mov	r4,fp
1000dd1c:	800b883a 	mov	r5,r16
1000dd20:	d8800215 	stw	r2,8(sp)
1000dd24:	00024fc0 	call	100024fc <__mulsi3>
1000dd28:	da800317 	ldw	r10,12(sp)
1000dd2c:	d9400017 	ldw	r5,0(sp)
1000dd30:	9085883a 	add	r2,r18,r2
1000dd34:	5008d43a 	srli	r4,r10,16
1000dd38:	a153883a 	add	r9,r20,r5
1000dd3c:	d8c00517 	ldw	r3,20(sp)
1000dd40:	1109883a 	add	r4,r2,r4
1000dd44:	d9800717 	ldw	r6,28(sp)
1000dd48:	da000617 	ldw	r8,24(sp)
1000dd4c:	dac00217 	ldw	r11,8(sp)
1000dd50:	2480022e 	bgeu	r4,r18,1000dd5c <__muldf3+0x4d8>
1000dd54:	00800074 	movhi	r2,1
1000dd58:	5897883a 	add	r11,r11,r2
1000dd5c:	200e943a 	slli	r7,r4,16
1000dd60:	2038d43a 	srli	fp,r4,16
1000dd64:	52bfffcc 	andi	r10,r10,65535
1000dd68:	3a8f883a 	add	r7,r7,r10
1000dd6c:	8809883a 	mov	r4,r17
1000dd70:	800b883a 	mov	r5,r16
1000dd74:	d8c00515 	stw	r3,20(sp)
1000dd78:	d9800715 	stw	r6,28(sp)
1000dd7c:	d9c00215 	stw	r7,8(sp)
1000dd80:	da000615 	stw	r8,24(sp)
1000dd84:	da400415 	stw	r9,16(sp)
1000dd88:	5f39883a 	add	fp,r11,fp
1000dd8c:	00024fc0 	call	100024fc <__mulsi3>
1000dd90:	8809883a 	mov	r4,r17
1000dd94:	b80b883a 	mov	r5,r23
1000dd98:	1025883a 	mov	r18,r2
1000dd9c:	00024fc0 	call	100024fc <__mulsi3>
1000dda0:	b009883a 	mov	r4,r22
1000dda4:	b80b883a 	mov	r5,r23
1000dda8:	d8800315 	stw	r2,12(sp)
1000ddac:	00024fc0 	call	100024fc <__mulsi3>
1000ddb0:	b009883a 	mov	r4,r22
1000ddb4:	800b883a 	mov	r5,r16
1000ddb8:	1023883a 	mov	r17,r2
1000ddbc:	00024fc0 	call	100024fc <__mulsi3>
1000ddc0:	da800317 	ldw	r10,12(sp)
1000ddc4:	9008d43a 	srli	r4,r18,16
1000ddc8:	d8c00517 	ldw	r3,20(sp)
1000ddcc:	5085883a 	add	r2,r10,r2
1000ddd0:	1109883a 	add	r4,r2,r4
1000ddd4:	d9800717 	ldw	r6,28(sp)
1000ddd8:	d9c00217 	ldw	r7,8(sp)
1000dddc:	da000617 	ldw	r8,24(sp)
1000dde0:	da400417 	ldw	r9,16(sp)
1000dde4:	2280022e 	bgeu	r4,r10,1000ddf0 <__muldf3+0x56c>
1000dde8:	00800074 	movhi	r2,1
1000ddec:	88a3883a 	add	r17,r17,r2
1000ddf0:	2004943a 	slli	r2,r4,16
1000ddf4:	94bfffcc 	andi	r18,r18,65535
1000ddf8:	4ce7883a 	add	r19,r9,r19
1000ddfc:	14a5883a 	add	r18,r2,r18
1000de00:	9d29803a 	cmpltu	r20,r19,r20
1000de04:	9565883a 	add	r18,r18,r21
1000de08:	9505883a 	add	r2,r18,r20
1000de0c:	99e7883a 	add	r19,r19,r7
1000de10:	99cf803a 	cmpltu	r7,r19,r7
1000de14:	e08b883a 	add	r5,fp,r2
1000de18:	2008d43a 	srli	r4,r4,16
1000de1c:	29ef883a 	add	r23,r5,r7
1000de20:	1529803a 	cmpltu	r20,r2,r20
1000de24:	956b803a 	cmpltu	r21,r18,r21
1000de28:	b9cf803a 	cmpltu	r7,r23,r7
1000de2c:	a564b03a 	or	r18,r20,r21
1000de30:	2f39803a 	cmpltu	fp,r5,fp
1000de34:	9125883a 	add	r18,r18,r4
1000de38:	3f38b03a 	or	fp,r7,fp
1000de3c:	9725883a 	add	r18,r18,fp
1000de40:	9804927a 	slli	r2,r19,9
1000de44:	9463883a 	add	r17,r18,r17
1000de48:	d9000117 	ldw	r4,4(sp)
1000de4c:	b820d5fa 	srli	r16,r23,23
1000de50:	8822927a 	slli	r17,r17,9
1000de54:	9826d5fa 	srli	r19,r19,23
1000de58:	1104b03a 	or	r2,r2,r4
1000de5c:	b82e927a 	slli	r23,r23,9
1000de60:	1004c03a 	cmpne	r2,r2,zero
1000de64:	8c20b03a 	or	r16,r17,r16
1000de68:	14e6b03a 	or	r19,r2,r19
1000de6c:	8080402c 	andhi	r2,r16,256
1000de70:	9deeb03a 	or	r23,r19,r23
1000de74:	10000726 	beq	r2,zero,1000de94 <__muldf3+0x610>
1000de78:	b804d07a 	srli	r2,r23,1
1000de7c:	800697fa 	slli	r3,r16,31
1000de80:	bdc0004c 	andi	r23,r23,1
1000de84:	8020d07a 	srli	r16,r16,1
1000de88:	b8aeb03a 	or	r23,r23,r2
1000de8c:	b8eeb03a 	or	r23,r23,r3
1000de90:	4007883a 	mov	r3,r8
1000de94:	1900ffc4 	addi	r4,r3,1023
1000de98:	01004d0e 	bge	zero,r4,1000dfd0 <__muldf3+0x74c>
1000de9c:	b88001cc 	andi	r2,r23,7
1000dea0:	10000726 	beq	r2,zero,1000dec0 <__muldf3+0x63c>
1000dea4:	b94003cc 	andi	r5,r23,15
1000dea8:	00800104 	movi	r2,4
1000deac:	28800426 	beq	r5,r2,1000dec0 <__muldf3+0x63c>
1000deb0:	b885883a 	add	r2,r23,r2
1000deb4:	15ef803a 	cmpltu	r23,r2,r23
1000deb8:	85e1883a 	add	r16,r16,r23
1000debc:	102f883a 	mov	r23,r2
1000dec0:	8080402c 	andhi	r2,r16,256
1000dec4:	10000426 	beq	r2,zero,1000ded8 <__muldf3+0x654>
1000dec8:	00bfc034 	movhi	r2,65280
1000decc:	10bfffc4 	addi	r2,r2,-1
1000ded0:	19010004 	addi	r4,r3,1024
1000ded4:	80a0703a 	and	r16,r16,r2
1000ded8:	0081ff84 	movi	r2,2046
1000dedc:	1100340e 	bge	r2,r4,1000dfb0 <__muldf3+0x72c>
1000dee0:	34c0004c 	andi	r19,r6,1
1000dee4:	0101ffc4 	movi	r4,2047
1000dee8:	0021883a 	mov	r16,zero
1000deec:	002f883a 	mov	r23,zero
1000def0:	003ebe06 	br	1000d9ec <__alt_data_end+0xf800d9ec>
1000def4:	8080022c 	andhi	r2,r16,8
1000def8:	10000926 	beq	r2,zero,1000df20 <__muldf3+0x69c>
1000defc:	8880022c 	andhi	r2,r17,8
1000df00:	1000071e 	bne	r2,zero,1000df20 <__muldf3+0x69c>
1000df04:	00800434 	movhi	r2,16
1000df08:	8c000234 	orhi	r16,r17,8
1000df0c:	10bfffc4 	addi	r2,r2,-1
1000df10:	b027883a 	mov	r19,r22
1000df14:	80a0703a 	and	r16,r16,r2
1000df18:	902f883a 	mov	r23,r18
1000df1c:	003f1a06 	br	1000db88 <__alt_data_end+0xf800db88>
1000df20:	00800434 	movhi	r2,16
1000df24:	84000234 	orhi	r16,r16,8
1000df28:	10bfffc4 	addi	r2,r2,-1
1000df2c:	80a0703a 	and	r16,r16,r2
1000df30:	003f1506 	br	1000db88 <__alt_data_end+0xf800db88>
1000df34:	3009883a 	mov	r4,r6
1000df38:	d9400215 	stw	r5,8(sp)
1000df3c:	d9800715 	stw	r6,28(sp)
1000df40:	da400415 	stw	r9,16(sp)
1000df44:	da800315 	stw	r10,12(sp)
1000df48:	00037e80 	call	100037e8 <__clzsi2>
1000df4c:	10c00804 	addi	r3,r2,32
1000df50:	010009c4 	movi	r4,39
1000df54:	d9400217 	ldw	r5,8(sp)
1000df58:	d9800717 	ldw	r6,28(sp)
1000df5c:	da400417 	ldw	r9,16(sp)
1000df60:	da800317 	ldw	r10,12(sp)
1000df64:	20fee20e 	bge	r4,r3,1000daf0 <__alt_data_end+0xf800daf0>
1000df68:	147ffe04 	addi	r17,r2,-8
1000df6c:	9462983a 	sll	r17,r18,r17
1000df70:	0025883a 	mov	r18,zero
1000df74:	003ee506 	br	1000db0c <__alt_data_end+0xf800db0c>
1000df78:	d9800715 	stw	r6,28(sp)
1000df7c:	d9c00215 	stw	r7,8(sp)
1000df80:	da400415 	stw	r9,16(sp)
1000df84:	00037e80 	call	100037e8 <__clzsi2>
1000df88:	10c00804 	addi	r3,r2,32
1000df8c:	010009c4 	movi	r4,39
1000df90:	d9800717 	ldw	r6,28(sp)
1000df94:	d9c00217 	ldw	r7,8(sp)
1000df98:	da400417 	ldw	r9,16(sp)
1000df9c:	20feb40e 	bge	r4,r3,1000da70 <__alt_data_end+0xf800da70>
1000dfa0:	143ffe04 	addi	r16,r2,-8
1000dfa4:	9420983a 	sll	r16,r18,r16
1000dfa8:	002f883a 	mov	r23,zero
1000dfac:	003eb706 	br	1000da8c <__alt_data_end+0xf800da8c>
1000dfb0:	8004977a 	slli	r2,r16,29
1000dfb4:	b82ed0fa 	srli	r23,r23,3
1000dfb8:	8020927a 	slli	r16,r16,9
1000dfbc:	2101ffcc 	andi	r4,r4,2047
1000dfc0:	15eeb03a 	or	r23,r2,r23
1000dfc4:	8020d33a 	srli	r16,r16,12
1000dfc8:	34c0004c 	andi	r19,r6,1
1000dfcc:	003e8706 	br	1000d9ec <__alt_data_end+0xf800d9ec>
1000dfd0:	00bf0084 	movi	r2,-1022
1000dfd4:	10c5c83a 	sub	r2,r2,r3
1000dfd8:	01000e04 	movi	r4,56
1000dfdc:	2080080e 	bge	r4,r2,1000e000 <__muldf3+0x77c>
1000dfe0:	34c0004c 	andi	r19,r6,1
1000dfe4:	0009883a 	mov	r4,zero
1000dfe8:	0021883a 	mov	r16,zero
1000dfec:	002f883a 	mov	r23,zero
1000dff0:	003e7e06 	br	1000d9ec <__alt_data_end+0xf800d9ec>
1000dff4:	4007883a 	mov	r3,r8
1000dff8:	480d883a 	mov	r6,r9
1000dffc:	003fa506 	br	1000de94 <__alt_data_end+0xf800de94>
1000e000:	010007c4 	movi	r4,31
1000e004:	20801816 	blt	r4,r2,1000e068 <__muldf3+0x7e4>
1000e008:	18c10784 	addi	r3,r3,1054
1000e00c:	80c8983a 	sll	r4,r16,r3
1000e010:	b88ad83a 	srl	r5,r23,r2
1000e014:	b8c6983a 	sll	r3,r23,r3
1000e018:	80a0d83a 	srl	r16,r16,r2
1000e01c:	2908b03a 	or	r4,r5,r4
1000e020:	1804c03a 	cmpne	r2,r3,zero
1000e024:	2088b03a 	or	r4,r4,r2
1000e028:	208001cc 	andi	r2,r4,7
1000e02c:	10000726 	beq	r2,zero,1000e04c <__muldf3+0x7c8>
1000e030:	20c003cc 	andi	r3,r4,15
1000e034:	00800104 	movi	r2,4
1000e038:	18800426 	beq	r3,r2,1000e04c <__muldf3+0x7c8>
1000e03c:	20c00104 	addi	r3,r4,4
1000e040:	1905803a 	cmpltu	r2,r3,r4
1000e044:	80a1883a 	add	r16,r16,r2
1000e048:	1809883a 	mov	r4,r3
1000e04c:	8080202c 	andhi	r2,r16,128
1000e050:	10001b26 	beq	r2,zero,1000e0c0 <__muldf3+0x83c>
1000e054:	34c0004c 	andi	r19,r6,1
1000e058:	01000044 	movi	r4,1
1000e05c:	0021883a 	mov	r16,zero
1000e060:	002f883a 	mov	r23,zero
1000e064:	003e6106 	br	1000d9ec <__alt_data_end+0xf800d9ec>
1000e068:	013ef884 	movi	r4,-1054
1000e06c:	20c9c83a 	sub	r4,r4,r3
1000e070:	01400804 	movi	r5,32
1000e074:	8108d83a 	srl	r4,r16,r4
1000e078:	11401526 	beq	r2,r5,1000e0d0 <__muldf3+0x84c>
1000e07c:	18c10f84 	addi	r3,r3,1086
1000e080:	80e0983a 	sll	r16,r16,r3
1000e084:	85eeb03a 	or	r23,r16,r23
1000e088:	b804c03a 	cmpne	r2,r23,zero
1000e08c:	1108b03a 	or	r4,r2,r4
1000e090:	20c001cc 	andi	r3,r4,7
1000e094:	1800061e 	bne	r3,zero,1000e0b0 <__muldf3+0x82c>
1000e098:	0021883a 	mov	r16,zero
1000e09c:	202ed0fa 	srli	r23,r4,3
1000e0a0:	34c0004c 	andi	r19,r6,1
1000e0a4:	0009883a 	mov	r4,zero
1000e0a8:	b8eeb03a 	or	r23,r23,r3
1000e0ac:	003e4f06 	br	1000d9ec <__alt_data_end+0xf800d9ec>
1000e0b0:	20c003cc 	andi	r3,r4,15
1000e0b4:	00800104 	movi	r2,4
1000e0b8:	0021883a 	mov	r16,zero
1000e0bc:	18bfdf1e 	bne	r3,r2,1000e03c <__alt_data_end+0xf800e03c>
1000e0c0:	8004927a 	slli	r2,r16,9
1000e0c4:	8006977a 	slli	r3,r16,29
1000e0c8:	1020d33a 	srli	r16,r2,12
1000e0cc:	003ff306 	br	1000e09c <__alt_data_end+0xf800e09c>
1000e0d0:	0021883a 	mov	r16,zero
1000e0d4:	003feb06 	br	1000e084 <__alt_data_end+0xf800e084>
1000e0d8:	00800434 	movhi	r2,16
1000e0dc:	84000234 	orhi	r16,r16,8
1000e0e0:	10bfffc4 	addi	r2,r2,-1
1000e0e4:	4cc0004c 	andi	r19,r9,1
1000e0e8:	80a0703a 	and	r16,r16,r2
1000e0ec:	003ea606 	br	1000db88 <__alt_data_end+0xf800db88>

1000e0f0 <__floatunsidf>:
1000e0f0:	defffe04 	addi	sp,sp,-8
1000e0f4:	dc000015 	stw	r16,0(sp)
1000e0f8:	dfc00115 	stw	ra,4(sp)
1000e0fc:	2021883a 	mov	r16,r4
1000e100:	20001026 	beq	r4,zero,1000e144 <__floatunsidf+0x54>
1000e104:	00037e80 	call	100037e8 <__clzsi2>
1000e108:	01410784 	movi	r5,1054
1000e10c:	100d883a 	mov	r6,r2
1000e110:	288bc83a 	sub	r5,r5,r2
1000e114:	00800284 	movi	r2,10
1000e118:	11801616 	blt	r2,r6,1000e174 <__floatunsidf+0x84>
1000e11c:	008002c4 	movi	r2,11
1000e120:	1185c83a 	sub	r2,r2,r6
1000e124:	8084d83a 	srl	r2,r16,r2
1000e128:	00c00434 	movhi	r3,16
1000e12c:	31c00544 	addi	r7,r6,21
1000e130:	18ffffc4 	addi	r3,r3,-1
1000e134:	81e0983a 	sll	r16,r16,r7
1000e138:	10cc703a 	and	r6,r2,r3
1000e13c:	2941ffcc 	andi	r5,r5,2047
1000e140:	00000206 	br	1000e14c <__floatunsidf+0x5c>
1000e144:	000b883a 	mov	r5,zero
1000e148:	000d883a 	mov	r6,zero
1000e14c:	280a953a 	slli	r5,r5,20
1000e150:	00c00434 	movhi	r3,16
1000e154:	18ffffc4 	addi	r3,r3,-1
1000e158:	30c6703a 	and	r3,r6,r3
1000e15c:	8005883a 	mov	r2,r16
1000e160:	1946b03a 	or	r3,r3,r5
1000e164:	dfc00117 	ldw	ra,4(sp)
1000e168:	dc000017 	ldw	r16,0(sp)
1000e16c:	dec00204 	addi	sp,sp,8
1000e170:	f800283a 	ret
1000e174:	31bffd44 	addi	r6,r6,-11
1000e178:	818c983a 	sll	r6,r16,r6
1000e17c:	00800434 	movhi	r2,16
1000e180:	10bfffc4 	addi	r2,r2,-1
1000e184:	2941ffcc 	andi	r5,r5,2047
1000e188:	0021883a 	mov	r16,zero
1000e18c:	308c703a 	and	r6,r6,r2
1000e190:	003fee06 	br	1000e14c <__alt_data_end+0xf800e14c>

1000e194 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e194:	defffe04 	addi	sp,sp,-8
1000e198:	dfc00115 	stw	ra,4(sp)
1000e19c:	df000015 	stw	fp,0(sp)
1000e1a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e1a4:	00840074 	movhi	r2,4097
1000e1a8:	1089b604 	addi	r2,r2,9944
1000e1ac:	10800017 	ldw	r2,0(r2)
1000e1b0:	10000526 	beq	r2,zero,1000e1c8 <alt_get_errno+0x34>
1000e1b4:	00840074 	movhi	r2,4097
1000e1b8:	1089b604 	addi	r2,r2,9944
1000e1bc:	10800017 	ldw	r2,0(r2)
1000e1c0:	103ee83a 	callr	r2
1000e1c4:	00000206 	br	1000e1d0 <alt_get_errno+0x3c>
1000e1c8:	00840074 	movhi	r2,4097
1000e1cc:	10908304 	addi	r2,r2,16908
}
1000e1d0:	e037883a 	mov	sp,fp
1000e1d4:	dfc00117 	ldw	ra,4(sp)
1000e1d8:	df000017 	ldw	fp,0(sp)
1000e1dc:	dec00204 	addi	sp,sp,8
1000e1e0:	f800283a 	ret

1000e1e4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000e1e4:	defffb04 	addi	sp,sp,-20
1000e1e8:	dfc00415 	stw	ra,16(sp)
1000e1ec:	df000315 	stw	fp,12(sp)
1000e1f0:	df000304 	addi	fp,sp,12
1000e1f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000e1f8:	e0bfff17 	ldw	r2,-4(fp)
1000e1fc:	10000816 	blt	r2,zero,1000e220 <close+0x3c>
1000e200:	e13fff17 	ldw	r4,-4(fp)
1000e204:	01400304 	movi	r5,12
1000e208:	00024fc0 	call	100024fc <__mulsi3>
1000e20c:	1007883a 	mov	r3,r2
1000e210:	00840074 	movhi	r2,4097
1000e214:	10853304 	addi	r2,r2,5324
1000e218:	1885883a 	add	r2,r3,r2
1000e21c:	00000106 	br	1000e224 <close+0x40>
1000e220:	0005883a 	mov	r2,zero
1000e224:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000e228:	e0bffd17 	ldw	r2,-12(fp)
1000e22c:	10001926 	beq	r2,zero,1000e294 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000e230:	e0bffd17 	ldw	r2,-12(fp)
1000e234:	10800017 	ldw	r2,0(r2)
1000e238:	10800417 	ldw	r2,16(r2)
1000e23c:	10000626 	beq	r2,zero,1000e258 <close+0x74>
1000e240:	e0bffd17 	ldw	r2,-12(fp)
1000e244:	10800017 	ldw	r2,0(r2)
1000e248:	10800417 	ldw	r2,16(r2)
1000e24c:	e13ffd17 	ldw	r4,-12(fp)
1000e250:	103ee83a 	callr	r2
1000e254:	00000106 	br	1000e25c <close+0x78>
1000e258:	0005883a 	mov	r2,zero
1000e25c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000e260:	e13fff17 	ldw	r4,-4(fp)
1000e264:	000e9080 	call	1000e908 <alt_release_fd>
    if (rval < 0)
1000e268:	e0bffe17 	ldw	r2,-8(fp)
1000e26c:	1000070e 	bge	r2,zero,1000e28c <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000e270:	000e1940 	call	1000e194 <alt_get_errno>
1000e274:	1007883a 	mov	r3,r2
1000e278:	e0bffe17 	ldw	r2,-8(fp)
1000e27c:	0085c83a 	sub	r2,zero,r2
1000e280:	18800015 	stw	r2,0(r3)
      return -1;
1000e284:	00bfffc4 	movi	r2,-1
1000e288:	00000706 	br	1000e2a8 <close+0xc4>
    }
    return 0;
1000e28c:	0005883a 	mov	r2,zero
1000e290:	00000506 	br	1000e2a8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000e294:	000e1940 	call	1000e194 <alt_get_errno>
1000e298:	1007883a 	mov	r3,r2
1000e29c:	00801444 	movi	r2,81
1000e2a0:	18800015 	stw	r2,0(r3)
    return -1;
1000e2a4:	00bfffc4 	movi	r2,-1
  }
}
1000e2a8:	e037883a 	mov	sp,fp
1000e2ac:	dfc00117 	ldw	ra,4(sp)
1000e2b0:	df000017 	ldw	fp,0(sp)
1000e2b4:	dec00204 	addi	sp,sp,8
1000e2b8:	f800283a 	ret

1000e2bc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000e2bc:	defffc04 	addi	sp,sp,-16
1000e2c0:	df000315 	stw	fp,12(sp)
1000e2c4:	df000304 	addi	fp,sp,12
1000e2c8:	e13ffd15 	stw	r4,-12(fp)
1000e2cc:	e17ffe15 	stw	r5,-8(fp)
1000e2d0:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000e2d4:	e0bfff17 	ldw	r2,-4(fp)
}
1000e2d8:	e037883a 	mov	sp,fp
1000e2dc:	df000017 	ldw	fp,0(sp)
1000e2e0:	dec00104 	addi	sp,sp,4
1000e2e4:	f800283a 	ret

1000e2e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e2e8:	defffe04 	addi	sp,sp,-8
1000e2ec:	dfc00115 	stw	ra,4(sp)
1000e2f0:	df000015 	stw	fp,0(sp)
1000e2f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e2f8:	00840074 	movhi	r2,4097
1000e2fc:	1089b604 	addi	r2,r2,9944
1000e300:	10800017 	ldw	r2,0(r2)
1000e304:	10000526 	beq	r2,zero,1000e31c <alt_get_errno+0x34>
1000e308:	00840074 	movhi	r2,4097
1000e30c:	1089b604 	addi	r2,r2,9944
1000e310:	10800017 	ldw	r2,0(r2)
1000e314:	103ee83a 	callr	r2
1000e318:	00000206 	br	1000e324 <alt_get_errno+0x3c>
1000e31c:	00840074 	movhi	r2,4097
1000e320:	10908304 	addi	r2,r2,16908
}
1000e324:	e037883a 	mov	sp,fp
1000e328:	dfc00117 	ldw	ra,4(sp)
1000e32c:	df000017 	ldw	fp,0(sp)
1000e330:	dec00204 	addi	sp,sp,8
1000e334:	f800283a 	ret

1000e338 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000e338:	defffb04 	addi	sp,sp,-20
1000e33c:	dfc00415 	stw	ra,16(sp)
1000e340:	df000315 	stw	fp,12(sp)
1000e344:	df000304 	addi	fp,sp,12
1000e348:	e13ffe15 	stw	r4,-8(fp)
1000e34c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000e350:	e0bffe17 	ldw	r2,-8(fp)
1000e354:	10000816 	blt	r2,zero,1000e378 <fstat+0x40>
1000e358:	e13ffe17 	ldw	r4,-8(fp)
1000e35c:	01400304 	movi	r5,12
1000e360:	00024fc0 	call	100024fc <__mulsi3>
1000e364:	1007883a 	mov	r3,r2
1000e368:	00840074 	movhi	r2,4097
1000e36c:	10853304 	addi	r2,r2,5324
1000e370:	1885883a 	add	r2,r3,r2
1000e374:	00000106 	br	1000e37c <fstat+0x44>
1000e378:	0005883a 	mov	r2,zero
1000e37c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000e380:	e0bffd17 	ldw	r2,-12(fp)
1000e384:	10001026 	beq	r2,zero,1000e3c8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000e388:	e0bffd17 	ldw	r2,-12(fp)
1000e38c:	10800017 	ldw	r2,0(r2)
1000e390:	10800817 	ldw	r2,32(r2)
1000e394:	10000726 	beq	r2,zero,1000e3b4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000e398:	e0bffd17 	ldw	r2,-12(fp)
1000e39c:	10800017 	ldw	r2,0(r2)
1000e3a0:	10800817 	ldw	r2,32(r2)
1000e3a4:	e13ffd17 	ldw	r4,-12(fp)
1000e3a8:	e17fff17 	ldw	r5,-4(fp)
1000e3ac:	103ee83a 	callr	r2
1000e3b0:	00000a06 	br	1000e3dc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000e3b4:	e0bfff17 	ldw	r2,-4(fp)
1000e3b8:	00c80004 	movi	r3,8192
1000e3bc:	10c00115 	stw	r3,4(r2)
      return 0;
1000e3c0:	0005883a 	mov	r2,zero
1000e3c4:	00000506 	br	1000e3dc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000e3c8:	000e2e80 	call	1000e2e8 <alt_get_errno>
1000e3cc:	1007883a 	mov	r3,r2
1000e3d0:	00801444 	movi	r2,81
1000e3d4:	18800015 	stw	r2,0(r3)
    return -1;
1000e3d8:	00bfffc4 	movi	r2,-1
  }
}
1000e3dc:	e037883a 	mov	sp,fp
1000e3e0:	dfc00117 	ldw	ra,4(sp)
1000e3e4:	df000017 	ldw	fp,0(sp)
1000e3e8:	dec00204 	addi	sp,sp,8
1000e3ec:	f800283a 	ret

1000e3f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e3f0:	defffe04 	addi	sp,sp,-8
1000e3f4:	dfc00115 	stw	ra,4(sp)
1000e3f8:	df000015 	stw	fp,0(sp)
1000e3fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e400:	00840074 	movhi	r2,4097
1000e404:	1089b604 	addi	r2,r2,9944
1000e408:	10800017 	ldw	r2,0(r2)
1000e40c:	10000526 	beq	r2,zero,1000e424 <alt_get_errno+0x34>
1000e410:	00840074 	movhi	r2,4097
1000e414:	1089b604 	addi	r2,r2,9944
1000e418:	10800017 	ldw	r2,0(r2)
1000e41c:	103ee83a 	callr	r2
1000e420:	00000206 	br	1000e42c <alt_get_errno+0x3c>
1000e424:	00840074 	movhi	r2,4097
1000e428:	10908304 	addi	r2,r2,16908
}
1000e42c:	e037883a 	mov	sp,fp
1000e430:	dfc00117 	ldw	ra,4(sp)
1000e434:	df000017 	ldw	fp,0(sp)
1000e438:	dec00204 	addi	sp,sp,8
1000e43c:	f800283a 	ret

1000e440 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000e440:	deffed04 	addi	sp,sp,-76
1000e444:	dfc01215 	stw	ra,72(sp)
1000e448:	df001115 	stw	fp,68(sp)
1000e44c:	df001104 	addi	fp,sp,68
1000e450:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000e454:	e0bfff17 	ldw	r2,-4(fp)
1000e458:	10000816 	blt	r2,zero,1000e47c <isatty+0x3c>
1000e45c:	e13fff17 	ldw	r4,-4(fp)
1000e460:	01400304 	movi	r5,12
1000e464:	00024fc0 	call	100024fc <__mulsi3>
1000e468:	1007883a 	mov	r3,r2
1000e46c:	00840074 	movhi	r2,4097
1000e470:	10853304 	addi	r2,r2,5324
1000e474:	1885883a 	add	r2,r3,r2
1000e478:	00000106 	br	1000e480 <isatty+0x40>
1000e47c:	0005883a 	mov	r2,zero
1000e480:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000e484:	e0bfef17 	ldw	r2,-68(fp)
1000e488:	10000e26 	beq	r2,zero,1000e4c4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000e48c:	e0bfef17 	ldw	r2,-68(fp)
1000e490:	10800017 	ldw	r2,0(r2)
1000e494:	10800817 	ldw	r2,32(r2)
1000e498:	1000021e 	bne	r2,zero,1000e4a4 <isatty+0x64>
    {
      return 1;
1000e49c:	00800044 	movi	r2,1
1000e4a0:	00000d06 	br	1000e4d8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000e4a4:	e0bff004 	addi	r2,fp,-64
1000e4a8:	e13fff17 	ldw	r4,-4(fp)
1000e4ac:	100b883a 	mov	r5,r2
1000e4b0:	000e3380 	call	1000e338 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000e4b4:	e0bff117 	ldw	r2,-60(fp)
1000e4b8:	10880020 	cmpeqi	r2,r2,8192
1000e4bc:	10803fcc 	andi	r2,r2,255
1000e4c0:	00000506 	br	1000e4d8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000e4c4:	000e3f00 	call	1000e3f0 <alt_get_errno>
1000e4c8:	1007883a 	mov	r3,r2
1000e4cc:	00801444 	movi	r2,81
1000e4d0:	18800015 	stw	r2,0(r3)
    return 0;
1000e4d4:	0005883a 	mov	r2,zero
  }
}
1000e4d8:	e037883a 	mov	sp,fp
1000e4dc:	dfc00117 	ldw	ra,4(sp)
1000e4e0:	df000017 	ldw	fp,0(sp)
1000e4e4:	dec00204 	addi	sp,sp,8
1000e4e8:	f800283a 	ret

1000e4ec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000e4ec:	defffc04 	addi	sp,sp,-16
1000e4f0:	df000315 	stw	fp,12(sp)
1000e4f4:	df000304 	addi	fp,sp,12
1000e4f8:	e13ffd15 	stw	r4,-12(fp)
1000e4fc:	e17ffe15 	stw	r5,-8(fp)
1000e500:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000e504:	e0fffe17 	ldw	r3,-8(fp)
1000e508:	e0bffd17 	ldw	r2,-12(fp)
1000e50c:	18800c26 	beq	r3,r2,1000e540 <alt_load_section+0x54>
  {
    while( to != end )
1000e510:	00000806 	br	1000e534 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000e514:	e0bffe17 	ldw	r2,-8(fp)
1000e518:	10c00104 	addi	r3,r2,4
1000e51c:	e0fffe15 	stw	r3,-8(fp)
1000e520:	e0fffd17 	ldw	r3,-12(fp)
1000e524:	19000104 	addi	r4,r3,4
1000e528:	e13ffd15 	stw	r4,-12(fp)
1000e52c:	18c00017 	ldw	r3,0(r3)
1000e530:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000e534:	e0fffe17 	ldw	r3,-8(fp)
1000e538:	e0bfff17 	ldw	r2,-4(fp)
1000e53c:	18bff51e 	bne	r3,r2,1000e514 <__alt_data_end+0xf800e514>
    {
      *to++ = *from++;
    }
  }
}
1000e540:	e037883a 	mov	sp,fp
1000e544:	df000017 	ldw	fp,0(sp)
1000e548:	dec00104 	addi	sp,sp,4
1000e54c:	f800283a 	ret

1000e550 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000e550:	defffe04 	addi	sp,sp,-8
1000e554:	dfc00115 	stw	ra,4(sp)
1000e558:	df000015 	stw	fp,0(sp)
1000e55c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000e560:	01040074 	movhi	r4,4097
1000e564:	2109bb04 	addi	r4,r4,9964
1000e568:	01440074 	movhi	r5,4097
1000e56c:	29430004 	addi	r5,r5,3072
1000e570:	01840074 	movhi	r6,4097
1000e574:	3189bb04 	addi	r6,r6,9964
1000e578:	000e4ec0 	call	1000e4ec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000e57c:	01040034 	movhi	r4,4096
1000e580:	21000804 	addi	r4,r4,32
1000e584:	01440034 	movhi	r5,4096
1000e588:	29400804 	addi	r5,r5,32
1000e58c:	01840034 	movhi	r6,4096
1000e590:	31808b04 	addi	r6,r6,556
1000e594:	000e4ec0 	call	1000e4ec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000e598:	01040074 	movhi	r4,4097
1000e59c:	21023b04 	addi	r4,r4,2284
1000e5a0:	01440074 	movhi	r5,4097
1000e5a4:	29423b04 	addi	r5,r5,2284
1000e5a8:	01840074 	movhi	r6,4097
1000e5ac:	31830004 	addi	r6,r6,3072
1000e5b0:	000e4ec0 	call	1000e4ec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000e5b4:	000f7c80 	call	1000f7c8 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000e5b8:	000f9900 	call	1000f990 <alt_icache_flush_all>
}
1000e5bc:	e037883a 	mov	sp,fp
1000e5c0:	dfc00117 	ldw	ra,4(sp)
1000e5c4:	df000017 	ldw	fp,0(sp)
1000e5c8:	dec00204 	addi	sp,sp,8
1000e5cc:	f800283a 	ret

1000e5d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e5d0:	defffe04 	addi	sp,sp,-8
1000e5d4:	dfc00115 	stw	ra,4(sp)
1000e5d8:	df000015 	stw	fp,0(sp)
1000e5dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e5e0:	00840074 	movhi	r2,4097
1000e5e4:	1089b604 	addi	r2,r2,9944
1000e5e8:	10800017 	ldw	r2,0(r2)
1000e5ec:	10000526 	beq	r2,zero,1000e604 <alt_get_errno+0x34>
1000e5f0:	00840074 	movhi	r2,4097
1000e5f4:	1089b604 	addi	r2,r2,9944
1000e5f8:	10800017 	ldw	r2,0(r2)
1000e5fc:	103ee83a 	callr	r2
1000e600:	00000206 	br	1000e60c <alt_get_errno+0x3c>
1000e604:	00840074 	movhi	r2,4097
1000e608:	10908304 	addi	r2,r2,16908
}
1000e60c:	e037883a 	mov	sp,fp
1000e610:	dfc00117 	ldw	ra,4(sp)
1000e614:	df000017 	ldw	fp,0(sp)
1000e618:	dec00204 	addi	sp,sp,8
1000e61c:	f800283a 	ret

1000e620 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000e620:	defff904 	addi	sp,sp,-28
1000e624:	dfc00615 	stw	ra,24(sp)
1000e628:	df000515 	stw	fp,20(sp)
1000e62c:	df000504 	addi	fp,sp,20
1000e630:	e13ffd15 	stw	r4,-12(fp)
1000e634:	e17ffe15 	stw	r5,-8(fp)
1000e638:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000e63c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000e640:	e0bffd17 	ldw	r2,-12(fp)
1000e644:	10000816 	blt	r2,zero,1000e668 <lseek+0x48>
1000e648:	e13ffd17 	ldw	r4,-12(fp)
1000e64c:	01400304 	movi	r5,12
1000e650:	00024fc0 	call	100024fc <__mulsi3>
1000e654:	1007883a 	mov	r3,r2
1000e658:	00840074 	movhi	r2,4097
1000e65c:	10853304 	addi	r2,r2,5324
1000e660:	1885883a 	add	r2,r3,r2
1000e664:	00000106 	br	1000e66c <lseek+0x4c>
1000e668:	0005883a 	mov	r2,zero
1000e66c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000e670:	e0bffc17 	ldw	r2,-16(fp)
1000e674:	10001026 	beq	r2,zero,1000e6b8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000e678:	e0bffc17 	ldw	r2,-16(fp)
1000e67c:	10800017 	ldw	r2,0(r2)
1000e680:	10800717 	ldw	r2,28(r2)
1000e684:	10000926 	beq	r2,zero,1000e6ac <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000e688:	e0bffc17 	ldw	r2,-16(fp)
1000e68c:	10800017 	ldw	r2,0(r2)
1000e690:	10800717 	ldw	r2,28(r2)
1000e694:	e13ffc17 	ldw	r4,-16(fp)
1000e698:	e17ffe17 	ldw	r5,-8(fp)
1000e69c:	e1bfff17 	ldw	r6,-4(fp)
1000e6a0:	103ee83a 	callr	r2
1000e6a4:	e0bffb15 	stw	r2,-20(fp)
1000e6a8:	00000506 	br	1000e6c0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000e6ac:	00bfde84 	movi	r2,-134
1000e6b0:	e0bffb15 	stw	r2,-20(fp)
1000e6b4:	00000206 	br	1000e6c0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000e6b8:	00bfebc4 	movi	r2,-81
1000e6bc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000e6c0:	e0bffb17 	ldw	r2,-20(fp)
1000e6c4:	1000070e 	bge	r2,zero,1000e6e4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000e6c8:	000e5d00 	call	1000e5d0 <alt_get_errno>
1000e6cc:	1007883a 	mov	r3,r2
1000e6d0:	e0bffb17 	ldw	r2,-20(fp)
1000e6d4:	0085c83a 	sub	r2,zero,r2
1000e6d8:	18800015 	stw	r2,0(r3)
    rc = -1;
1000e6dc:	00bfffc4 	movi	r2,-1
1000e6e0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000e6e4:	e0bffb17 	ldw	r2,-20(fp)
}
1000e6e8:	e037883a 	mov	sp,fp
1000e6ec:	dfc00117 	ldw	ra,4(sp)
1000e6f0:	df000017 	ldw	fp,0(sp)
1000e6f4:	dec00204 	addi	sp,sp,8
1000e6f8:	f800283a 	ret

1000e6fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000e6fc:	defffd04 	addi	sp,sp,-12
1000e700:	dfc00215 	stw	ra,8(sp)
1000e704:	df000115 	stw	fp,4(sp)
1000e708:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000e70c:	0009883a 	mov	r4,zero
1000e710:	000ebc00 	call	1000ebc0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000e714:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000e718:	000ebf40 	call	1000ebf4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000e71c:	01040074 	movhi	r4,4097
1000e720:	2102f604 	addi	r4,r4,3032
1000e724:	01440074 	movhi	r5,4097
1000e728:	2942f604 	addi	r5,r5,3032
1000e72c:	01840074 	movhi	r6,4097
1000e730:	3182f604 	addi	r6,r6,3032
1000e734:	000fd5c0 	call	1000fd5c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000e738:	000f8d80 	call	1000f8d8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000e73c:	01040074 	movhi	r4,4097
1000e740:	213e4d04 	addi	r4,r4,-1740
1000e744:	00105480 	call	10010548 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000e748:	d126d917 	ldw	r4,-25756(gp)
1000e74c:	d0e6da17 	ldw	r3,-25752(gp)
1000e750:	d0a6db17 	ldw	r2,-25748(gp)
1000e754:	180b883a 	mov	r5,r3
1000e758:	100d883a 	mov	r6,r2
1000e75c:	00002680 	call	10000268 <main>
1000e760:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000e764:	01000044 	movi	r4,1
1000e768:	000e1e40 	call	1000e1e4 <close>
  exit (result);
1000e76c:	e13fff17 	ldw	r4,-4(fp)
1000e770:	001055c0 	call	1001055c <exit>

1000e774 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000e774:	defffe04 	addi	sp,sp,-8
1000e778:	df000115 	stw	fp,4(sp)
1000e77c:	df000104 	addi	fp,sp,4
1000e780:	e13fff15 	stw	r4,-4(fp)
}
1000e784:	e037883a 	mov	sp,fp
1000e788:	df000017 	ldw	fp,0(sp)
1000e78c:	dec00104 	addi	sp,sp,4
1000e790:	f800283a 	ret

1000e794 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000e794:	defffe04 	addi	sp,sp,-8
1000e798:	df000115 	stw	fp,4(sp)
1000e79c:	df000104 	addi	fp,sp,4
1000e7a0:	e13fff15 	stw	r4,-4(fp)
}
1000e7a4:	e037883a 	mov	sp,fp
1000e7a8:	df000017 	ldw	fp,0(sp)
1000e7ac:	dec00104 	addi	sp,sp,4
1000e7b0:	f800283a 	ret

1000e7b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e7b4:	defffe04 	addi	sp,sp,-8
1000e7b8:	dfc00115 	stw	ra,4(sp)
1000e7bc:	df000015 	stw	fp,0(sp)
1000e7c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e7c4:	00840074 	movhi	r2,4097
1000e7c8:	1089b604 	addi	r2,r2,9944
1000e7cc:	10800017 	ldw	r2,0(r2)
1000e7d0:	10000526 	beq	r2,zero,1000e7e8 <alt_get_errno+0x34>
1000e7d4:	00840074 	movhi	r2,4097
1000e7d8:	1089b604 	addi	r2,r2,9944
1000e7dc:	10800017 	ldw	r2,0(r2)
1000e7e0:	103ee83a 	callr	r2
1000e7e4:	00000206 	br	1000e7f0 <alt_get_errno+0x3c>
1000e7e8:	00840074 	movhi	r2,4097
1000e7ec:	10908304 	addi	r2,r2,16908
}
1000e7f0:	e037883a 	mov	sp,fp
1000e7f4:	dfc00117 	ldw	ra,4(sp)
1000e7f8:	df000017 	ldw	fp,0(sp)
1000e7fc:	dec00204 	addi	sp,sp,8
1000e800:	f800283a 	ret

1000e804 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000e804:	defff904 	addi	sp,sp,-28
1000e808:	dfc00615 	stw	ra,24(sp)
1000e80c:	df000515 	stw	fp,20(sp)
1000e810:	df000504 	addi	fp,sp,20
1000e814:	e13ffd15 	stw	r4,-12(fp)
1000e818:	e17ffe15 	stw	r5,-8(fp)
1000e81c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000e820:	e0bffd17 	ldw	r2,-12(fp)
1000e824:	10000816 	blt	r2,zero,1000e848 <read+0x44>
1000e828:	e13ffd17 	ldw	r4,-12(fp)
1000e82c:	01400304 	movi	r5,12
1000e830:	00024fc0 	call	100024fc <__mulsi3>
1000e834:	1007883a 	mov	r3,r2
1000e838:	00840074 	movhi	r2,4097
1000e83c:	10853304 	addi	r2,r2,5324
1000e840:	1885883a 	add	r2,r3,r2
1000e844:	00000106 	br	1000e84c <read+0x48>
1000e848:	0005883a 	mov	r2,zero
1000e84c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000e850:	e0bffb17 	ldw	r2,-20(fp)
1000e854:	10002226 	beq	r2,zero,1000e8e0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000e858:	e0bffb17 	ldw	r2,-20(fp)
1000e85c:	10800217 	ldw	r2,8(r2)
1000e860:	108000cc 	andi	r2,r2,3
1000e864:	10800060 	cmpeqi	r2,r2,1
1000e868:	1000181e 	bne	r2,zero,1000e8cc <read+0xc8>
        (fd->dev->read))
1000e86c:	e0bffb17 	ldw	r2,-20(fp)
1000e870:	10800017 	ldw	r2,0(r2)
1000e874:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000e878:	10001426 	beq	r2,zero,1000e8cc <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000e87c:	e0bffb17 	ldw	r2,-20(fp)
1000e880:	10800017 	ldw	r2,0(r2)
1000e884:	10800517 	ldw	r2,20(r2)
1000e888:	e0ffff17 	ldw	r3,-4(fp)
1000e88c:	e13ffb17 	ldw	r4,-20(fp)
1000e890:	e17ffe17 	ldw	r5,-8(fp)
1000e894:	180d883a 	mov	r6,r3
1000e898:	103ee83a 	callr	r2
1000e89c:	e0bffc15 	stw	r2,-16(fp)
1000e8a0:	e0bffc17 	ldw	r2,-16(fp)
1000e8a4:	1000070e 	bge	r2,zero,1000e8c4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000e8a8:	000e7b40 	call	1000e7b4 <alt_get_errno>
1000e8ac:	1007883a 	mov	r3,r2
1000e8b0:	e0bffc17 	ldw	r2,-16(fp)
1000e8b4:	0085c83a 	sub	r2,zero,r2
1000e8b8:	18800015 	stw	r2,0(r3)
          return -1;
1000e8bc:	00bfffc4 	movi	r2,-1
1000e8c0:	00000c06 	br	1000e8f4 <read+0xf0>
        }
        return rval;
1000e8c4:	e0bffc17 	ldw	r2,-16(fp)
1000e8c8:	00000a06 	br	1000e8f4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000e8cc:	000e7b40 	call	1000e7b4 <alt_get_errno>
1000e8d0:	1007883a 	mov	r3,r2
1000e8d4:	00800344 	movi	r2,13
1000e8d8:	18800015 	stw	r2,0(r3)
1000e8dc:	00000406 	br	1000e8f0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000e8e0:	000e7b40 	call	1000e7b4 <alt_get_errno>
1000e8e4:	1007883a 	mov	r3,r2
1000e8e8:	00801444 	movi	r2,81
1000e8ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000e8f0:	00bfffc4 	movi	r2,-1
}
1000e8f4:	e037883a 	mov	sp,fp
1000e8f8:	dfc00117 	ldw	ra,4(sp)
1000e8fc:	df000017 	ldw	fp,0(sp)
1000e900:	dec00204 	addi	sp,sp,8
1000e904:	f800283a 	ret

1000e908 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000e908:	defffc04 	addi	sp,sp,-16
1000e90c:	dfc00315 	stw	ra,12(sp)
1000e910:	df000215 	stw	fp,8(sp)
1000e914:	dc000115 	stw	r16,4(sp)
1000e918:	df000204 	addi	fp,sp,8
1000e91c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000e920:	e0bffe17 	ldw	r2,-8(fp)
1000e924:	108000d0 	cmplti	r2,r2,3
1000e928:	1000111e 	bne	r2,zero,1000e970 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000e92c:	04040074 	movhi	r16,4097
1000e930:	84053304 	addi	r16,r16,5324
1000e934:	e0bffe17 	ldw	r2,-8(fp)
1000e938:	1009883a 	mov	r4,r2
1000e93c:	01400304 	movi	r5,12
1000e940:	00024fc0 	call	100024fc <__mulsi3>
1000e944:	8085883a 	add	r2,r16,r2
1000e948:	10800204 	addi	r2,r2,8
1000e94c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000e950:	04040074 	movhi	r16,4097
1000e954:	84053304 	addi	r16,r16,5324
1000e958:	e0bffe17 	ldw	r2,-8(fp)
1000e95c:	1009883a 	mov	r4,r2
1000e960:	01400304 	movi	r5,12
1000e964:	00024fc0 	call	100024fc <__mulsi3>
1000e968:	8085883a 	add	r2,r16,r2
1000e96c:	10000015 	stw	zero,0(r2)
  }
}
1000e970:	e6ffff04 	addi	sp,fp,-4
1000e974:	dfc00217 	ldw	ra,8(sp)
1000e978:	df000117 	ldw	fp,4(sp)
1000e97c:	dc000017 	ldw	r16,0(sp)
1000e980:	dec00304 	addi	sp,sp,12
1000e984:	f800283a 	ret

1000e988 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000e988:	defff904 	addi	sp,sp,-28
1000e98c:	df000615 	stw	fp,24(sp)
1000e990:	df000604 	addi	fp,sp,24
1000e994:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e998:	0005303a 	rdctl	r2,status
1000e99c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e9a0:	e0fffc17 	ldw	r3,-16(fp)
1000e9a4:	00bfff84 	movi	r2,-2
1000e9a8:	1884703a 	and	r2,r3,r2
1000e9ac:	1001703a 	wrctl	status,r2
  
  return context;
1000e9b0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000e9b4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000e9b8:	d0a00c17 	ldw	r2,-32720(gp)
1000e9bc:	10c000c4 	addi	r3,r2,3
1000e9c0:	00bfff04 	movi	r2,-4
1000e9c4:	1884703a 	and	r2,r3,r2
1000e9c8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000e9cc:	d0e00c17 	ldw	r3,-32720(gp)
1000e9d0:	e0bfff17 	ldw	r2,-4(fp)
1000e9d4:	1887883a 	add	r3,r3,r2
1000e9d8:	00860034 	movhi	r2,6144
1000e9dc:	10800004 	addi	r2,r2,0
1000e9e0:	10c0062e 	bgeu	r2,r3,1000e9fc <sbrk+0x74>
1000e9e4:	e0bffa17 	ldw	r2,-24(fp)
1000e9e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e9ec:	e0bffd17 	ldw	r2,-12(fp)
1000e9f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000e9f4:	00bfffc4 	movi	r2,-1
1000e9f8:	00000b06 	br	1000ea28 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000e9fc:	d0a00c17 	ldw	r2,-32720(gp)
1000ea00:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000ea04:	d0e00c17 	ldw	r3,-32720(gp)
1000ea08:	e0bfff17 	ldw	r2,-4(fp)
1000ea0c:	1885883a 	add	r2,r3,r2
1000ea10:	d0a00c15 	stw	r2,-32720(gp)
1000ea14:	e0bffa17 	ldw	r2,-24(fp)
1000ea18:	e0bffe15 	stw	r2,-8(fp)
1000ea1c:	e0bffe17 	ldw	r2,-8(fp)
1000ea20:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000ea24:	e0bffb17 	ldw	r2,-20(fp)
} 
1000ea28:	e037883a 	mov	sp,fp
1000ea2c:	df000017 	ldw	fp,0(sp)
1000ea30:	dec00104 	addi	sp,sp,4
1000ea34:	f800283a 	ret

1000ea38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ea38:	defffe04 	addi	sp,sp,-8
1000ea3c:	dfc00115 	stw	ra,4(sp)
1000ea40:	df000015 	stw	fp,0(sp)
1000ea44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ea48:	00840074 	movhi	r2,4097
1000ea4c:	1089b604 	addi	r2,r2,9944
1000ea50:	10800017 	ldw	r2,0(r2)
1000ea54:	10000526 	beq	r2,zero,1000ea6c <alt_get_errno+0x34>
1000ea58:	00840074 	movhi	r2,4097
1000ea5c:	1089b604 	addi	r2,r2,9944
1000ea60:	10800017 	ldw	r2,0(r2)
1000ea64:	103ee83a 	callr	r2
1000ea68:	00000206 	br	1000ea74 <alt_get_errno+0x3c>
1000ea6c:	00840074 	movhi	r2,4097
1000ea70:	10908304 	addi	r2,r2,16908
}
1000ea74:	e037883a 	mov	sp,fp
1000ea78:	dfc00117 	ldw	ra,4(sp)
1000ea7c:	df000017 	ldw	fp,0(sp)
1000ea80:	dec00204 	addi	sp,sp,8
1000ea84:	f800283a 	ret

1000ea88 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000ea88:	defff904 	addi	sp,sp,-28
1000ea8c:	dfc00615 	stw	ra,24(sp)
1000ea90:	df000515 	stw	fp,20(sp)
1000ea94:	df000504 	addi	fp,sp,20
1000ea98:	e13ffd15 	stw	r4,-12(fp)
1000ea9c:	e17ffe15 	stw	r5,-8(fp)
1000eaa0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000eaa4:	e0bffd17 	ldw	r2,-12(fp)
1000eaa8:	10000816 	blt	r2,zero,1000eacc <write+0x44>
1000eaac:	e13ffd17 	ldw	r4,-12(fp)
1000eab0:	01400304 	movi	r5,12
1000eab4:	00024fc0 	call	100024fc <__mulsi3>
1000eab8:	1007883a 	mov	r3,r2
1000eabc:	00840074 	movhi	r2,4097
1000eac0:	10853304 	addi	r2,r2,5324
1000eac4:	1885883a 	add	r2,r3,r2
1000eac8:	00000106 	br	1000ead0 <write+0x48>
1000eacc:	0005883a 	mov	r2,zero
1000ead0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000ead4:	e0bffb17 	ldw	r2,-20(fp)
1000ead8:	10002126 	beq	r2,zero,1000eb60 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000eadc:	e0bffb17 	ldw	r2,-20(fp)
1000eae0:	10800217 	ldw	r2,8(r2)
1000eae4:	108000cc 	andi	r2,r2,3
1000eae8:	10001826 	beq	r2,zero,1000eb4c <write+0xc4>
1000eaec:	e0bffb17 	ldw	r2,-20(fp)
1000eaf0:	10800017 	ldw	r2,0(r2)
1000eaf4:	10800617 	ldw	r2,24(r2)
1000eaf8:	10001426 	beq	r2,zero,1000eb4c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000eafc:	e0bffb17 	ldw	r2,-20(fp)
1000eb00:	10800017 	ldw	r2,0(r2)
1000eb04:	10800617 	ldw	r2,24(r2)
1000eb08:	e0ffff17 	ldw	r3,-4(fp)
1000eb0c:	e13ffb17 	ldw	r4,-20(fp)
1000eb10:	e17ffe17 	ldw	r5,-8(fp)
1000eb14:	180d883a 	mov	r6,r3
1000eb18:	103ee83a 	callr	r2
1000eb1c:	e0bffc15 	stw	r2,-16(fp)
1000eb20:	e0bffc17 	ldw	r2,-16(fp)
1000eb24:	1000070e 	bge	r2,zero,1000eb44 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000eb28:	000ea380 	call	1000ea38 <alt_get_errno>
1000eb2c:	1007883a 	mov	r3,r2
1000eb30:	e0bffc17 	ldw	r2,-16(fp)
1000eb34:	0085c83a 	sub	r2,zero,r2
1000eb38:	18800015 	stw	r2,0(r3)
        return -1;
1000eb3c:	00bfffc4 	movi	r2,-1
1000eb40:	00000c06 	br	1000eb74 <write+0xec>
      }
      return rval;
1000eb44:	e0bffc17 	ldw	r2,-16(fp)
1000eb48:	00000a06 	br	1000eb74 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000eb4c:	000ea380 	call	1000ea38 <alt_get_errno>
1000eb50:	1007883a 	mov	r3,r2
1000eb54:	00800344 	movi	r2,13
1000eb58:	18800015 	stw	r2,0(r3)
1000eb5c:	00000406 	br	1000eb70 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000eb60:	000ea380 	call	1000ea38 <alt_get_errno>
1000eb64:	1007883a 	mov	r3,r2
1000eb68:	00801444 	movi	r2,81
1000eb6c:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000eb70:	00bfffc4 	movi	r2,-1
}
1000eb74:	e037883a 	mov	sp,fp
1000eb78:	dfc00117 	ldw	ra,4(sp)
1000eb7c:	df000017 	ldw	fp,0(sp)
1000eb80:	dec00204 	addi	sp,sp,8
1000eb84:	f800283a 	ret

1000eb88 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000eb88:	defffd04 	addi	sp,sp,-12
1000eb8c:	dfc00215 	stw	ra,8(sp)
1000eb90:	df000115 	stw	fp,4(sp)
1000eb94:	df000104 	addi	fp,sp,4
1000eb98:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000eb9c:	e13fff17 	ldw	r4,-4(fp)
1000eba0:	01440074 	movhi	r5,4097
1000eba4:	2949b304 	addi	r5,r5,9932
1000eba8:	000f8340 	call	1000f834 <alt_dev_llist_insert>
}
1000ebac:	e037883a 	mov	sp,fp
1000ebb0:	dfc00117 	ldw	ra,4(sp)
1000ebb4:	df000017 	ldw	fp,0(sp)
1000ebb8:	dec00204 	addi	sp,sp,8
1000ebbc:	f800283a 	ret

1000ebc0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000ebc0:	defffd04 	addi	sp,sp,-12
1000ebc4:	dfc00215 	stw	ra,8(sp)
1000ebc8:	df000115 	stw	fp,4(sp)
1000ebcc:	df000104 	addi	fp,sp,4
1000ebd0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000ebd4:	00102140 	call	10010214 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000ebd8:	00800044 	movi	r2,1
1000ebdc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000ebe0:	e037883a 	mov	sp,fp
1000ebe4:	dfc00117 	ldw	ra,4(sp)
1000ebe8:	df000017 	ldw	fp,0(sp)
1000ebec:	dec00204 	addi	sp,sp,8
1000ebf0:	f800283a 	ret

1000ebf4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000ebf4:	defffe04 	addi	sp,sp,-8
1000ebf8:	dfc00115 	stw	ra,4(sp)
1000ebfc:	df000015 	stw	fp,0(sp)
1000ec00:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000ec04:	01040074 	movhi	r4,4097
1000ec08:	21059d04 	addi	r4,r4,5748
1000ec0c:	000b883a 	mov	r5,zero
1000ec10:	01800144 	movi	r6,5
1000ec14:	000eda00 	call	1000eda0 <altera_avalon_jtag_uart_init>
1000ec18:	01040074 	movhi	r4,4097
1000ec1c:	21059304 	addi	r4,r4,5708
1000ec20:	000eb880 	call	1000eb88 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000ec24:	0001883a 	nop
}
1000ec28:	e037883a 	mov	sp,fp
1000ec2c:	dfc00117 	ldw	ra,4(sp)
1000ec30:	df000017 	ldw	fp,0(sp)
1000ec34:	dec00204 	addi	sp,sp,8
1000ec38:	f800283a 	ret

1000ec3c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000ec3c:	defffa04 	addi	sp,sp,-24
1000ec40:	dfc00515 	stw	ra,20(sp)
1000ec44:	df000415 	stw	fp,16(sp)
1000ec48:	df000404 	addi	fp,sp,16
1000ec4c:	e13ffd15 	stw	r4,-12(fp)
1000ec50:	e17ffe15 	stw	r5,-8(fp)
1000ec54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000ec58:	e0bffd17 	ldw	r2,-12(fp)
1000ec5c:	10800017 	ldw	r2,0(r2)
1000ec60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000ec64:	e0bffc17 	ldw	r2,-16(fp)
1000ec68:	10c00a04 	addi	r3,r2,40
1000ec6c:	e0bffd17 	ldw	r2,-12(fp)
1000ec70:	10800217 	ldw	r2,8(r2)
1000ec74:	1809883a 	mov	r4,r3
1000ec78:	e17ffe17 	ldw	r5,-8(fp)
1000ec7c:	e1bfff17 	ldw	r6,-4(fp)
1000ec80:	100f883a 	mov	r7,r2
1000ec84:	000f2640 	call	1000f264 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000ec88:	e037883a 	mov	sp,fp
1000ec8c:	dfc00117 	ldw	ra,4(sp)
1000ec90:	df000017 	ldw	fp,0(sp)
1000ec94:	dec00204 	addi	sp,sp,8
1000ec98:	f800283a 	ret

1000ec9c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000ec9c:	defffa04 	addi	sp,sp,-24
1000eca0:	dfc00515 	stw	ra,20(sp)
1000eca4:	df000415 	stw	fp,16(sp)
1000eca8:	df000404 	addi	fp,sp,16
1000ecac:	e13ffd15 	stw	r4,-12(fp)
1000ecb0:	e17ffe15 	stw	r5,-8(fp)
1000ecb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000ecb8:	e0bffd17 	ldw	r2,-12(fp)
1000ecbc:	10800017 	ldw	r2,0(r2)
1000ecc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000ecc4:	e0bffc17 	ldw	r2,-16(fp)
1000ecc8:	10c00a04 	addi	r3,r2,40
1000eccc:	e0bffd17 	ldw	r2,-12(fp)
1000ecd0:	10800217 	ldw	r2,8(r2)
1000ecd4:	1809883a 	mov	r4,r3
1000ecd8:	e17ffe17 	ldw	r5,-8(fp)
1000ecdc:	e1bfff17 	ldw	r6,-4(fp)
1000ece0:	100f883a 	mov	r7,r2
1000ece4:	000f4700 	call	1000f470 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000ece8:	e037883a 	mov	sp,fp
1000ecec:	dfc00117 	ldw	ra,4(sp)
1000ecf0:	df000017 	ldw	fp,0(sp)
1000ecf4:	dec00204 	addi	sp,sp,8
1000ecf8:	f800283a 	ret

1000ecfc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000ecfc:	defffc04 	addi	sp,sp,-16
1000ed00:	dfc00315 	stw	ra,12(sp)
1000ed04:	df000215 	stw	fp,8(sp)
1000ed08:	df000204 	addi	fp,sp,8
1000ed0c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000ed10:	e0bfff17 	ldw	r2,-4(fp)
1000ed14:	10800017 	ldw	r2,0(r2)
1000ed18:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000ed1c:	e0bffe17 	ldw	r2,-8(fp)
1000ed20:	10c00a04 	addi	r3,r2,40
1000ed24:	e0bfff17 	ldw	r2,-4(fp)
1000ed28:	10800217 	ldw	r2,8(r2)
1000ed2c:	1809883a 	mov	r4,r3
1000ed30:	100b883a 	mov	r5,r2
1000ed34:	000f1100 	call	1000f110 <altera_avalon_jtag_uart_close>
}
1000ed38:	e037883a 	mov	sp,fp
1000ed3c:	dfc00117 	ldw	ra,4(sp)
1000ed40:	df000017 	ldw	fp,0(sp)
1000ed44:	dec00204 	addi	sp,sp,8
1000ed48:	f800283a 	ret

1000ed4c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000ed4c:	defffa04 	addi	sp,sp,-24
1000ed50:	dfc00515 	stw	ra,20(sp)
1000ed54:	df000415 	stw	fp,16(sp)
1000ed58:	df000404 	addi	fp,sp,16
1000ed5c:	e13ffd15 	stw	r4,-12(fp)
1000ed60:	e17ffe15 	stw	r5,-8(fp)
1000ed64:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000ed68:	e0bffd17 	ldw	r2,-12(fp)
1000ed6c:	10800017 	ldw	r2,0(r2)
1000ed70:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000ed74:	e0bffc17 	ldw	r2,-16(fp)
1000ed78:	10800a04 	addi	r2,r2,40
1000ed7c:	1009883a 	mov	r4,r2
1000ed80:	e17ffe17 	ldw	r5,-8(fp)
1000ed84:	e1bfff17 	ldw	r6,-4(fp)
1000ed88:	000f1780 	call	1000f178 <altera_avalon_jtag_uart_ioctl>
}
1000ed8c:	e037883a 	mov	sp,fp
1000ed90:	dfc00117 	ldw	ra,4(sp)
1000ed94:	df000017 	ldw	fp,0(sp)
1000ed98:	dec00204 	addi	sp,sp,8
1000ed9c:	f800283a 	ret

1000eda0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000eda0:	defffa04 	addi	sp,sp,-24
1000eda4:	dfc00515 	stw	ra,20(sp)
1000eda8:	df000415 	stw	fp,16(sp)
1000edac:	df000404 	addi	fp,sp,16
1000edb0:	e13ffd15 	stw	r4,-12(fp)
1000edb4:	e17ffe15 	stw	r5,-8(fp)
1000edb8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000edbc:	e0bffd17 	ldw	r2,-12(fp)
1000edc0:	00c00044 	movi	r3,1
1000edc4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000edc8:	e0bffd17 	ldw	r2,-12(fp)
1000edcc:	10800017 	ldw	r2,0(r2)
1000edd0:	10800104 	addi	r2,r2,4
1000edd4:	1007883a 	mov	r3,r2
1000edd8:	e0bffd17 	ldw	r2,-12(fp)
1000eddc:	10800817 	ldw	r2,32(r2)
1000ede0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000ede4:	e0fffe17 	ldw	r3,-8(fp)
1000ede8:	e0bfff17 	ldw	r2,-4(fp)
1000edec:	d8000015 	stw	zero,0(sp)
1000edf0:	1809883a 	mov	r4,r3
1000edf4:	100b883a 	mov	r5,r2
1000edf8:	01840074 	movhi	r6,4097
1000edfc:	31bb9904 	addi	r6,r6,-4508
1000ee00:	e1fffd17 	ldw	r7,-12(fp)
1000ee04:	000f9ac0 	call	1000f9ac <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000ee08:	e0bffd17 	ldw	r2,-12(fp)
1000ee0c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000ee10:	e0bffd17 	ldw	r2,-12(fp)
1000ee14:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000ee18:	00840074 	movhi	r2,4097
1000ee1c:	10908804 	addi	r2,r2,16928
1000ee20:	10800017 	ldw	r2,0(r2)
1000ee24:	1809883a 	mov	r4,r3
1000ee28:	100b883a 	mov	r5,r2
1000ee2c:	01840074 	movhi	r6,4097
1000ee30:	31bc1a04 	addi	r6,r6,-3992
1000ee34:	e1fffd17 	ldw	r7,-12(fp)
1000ee38:	000f6880 	call	1000f688 <alt_alarm_start>
1000ee3c:	1000040e 	bge	r2,zero,1000ee50 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000ee40:	e0fffd17 	ldw	r3,-12(fp)
1000ee44:	00a00034 	movhi	r2,32768
1000ee48:	10bfffc4 	addi	r2,r2,-1
1000ee4c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000ee50:	e037883a 	mov	sp,fp
1000ee54:	dfc00117 	ldw	ra,4(sp)
1000ee58:	df000017 	ldw	fp,0(sp)
1000ee5c:	dec00204 	addi	sp,sp,8
1000ee60:	f800283a 	ret

1000ee64 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000ee64:	defff804 	addi	sp,sp,-32
1000ee68:	df000715 	stw	fp,28(sp)
1000ee6c:	df000704 	addi	fp,sp,28
1000ee70:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000ee74:	e0bfff17 	ldw	r2,-4(fp)
1000ee78:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000ee7c:	e0bffb17 	ldw	r2,-20(fp)
1000ee80:	10800017 	ldw	r2,0(r2)
1000ee84:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000ee88:	e0bffc17 	ldw	r2,-16(fp)
1000ee8c:	10800104 	addi	r2,r2,4
1000ee90:	10800037 	ldwio	r2,0(r2)
1000ee94:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000ee98:	e0bffd17 	ldw	r2,-12(fp)
1000ee9c:	1080c00c 	andi	r2,r2,768
1000eea0:	1000011e 	bne	r2,zero,1000eea8 <altera_avalon_jtag_uart_irq+0x44>
      break;
1000eea4:	00006c06 	br	1000f058 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000eea8:	e0bffd17 	ldw	r2,-12(fp)
1000eeac:	1080400c 	andi	r2,r2,256
1000eeb0:	10003426 	beq	r2,zero,1000ef84 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000eeb4:	00800074 	movhi	r2,1
1000eeb8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000eebc:	e0bffb17 	ldw	r2,-20(fp)
1000eec0:	10800a17 	ldw	r2,40(r2)
1000eec4:	10800044 	addi	r2,r2,1
1000eec8:	1081ffcc 	andi	r2,r2,2047
1000eecc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000eed0:	e0bffb17 	ldw	r2,-20(fp)
1000eed4:	10c00b17 	ldw	r3,44(r2)
1000eed8:	e0bffe17 	ldw	r2,-8(fp)
1000eedc:	1880011e 	bne	r3,r2,1000eee4 <altera_avalon_jtag_uart_irq+0x80>
          break;
1000eee0:	00001606 	br	1000ef3c <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000eee4:	e0bffc17 	ldw	r2,-16(fp)
1000eee8:	10800037 	ldwio	r2,0(r2)
1000eeec:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000eef0:	e0bff917 	ldw	r2,-28(fp)
1000eef4:	10a0000c 	andi	r2,r2,32768
1000eef8:	1000011e 	bne	r2,zero,1000ef00 <altera_avalon_jtag_uart_irq+0x9c>
          break;
1000eefc:	00000f06 	br	1000ef3c <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000ef00:	e0bffb17 	ldw	r2,-20(fp)
1000ef04:	10800a17 	ldw	r2,40(r2)
1000ef08:	e0fff917 	ldw	r3,-28(fp)
1000ef0c:	1809883a 	mov	r4,r3
1000ef10:	e0fffb17 	ldw	r3,-20(fp)
1000ef14:	1885883a 	add	r2,r3,r2
1000ef18:	10800e04 	addi	r2,r2,56
1000ef1c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000ef20:	e0bffb17 	ldw	r2,-20(fp)
1000ef24:	10800a17 	ldw	r2,40(r2)
1000ef28:	10800044 	addi	r2,r2,1
1000ef2c:	10c1ffcc 	andi	r3,r2,2047
1000ef30:	e0bffb17 	ldw	r2,-20(fp)
1000ef34:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000ef38:	003fe006 	br	1000eebc <__alt_data_end+0xf800eebc>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000ef3c:	e0bff917 	ldw	r2,-28(fp)
1000ef40:	10bfffec 	andhi	r2,r2,65535
1000ef44:	10000f26 	beq	r2,zero,1000ef84 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000ef48:	e0bffb17 	ldw	r2,-20(fp)
1000ef4c:	10c00817 	ldw	r3,32(r2)
1000ef50:	00bfff84 	movi	r2,-2
1000ef54:	1886703a 	and	r3,r3,r2
1000ef58:	e0bffb17 	ldw	r2,-20(fp)
1000ef5c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000ef60:	e0bffc17 	ldw	r2,-16(fp)
1000ef64:	10800104 	addi	r2,r2,4
1000ef68:	1007883a 	mov	r3,r2
1000ef6c:	e0bffb17 	ldw	r2,-20(fp)
1000ef70:	10800817 	ldw	r2,32(r2)
1000ef74:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000ef78:	e0bffc17 	ldw	r2,-16(fp)
1000ef7c:	10800104 	addi	r2,r2,4
1000ef80:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000ef84:	e0bffd17 	ldw	r2,-12(fp)
1000ef88:	1080800c 	andi	r2,r2,512
1000ef8c:	10003126 	beq	r2,zero,1000f054 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000ef90:	e0bffd17 	ldw	r2,-12(fp)
1000ef94:	1004d43a 	srli	r2,r2,16
1000ef98:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000ef9c:	00001406 	br	1000eff0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000efa0:	e0bffc17 	ldw	r2,-16(fp)
1000efa4:	e0fffb17 	ldw	r3,-20(fp)
1000efa8:	18c00d17 	ldw	r3,52(r3)
1000efac:	e13ffb17 	ldw	r4,-20(fp)
1000efb0:	20c7883a 	add	r3,r4,r3
1000efb4:	18c20e04 	addi	r3,r3,2104
1000efb8:	18c00003 	ldbu	r3,0(r3)
1000efbc:	18c03fcc 	andi	r3,r3,255
1000efc0:	18c0201c 	xori	r3,r3,128
1000efc4:	18ffe004 	addi	r3,r3,-128
1000efc8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000efcc:	e0bffb17 	ldw	r2,-20(fp)
1000efd0:	10800d17 	ldw	r2,52(r2)
1000efd4:	10800044 	addi	r2,r2,1
1000efd8:	10c1ffcc 	andi	r3,r2,2047
1000efdc:	e0bffb17 	ldw	r2,-20(fp)
1000efe0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000efe4:	e0bffa17 	ldw	r2,-24(fp)
1000efe8:	10bfffc4 	addi	r2,r2,-1
1000efec:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000eff0:	e0bffa17 	ldw	r2,-24(fp)
1000eff4:	10000526 	beq	r2,zero,1000f00c <altera_avalon_jtag_uart_irq+0x1a8>
1000eff8:	e0bffb17 	ldw	r2,-20(fp)
1000effc:	10c00d17 	ldw	r3,52(r2)
1000f000:	e0bffb17 	ldw	r2,-20(fp)
1000f004:	10800c17 	ldw	r2,48(r2)
1000f008:	18bfe51e 	bne	r3,r2,1000efa0 <__alt_data_end+0xf800efa0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000f00c:	e0bffa17 	ldw	r2,-24(fp)
1000f010:	10001026 	beq	r2,zero,1000f054 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000f014:	e0bffb17 	ldw	r2,-20(fp)
1000f018:	10c00817 	ldw	r3,32(r2)
1000f01c:	00bfff44 	movi	r2,-3
1000f020:	1886703a 	and	r3,r3,r2
1000f024:	e0bffb17 	ldw	r2,-20(fp)
1000f028:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000f02c:	e0bffb17 	ldw	r2,-20(fp)
1000f030:	10800017 	ldw	r2,0(r2)
1000f034:	10800104 	addi	r2,r2,4
1000f038:	1007883a 	mov	r3,r2
1000f03c:	e0bffb17 	ldw	r2,-20(fp)
1000f040:	10800817 	ldw	r2,32(r2)
1000f044:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f048:	e0bffc17 	ldw	r2,-16(fp)
1000f04c:	10800104 	addi	r2,r2,4
1000f050:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000f054:	003f8c06 	br	1000ee88 <__alt_data_end+0xf800ee88>
}
1000f058:	e037883a 	mov	sp,fp
1000f05c:	df000017 	ldw	fp,0(sp)
1000f060:	dec00104 	addi	sp,sp,4
1000f064:	f800283a 	ret

1000f068 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000f068:	defff804 	addi	sp,sp,-32
1000f06c:	df000715 	stw	fp,28(sp)
1000f070:	df000704 	addi	fp,sp,28
1000f074:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000f078:	e0bffb17 	ldw	r2,-20(fp)
1000f07c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000f080:	e0bff917 	ldw	r2,-28(fp)
1000f084:	10800017 	ldw	r2,0(r2)
1000f088:	10800104 	addi	r2,r2,4
1000f08c:	10800037 	ldwio	r2,0(r2)
1000f090:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000f094:	e0bffa17 	ldw	r2,-24(fp)
1000f098:	1081000c 	andi	r2,r2,1024
1000f09c:	10000b26 	beq	r2,zero,1000f0cc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000f0a0:	e0bff917 	ldw	r2,-28(fp)
1000f0a4:	10800017 	ldw	r2,0(r2)
1000f0a8:	10800104 	addi	r2,r2,4
1000f0ac:	1007883a 	mov	r3,r2
1000f0b0:	e0bff917 	ldw	r2,-28(fp)
1000f0b4:	10800817 	ldw	r2,32(r2)
1000f0b8:	10810014 	ori	r2,r2,1024
1000f0bc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000f0c0:	e0bff917 	ldw	r2,-28(fp)
1000f0c4:	10000915 	stw	zero,36(r2)
1000f0c8:	00000a06 	br	1000f0f4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000f0cc:	e0bff917 	ldw	r2,-28(fp)
1000f0d0:	10c00917 	ldw	r3,36(r2)
1000f0d4:	00a00034 	movhi	r2,32768
1000f0d8:	10bfff04 	addi	r2,r2,-4
1000f0dc:	10c00536 	bltu	r2,r3,1000f0f4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000f0e0:	e0bff917 	ldw	r2,-28(fp)
1000f0e4:	10800917 	ldw	r2,36(r2)
1000f0e8:	10c00044 	addi	r3,r2,1
1000f0ec:	e0bff917 	ldw	r2,-28(fp)
1000f0f0:	10c00915 	stw	r3,36(r2)
1000f0f4:	00840074 	movhi	r2,4097
1000f0f8:	10908804 	addi	r2,r2,16928
1000f0fc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000f100:	e037883a 	mov	sp,fp
1000f104:	df000017 	ldw	fp,0(sp)
1000f108:	dec00104 	addi	sp,sp,4
1000f10c:	f800283a 	ret

1000f110 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000f110:	defffd04 	addi	sp,sp,-12
1000f114:	df000215 	stw	fp,8(sp)
1000f118:	df000204 	addi	fp,sp,8
1000f11c:	e13ffe15 	stw	r4,-8(fp)
1000f120:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000f124:	00000506 	br	1000f13c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000f128:	e0bfff17 	ldw	r2,-4(fp)
1000f12c:	1090000c 	andi	r2,r2,16384
1000f130:	10000226 	beq	r2,zero,1000f13c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000f134:	00bffd44 	movi	r2,-11
1000f138:	00000b06 	br	1000f168 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000f13c:	e0bffe17 	ldw	r2,-8(fp)
1000f140:	10c00d17 	ldw	r3,52(r2)
1000f144:	e0bffe17 	ldw	r2,-8(fp)
1000f148:	10800c17 	ldw	r2,48(r2)
1000f14c:	18800526 	beq	r3,r2,1000f164 <altera_avalon_jtag_uart_close+0x54>
1000f150:	e0bffe17 	ldw	r2,-8(fp)
1000f154:	10c00917 	ldw	r3,36(r2)
1000f158:	e0bffe17 	ldw	r2,-8(fp)
1000f15c:	10800117 	ldw	r2,4(r2)
1000f160:	18bff136 	bltu	r3,r2,1000f128 <__alt_data_end+0xf800f128>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000f164:	0005883a 	mov	r2,zero
}
1000f168:	e037883a 	mov	sp,fp
1000f16c:	df000017 	ldw	fp,0(sp)
1000f170:	dec00104 	addi	sp,sp,4
1000f174:	f800283a 	ret

1000f178 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000f178:	defffa04 	addi	sp,sp,-24
1000f17c:	df000515 	stw	fp,20(sp)
1000f180:	df000504 	addi	fp,sp,20
1000f184:	e13ffd15 	stw	r4,-12(fp)
1000f188:	e17ffe15 	stw	r5,-8(fp)
1000f18c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000f190:	00bff9c4 	movi	r2,-25
1000f194:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000f198:	e0bffe17 	ldw	r2,-8(fp)
1000f19c:	10da8060 	cmpeqi	r3,r2,27137
1000f1a0:	1800031e 	bne	r3,zero,1000f1b0 <altera_avalon_jtag_uart_ioctl+0x38>
1000f1a4:	109a80a0 	cmpeqi	r2,r2,27138
1000f1a8:	1000191e 	bne	r2,zero,1000f210 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1000f1ac:	00002806 	br	1000f250 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000f1b0:	e0bffd17 	ldw	r2,-12(fp)
1000f1b4:	10c00117 	ldw	r3,4(r2)
1000f1b8:	00a00034 	movhi	r2,32768
1000f1bc:	10bfffc4 	addi	r2,r2,-1
1000f1c0:	18801226 	beq	r3,r2,1000f20c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1000f1c4:	e0bfff17 	ldw	r2,-4(fp)
1000f1c8:	10800017 	ldw	r2,0(r2)
1000f1cc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000f1d0:	e0bffc17 	ldw	r2,-16(fp)
1000f1d4:	10800090 	cmplti	r2,r2,2
1000f1d8:	1000061e 	bne	r2,zero,1000f1f4 <altera_avalon_jtag_uart_ioctl+0x7c>
1000f1dc:	e0fffc17 	ldw	r3,-16(fp)
1000f1e0:	00a00034 	movhi	r2,32768
1000f1e4:	10bfffc4 	addi	r2,r2,-1
1000f1e8:	18800226 	beq	r3,r2,1000f1f4 <altera_avalon_jtag_uart_ioctl+0x7c>
1000f1ec:	e0bffc17 	ldw	r2,-16(fp)
1000f1f0:	00000206 	br	1000f1fc <altera_avalon_jtag_uart_ioctl+0x84>
1000f1f4:	00a00034 	movhi	r2,32768
1000f1f8:	10bfff84 	addi	r2,r2,-2
1000f1fc:	e0fffd17 	ldw	r3,-12(fp)
1000f200:	18800115 	stw	r2,4(r3)
      rc = 0;
1000f204:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000f208:	00001106 	br	1000f250 <altera_avalon_jtag_uart_ioctl+0xd8>
1000f20c:	00001006 	br	1000f250 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000f210:	e0bffd17 	ldw	r2,-12(fp)
1000f214:	10c00117 	ldw	r3,4(r2)
1000f218:	00a00034 	movhi	r2,32768
1000f21c:	10bfffc4 	addi	r2,r2,-1
1000f220:	18800a26 	beq	r3,r2,1000f24c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000f224:	e0bffd17 	ldw	r2,-12(fp)
1000f228:	10c00917 	ldw	r3,36(r2)
1000f22c:	e0bffd17 	ldw	r2,-12(fp)
1000f230:	10800117 	ldw	r2,4(r2)
1000f234:	1885803a 	cmpltu	r2,r3,r2
1000f238:	10c03fcc 	andi	r3,r2,255
1000f23c:	e0bfff17 	ldw	r2,-4(fp)
1000f240:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000f244:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000f248:	00000006 	br	1000f24c <altera_avalon_jtag_uart_ioctl+0xd4>
1000f24c:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000f250:	e0bffb17 	ldw	r2,-20(fp)
}
1000f254:	e037883a 	mov	sp,fp
1000f258:	df000017 	ldw	fp,0(sp)
1000f25c:	dec00104 	addi	sp,sp,4
1000f260:	f800283a 	ret

1000f264 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000f264:	defff304 	addi	sp,sp,-52
1000f268:	dfc00c15 	stw	ra,48(sp)
1000f26c:	df000b15 	stw	fp,44(sp)
1000f270:	df000b04 	addi	fp,sp,44
1000f274:	e13ffc15 	stw	r4,-16(fp)
1000f278:	e17ffd15 	stw	r5,-12(fp)
1000f27c:	e1bffe15 	stw	r6,-8(fp)
1000f280:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000f284:	e0bffd17 	ldw	r2,-12(fp)
1000f288:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000f28c:	00004906 	br	1000f3b4 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000f290:	e0bffc17 	ldw	r2,-16(fp)
1000f294:	10800a17 	ldw	r2,40(r2)
1000f298:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000f29c:	e0bffc17 	ldw	r2,-16(fp)
1000f2a0:	10800b17 	ldw	r2,44(r2)
1000f2a4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000f2a8:	e0fff717 	ldw	r3,-36(fp)
1000f2ac:	e0bff817 	ldw	r2,-32(fp)
1000f2b0:	18800536 	bltu	r3,r2,1000f2c8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000f2b4:	e0fff717 	ldw	r3,-36(fp)
1000f2b8:	e0bff817 	ldw	r2,-32(fp)
1000f2bc:	1885c83a 	sub	r2,r3,r2
1000f2c0:	e0bff615 	stw	r2,-40(fp)
1000f2c4:	00000406 	br	1000f2d8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000f2c8:	00c20004 	movi	r3,2048
1000f2cc:	e0bff817 	ldw	r2,-32(fp)
1000f2d0:	1885c83a 	sub	r2,r3,r2
1000f2d4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000f2d8:	e0bff617 	ldw	r2,-40(fp)
1000f2dc:	1000011e 	bne	r2,zero,1000f2e4 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
1000f2e0:	00001d06 	br	1000f358 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1000f2e4:	e0fffe17 	ldw	r3,-8(fp)
1000f2e8:	e0bff617 	ldw	r2,-40(fp)
1000f2ec:	1880022e 	bgeu	r3,r2,1000f2f8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
1000f2f0:	e0bffe17 	ldw	r2,-8(fp)
1000f2f4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000f2f8:	e0bff817 	ldw	r2,-32(fp)
1000f2fc:	10800e04 	addi	r2,r2,56
1000f300:	e0fffc17 	ldw	r3,-16(fp)
1000f304:	1885883a 	add	r2,r3,r2
1000f308:	e13ff517 	ldw	r4,-44(fp)
1000f30c:	100b883a 	mov	r5,r2
1000f310:	e1bff617 	ldw	r6,-40(fp)
1000f314:	0008b880 	call	10008b88 <memcpy>
      ptr   += n;
1000f318:	e0fff517 	ldw	r3,-44(fp)
1000f31c:	e0bff617 	ldw	r2,-40(fp)
1000f320:	1885883a 	add	r2,r3,r2
1000f324:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000f328:	e0fffe17 	ldw	r3,-8(fp)
1000f32c:	e0bff617 	ldw	r2,-40(fp)
1000f330:	1885c83a 	sub	r2,r3,r2
1000f334:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f338:	e0fff817 	ldw	r3,-32(fp)
1000f33c:	e0bff617 	ldw	r2,-40(fp)
1000f340:	1885883a 	add	r2,r3,r2
1000f344:	10c1ffcc 	andi	r3,r2,2047
1000f348:	e0bffc17 	ldw	r2,-16(fp)
1000f34c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000f350:	e0bffe17 	ldw	r2,-8(fp)
1000f354:	00bfce16 	blt	zero,r2,1000f290 <__alt_data_end+0xf800f290>

    /* If we read any data then return it */
    if (ptr != buffer)
1000f358:	e0fff517 	ldw	r3,-44(fp)
1000f35c:	e0bffd17 	ldw	r2,-12(fp)
1000f360:	18800126 	beq	r3,r2,1000f368 <altera_avalon_jtag_uart_read+0x104>
      break;
1000f364:	00001506 	br	1000f3bc <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000f368:	e0bfff17 	ldw	r2,-4(fp)
1000f36c:	1090000c 	andi	r2,r2,16384
1000f370:	10000126 	beq	r2,zero,1000f378 <altera_avalon_jtag_uart_read+0x114>
      break;
1000f374:	00001106 	br	1000f3bc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000f378:	0001883a 	nop
1000f37c:	e0bffc17 	ldw	r2,-16(fp)
1000f380:	10c00a17 	ldw	r3,40(r2)
1000f384:	e0bff717 	ldw	r2,-36(fp)
1000f388:	1880051e 	bne	r3,r2,1000f3a0 <altera_avalon_jtag_uart_read+0x13c>
1000f38c:	e0bffc17 	ldw	r2,-16(fp)
1000f390:	10c00917 	ldw	r3,36(r2)
1000f394:	e0bffc17 	ldw	r2,-16(fp)
1000f398:	10800117 	ldw	r2,4(r2)
1000f39c:	18bff736 	bltu	r3,r2,1000f37c <__alt_data_end+0xf800f37c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000f3a0:	e0bffc17 	ldw	r2,-16(fp)
1000f3a4:	10c00a17 	ldw	r3,40(r2)
1000f3a8:	e0bff717 	ldw	r2,-36(fp)
1000f3ac:	1880011e 	bne	r3,r2,1000f3b4 <altera_avalon_jtag_uart_read+0x150>
      break;
1000f3b0:	00000206 	br	1000f3bc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000f3b4:	e0bffe17 	ldw	r2,-8(fp)
1000f3b8:	00bfb516 	blt	zero,r2,1000f290 <__alt_data_end+0xf800f290>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000f3bc:	e0fff517 	ldw	r3,-44(fp)
1000f3c0:	e0bffd17 	ldw	r2,-12(fp)
1000f3c4:	18801826 	beq	r3,r2,1000f428 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f3c8:	0005303a 	rdctl	r2,status
1000f3cc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f3d0:	e0fffa17 	ldw	r3,-24(fp)
1000f3d4:	00bfff84 	movi	r2,-2
1000f3d8:	1884703a 	and	r2,r3,r2
1000f3dc:	1001703a 	wrctl	status,r2
  
  return context;
1000f3e0:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000f3e4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000f3e8:	e0bffc17 	ldw	r2,-16(fp)
1000f3ec:	10800817 	ldw	r2,32(r2)
1000f3f0:	10c00054 	ori	r3,r2,1
1000f3f4:	e0bffc17 	ldw	r2,-16(fp)
1000f3f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000f3fc:	e0bffc17 	ldw	r2,-16(fp)
1000f400:	10800017 	ldw	r2,0(r2)
1000f404:	10800104 	addi	r2,r2,4
1000f408:	1007883a 	mov	r3,r2
1000f40c:	e0bffc17 	ldw	r2,-16(fp)
1000f410:	10800817 	ldw	r2,32(r2)
1000f414:	18800035 	stwio	r2,0(r3)
1000f418:	e0bff917 	ldw	r2,-28(fp)
1000f41c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f420:	e0bffb17 	ldw	r2,-20(fp)
1000f424:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000f428:	e0fff517 	ldw	r3,-44(fp)
1000f42c:	e0bffd17 	ldw	r2,-12(fp)
1000f430:	18800426 	beq	r3,r2,1000f444 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
1000f434:	e0fff517 	ldw	r3,-44(fp)
1000f438:	e0bffd17 	ldw	r2,-12(fp)
1000f43c:	1885c83a 	sub	r2,r3,r2
1000f440:	00000606 	br	1000f45c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
1000f444:	e0bfff17 	ldw	r2,-4(fp)
1000f448:	1090000c 	andi	r2,r2,16384
1000f44c:	10000226 	beq	r2,zero,1000f458 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
1000f450:	00bffd44 	movi	r2,-11
1000f454:	00000106 	br	1000f45c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
1000f458:	00bffec4 	movi	r2,-5
}
1000f45c:	e037883a 	mov	sp,fp
1000f460:	dfc00117 	ldw	ra,4(sp)
1000f464:	df000017 	ldw	fp,0(sp)
1000f468:	dec00204 	addi	sp,sp,8
1000f46c:	f800283a 	ret

1000f470 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000f470:	defff304 	addi	sp,sp,-52
1000f474:	dfc00c15 	stw	ra,48(sp)
1000f478:	df000b15 	stw	fp,44(sp)
1000f47c:	df000b04 	addi	fp,sp,44
1000f480:	e13ffc15 	stw	r4,-16(fp)
1000f484:	e17ffd15 	stw	r5,-12(fp)
1000f488:	e1bffe15 	stw	r6,-8(fp)
1000f48c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000f490:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000f494:	e0bffd17 	ldw	r2,-12(fp)
1000f498:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000f49c:	00003806 	br	1000f580 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000f4a0:	e0bffc17 	ldw	r2,-16(fp)
1000f4a4:	10800c17 	ldw	r2,48(r2)
1000f4a8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1000f4ac:	e0bffc17 	ldw	r2,-16(fp)
1000f4b0:	10800d17 	ldw	r2,52(r2)
1000f4b4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000f4b8:	e0fff817 	ldw	r3,-32(fp)
1000f4bc:	e0bff517 	ldw	r2,-44(fp)
1000f4c0:	1880062e 	bgeu	r3,r2,1000f4dc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1000f4c4:	e0fff517 	ldw	r3,-44(fp)
1000f4c8:	e0bff817 	ldw	r2,-32(fp)
1000f4cc:	1885c83a 	sub	r2,r3,r2
1000f4d0:	10bfffc4 	addi	r2,r2,-1
1000f4d4:	e0bff615 	stw	r2,-40(fp)
1000f4d8:	00000b06 	br	1000f508 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1000f4dc:	e0bff517 	ldw	r2,-44(fp)
1000f4e0:	10000526 	beq	r2,zero,1000f4f8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000f4e4:	00c20004 	movi	r3,2048
1000f4e8:	e0bff817 	ldw	r2,-32(fp)
1000f4ec:	1885c83a 	sub	r2,r3,r2
1000f4f0:	e0bff615 	stw	r2,-40(fp)
1000f4f4:	00000406 	br	1000f508 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000f4f8:	00c1ffc4 	movi	r3,2047
1000f4fc:	e0bff817 	ldw	r2,-32(fp)
1000f500:	1885c83a 	sub	r2,r3,r2
1000f504:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000f508:	e0bff617 	ldw	r2,-40(fp)
1000f50c:	1000011e 	bne	r2,zero,1000f514 <altera_avalon_jtag_uart_write+0xa4>
        break;
1000f510:	00001d06 	br	1000f588 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
1000f514:	e0fffe17 	ldw	r3,-8(fp)
1000f518:	e0bff617 	ldw	r2,-40(fp)
1000f51c:	1880022e 	bgeu	r3,r2,1000f528 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
1000f520:	e0bffe17 	ldw	r2,-8(fp)
1000f524:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000f528:	e0bff817 	ldw	r2,-32(fp)
1000f52c:	10820e04 	addi	r2,r2,2104
1000f530:	e0fffc17 	ldw	r3,-16(fp)
1000f534:	1885883a 	add	r2,r3,r2
1000f538:	1009883a 	mov	r4,r2
1000f53c:	e17ffd17 	ldw	r5,-12(fp)
1000f540:	e1bff617 	ldw	r6,-40(fp)
1000f544:	0008b880 	call	10008b88 <memcpy>
      ptr   += n;
1000f548:	e0fffd17 	ldw	r3,-12(fp)
1000f54c:	e0bff617 	ldw	r2,-40(fp)
1000f550:	1885883a 	add	r2,r3,r2
1000f554:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000f558:	e0fffe17 	ldw	r3,-8(fp)
1000f55c:	e0bff617 	ldw	r2,-40(fp)
1000f560:	1885c83a 	sub	r2,r3,r2
1000f564:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f568:	e0fff817 	ldw	r3,-32(fp)
1000f56c:	e0bff617 	ldw	r2,-40(fp)
1000f570:	1885883a 	add	r2,r3,r2
1000f574:	10c1ffcc 	andi	r3,r2,2047
1000f578:	e0bffc17 	ldw	r2,-16(fp)
1000f57c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000f580:	e0bffe17 	ldw	r2,-8(fp)
1000f584:	00bfc616 	blt	zero,r2,1000f4a0 <__alt_data_end+0xf800f4a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f588:	0005303a 	rdctl	r2,status
1000f58c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f590:	e0fffa17 	ldw	r3,-24(fp)
1000f594:	00bfff84 	movi	r2,-2
1000f598:	1884703a 	and	r2,r3,r2
1000f59c:	1001703a 	wrctl	status,r2
  
  return context;
1000f5a0:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000f5a4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000f5a8:	e0bffc17 	ldw	r2,-16(fp)
1000f5ac:	10800817 	ldw	r2,32(r2)
1000f5b0:	10c00094 	ori	r3,r2,2
1000f5b4:	e0bffc17 	ldw	r2,-16(fp)
1000f5b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000f5bc:	e0bffc17 	ldw	r2,-16(fp)
1000f5c0:	10800017 	ldw	r2,0(r2)
1000f5c4:	10800104 	addi	r2,r2,4
1000f5c8:	1007883a 	mov	r3,r2
1000f5cc:	e0bffc17 	ldw	r2,-16(fp)
1000f5d0:	10800817 	ldw	r2,32(r2)
1000f5d4:	18800035 	stwio	r2,0(r3)
1000f5d8:	e0bff917 	ldw	r2,-28(fp)
1000f5dc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f5e0:	e0bffb17 	ldw	r2,-20(fp)
1000f5e4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000f5e8:	e0bffe17 	ldw	r2,-8(fp)
1000f5ec:	0080120e 	bge	zero,r2,1000f638 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
1000f5f0:	e0bfff17 	ldw	r2,-4(fp)
1000f5f4:	1090000c 	andi	r2,r2,16384
1000f5f8:	10000126 	beq	r2,zero,1000f600 <altera_avalon_jtag_uart_write+0x190>
        break;
1000f5fc:	00001006 	br	1000f640 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000f600:	0001883a 	nop
1000f604:	e0bffc17 	ldw	r2,-16(fp)
1000f608:	10c00d17 	ldw	r3,52(r2)
1000f60c:	e0bff517 	ldw	r2,-44(fp)
1000f610:	1880051e 	bne	r3,r2,1000f628 <altera_avalon_jtag_uart_write+0x1b8>
1000f614:	e0bffc17 	ldw	r2,-16(fp)
1000f618:	10c00917 	ldw	r3,36(r2)
1000f61c:	e0bffc17 	ldw	r2,-16(fp)
1000f620:	10800117 	ldw	r2,4(r2)
1000f624:	18bff736 	bltu	r3,r2,1000f604 <__alt_data_end+0xf800f604>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000f628:	e0bffc17 	ldw	r2,-16(fp)
1000f62c:	10800917 	ldw	r2,36(r2)
1000f630:	10000126 	beq	r2,zero,1000f638 <altera_avalon_jtag_uart_write+0x1c8>
         break;
1000f634:	00000206 	br	1000f640 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
1000f638:	e0bffe17 	ldw	r2,-8(fp)
1000f63c:	00bf9716 	blt	zero,r2,1000f49c <__alt_data_end+0xf800f49c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000f640:	e0fffd17 	ldw	r3,-12(fp)
1000f644:	e0bff717 	ldw	r2,-36(fp)
1000f648:	18800426 	beq	r3,r2,1000f65c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
1000f64c:	e0fffd17 	ldw	r3,-12(fp)
1000f650:	e0bff717 	ldw	r2,-36(fp)
1000f654:	1885c83a 	sub	r2,r3,r2
1000f658:	00000606 	br	1000f674 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
1000f65c:	e0bfff17 	ldw	r2,-4(fp)
1000f660:	1090000c 	andi	r2,r2,16384
1000f664:	10000226 	beq	r2,zero,1000f670 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
1000f668:	00bffd44 	movi	r2,-11
1000f66c:	00000106 	br	1000f674 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000f670:	00bffec4 	movi	r2,-5
}
1000f674:	e037883a 	mov	sp,fp
1000f678:	dfc00117 	ldw	ra,4(sp)
1000f67c:	df000017 	ldw	fp,0(sp)
1000f680:	dec00204 	addi	sp,sp,8
1000f684:	f800283a 	ret

1000f688 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000f688:	defff504 	addi	sp,sp,-44
1000f68c:	df000a15 	stw	fp,40(sp)
1000f690:	df000a04 	addi	fp,sp,40
1000f694:	e13ffc15 	stw	r4,-16(fp)
1000f698:	e17ffd15 	stw	r5,-12(fp)
1000f69c:	e1bffe15 	stw	r6,-8(fp)
1000f6a0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000f6a4:	e03ff615 	stw	zero,-40(fp)
1000f6a8:	00840074 	movhi	r2,4097
1000f6ac:	10908804 	addi	r2,r2,16928
1000f6b0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1000f6b4:	10003f26 	beq	r2,zero,1000f7b4 <alt_alarm_start+0x12c>
  {
    if (alarm)
1000f6b8:	e0bffc17 	ldw	r2,-16(fp)
1000f6bc:	10003b26 	beq	r2,zero,1000f7ac <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1000f6c0:	e0bffc17 	ldw	r2,-16(fp)
1000f6c4:	e0fffe17 	ldw	r3,-8(fp)
1000f6c8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000f6cc:	e0bffc17 	ldw	r2,-16(fp)
1000f6d0:	e0ffff17 	ldw	r3,-4(fp)
1000f6d4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f6d8:	0005303a 	rdctl	r2,status
1000f6dc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f6e0:	e0fff817 	ldw	r3,-32(fp)
1000f6e4:	00bfff84 	movi	r2,-2
1000f6e8:	1884703a 	and	r2,r3,r2
1000f6ec:	1001703a 	wrctl	status,r2
  
  return context;
1000f6f0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1000f6f4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000f6f8:	00840074 	movhi	r2,4097
1000f6fc:	10908904 	addi	r2,r2,16932
1000f700:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1000f704:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000f708:	e0fffd17 	ldw	r3,-12(fp)
1000f70c:	e0bff617 	ldw	r2,-40(fp)
1000f710:	1885883a 	add	r2,r3,r2
1000f714:	10c00044 	addi	r3,r2,1
1000f718:	e0bffc17 	ldw	r2,-16(fp)
1000f71c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000f720:	e0bffc17 	ldw	r2,-16(fp)
1000f724:	10c00217 	ldw	r3,8(r2)
1000f728:	e0bff617 	ldw	r2,-40(fp)
1000f72c:	1880042e 	bgeu	r3,r2,1000f740 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1000f730:	e0bffc17 	ldw	r2,-16(fp)
1000f734:	00c00044 	movi	r3,1
1000f738:	10c00405 	stb	r3,16(r2)
1000f73c:	00000206 	br	1000f748 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1000f740:	e0bffc17 	ldw	r2,-16(fp)
1000f744:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000f748:	e0fffc17 	ldw	r3,-16(fp)
1000f74c:	00840074 	movhi	r2,4097
1000f750:	1089b904 	addi	r2,r2,9956
1000f754:	e0bff915 	stw	r2,-28(fp)
1000f758:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000f75c:	e0bffa17 	ldw	r2,-24(fp)
1000f760:	e0fff917 	ldw	r3,-28(fp)
1000f764:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000f768:	e0bff917 	ldw	r2,-28(fp)
1000f76c:	10c00017 	ldw	r3,0(r2)
1000f770:	e0bffa17 	ldw	r2,-24(fp)
1000f774:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000f778:	e0bff917 	ldw	r2,-28(fp)
1000f77c:	10800017 	ldw	r2,0(r2)
1000f780:	e0fffa17 	ldw	r3,-24(fp)
1000f784:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000f788:	e0bff917 	ldw	r2,-28(fp)
1000f78c:	e0fffa17 	ldw	r3,-24(fp)
1000f790:	10c00015 	stw	r3,0(r2)
1000f794:	e0bff717 	ldw	r2,-36(fp)
1000f798:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f79c:	e0bffb17 	ldw	r2,-20(fp)
1000f7a0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000f7a4:	0005883a 	mov	r2,zero
1000f7a8:	00000306 	br	1000f7b8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1000f7ac:	00bffa84 	movi	r2,-22
1000f7b0:	00000106 	br	1000f7b8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1000f7b4:	00bfde84 	movi	r2,-134
  }
}
1000f7b8:	e037883a 	mov	sp,fp
1000f7bc:	df000017 	ldw	fp,0(sp)
1000f7c0:	dec00104 	addi	sp,sp,4
1000f7c4:	f800283a 	ret

1000f7c8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000f7c8:	deffff04 	addi	sp,sp,-4
1000f7cc:	df000015 	stw	fp,0(sp)
1000f7d0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000f7d4:	e037883a 	mov	sp,fp
1000f7d8:	df000017 	ldw	fp,0(sp)
1000f7dc:	dec00104 	addi	sp,sp,4
1000f7e0:	f800283a 	ret

1000f7e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f7e4:	defffe04 	addi	sp,sp,-8
1000f7e8:	dfc00115 	stw	ra,4(sp)
1000f7ec:	df000015 	stw	fp,0(sp)
1000f7f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f7f4:	00840074 	movhi	r2,4097
1000f7f8:	1089b604 	addi	r2,r2,9944
1000f7fc:	10800017 	ldw	r2,0(r2)
1000f800:	10000526 	beq	r2,zero,1000f818 <alt_get_errno+0x34>
1000f804:	00840074 	movhi	r2,4097
1000f808:	1089b604 	addi	r2,r2,9944
1000f80c:	10800017 	ldw	r2,0(r2)
1000f810:	103ee83a 	callr	r2
1000f814:	00000206 	br	1000f820 <alt_get_errno+0x3c>
1000f818:	00840074 	movhi	r2,4097
1000f81c:	10908304 	addi	r2,r2,16908
}
1000f820:	e037883a 	mov	sp,fp
1000f824:	dfc00117 	ldw	ra,4(sp)
1000f828:	df000017 	ldw	fp,0(sp)
1000f82c:	dec00204 	addi	sp,sp,8
1000f830:	f800283a 	ret

1000f834 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1000f834:	defffa04 	addi	sp,sp,-24
1000f838:	dfc00515 	stw	ra,20(sp)
1000f83c:	df000415 	stw	fp,16(sp)
1000f840:	df000404 	addi	fp,sp,16
1000f844:	e13ffe15 	stw	r4,-8(fp)
1000f848:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000f84c:	e0bffe17 	ldw	r2,-8(fp)
1000f850:	10000326 	beq	r2,zero,1000f860 <alt_dev_llist_insert+0x2c>
1000f854:	e0bffe17 	ldw	r2,-8(fp)
1000f858:	10800217 	ldw	r2,8(r2)
1000f85c:	1000061e 	bne	r2,zero,1000f878 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1000f860:	000f7e40 	call	1000f7e4 <alt_get_errno>
1000f864:	1007883a 	mov	r3,r2
1000f868:	00800584 	movi	r2,22
1000f86c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1000f870:	00bffa84 	movi	r2,-22
1000f874:	00001306 	br	1000f8c4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1000f878:	e0bffe17 	ldw	r2,-8(fp)
1000f87c:	e0ffff17 	ldw	r3,-4(fp)
1000f880:	e0fffc15 	stw	r3,-16(fp)
1000f884:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000f888:	e0bffd17 	ldw	r2,-12(fp)
1000f88c:	e0fffc17 	ldw	r3,-16(fp)
1000f890:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000f894:	e0bffc17 	ldw	r2,-16(fp)
1000f898:	10c00017 	ldw	r3,0(r2)
1000f89c:	e0bffd17 	ldw	r2,-12(fp)
1000f8a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000f8a4:	e0bffc17 	ldw	r2,-16(fp)
1000f8a8:	10800017 	ldw	r2,0(r2)
1000f8ac:	e0fffd17 	ldw	r3,-12(fp)
1000f8b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000f8b4:	e0bffc17 	ldw	r2,-16(fp)
1000f8b8:	e0fffd17 	ldw	r3,-12(fp)
1000f8bc:	10c00015 	stw	r3,0(r2)

  return 0;  
1000f8c0:	0005883a 	mov	r2,zero
}
1000f8c4:	e037883a 	mov	sp,fp
1000f8c8:	dfc00117 	ldw	ra,4(sp)
1000f8cc:	df000017 	ldw	fp,0(sp)
1000f8d0:	dec00204 	addi	sp,sp,8
1000f8d4:	f800283a 	ret

1000f8d8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1000f8d8:	defffd04 	addi	sp,sp,-12
1000f8dc:	dfc00215 	stw	ra,8(sp)
1000f8e0:	df000115 	stw	fp,4(sp)
1000f8e4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000f8e8:	00840074 	movhi	r2,4097
1000f8ec:	10823a04 	addi	r2,r2,2280
1000f8f0:	e0bfff15 	stw	r2,-4(fp)
1000f8f4:	00000606 	br	1000f910 <_do_ctors+0x38>
        (*ctor) (); 
1000f8f8:	e0bfff17 	ldw	r2,-4(fp)
1000f8fc:	10800017 	ldw	r2,0(r2)
1000f900:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000f904:	e0bfff17 	ldw	r2,-4(fp)
1000f908:	10bfff04 	addi	r2,r2,-4
1000f90c:	e0bfff15 	stw	r2,-4(fp)
1000f910:	e0ffff17 	ldw	r3,-4(fp)
1000f914:	00840074 	movhi	r2,4097
1000f918:	10823b04 	addi	r2,r2,2284
1000f91c:	18bff62e 	bgeu	r3,r2,1000f8f8 <__alt_data_end+0xf800f8f8>
        (*ctor) (); 
}
1000f920:	e037883a 	mov	sp,fp
1000f924:	dfc00117 	ldw	ra,4(sp)
1000f928:	df000017 	ldw	fp,0(sp)
1000f92c:	dec00204 	addi	sp,sp,8
1000f930:	f800283a 	ret

1000f934 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1000f934:	defffd04 	addi	sp,sp,-12
1000f938:	dfc00215 	stw	ra,8(sp)
1000f93c:	df000115 	stw	fp,4(sp)
1000f940:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000f944:	00840074 	movhi	r2,4097
1000f948:	10823a04 	addi	r2,r2,2280
1000f94c:	e0bfff15 	stw	r2,-4(fp)
1000f950:	00000606 	br	1000f96c <_do_dtors+0x38>
        (*dtor) (); 
1000f954:	e0bfff17 	ldw	r2,-4(fp)
1000f958:	10800017 	ldw	r2,0(r2)
1000f95c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000f960:	e0bfff17 	ldw	r2,-4(fp)
1000f964:	10bfff04 	addi	r2,r2,-4
1000f968:	e0bfff15 	stw	r2,-4(fp)
1000f96c:	e0ffff17 	ldw	r3,-4(fp)
1000f970:	00840074 	movhi	r2,4097
1000f974:	10823b04 	addi	r2,r2,2284
1000f978:	18bff62e 	bgeu	r3,r2,1000f954 <__alt_data_end+0xf800f954>
        (*dtor) (); 
}
1000f97c:	e037883a 	mov	sp,fp
1000f980:	dfc00117 	ldw	ra,4(sp)
1000f984:	df000017 	ldw	fp,0(sp)
1000f988:	dec00204 	addi	sp,sp,8
1000f98c:	f800283a 	ret

1000f990 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1000f990:	deffff04 	addi	sp,sp,-4
1000f994:	df000015 	stw	fp,0(sp)
1000f998:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1000f99c:	e037883a 	mov	sp,fp
1000f9a0:	df000017 	ldw	fp,0(sp)
1000f9a4:	dec00104 	addi	sp,sp,4
1000f9a8:	f800283a 	ret

1000f9ac <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000f9ac:	defff904 	addi	sp,sp,-28
1000f9b0:	dfc00615 	stw	ra,24(sp)
1000f9b4:	df000515 	stw	fp,20(sp)
1000f9b8:	df000504 	addi	fp,sp,20
1000f9bc:	e13ffc15 	stw	r4,-16(fp)
1000f9c0:	e17ffd15 	stw	r5,-12(fp)
1000f9c4:	e1bffe15 	stw	r6,-8(fp)
1000f9c8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1000f9cc:	e0800217 	ldw	r2,8(fp)
1000f9d0:	d8800015 	stw	r2,0(sp)
1000f9d4:	e13ffc17 	ldw	r4,-16(fp)
1000f9d8:	e17ffd17 	ldw	r5,-12(fp)
1000f9dc:	e1bffe17 	ldw	r6,-8(fp)
1000f9e0:	e1ffff17 	ldw	r7,-4(fp)
1000f9e4:	000fb8c0 	call	1000fb8c <alt_iic_isr_register>
}  
1000f9e8:	e037883a 	mov	sp,fp
1000f9ec:	dfc00117 	ldw	ra,4(sp)
1000f9f0:	df000017 	ldw	fp,0(sp)
1000f9f4:	dec00204 	addi	sp,sp,8
1000f9f8:	f800283a 	ret

1000f9fc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1000f9fc:	defff904 	addi	sp,sp,-28
1000fa00:	df000615 	stw	fp,24(sp)
1000fa04:	df000604 	addi	fp,sp,24
1000fa08:	e13ffe15 	stw	r4,-8(fp)
1000fa0c:	e17fff15 	stw	r5,-4(fp)
1000fa10:	e0bfff17 	ldw	r2,-4(fp)
1000fa14:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fa18:	0005303a 	rdctl	r2,status
1000fa1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fa20:	e0fffb17 	ldw	r3,-20(fp)
1000fa24:	00bfff84 	movi	r2,-2
1000fa28:	1884703a 	and	r2,r3,r2
1000fa2c:	1001703a 	wrctl	status,r2
  
  return context;
1000fa30:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000fa34:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1000fa38:	e0bffa17 	ldw	r2,-24(fp)
1000fa3c:	00c00044 	movi	r3,1
1000fa40:	1884983a 	sll	r2,r3,r2
1000fa44:	1007883a 	mov	r3,r2
1000fa48:	00840074 	movhi	r2,4097
1000fa4c:	10908704 	addi	r2,r2,16924
1000fa50:	10800017 	ldw	r2,0(r2)
1000fa54:	1886b03a 	or	r3,r3,r2
1000fa58:	00840074 	movhi	r2,4097
1000fa5c:	10908704 	addi	r2,r2,16924
1000fa60:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000fa64:	00840074 	movhi	r2,4097
1000fa68:	10908704 	addi	r2,r2,16924
1000fa6c:	10800017 	ldw	r2,0(r2)
1000fa70:	100170fa 	wrctl	ienable,r2
1000fa74:	e0bffc17 	ldw	r2,-16(fp)
1000fa78:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fa7c:	e0bffd17 	ldw	r2,-12(fp)
1000fa80:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000fa84:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1000fa88:	0001883a 	nop
}
1000fa8c:	e037883a 	mov	sp,fp
1000fa90:	df000017 	ldw	fp,0(sp)
1000fa94:	dec00104 	addi	sp,sp,4
1000fa98:	f800283a 	ret

1000fa9c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1000fa9c:	defff904 	addi	sp,sp,-28
1000faa0:	df000615 	stw	fp,24(sp)
1000faa4:	df000604 	addi	fp,sp,24
1000faa8:	e13ffe15 	stw	r4,-8(fp)
1000faac:	e17fff15 	stw	r5,-4(fp)
1000fab0:	e0bfff17 	ldw	r2,-4(fp)
1000fab4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fab8:	0005303a 	rdctl	r2,status
1000fabc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fac0:	e0fffb17 	ldw	r3,-20(fp)
1000fac4:	00bfff84 	movi	r2,-2
1000fac8:	1884703a 	and	r2,r3,r2
1000facc:	1001703a 	wrctl	status,r2
  
  return context;
1000fad0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000fad4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1000fad8:	e0bffa17 	ldw	r2,-24(fp)
1000fadc:	00c00044 	movi	r3,1
1000fae0:	1884983a 	sll	r2,r3,r2
1000fae4:	0084303a 	nor	r2,zero,r2
1000fae8:	1007883a 	mov	r3,r2
1000faec:	00840074 	movhi	r2,4097
1000faf0:	10908704 	addi	r2,r2,16924
1000faf4:	10800017 	ldw	r2,0(r2)
1000faf8:	1886703a 	and	r3,r3,r2
1000fafc:	00840074 	movhi	r2,4097
1000fb00:	10908704 	addi	r2,r2,16924
1000fb04:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000fb08:	00840074 	movhi	r2,4097
1000fb0c:	10908704 	addi	r2,r2,16924
1000fb10:	10800017 	ldw	r2,0(r2)
1000fb14:	100170fa 	wrctl	ienable,r2
1000fb18:	e0bffc17 	ldw	r2,-16(fp)
1000fb1c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fb20:	e0bffd17 	ldw	r2,-12(fp)
1000fb24:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000fb28:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1000fb2c:	0001883a 	nop
}
1000fb30:	e037883a 	mov	sp,fp
1000fb34:	df000017 	ldw	fp,0(sp)
1000fb38:	dec00104 	addi	sp,sp,4
1000fb3c:	f800283a 	ret

1000fb40 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1000fb40:	defffc04 	addi	sp,sp,-16
1000fb44:	df000315 	stw	fp,12(sp)
1000fb48:	df000304 	addi	fp,sp,12
1000fb4c:	e13ffe15 	stw	r4,-8(fp)
1000fb50:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1000fb54:	000530fa 	rdctl	r2,ienable
1000fb58:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1000fb5c:	e0bfff17 	ldw	r2,-4(fp)
1000fb60:	00c00044 	movi	r3,1
1000fb64:	1884983a 	sll	r2,r3,r2
1000fb68:	1007883a 	mov	r3,r2
1000fb6c:	e0bffd17 	ldw	r2,-12(fp)
1000fb70:	1884703a 	and	r2,r3,r2
1000fb74:	1004c03a 	cmpne	r2,r2,zero
1000fb78:	10803fcc 	andi	r2,r2,255
}
1000fb7c:	e037883a 	mov	sp,fp
1000fb80:	df000017 	ldw	fp,0(sp)
1000fb84:	dec00104 	addi	sp,sp,4
1000fb88:	f800283a 	ret

1000fb8c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000fb8c:	defff504 	addi	sp,sp,-44
1000fb90:	dfc00a15 	stw	ra,40(sp)
1000fb94:	df000915 	stw	fp,36(sp)
1000fb98:	df000904 	addi	fp,sp,36
1000fb9c:	e13ffc15 	stw	r4,-16(fp)
1000fba0:	e17ffd15 	stw	r5,-12(fp)
1000fba4:	e1bffe15 	stw	r6,-8(fp)
1000fba8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1000fbac:	00bffa84 	movi	r2,-22
1000fbb0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1000fbb4:	e0bffd17 	ldw	r2,-12(fp)
1000fbb8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1000fbbc:	e0bff817 	ldw	r2,-32(fp)
1000fbc0:	10800808 	cmpgei	r2,r2,32
1000fbc4:	1000271e 	bne	r2,zero,1000fc64 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fbc8:	0005303a 	rdctl	r2,status
1000fbcc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fbd0:	e0fffa17 	ldw	r3,-24(fp)
1000fbd4:	00bfff84 	movi	r2,-2
1000fbd8:	1884703a 	and	r2,r3,r2
1000fbdc:	1001703a 	wrctl	status,r2
  
  return context;
1000fbe0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1000fbe4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
1000fbe8:	00840074 	movhi	r2,4097
1000fbec:	10912504 	addi	r2,r2,17556
1000fbf0:	e0fff817 	ldw	r3,-32(fp)
1000fbf4:	180690fa 	slli	r3,r3,3
1000fbf8:	10c5883a 	add	r2,r2,r3
1000fbfc:	e0fffe17 	ldw	r3,-8(fp)
1000fc00:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1000fc04:	00840074 	movhi	r2,4097
1000fc08:	10912504 	addi	r2,r2,17556
1000fc0c:	e0fff817 	ldw	r3,-32(fp)
1000fc10:	180690fa 	slli	r3,r3,3
1000fc14:	10c5883a 	add	r2,r2,r3
1000fc18:	10800104 	addi	r2,r2,4
1000fc1c:	e0ffff17 	ldw	r3,-4(fp)
1000fc20:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1000fc24:	e0bffe17 	ldw	r2,-8(fp)
1000fc28:	10000526 	beq	r2,zero,1000fc40 <alt_iic_isr_register+0xb4>
1000fc2c:	e0bff817 	ldw	r2,-32(fp)
1000fc30:	e13ffc17 	ldw	r4,-16(fp)
1000fc34:	100b883a 	mov	r5,r2
1000fc38:	000f9fc0 	call	1000f9fc <alt_ic_irq_enable>
1000fc3c:	00000406 	br	1000fc50 <alt_iic_isr_register+0xc4>
1000fc40:	e0bff817 	ldw	r2,-32(fp)
1000fc44:	e13ffc17 	ldw	r4,-16(fp)
1000fc48:	100b883a 	mov	r5,r2
1000fc4c:	000fa9c0 	call	1000fa9c <alt_ic_irq_disable>
1000fc50:	e0bff715 	stw	r2,-36(fp)
1000fc54:	e0bff917 	ldw	r2,-28(fp)
1000fc58:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fc5c:	e0bffb17 	ldw	r2,-20(fp)
1000fc60:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1000fc64:	e0bff717 	ldw	r2,-36(fp)
}
1000fc68:	e037883a 	mov	sp,fp
1000fc6c:	dfc00117 	ldw	ra,4(sp)
1000fc70:	df000017 	ldw	fp,0(sp)
1000fc74:	dec00204 	addi	sp,sp,8
1000fc78:	f800283a 	ret

1000fc7c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1000fc7c:	defff804 	addi	sp,sp,-32
1000fc80:	dfc00715 	stw	ra,28(sp)
1000fc84:	df000615 	stw	fp,24(sp)
1000fc88:	dc000515 	stw	r16,20(sp)
1000fc8c:	df000604 	addi	fp,sp,24
1000fc90:	e13ffb15 	stw	r4,-20(fp)
1000fc94:	e17ffc15 	stw	r5,-16(fp)
1000fc98:	e1bffd15 	stw	r6,-12(fp)
1000fc9c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
1000fca0:	e13ffc17 	ldw	r4,-16(fp)
1000fca4:	e17ffd17 	ldw	r5,-12(fp)
1000fca8:	e1bffe17 	ldw	r6,-8(fp)
1000fcac:	000ff180 	call	1000ff18 <open>
1000fcb0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1000fcb4:	e0bffa17 	ldw	r2,-24(fp)
1000fcb8:	10002216 	blt	r2,zero,1000fd44 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1000fcbc:	04040074 	movhi	r16,4097
1000fcc0:	84053304 	addi	r16,r16,5324
1000fcc4:	e0bffa17 	ldw	r2,-24(fp)
1000fcc8:	1009883a 	mov	r4,r2
1000fccc:	01400304 	movi	r5,12
1000fcd0:	00024fc0 	call	100024fc <__mulsi3>
1000fcd4:	8085883a 	add	r2,r16,r2
1000fcd8:	10c00017 	ldw	r3,0(r2)
1000fcdc:	e0bffb17 	ldw	r2,-20(fp)
1000fce0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1000fce4:	04040074 	movhi	r16,4097
1000fce8:	84053304 	addi	r16,r16,5324
1000fcec:	e0bffa17 	ldw	r2,-24(fp)
1000fcf0:	1009883a 	mov	r4,r2
1000fcf4:	01400304 	movi	r5,12
1000fcf8:	00024fc0 	call	100024fc <__mulsi3>
1000fcfc:	8085883a 	add	r2,r16,r2
1000fd00:	10800104 	addi	r2,r2,4
1000fd04:	10c00017 	ldw	r3,0(r2)
1000fd08:	e0bffb17 	ldw	r2,-20(fp)
1000fd0c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1000fd10:	04040074 	movhi	r16,4097
1000fd14:	84053304 	addi	r16,r16,5324
1000fd18:	e0bffa17 	ldw	r2,-24(fp)
1000fd1c:	1009883a 	mov	r4,r2
1000fd20:	01400304 	movi	r5,12
1000fd24:	00024fc0 	call	100024fc <__mulsi3>
1000fd28:	8085883a 	add	r2,r16,r2
1000fd2c:	10800204 	addi	r2,r2,8
1000fd30:	10c00017 	ldw	r3,0(r2)
1000fd34:	e0bffb17 	ldw	r2,-20(fp)
1000fd38:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1000fd3c:	e13ffa17 	ldw	r4,-24(fp)
1000fd40:	000e9080 	call	1000e908 <alt_release_fd>
  }
} 
1000fd44:	e6ffff04 	addi	sp,fp,-4
1000fd48:	dfc00217 	ldw	ra,8(sp)
1000fd4c:	df000117 	ldw	fp,4(sp)
1000fd50:	dc000017 	ldw	r16,0(sp)
1000fd54:	dec00304 	addi	sp,sp,12
1000fd58:	f800283a 	ret

1000fd5c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1000fd5c:	defffb04 	addi	sp,sp,-20
1000fd60:	dfc00415 	stw	ra,16(sp)
1000fd64:	df000315 	stw	fp,12(sp)
1000fd68:	df000304 	addi	fp,sp,12
1000fd6c:	e13ffd15 	stw	r4,-12(fp)
1000fd70:	e17ffe15 	stw	r5,-8(fp)
1000fd74:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1000fd78:	01040074 	movhi	r4,4097
1000fd7c:	21053604 	addi	r4,r4,5336
1000fd80:	e17ffd17 	ldw	r5,-12(fp)
1000fd84:	01800044 	movi	r6,1
1000fd88:	01c07fc4 	movi	r7,511
1000fd8c:	000fc7c0 	call	1000fc7c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1000fd90:	01040074 	movhi	r4,4097
1000fd94:	21053304 	addi	r4,r4,5324
1000fd98:	e17ffe17 	ldw	r5,-8(fp)
1000fd9c:	000d883a 	mov	r6,zero
1000fda0:	01c07fc4 	movi	r7,511
1000fda4:	000fc7c0 	call	1000fc7c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1000fda8:	01040074 	movhi	r4,4097
1000fdac:	21053904 	addi	r4,r4,5348
1000fdb0:	e17fff17 	ldw	r5,-4(fp)
1000fdb4:	01800044 	movi	r6,1
1000fdb8:	01c07fc4 	movi	r7,511
1000fdbc:	000fc7c0 	call	1000fc7c <alt_open_fd>
}  
1000fdc0:	e037883a 	mov	sp,fp
1000fdc4:	dfc00117 	ldw	ra,4(sp)
1000fdc8:	df000017 	ldw	fp,0(sp)
1000fdcc:	dec00204 	addi	sp,sp,8
1000fdd0:	f800283a 	ret

1000fdd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fdd4:	defffe04 	addi	sp,sp,-8
1000fdd8:	dfc00115 	stw	ra,4(sp)
1000fddc:	df000015 	stw	fp,0(sp)
1000fde0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fde4:	00840074 	movhi	r2,4097
1000fde8:	1089b604 	addi	r2,r2,9944
1000fdec:	10800017 	ldw	r2,0(r2)
1000fdf0:	10000526 	beq	r2,zero,1000fe08 <alt_get_errno+0x34>
1000fdf4:	00840074 	movhi	r2,4097
1000fdf8:	1089b604 	addi	r2,r2,9944
1000fdfc:	10800017 	ldw	r2,0(r2)
1000fe00:	103ee83a 	callr	r2
1000fe04:	00000206 	br	1000fe10 <alt_get_errno+0x3c>
1000fe08:	00840074 	movhi	r2,4097
1000fe0c:	10908304 	addi	r2,r2,16908
}
1000fe10:	e037883a 	mov	sp,fp
1000fe14:	dfc00117 	ldw	ra,4(sp)
1000fe18:	df000017 	ldw	fp,0(sp)
1000fe1c:	dec00204 	addi	sp,sp,8
1000fe20:	f800283a 	ret

1000fe24 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1000fe24:	defffb04 	addi	sp,sp,-20
1000fe28:	dfc00415 	stw	ra,16(sp)
1000fe2c:	df000315 	stw	fp,12(sp)
1000fe30:	dc000215 	stw	r16,8(sp)
1000fe34:	df000304 	addi	fp,sp,12
1000fe38:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1000fe3c:	e0bffe17 	ldw	r2,-8(fp)
1000fe40:	10800217 	ldw	r2,8(r2)
1000fe44:	10d00034 	orhi	r3,r2,16384
1000fe48:	e0bffe17 	ldw	r2,-8(fp)
1000fe4c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000fe50:	e03ffd15 	stw	zero,-12(fp)
1000fe54:	00002306 	br	1000fee4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000fe58:	04040074 	movhi	r16,4097
1000fe5c:	84053304 	addi	r16,r16,5324
1000fe60:	e0bffd17 	ldw	r2,-12(fp)
1000fe64:	1009883a 	mov	r4,r2
1000fe68:	01400304 	movi	r5,12
1000fe6c:	00024fc0 	call	100024fc <__mulsi3>
1000fe70:	8085883a 	add	r2,r16,r2
1000fe74:	10c00017 	ldw	r3,0(r2)
1000fe78:	e0bffe17 	ldw	r2,-8(fp)
1000fe7c:	10800017 	ldw	r2,0(r2)
1000fe80:	1880151e 	bne	r3,r2,1000fed8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000fe84:	04040074 	movhi	r16,4097
1000fe88:	84053304 	addi	r16,r16,5324
1000fe8c:	e0bffd17 	ldw	r2,-12(fp)
1000fe90:	1009883a 	mov	r4,r2
1000fe94:	01400304 	movi	r5,12
1000fe98:	00024fc0 	call	100024fc <__mulsi3>
1000fe9c:	8085883a 	add	r2,r16,r2
1000fea0:	10800204 	addi	r2,r2,8
1000fea4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000fea8:	10000b0e 	bge	r2,zero,1000fed8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1000feac:	e13ffd17 	ldw	r4,-12(fp)
1000feb0:	01400304 	movi	r5,12
1000feb4:	00024fc0 	call	100024fc <__mulsi3>
1000feb8:	1007883a 	mov	r3,r2
1000febc:	00840074 	movhi	r2,4097
1000fec0:	10853304 	addi	r2,r2,5324
1000fec4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000fec8:	e0bffe17 	ldw	r2,-8(fp)
1000fecc:	18800226 	beq	r3,r2,1000fed8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1000fed0:	00bffcc4 	movi	r2,-13
1000fed4:	00000a06 	br	1000ff00 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000fed8:	e0bffd17 	ldw	r2,-12(fp)
1000fedc:	10800044 	addi	r2,r2,1
1000fee0:	e0bffd15 	stw	r2,-12(fp)
1000fee4:	00840074 	movhi	r2,4097
1000fee8:	1089b504 	addi	r2,r2,9940
1000feec:	10800017 	ldw	r2,0(r2)
1000fef0:	1007883a 	mov	r3,r2
1000fef4:	e0bffd17 	ldw	r2,-12(fp)
1000fef8:	18bfd72e 	bgeu	r3,r2,1000fe58 <__alt_data_end+0xf800fe58>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1000fefc:	0005883a 	mov	r2,zero
}
1000ff00:	e6ffff04 	addi	sp,fp,-4
1000ff04:	dfc00217 	ldw	ra,8(sp)
1000ff08:	df000117 	ldw	fp,4(sp)
1000ff0c:	dc000017 	ldw	r16,0(sp)
1000ff10:	dec00304 	addi	sp,sp,12
1000ff14:	f800283a 	ret

1000ff18 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1000ff18:	defff604 	addi	sp,sp,-40
1000ff1c:	dfc00915 	stw	ra,36(sp)
1000ff20:	df000815 	stw	fp,32(sp)
1000ff24:	df000804 	addi	fp,sp,32
1000ff28:	e13ffd15 	stw	r4,-12(fp)
1000ff2c:	e17ffe15 	stw	r5,-8(fp)
1000ff30:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1000ff34:	00bfffc4 	movi	r2,-1
1000ff38:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1000ff3c:	00bffb44 	movi	r2,-19
1000ff40:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1000ff44:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1000ff48:	e13ffd17 	ldw	r4,-12(fp)
1000ff4c:	01440074 	movhi	r5,4097
1000ff50:	2949b304 	addi	r5,r5,9932
1000ff54:	00102340 	call	10010234 <alt_find_dev>
1000ff58:	e0bff815 	stw	r2,-32(fp)
1000ff5c:	e0bff817 	ldw	r2,-32(fp)
1000ff60:	1000051e 	bne	r2,zero,1000ff78 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1000ff64:	e13ffd17 	ldw	r4,-12(fp)
1000ff68:	00102c40 	call	100102c4 <alt_find_file>
1000ff6c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1000ff70:	00800044 	movi	r2,1
1000ff74:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1000ff78:	e0bff817 	ldw	r2,-32(fp)
1000ff7c:	10002b26 	beq	r2,zero,1001002c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
1000ff80:	e13ff817 	ldw	r4,-32(fp)
1000ff84:	00103d80 	call	100103d8 <alt_get_fd>
1000ff88:	e0bff915 	stw	r2,-28(fp)
1000ff8c:	e0bff917 	ldw	r2,-28(fp)
1000ff90:	1000030e 	bge	r2,zero,1000ffa0 <open+0x88>
    {
      status = index;
1000ff94:	e0bff917 	ldw	r2,-28(fp)
1000ff98:	e0bffa15 	stw	r2,-24(fp)
1000ff9c:	00002506 	br	10010034 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
1000ffa0:	e13ff917 	ldw	r4,-28(fp)
1000ffa4:	01400304 	movi	r5,12
1000ffa8:	00024fc0 	call	100024fc <__mulsi3>
1000ffac:	1007883a 	mov	r3,r2
1000ffb0:	00840074 	movhi	r2,4097
1000ffb4:	10853304 	addi	r2,r2,5324
1000ffb8:	1885883a 	add	r2,r3,r2
1000ffbc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1000ffc0:	e0fffe17 	ldw	r3,-8(fp)
1000ffc4:	00900034 	movhi	r2,16384
1000ffc8:	10bfffc4 	addi	r2,r2,-1
1000ffcc:	1886703a 	and	r3,r3,r2
1000ffd0:	e0bffc17 	ldw	r2,-16(fp)
1000ffd4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1000ffd8:	e0bffb17 	ldw	r2,-20(fp)
1000ffdc:	1000051e 	bne	r2,zero,1000fff4 <open+0xdc>
1000ffe0:	e13ffc17 	ldw	r4,-16(fp)
1000ffe4:	000fe240 	call	1000fe24 <alt_file_locked>
1000ffe8:	e0bffa15 	stw	r2,-24(fp)
1000ffec:	e0bffa17 	ldw	r2,-24(fp)
1000fff0:	10001016 	blt	r2,zero,10010034 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1000fff4:	e0bff817 	ldw	r2,-32(fp)
1000fff8:	10800317 	ldw	r2,12(r2)
1000fffc:	10000826 	beq	r2,zero,10010020 <open+0x108>
10010000:	e0bff817 	ldw	r2,-32(fp)
10010004:	10800317 	ldw	r2,12(r2)
10010008:	e13ffc17 	ldw	r4,-16(fp)
1001000c:	e17ffd17 	ldw	r5,-12(fp)
10010010:	e1bffe17 	ldw	r6,-8(fp)
10010014:	e1ffff17 	ldw	r7,-4(fp)
10010018:	103ee83a 	callr	r2
1001001c:	00000106 	br	10010024 <open+0x10c>
10010020:	0005883a 	mov	r2,zero
10010024:	e0bffa15 	stw	r2,-24(fp)
10010028:	00000206 	br	10010034 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
1001002c:	00bffb44 	movi	r2,-19
10010030:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10010034:	e0bffa17 	ldw	r2,-24(fp)
10010038:	1000090e 	bge	r2,zero,10010060 <open+0x148>
  {
    alt_release_fd (index);  
1001003c:	e13ff917 	ldw	r4,-28(fp)
10010040:	000e9080 	call	1000e908 <alt_release_fd>
    ALT_ERRNO = -status;
10010044:	000fdd40 	call	1000fdd4 <alt_get_errno>
10010048:	1007883a 	mov	r3,r2
1001004c:	e0bffa17 	ldw	r2,-24(fp)
10010050:	0085c83a 	sub	r2,zero,r2
10010054:	18800015 	stw	r2,0(r3)
    return -1;
10010058:	00bfffc4 	movi	r2,-1
1001005c:	00000106 	br	10010064 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10010060:	e0bff917 	ldw	r2,-28(fp)
}
10010064:	e037883a 	mov	sp,fp
10010068:	dfc00117 	ldw	ra,4(sp)
1001006c:	df000017 	ldw	fp,0(sp)
10010070:	dec00204 	addi	sp,sp,8
10010074:	f800283a 	ret

10010078 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10010078:	defffa04 	addi	sp,sp,-24
1001007c:	df000515 	stw	fp,20(sp)
10010080:	df000504 	addi	fp,sp,20
10010084:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010088:	0005303a 	rdctl	r2,status
1001008c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010090:	e0fffc17 	ldw	r3,-16(fp)
10010094:	00bfff84 	movi	r2,-2
10010098:	1884703a 	and	r2,r3,r2
1001009c:	1001703a 	wrctl	status,r2
  
  return context;
100100a0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
100100a4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
100100a8:	e0bfff17 	ldw	r2,-4(fp)
100100ac:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
100100b0:	e0bffd17 	ldw	r2,-12(fp)
100100b4:	10800017 	ldw	r2,0(r2)
100100b8:	e0fffd17 	ldw	r3,-12(fp)
100100bc:	18c00117 	ldw	r3,4(r3)
100100c0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
100100c4:	e0bffd17 	ldw	r2,-12(fp)
100100c8:	10800117 	ldw	r2,4(r2)
100100cc:	e0fffd17 	ldw	r3,-12(fp)
100100d0:	18c00017 	ldw	r3,0(r3)
100100d4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
100100d8:	e0bffd17 	ldw	r2,-12(fp)
100100dc:	e0fffd17 	ldw	r3,-12(fp)
100100e0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
100100e4:	e0bffd17 	ldw	r2,-12(fp)
100100e8:	e0fffd17 	ldw	r3,-12(fp)
100100ec:	10c00015 	stw	r3,0(r2)
100100f0:	e0bffb17 	ldw	r2,-20(fp)
100100f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100100f8:	e0bffe17 	ldw	r2,-8(fp)
100100fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10010100:	e037883a 	mov	sp,fp
10010104:	df000017 	ldw	fp,0(sp)
10010108:	dec00104 	addi	sp,sp,4
1001010c:	f800283a 	ret

10010110 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10010110:	defffb04 	addi	sp,sp,-20
10010114:	dfc00415 	stw	ra,16(sp)
10010118:	df000315 	stw	fp,12(sp)
1001011c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10010120:	d0a00e17 	ldw	r2,-32712(gp)
10010124:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10010128:	d0a6de17 	ldw	r2,-25736(gp)
1001012c:	10800044 	addi	r2,r2,1
10010130:	d0a6de15 	stw	r2,-25736(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10010134:	00002e06 	br	100101f0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10010138:	e0bffd17 	ldw	r2,-12(fp)
1001013c:	10800017 	ldw	r2,0(r2)
10010140:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10010144:	e0bffd17 	ldw	r2,-12(fp)
10010148:	10800403 	ldbu	r2,16(r2)
1001014c:	10803fcc 	andi	r2,r2,255
10010150:	10000426 	beq	r2,zero,10010164 <alt_tick+0x54>
10010154:	d0a6de17 	ldw	r2,-25736(gp)
10010158:	1000021e 	bne	r2,zero,10010164 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1001015c:	e0bffd17 	ldw	r2,-12(fp)
10010160:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10010164:	e0bffd17 	ldw	r2,-12(fp)
10010168:	10800217 	ldw	r2,8(r2)
1001016c:	d0e6de17 	ldw	r3,-25736(gp)
10010170:	18801d36 	bltu	r3,r2,100101e8 <alt_tick+0xd8>
10010174:	e0bffd17 	ldw	r2,-12(fp)
10010178:	10800403 	ldbu	r2,16(r2)
1001017c:	10803fcc 	andi	r2,r2,255
10010180:	1000191e 	bne	r2,zero,100101e8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10010184:	e0bffd17 	ldw	r2,-12(fp)
10010188:	10800317 	ldw	r2,12(r2)
1001018c:	e0fffd17 	ldw	r3,-12(fp)
10010190:	18c00517 	ldw	r3,20(r3)
10010194:	1809883a 	mov	r4,r3
10010198:	103ee83a 	callr	r2
1001019c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
100101a0:	e0bfff17 	ldw	r2,-4(fp)
100101a4:	1000031e 	bne	r2,zero,100101b4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
100101a8:	e13ffd17 	ldw	r4,-12(fp)
100101ac:	00100780 	call	10010078 <alt_alarm_stop>
100101b0:	00000d06 	br	100101e8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
100101b4:	e0bffd17 	ldw	r2,-12(fp)
100101b8:	10c00217 	ldw	r3,8(r2)
100101bc:	e0bfff17 	ldw	r2,-4(fp)
100101c0:	1887883a 	add	r3,r3,r2
100101c4:	e0bffd17 	ldw	r2,-12(fp)
100101c8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
100101cc:	e0bffd17 	ldw	r2,-12(fp)
100101d0:	10c00217 	ldw	r3,8(r2)
100101d4:	d0a6de17 	ldw	r2,-25736(gp)
100101d8:	1880032e 	bgeu	r3,r2,100101e8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100101dc:	e0bffd17 	ldw	r2,-12(fp)
100101e0:	00c00044 	movi	r3,1
100101e4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
100101e8:	e0bffe17 	ldw	r2,-8(fp)
100101ec:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100101f0:	e0fffd17 	ldw	r3,-12(fp)
100101f4:	d0a00e04 	addi	r2,gp,-32712
100101f8:	18bfcf1e 	bne	r3,r2,10010138 <__alt_data_end+0xf8010138>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100101fc:	0001883a 	nop
}
10010200:	e037883a 	mov	sp,fp
10010204:	dfc00117 	ldw	ra,4(sp)
10010208:	df000017 	ldw	fp,0(sp)
1001020c:	dec00204 	addi	sp,sp,8
10010210:	f800283a 	ret

10010214 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10010214:	deffff04 	addi	sp,sp,-4
10010218:	df000015 	stw	fp,0(sp)
1001021c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10010220:	000170fa 	wrctl	ienable,zero
}
10010224:	e037883a 	mov	sp,fp
10010228:	df000017 	ldw	fp,0(sp)
1001022c:	dec00104 	addi	sp,sp,4
10010230:	f800283a 	ret

10010234 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10010234:	defffa04 	addi	sp,sp,-24
10010238:	dfc00515 	stw	ra,20(sp)
1001023c:	df000415 	stw	fp,16(sp)
10010240:	df000404 	addi	fp,sp,16
10010244:	e13ffe15 	stw	r4,-8(fp)
10010248:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1001024c:	e0bfff17 	ldw	r2,-4(fp)
10010250:	10800017 	ldw	r2,0(r2)
10010254:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10010258:	e13ffe17 	ldw	r4,-8(fp)
1001025c:	000a0d40 	call	1000a0d4 <strlen>
10010260:	10800044 	addi	r2,r2,1
10010264:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10010268:	00000d06 	br	100102a0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1001026c:	e0bffc17 	ldw	r2,-16(fp)
10010270:	10c00217 	ldw	r3,8(r2)
10010274:	e0bffd17 	ldw	r2,-12(fp)
10010278:	1809883a 	mov	r4,r3
1001027c:	e17ffe17 	ldw	r5,-8(fp)
10010280:	100d883a 	mov	r6,r2
10010284:	00105940 	call	10010594 <memcmp>
10010288:	1000021e 	bne	r2,zero,10010294 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1001028c:	e0bffc17 	ldw	r2,-16(fp)
10010290:	00000706 	br	100102b0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10010294:	e0bffc17 	ldw	r2,-16(fp)
10010298:	10800017 	ldw	r2,0(r2)
1001029c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100102a0:	e0fffc17 	ldw	r3,-16(fp)
100102a4:	e0bfff17 	ldw	r2,-4(fp)
100102a8:	18bff01e 	bne	r3,r2,1001026c <__alt_data_end+0xf801026c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
100102ac:	0005883a 	mov	r2,zero
}
100102b0:	e037883a 	mov	sp,fp
100102b4:	dfc00117 	ldw	ra,4(sp)
100102b8:	df000017 	ldw	fp,0(sp)
100102bc:	dec00204 	addi	sp,sp,8
100102c0:	f800283a 	ret

100102c4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100102c4:	defffb04 	addi	sp,sp,-20
100102c8:	dfc00415 	stw	ra,16(sp)
100102cc:	df000315 	stw	fp,12(sp)
100102d0:	df000304 	addi	fp,sp,12
100102d4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100102d8:	00840074 	movhi	r2,4097
100102dc:	1089b104 	addi	r2,r2,9924
100102e0:	10800017 	ldw	r2,0(r2)
100102e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100102e8:	00003106 	br	100103b0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
100102ec:	e0bffd17 	ldw	r2,-12(fp)
100102f0:	10800217 	ldw	r2,8(r2)
100102f4:	1009883a 	mov	r4,r2
100102f8:	000a0d40 	call	1000a0d4 <strlen>
100102fc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10010300:	e0bffd17 	ldw	r2,-12(fp)
10010304:	10c00217 	ldw	r3,8(r2)
10010308:	e0bffe17 	ldw	r2,-8(fp)
1001030c:	10bfffc4 	addi	r2,r2,-1
10010310:	1885883a 	add	r2,r3,r2
10010314:	10800003 	ldbu	r2,0(r2)
10010318:	10803fcc 	andi	r2,r2,255
1001031c:	1080201c 	xori	r2,r2,128
10010320:	10bfe004 	addi	r2,r2,-128
10010324:	10800bd8 	cmpnei	r2,r2,47
10010328:	1000031e 	bne	r2,zero,10010338 <alt_find_file+0x74>
    {
      len -= 1;
1001032c:	e0bffe17 	ldw	r2,-8(fp)
10010330:	10bfffc4 	addi	r2,r2,-1
10010334:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10010338:	e0bffe17 	ldw	r2,-8(fp)
1001033c:	e0ffff17 	ldw	r3,-4(fp)
10010340:	1885883a 	add	r2,r3,r2
10010344:	10800003 	ldbu	r2,0(r2)
10010348:	10803fcc 	andi	r2,r2,255
1001034c:	1080201c 	xori	r2,r2,128
10010350:	10bfe004 	addi	r2,r2,-128
10010354:	10800be0 	cmpeqi	r2,r2,47
10010358:	1000081e 	bne	r2,zero,1001037c <alt_find_file+0xb8>
1001035c:	e0bffe17 	ldw	r2,-8(fp)
10010360:	e0ffff17 	ldw	r3,-4(fp)
10010364:	1885883a 	add	r2,r3,r2
10010368:	10800003 	ldbu	r2,0(r2)
1001036c:	10803fcc 	andi	r2,r2,255
10010370:	1080201c 	xori	r2,r2,128
10010374:	10bfe004 	addi	r2,r2,-128
10010378:	10000a1e 	bne	r2,zero,100103a4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
1001037c:	e0bffd17 	ldw	r2,-12(fp)
10010380:	10c00217 	ldw	r3,8(r2)
10010384:	e0bffe17 	ldw	r2,-8(fp)
10010388:	1809883a 	mov	r4,r3
1001038c:	e17fff17 	ldw	r5,-4(fp)
10010390:	100d883a 	mov	r6,r2
10010394:	00105940 	call	10010594 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10010398:	1000021e 	bne	r2,zero,100103a4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1001039c:	e0bffd17 	ldw	r2,-12(fp)
100103a0:	00000806 	br	100103c4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
100103a4:	e0bffd17 	ldw	r2,-12(fp)
100103a8:	10800017 	ldw	r2,0(r2)
100103ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100103b0:	e0fffd17 	ldw	r3,-12(fp)
100103b4:	00840074 	movhi	r2,4097
100103b8:	1089b104 	addi	r2,r2,9924
100103bc:	18bfcb1e 	bne	r3,r2,100102ec <__alt_data_end+0xf80102ec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
100103c0:	0005883a 	mov	r2,zero
}
100103c4:	e037883a 	mov	sp,fp
100103c8:	dfc00117 	ldw	ra,4(sp)
100103cc:	df000017 	ldw	fp,0(sp)
100103d0:	dec00204 	addi	sp,sp,8
100103d4:	f800283a 	ret

100103d8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
100103d8:	defffa04 	addi	sp,sp,-24
100103dc:	dfc00515 	stw	ra,20(sp)
100103e0:	df000415 	stw	fp,16(sp)
100103e4:	dc000315 	stw	r16,12(sp)
100103e8:	df000404 	addi	fp,sp,16
100103ec:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
100103f0:	00bffa04 	movi	r2,-24
100103f4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100103f8:	e03ffc15 	stw	zero,-16(fp)
100103fc:	00002106 	br	10010484 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10010400:	04040074 	movhi	r16,4097
10010404:	84053304 	addi	r16,r16,5324
10010408:	e0bffc17 	ldw	r2,-16(fp)
1001040c:	1009883a 	mov	r4,r2
10010410:	01400304 	movi	r5,12
10010414:	00024fc0 	call	100024fc <__mulsi3>
10010418:	8085883a 	add	r2,r16,r2
1001041c:	10800017 	ldw	r2,0(r2)
10010420:	1000151e 	bne	r2,zero,10010478 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10010424:	04040074 	movhi	r16,4097
10010428:	84053304 	addi	r16,r16,5324
1001042c:	e0bffc17 	ldw	r2,-16(fp)
10010430:	1009883a 	mov	r4,r2
10010434:	01400304 	movi	r5,12
10010438:	00024fc0 	call	100024fc <__mulsi3>
1001043c:	8085883a 	add	r2,r16,r2
10010440:	e0fffe17 	ldw	r3,-8(fp)
10010444:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10010448:	00840074 	movhi	r2,4097
1001044c:	1089b504 	addi	r2,r2,9940
10010450:	10c00017 	ldw	r3,0(r2)
10010454:	e0bffc17 	ldw	r2,-16(fp)
10010458:	1880040e 	bge	r3,r2,1001046c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
1001045c:	00840074 	movhi	r2,4097
10010460:	1089b504 	addi	r2,r2,9940
10010464:	e0fffc17 	ldw	r3,-16(fp)
10010468:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
1001046c:	e0bffc17 	ldw	r2,-16(fp)
10010470:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10010474:	00000606 	br	10010490 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10010478:	e0bffc17 	ldw	r2,-16(fp)
1001047c:	10800044 	addi	r2,r2,1
10010480:	e0bffc15 	stw	r2,-16(fp)
10010484:	e0bffc17 	ldw	r2,-16(fp)
10010488:	10800810 	cmplti	r2,r2,32
1001048c:	103fdc1e 	bne	r2,zero,10010400 <__alt_data_end+0xf8010400>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10010490:	e0bffd17 	ldw	r2,-12(fp)
}
10010494:	e6ffff04 	addi	sp,fp,-4
10010498:	dfc00217 	ldw	ra,8(sp)
1001049c:	df000117 	ldw	fp,4(sp)
100104a0:	dc000017 	ldw	r16,0(sp)
100104a4:	dec00304 	addi	sp,sp,12
100104a8:	f800283a 	ret

100104ac <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
100104ac:	defffe04 	addi	sp,sp,-8
100104b0:	df000115 	stw	fp,4(sp)
100104b4:	df000104 	addi	fp,sp,4
100104b8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
100104bc:	e0bfff17 	ldw	r2,-4(fp)
100104c0:	10bffe84 	addi	r2,r2,-6
100104c4:	10c00428 	cmpgeui	r3,r2,16
100104c8:	18001a1e 	bne	r3,zero,10010534 <alt_exception_cause_generated_bad_addr+0x88>
100104cc:	100690ba 	slli	r3,r2,2
100104d0:	00840074 	movhi	r2,4097
100104d4:	10813904 	addi	r2,r2,1252
100104d8:	1885883a 	add	r2,r3,r2
100104dc:	10800017 	ldw	r2,0(r2)
100104e0:	1000683a 	jmp	r2
100104e4:	10010524 	muli	zero,r2,1044
100104e8:	10010524 	muli	zero,r2,1044
100104ec:	10010534 	orhi	zero,r2,1044
100104f0:	10010534 	orhi	zero,r2,1044
100104f4:	10010534 	orhi	zero,r2,1044
100104f8:	10010524 	muli	zero,r2,1044
100104fc:	1001052c 	andhi	zero,r2,1044
10010500:	10010534 	orhi	zero,r2,1044
10010504:	10010524 	muli	zero,r2,1044
10010508:	10010524 	muli	zero,r2,1044
1001050c:	10010534 	orhi	zero,r2,1044
10010510:	10010524 	muli	zero,r2,1044
10010514:	1001052c 	andhi	zero,r2,1044
10010518:	10010534 	orhi	zero,r2,1044
1001051c:	10010534 	orhi	zero,r2,1044
10010520:	10010524 	muli	zero,r2,1044
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10010524:	00800044 	movi	r2,1
10010528:	00000306 	br	10010538 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
1001052c:	0005883a 	mov	r2,zero
10010530:	00000106 	br	10010538 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10010534:	0005883a 	mov	r2,zero
  }
}
10010538:	e037883a 	mov	sp,fp
1001053c:	df000017 	ldw	fp,0(sp)
10010540:	dec00104 	addi	sp,sp,4
10010544:	f800283a 	ret

10010548 <atexit>:
10010548:	200b883a 	mov	r5,r4
1001054c:	000d883a 	mov	r6,zero
10010550:	0009883a 	mov	r4,zero
10010554:	000f883a 	mov	r7,zero
10010558:	00106101 	jmpi	10010610 <__register_exitproc>

1001055c <exit>:
1001055c:	defffe04 	addi	sp,sp,-8
10010560:	000b883a 	mov	r5,zero
10010564:	dc000015 	stw	r16,0(sp)
10010568:	dfc00115 	stw	ra,4(sp)
1001056c:	2021883a 	mov	r16,r4
10010570:	00107240 	call	10010724 <__call_exitprocs>
10010574:	00840074 	movhi	r2,4097
10010578:	1089ab04 	addi	r2,r2,9900
1001057c:	11000017 	ldw	r4,0(r2)
10010580:	20800f17 	ldw	r2,60(r4)
10010584:	10000126 	beq	r2,zero,1001058c <exit+0x30>
10010588:	103ee83a 	callr	r2
1001058c:	8009883a 	mov	r4,r16
10010590:	00108b80 	call	100108b8 <_exit>

10010594 <memcmp>:
10010594:	01c000c4 	movi	r7,3
10010598:	3980192e 	bgeu	r7,r6,10010600 <memcmp+0x6c>
1001059c:	2144b03a 	or	r2,r4,r5
100105a0:	11c4703a 	and	r2,r2,r7
100105a4:	10000f26 	beq	r2,zero,100105e4 <memcmp+0x50>
100105a8:	20800003 	ldbu	r2,0(r4)
100105ac:	28c00003 	ldbu	r3,0(r5)
100105b0:	10c0151e 	bne	r2,r3,10010608 <memcmp+0x74>
100105b4:	31bfff84 	addi	r6,r6,-2
100105b8:	01ffffc4 	movi	r7,-1
100105bc:	00000406 	br	100105d0 <memcmp+0x3c>
100105c0:	20800003 	ldbu	r2,0(r4)
100105c4:	28c00003 	ldbu	r3,0(r5)
100105c8:	31bfffc4 	addi	r6,r6,-1
100105cc:	10c00e1e 	bne	r2,r3,10010608 <memcmp+0x74>
100105d0:	21000044 	addi	r4,r4,1
100105d4:	29400044 	addi	r5,r5,1
100105d8:	31fff91e 	bne	r6,r7,100105c0 <__alt_data_end+0xf80105c0>
100105dc:	0005883a 	mov	r2,zero
100105e0:	f800283a 	ret
100105e4:	20c00017 	ldw	r3,0(r4)
100105e8:	28800017 	ldw	r2,0(r5)
100105ec:	1880041e 	bne	r3,r2,10010600 <memcmp+0x6c>
100105f0:	31bfff04 	addi	r6,r6,-4
100105f4:	21000104 	addi	r4,r4,4
100105f8:	29400104 	addi	r5,r5,4
100105fc:	39bff936 	bltu	r7,r6,100105e4 <__alt_data_end+0xf80105e4>
10010600:	303fe91e 	bne	r6,zero,100105a8 <__alt_data_end+0xf80105a8>
10010604:	003ff506 	br	100105dc <__alt_data_end+0xf80105dc>
10010608:	10c5c83a 	sub	r2,r2,r3
1001060c:	f800283a 	ret

10010610 <__register_exitproc>:
10010610:	00840074 	movhi	r2,4097
10010614:	defffa04 	addi	sp,sp,-24
10010618:	1089ab04 	addi	r2,r2,9900
1001061c:	dc000315 	stw	r16,12(sp)
10010620:	14000017 	ldw	r16,0(r2)
10010624:	dc400415 	stw	r17,16(sp)
10010628:	dfc00515 	stw	ra,20(sp)
1001062c:	80805217 	ldw	r2,328(r16)
10010630:	2023883a 	mov	r17,r4
10010634:	10003626 	beq	r2,zero,10010710 <__register_exitproc+0x100>
10010638:	10c00117 	ldw	r3,4(r2)
1001063c:	010007c4 	movi	r4,31
10010640:	20c00e16 	blt	r4,r3,1001067c <__register_exitproc+0x6c>
10010644:	1a400044 	addi	r9,r3,1
10010648:	8800211e 	bne	r17,zero,100106d0 <__register_exitproc+0xc0>
1001064c:	18c00084 	addi	r3,r3,2
10010650:	18c7883a 	add	r3,r3,r3
10010654:	18c7883a 	add	r3,r3,r3
10010658:	12400115 	stw	r9,4(r2)
1001065c:	10c7883a 	add	r3,r2,r3
10010660:	19400015 	stw	r5,0(r3)
10010664:	0005883a 	mov	r2,zero
10010668:	dfc00517 	ldw	ra,20(sp)
1001066c:	dc400417 	ldw	r17,16(sp)
10010670:	dc000317 	ldw	r16,12(sp)
10010674:	dec00604 	addi	sp,sp,24
10010678:	f800283a 	ret
1001067c:	00800034 	movhi	r2,0
10010680:	10800004 	addi	r2,r2,0
10010684:	10002526 	beq	r2,zero,1001071c <__register_exitproc+0x10c>
10010688:	01006404 	movi	r4,400
1001068c:	d9400015 	stw	r5,0(sp)
10010690:	d9800115 	stw	r6,4(sp)
10010694:	d9c00215 	stw	r7,8(sp)
10010698:	00000000 	call	10000000 <__alt_mem_sdram>
1001069c:	d9400017 	ldw	r5,0(sp)
100106a0:	d9800117 	ldw	r6,4(sp)
100106a4:	d9c00217 	ldw	r7,8(sp)
100106a8:	10001c26 	beq	r2,zero,1001071c <__register_exitproc+0x10c>
100106ac:	80c05217 	ldw	r3,328(r16)
100106b0:	10000115 	stw	zero,4(r2)
100106b4:	02400044 	movi	r9,1
100106b8:	10c00015 	stw	r3,0(r2)
100106bc:	80805215 	stw	r2,328(r16)
100106c0:	10006215 	stw	zero,392(r2)
100106c4:	10006315 	stw	zero,396(r2)
100106c8:	0007883a 	mov	r3,zero
100106cc:	883fdf26 	beq	r17,zero,1001064c <__alt_data_end+0xf801064c>
100106d0:	18d1883a 	add	r8,r3,r3
100106d4:	4211883a 	add	r8,r8,r8
100106d8:	1211883a 	add	r8,r2,r8
100106dc:	41802215 	stw	r6,136(r8)
100106e0:	01000044 	movi	r4,1
100106e4:	11806217 	ldw	r6,392(r2)
100106e8:	20c8983a 	sll	r4,r4,r3
100106ec:	310cb03a 	or	r6,r6,r4
100106f0:	11806215 	stw	r6,392(r2)
100106f4:	41c04215 	stw	r7,264(r8)
100106f8:	01800084 	movi	r6,2
100106fc:	89bfd31e 	bne	r17,r6,1001064c <__alt_data_end+0xf801064c>
10010700:	11806317 	ldw	r6,396(r2)
10010704:	3108b03a 	or	r4,r6,r4
10010708:	11006315 	stw	r4,396(r2)
1001070c:	003fcf06 	br	1001064c <__alt_data_end+0xf801064c>
10010710:	80805304 	addi	r2,r16,332
10010714:	80805215 	stw	r2,328(r16)
10010718:	003fc706 	br	10010638 <__alt_data_end+0xf8010638>
1001071c:	00bfffc4 	movi	r2,-1
10010720:	003fd106 	br	10010668 <__alt_data_end+0xf8010668>

10010724 <__call_exitprocs>:
10010724:	00840074 	movhi	r2,4097
10010728:	1089ab04 	addi	r2,r2,9900
1001072c:	10800017 	ldw	r2,0(r2)
10010730:	defff404 	addi	sp,sp,-48
10010734:	dd800815 	stw	r22,32(sp)
10010738:	d8800015 	stw	r2,0(sp)
1001073c:	10805204 	addi	r2,r2,328
10010740:	dd000615 	stw	r20,24(sp)
10010744:	dc800415 	stw	r18,16(sp)
10010748:	dfc00b15 	stw	ra,44(sp)
1001074c:	df000a15 	stw	fp,40(sp)
10010750:	ddc00915 	stw	r23,36(sp)
10010754:	dd400715 	stw	r21,28(sp)
10010758:	dcc00515 	stw	r19,20(sp)
1001075c:	dc400315 	stw	r17,12(sp)
10010760:	dc000215 	stw	r16,8(sp)
10010764:	2025883a 	mov	r18,r4
10010768:	2829883a 	mov	r20,r5
1001076c:	d8800115 	stw	r2,4(sp)
10010770:	05bfffc4 	movi	r22,-1
10010774:	d8800017 	ldw	r2,0(sp)
10010778:	14c05217 	ldw	r19,328(r2)
1001077c:	98001d26 	beq	r19,zero,100107f4 <__call_exitprocs+0xd0>
10010780:	dd400117 	ldw	r21,4(sp)
10010784:	98800117 	ldw	r2,4(r19)
10010788:	173fffc4 	addi	fp,r2,-1
1001078c:	e0000d16 	blt	fp,zero,100107c4 <__call_exitprocs+0xa0>
10010790:	14000044 	addi	r16,r2,1
10010794:	8421883a 	add	r16,r16,r16
10010798:	8421883a 	add	r16,r16,r16
1001079c:	84402004 	addi	r17,r16,128
100107a0:	9c63883a 	add	r17,r19,r17
100107a4:	9c21883a 	add	r16,r19,r16
100107a8:	a0001e26 	beq	r20,zero,10010824 <__call_exitprocs+0x100>
100107ac:	80804017 	ldw	r2,256(r16)
100107b0:	15001c26 	beq	r2,r20,10010824 <__call_exitprocs+0x100>
100107b4:	e73fffc4 	addi	fp,fp,-1
100107b8:	843fff04 	addi	r16,r16,-4
100107bc:	8c7fff04 	addi	r17,r17,-4
100107c0:	e5bff91e 	bne	fp,r22,100107a8 <__alt_data_end+0xf80107a8>
100107c4:	00800034 	movhi	r2,0
100107c8:	10800004 	addi	r2,r2,0
100107cc:	10000926 	beq	r2,zero,100107f4 <__call_exitprocs+0xd0>
100107d0:	98800117 	ldw	r2,4(r19)
100107d4:	1000311e 	bne	r2,zero,1001089c <__call_exitprocs+0x178>
100107d8:	98800017 	ldw	r2,0(r19)
100107dc:	10003426 	beq	r2,zero,100108b0 <__call_exitprocs+0x18c>
100107e0:	9809883a 	mov	r4,r19
100107e4:	a8800015 	stw	r2,0(r21)
100107e8:	00000000 	call	10000000 <__alt_mem_sdram>
100107ec:	acc00017 	ldw	r19,0(r21)
100107f0:	983fe41e 	bne	r19,zero,10010784 <__alt_data_end+0xf8010784>
100107f4:	dfc00b17 	ldw	ra,44(sp)
100107f8:	df000a17 	ldw	fp,40(sp)
100107fc:	ddc00917 	ldw	r23,36(sp)
10010800:	dd800817 	ldw	r22,32(sp)
10010804:	dd400717 	ldw	r21,28(sp)
10010808:	dd000617 	ldw	r20,24(sp)
1001080c:	dcc00517 	ldw	r19,20(sp)
10010810:	dc800417 	ldw	r18,16(sp)
10010814:	dc400317 	ldw	r17,12(sp)
10010818:	dc000217 	ldw	r16,8(sp)
1001081c:	dec00c04 	addi	sp,sp,48
10010820:	f800283a 	ret
10010824:	98800117 	ldw	r2,4(r19)
10010828:	80c00017 	ldw	r3,0(r16)
1001082c:	10bfffc4 	addi	r2,r2,-1
10010830:	17001526 	beq	r2,fp,10010888 <__call_exitprocs+0x164>
10010834:	80000015 	stw	zero,0(r16)
10010838:	183fde26 	beq	r3,zero,100107b4 <__alt_data_end+0xf80107b4>
1001083c:	00800044 	movi	r2,1
10010840:	1708983a 	sll	r4,r2,fp
10010844:	98806217 	ldw	r2,392(r19)
10010848:	9dc00117 	ldw	r23,4(r19)
1001084c:	2084703a 	and	r2,r4,r2
10010850:	1000061e 	bne	r2,zero,1001086c <__call_exitprocs+0x148>
10010854:	183ee83a 	callr	r3
10010858:	98800117 	ldw	r2,4(r19)
1001085c:	15ffc51e 	bne	r2,r23,10010774 <__alt_data_end+0xf8010774>
10010860:	a8800017 	ldw	r2,0(r21)
10010864:	14ffd326 	beq	r2,r19,100107b4 <__alt_data_end+0xf80107b4>
10010868:	003fc206 	br	10010774 <__alt_data_end+0xf8010774>
1001086c:	98806317 	ldw	r2,396(r19)
10010870:	2084703a 	and	r2,r4,r2
10010874:	1000061e 	bne	r2,zero,10010890 <__call_exitprocs+0x16c>
10010878:	89400017 	ldw	r5,0(r17)
1001087c:	9009883a 	mov	r4,r18
10010880:	183ee83a 	callr	r3
10010884:	003ff406 	br	10010858 <__alt_data_end+0xf8010858>
10010888:	9f000115 	stw	fp,4(r19)
1001088c:	003fea06 	br	10010838 <__alt_data_end+0xf8010838>
10010890:	89000017 	ldw	r4,0(r17)
10010894:	183ee83a 	callr	r3
10010898:	003fef06 	br	10010858 <__alt_data_end+0xf8010858>
1001089c:	98800017 	ldw	r2,0(r19)
100108a0:	982b883a 	mov	r21,r19
100108a4:	1027883a 	mov	r19,r2
100108a8:	983fb61e 	bne	r19,zero,10010784 <__alt_data_end+0xf8010784>
100108ac:	003fd106 	br	100107f4 <__alt_data_end+0xf80107f4>
100108b0:	0005883a 	mov	r2,zero
100108b4:	003ffa06 	br	100108a0 <__alt_data_end+0xf80108a0>

100108b8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100108b8:	defffd04 	addi	sp,sp,-12
100108bc:	df000215 	stw	fp,8(sp)
100108c0:	df000204 	addi	fp,sp,8
100108c4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100108c8:	0001883a 	nop
100108cc:	e0bfff17 	ldw	r2,-4(fp)
100108d0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
100108d4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
100108d8:	10000226 	beq	r2,zero,100108e4 <_exit+0x2c>
    ALT_SIM_FAIL();
100108dc:	002af070 	cmpltui	zero,zero,43969
100108e0:	00000106 	br	100108e8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
100108e4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
100108e8:	003fff06 	br	100108e8 <__alt_data_end+0xf80108e8>
